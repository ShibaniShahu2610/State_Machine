
FreeRTOS_BinSem_vs_Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007864  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08007a14  08007a14  00017a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c64  08007c64  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007c64  08007c64  00017c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c6c  08007c6c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c6c  08007c6c  00017c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c70  08007c70  00017c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf8  2000006c  08007ce0  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c64  08007ce0  00021c64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bd7a  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038cb  00000000  00000000  0003be59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001758  00000000  00000000  0003f728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000121d  00000000  00000000  00040e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004995  00000000  00000000  0004209d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001935d  00000000  00000000  00046a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f273  00000000  00000000  0005fd8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000068a4  00000000  00000000  0016f004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001758a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080079fc 	.word	0x080079fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	080079fc 	.word	0x080079fc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000214:	f000 b970 	b.w	80004f8 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	460f      	mov	r7, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4694      	mov	ip, r2
 8000244:	d965      	bls.n	8000312 <__udivmoddi4+0xe2>
 8000246:	fab2 f382 	clz	r3, r2
 800024a:	b143      	cbz	r3, 800025e <__udivmoddi4+0x2e>
 800024c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000250:	f1c3 0220 	rsb	r2, r3, #32
 8000254:	409f      	lsls	r7, r3
 8000256:	fa20 f202 	lsr.w	r2, r0, r2
 800025a:	4317      	orrs	r7, r2
 800025c:	409c      	lsls	r4, r3
 800025e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000262:	fa1f f58c 	uxth.w	r5, ip
 8000266:	fbb7 f1fe 	udiv	r1, r7, lr
 800026a:	0c22      	lsrs	r2, r4, #16
 800026c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000270:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000274:	fb01 f005 	mul.w	r0, r1, r5
 8000278:	4290      	cmp	r0, r2
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x62>
 800027c:	eb1c 0202 	adds.w	r2, ip, r2
 8000280:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000284:	f080 811c 	bcs.w	80004c0 <__udivmoddi4+0x290>
 8000288:	4290      	cmp	r0, r2
 800028a:	f240 8119 	bls.w	80004c0 <__udivmoddi4+0x290>
 800028e:	3902      	subs	r1, #2
 8000290:	4462      	add	r2, ip
 8000292:	1a12      	subs	r2, r2, r0
 8000294:	b2a4      	uxth	r4, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a2:	fb00 f505 	mul.w	r5, r0, r5
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x90>
 80002aa:	eb1c 0404 	adds.w	r4, ip, r4
 80002ae:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x294>
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x294>
 80002bc:	4464      	add	r4, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c4:	1b64      	subs	r4, r4, r5
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11e      	cbz	r6, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40dc      	lsrs	r4, r3
 80002cc:	2300      	movs	r3, #0
 80002ce:	e9c6 4300 	strd	r4, r3, [r6]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0xbc>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80ed 	beq.w	80004ba <__udivmoddi4+0x28a>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e9c6 0500 	strd	r0, r5, [r6]
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d149      	bne.n	8000388 <__udivmoddi4+0x158>
 80002f4:	42ab      	cmp	r3, r5
 80002f6:	d302      	bcc.n	80002fe <__udivmoddi4+0xce>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	f200 80f8 	bhi.w	80004ee <__udivmoddi4+0x2be>
 80002fe:	1a84      	subs	r4, r0, r2
 8000300:	eb65 0203 	sbc.w	r2, r5, r3
 8000304:	2001      	movs	r0, #1
 8000306:	4617      	mov	r7, r2
 8000308:	2e00      	cmp	r6, #0
 800030a:	d0e2      	beq.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	e9c6 4700 	strd	r4, r7, [r6]
 8000310:	e7df      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000312:	b902      	cbnz	r2, 8000316 <__udivmoddi4+0xe6>
 8000314:	deff      	udf	#255	; 0xff
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8090 	bne.w	8000440 <__udivmoddi4+0x210>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	2101      	movs	r1, #1
 800032c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000330:	fb07 2015 	mls	r0, r7, r5, r2
 8000334:	0c22      	lsrs	r2, r4, #16
 8000336:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033a:	fb0e f005 	mul.w	r0, lr, r5
 800033e:	4290      	cmp	r0, r2
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x124>
 8000342:	eb1c 0202 	adds.w	r2, ip, r2
 8000346:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4290      	cmp	r0, r2
 800034e:	f200 80cb 	bhi.w	80004e8 <__udivmoddi4+0x2b8>
 8000352:	4645      	mov	r5, r8
 8000354:	1a12      	subs	r2, r2, r0
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb2 f0f7 	udiv	r0, r2, r7
 800035c:	fb07 2210 	mls	r2, r7, r0, r2
 8000360:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000364:	fb0e fe00 	mul.w	lr, lr, r0
 8000368:	45a6      	cmp	lr, r4
 800036a:	d908      	bls.n	800037e <__udivmoddi4+0x14e>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x14c>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f200 80bb 	bhi.w	80004f2 <__udivmoddi4+0x2c2>
 800037c:	4610      	mov	r0, r2
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000386:	e79f      	b.n	80002c8 <__udivmoddi4+0x98>
 8000388:	f1c1 0720 	rsb	r7, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000392:	ea4c 0c03 	orr.w	ip, ip, r3
 8000396:	fa05 f401 	lsl.w	r4, r5, r1
 800039a:	fa20 f307 	lsr.w	r3, r0, r7
 800039e:	40fd      	lsrs	r5, r7
 80003a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a4:	4323      	orrs	r3, r4
 80003a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	fb09 5518 	mls	r5, r9, r8, r5
 80003b2:	0c1c      	lsrs	r4, r3, #16
 80003b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b8:	fb08 f50e 	mul.w	r5, r8, lr
 80003bc:	42a5      	cmp	r5, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	fa00 f001 	lsl.w	r0, r0, r1
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d0:	f080 8088 	bcs.w	80004e4 <__udivmoddi4+0x2b4>
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	f240 8085 	bls.w	80004e4 <__udivmoddi4+0x2b4>
 80003da:	f1a8 0802 	sub.w	r8, r8, #2
 80003de:	4464      	add	r4, ip
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	b29d      	uxth	r5, r3
 80003e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000400:	d26c      	bcs.n	80004dc <__udivmoddi4+0x2ac>
 8000402:	45a6      	cmp	lr, r4
 8000404:	d96a      	bls.n	80004dc <__udivmoddi4+0x2ac>
 8000406:	3b02      	subs	r3, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040e:	fba3 9502 	umull	r9, r5, r3, r2
 8000412:	eba4 040e 	sub.w	r4, r4, lr
 8000416:	42ac      	cmp	r4, r5
 8000418:	46c8      	mov	r8, r9
 800041a:	46ae      	mov	lr, r5
 800041c:	d356      	bcc.n	80004cc <__udivmoddi4+0x29c>
 800041e:	d053      	beq.n	80004c8 <__udivmoddi4+0x298>
 8000420:	b156      	cbz	r6, 8000438 <__udivmoddi4+0x208>
 8000422:	ebb0 0208 	subs.w	r2, r0, r8
 8000426:	eb64 040e 	sbc.w	r4, r4, lr
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	40ca      	lsrs	r2, r1
 8000430:	40cc      	lsrs	r4, r1
 8000432:	4317      	orrs	r7, r2
 8000434:	e9c6 7400 	strd	r7, r4, [r6]
 8000438:	4618      	mov	r0, r3
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	f1c3 0120 	rsb	r1, r3, #32
 8000444:	fa02 fc03 	lsl.w	ip, r2, r3
 8000448:	fa20 f201 	lsr.w	r2, r0, r1
 800044c:	fa25 f101 	lsr.w	r1, r5, r1
 8000450:	409d      	lsls	r5, r3
 8000452:	432a      	orrs	r2, r5
 8000454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000460:	fb07 1510 	mls	r5, r7, r0, r1
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046a:	fb00 f50e 	mul.w	r5, r0, lr
 800046e:	428d      	cmp	r5, r1
 8000470:	fa04 f403 	lsl.w	r4, r4, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x258>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047e:	d22f      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 8000480:	428d      	cmp	r5, r1
 8000482:	d92d      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 8000484:	3802      	subs	r0, #2
 8000486:	4461      	add	r1, ip
 8000488:	1b49      	subs	r1, r1, r5
 800048a:	b292      	uxth	r2, r2
 800048c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000490:	fb07 1115 	mls	r1, r7, r5, r1
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	fb05 f10e 	mul.w	r1, r5, lr
 800049c:	4291      	cmp	r1, r2
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x282>
 80004a0:	eb1c 0202 	adds.w	r2, ip, r2
 80004a4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004a8:	d216      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 80004aa:	4291      	cmp	r1, r2
 80004ac:	d914      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 80004ae:	3d02      	subs	r5, #2
 80004b0:	4462      	add	r2, ip
 80004b2:	1a52      	subs	r2, r2, r1
 80004b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b8:	e738      	b.n	800032c <__udivmoddi4+0xfc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xa2>
 80004c0:	4639      	mov	r1, r7
 80004c2:	e6e6      	b.n	8000292 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x90>
 80004c8:	4548      	cmp	r0, r9
 80004ca:	d2a9      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004cc:	ebb9 0802 	subs.w	r8, r9, r2
 80004d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d4:	3b01      	subs	r3, #1
 80004d6:	e7a3      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d8:	4645      	mov	r5, r8
 80004da:	e7ea      	b.n	80004b2 <__udivmoddi4+0x282>
 80004dc:	462b      	mov	r3, r5
 80004de:	e794      	b.n	800040a <__udivmoddi4+0x1da>
 80004e0:	4640      	mov	r0, r8
 80004e2:	e7d1      	b.n	8000488 <__udivmoddi4+0x258>
 80004e4:	46d0      	mov	r8, sl
 80004e6:	e77b      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e8:	3d02      	subs	r5, #2
 80004ea:	4462      	add	r2, ip
 80004ec:	e732      	b.n	8000354 <__udivmoddi4+0x124>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e70a      	b.n	8000308 <__udivmoddi4+0xd8>
 80004f2:	4464      	add	r4, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e742      	b.n	800037e <__udivmoddi4+0x14e>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fb89 	bl	8000c16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f868 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f8e4 	bl	80006d4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800050c:	f000 f8b6 	bl	800067c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000510:	f003 fa7a 	bl	8003a08 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex_1 */
  Mutex_1Handle = osMutexNew(&Mutex_1_attributes);
 8000514:	481f      	ldr	r0, [pc, #124]	; (8000594 <main+0x98>)
 8000516:	f003 fb6e 	bl	8003bf6 <osMutexNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a1e      	ldr	r2, [pc, #120]	; (8000598 <main+0x9c>)
 800051e:	6013      	str	r3, [r2, #0]
  if(Mutex_1Handle != NULL)
 8000520:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <main+0x9c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d003      	beq.n	8000530 <main+0x34>
	  printf("Mutex Created\r\n");
 8000528:	481c      	ldr	r0, [pc, #112]	; (800059c <main+0xa0>)
 800052a:	f006 fe6d 	bl	8007208 <puts>
 800052e:	e002      	b.n	8000536 <main+0x3a>
  else
	  printf("Failed to create Mutex\r\n");
 8000530:	481b      	ldr	r0, [pc, #108]	; (80005a0 <main+0xa4>)
 8000532:	f006 fe69 	bl	8007208 <puts>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySem_1 */
  BinarySem_1Handle = osSemaphoreNew(1, 1, &BinarySem_1_attributes);
 8000536:	4a1b      	ldr	r2, [pc, #108]	; (80005a4 <main+0xa8>)
 8000538:	2101      	movs	r1, #1
 800053a:	2001      	movs	r0, #1
 800053c:	f003 fc69 	bl	8003e12 <osSemaphoreNew>
 8000540:	4603      	mov	r3, r0
 8000542:	4a19      	ldr	r2, [pc, #100]	; (80005a8 <main+0xac>)
 8000544:	6013      	str	r3, [r2, #0]
  if(BinarySem_1Handle != NULL)
 8000546:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <main+0xac>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d003      	beq.n	8000556 <main+0x5a>
	  printf("Semaphore Created\r\n");
 800054e:	4817      	ldr	r0, [pc, #92]	; (80005ac <main+0xb0>)
 8000550:	f006 fe5a 	bl	8007208 <puts>
 8000554:	e002      	b.n	800055c <main+0x60>
  else
	  printf("Failed to create Semaphore\r\n");
 8000556:	4816      	ldr	r0, [pc, #88]	; (80005b0 <main+0xb4>)
 8000558:	f006 fe56 	bl	8007208 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of High_Task */
  High_TaskHandle = osThreadNew(Start_High_Task, NULL, &High_Task_attributes);
 800055c:	4a15      	ldr	r2, [pc, #84]	; (80005b4 <main+0xb8>)
 800055e:	2100      	movs	r1, #0
 8000560:	4815      	ldr	r0, [pc, #84]	; (80005b8 <main+0xbc>)
 8000562:	f003 fa9b 	bl	8003a9c <osThreadNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a14      	ldr	r2, [pc, #80]	; (80005bc <main+0xc0>)
 800056a:	6013      	str	r3, [r2, #0]

  /* creation of Normal_Task */
  Normal_TaskHandle = osThreadNew(Start_Normal_Task, NULL, &Normal_Task_attributes);
 800056c:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <main+0xc4>)
 800056e:	2100      	movs	r1, #0
 8000570:	4814      	ldr	r0, [pc, #80]	; (80005c4 <main+0xc8>)
 8000572:	f003 fa93 	bl	8003a9c <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a13      	ldr	r2, [pc, #76]	; (80005c8 <main+0xcc>)
 800057a:	6013      	str	r3, [r2, #0]

  /* creation of Low_Task */
  Low_TaskHandle = osThreadNew(Start_Low_Task, NULL, &Low_Task_attributes);
 800057c:	4a13      	ldr	r2, [pc, #76]	; (80005cc <main+0xd0>)
 800057e:	2100      	movs	r1, #0
 8000580:	4813      	ldr	r0, [pc, #76]	; (80005d0 <main+0xd4>)
 8000582:	f003 fa8b 	bl	8003a9c <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a12      	ldr	r2, [pc, #72]	; (80005d4 <main+0xd8>)
 800058a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800058c:	f003 fa60 	bl	8003a50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000590:	e7fe      	b.n	8000590 <main+0x94>
 8000592:	bf00      	nop
 8000594:	08007bfc 	.word	0x08007bfc
 8000598:	2000011c 	.word	0x2000011c
 800059c:	08007a4c 	.word	0x08007a4c
 80005a0:	08007a5c 	.word	0x08007a5c
 80005a4:	08007c0c 	.word	0x08007c0c
 80005a8:	20000120 	.word	0x20000120
 80005ac:	08007a74 	.word	0x08007a74
 80005b0:	08007a88 	.word	0x08007a88
 80005b4:	08007b90 	.word	0x08007b90
 80005b8:	0800076d 	.word	0x0800076d
 80005bc:	20000110 	.word	0x20000110
 80005c0:	08007bb4 	.word	0x08007bb4
 80005c4:	080007a1 	.word	0x080007a1
 80005c8:	20000114 	.word	0x20000114
 80005cc:	08007bd8 	.word	0x08007bd8
 80005d0:	080007bd 	.word	0x080007bd
 80005d4:	20000118 	.word	0x20000118

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b096      	sub	sp, #88	; 0x58
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	2244      	movs	r2, #68	; 0x44
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f006 feee 	bl	80073c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	463b      	mov	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005fe:	f000 fdc5 	bl	800118c <HAL_PWREx_ControlVoltageScaling>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000608:	f000 f904 	bl	8000814 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060c:	2302      	movs	r3, #2
 800060e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000614:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000616:	2340      	movs	r3, #64	; 0x40
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061e:	2302      	movs	r3, #2
 8000620:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000622:	2301      	movs	r3, #1
 8000624:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000626:	230a      	movs	r3, #10
 8000628:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4618      	mov	r0, r3
 800063c:	f000 fe0c 	bl	8001258 <HAL_RCC_OscConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000646:	f000 f8e5 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	230f      	movs	r3, #15
 800064c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2303      	movs	r3, #3
 8000650:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800065a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000660:	463b      	mov	r3, r7
 8000662:	2104      	movs	r1, #4
 8000664:	4618      	mov	r0, r3
 8000666:	f001 fa11 	bl	8001a8c <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000670:	f000 f8d0 	bl	8000814 <Error_Handler>
  }
}
 8000674:	bf00      	nop
 8000676:	3758      	adds	r7, #88	; 0x58
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_LPUART1_UART_Init+0x50>)
 8000682:	4a13      	ldr	r2, [pc, #76]	; (80006d0 <MX_LPUART1_UART_Init+0x54>)
 8000684:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_LPUART1_UART_Init+0x50>)
 8000688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800068c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_LPUART1_UART_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <MX_LPUART1_UART_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_LPUART1_UART_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <MX_LPUART1_UART_Init+0x50>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_LPUART1_UART_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <MX_LPUART1_UART_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_LPUART1_UART_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <MX_LPUART1_UART_Init+0x50>)
 80006ba:	f002 fbbb 	bl	8002e34 <HAL_UART_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006c4:	f000 f8a6 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000088 	.word	0x20000088
 80006d0:	40008000 	.word	0x40008000

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_GPIO_Init+0x44>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <MX_GPIO_Init+0x44>)
 80006e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_GPIO_Init+0x44>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80006f2:	f000 fda1 	bl	8001238 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_GPIO_Init+0x44>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a07      	ldr	r2, [pc, #28]	; (8000718 <MX_GPIO_Init+0x44>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <MX_GPIO_Init+0x44>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000

0800071c <Send_Uart>:
//	osSemaphoreRelease(BinarySem_1Handle);
//}

/*** it is for mutex **/
void Send_Uart (uint8_t *str)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	osMutexAcquire(Mutex_1Handle, osWaitForever);
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <Send_Uart+0x48>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800072c:	4618      	mov	r0, r3
 800072e:	f003 fae8 	bl	8003d02 <osMutexAcquire>
	osDelay(2000);
 8000732:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000736:	f003 fa43 	bl	8003bc0 <osDelay>
	HAL_UART_Transmit(&hlpuart1, str, strlen (str), HAL_MAX_DELAY);
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f7ff fd58 	bl	80001f0 <strlen>
 8000740:	4603      	mov	r3, r0
 8000742:	b29a      	uxth	r2, r3
 8000744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000748:	6879      	ldr	r1, [r7, #4]
 800074a:	4807      	ldr	r0, [pc, #28]	; (8000768 <Send_Uart+0x4c>)
 800074c:	f002 fbc0 	bl	8002ed0 <HAL_UART_Transmit>
	osMutexRelease(Mutex_1Handle);
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <Send_Uart+0x48>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4618      	mov	r0, r3
 8000756:	f003 fb1f 	bl	8003d98 <osMutexRelease>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	2000011c 	.word	0x2000011c
 8000768:	20000088 	.word	0x20000088

0800076c <Start_High_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_High_Task */
void Start_High_Task(void *argument)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t *strtosend = "IN HPT...........................\n";
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <Start_High_Task+0x28>)
 8000776:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	printf("Entered HPT and About to take MUTEX\n");
 8000778:	4807      	ldr	r0, [pc, #28]	; (8000798 <Start_High_Task+0x2c>)
 800077a:	f006 fd45 	bl	8007208 <puts>

	Send_Uart(strtosend);
 800077e:	68f8      	ldr	r0, [r7, #12]
 8000780:	f7ff ffcc 	bl	800071c <Send_Uart>

	printf("Leaving HPT\n\n");
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <Start_High_Task+0x30>)
 8000786:	f006 fd3f 	bl	8007208 <puts>

	osDelay(1000);
 800078a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800078e:	f003 fa17 	bl	8003bc0 <osDelay>
	printf("Entered HPT and About to take MUTEX\n");
 8000792:	e7f1      	b.n	8000778 <Start_High_Task+0xc>
 8000794:	08007aa4 	.word	0x08007aa4
 8000798:	08007ac8 	.word	0x08007ac8
 800079c:	08007aec 	.word	0x08007aec

080007a0 <Start_Normal_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Normal_Task */
void Start_Normal_Task(void *argument)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Normal_Task */

  /* Infinite loop */
  for(;;)
  {
	printf("IN NPT...........................\n");
 80007a8:	4803      	ldr	r0, [pc, #12]	; (80007b8 <Start_Normal_Task+0x18>)
 80007aa:	f006 fd2d 	bl	8007208 <puts>
//
//	Send_Uart(strtosend);
//
//	printf("Leaving NPT\n\n");

	osDelay(1000);
 80007ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b2:	f003 fa05 	bl	8003bc0 <osDelay>
	printf("IN NPT...........................\n");
 80007b6:	e7f7      	b.n	80007a8 <Start_Normal_Task+0x8>
 80007b8:	08007afc 	.word	0x08007afc

080007bc <Start_Low_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Low_Task */
void Start_Low_Task(void *argument)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Low_Task */
	uint8_t *strtosend = "IN LPT...........................\n";
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <Start_Low_Task+0x28>)
 80007c6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	printf("Entered LPT and About to take MUTEX\n");
 80007c8:	4807      	ldr	r0, [pc, #28]	; (80007e8 <Start_Low_Task+0x2c>)
 80007ca:	f006 fd1d 	bl	8007208 <puts>

	Send_Uart(strtosend);
 80007ce:	68f8      	ldr	r0, [r7, #12]
 80007d0:	f7ff ffa4 	bl	800071c <Send_Uart>

	printf("Leaving LPT\n\n");
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <Start_Low_Task+0x30>)
 80007d6:	f006 fd17 	bl	8007208 <puts>

	osDelay(1000);
 80007da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007de:	f003 f9ef 	bl	8003bc0 <osDelay>
	printf("Entered LPT and About to take MUTEX\n");
 80007e2:	e7f1      	b.n	80007c8 <Start_Low_Task+0xc>
 80007e4:	08007b20 	.word	0x08007b20
 80007e8:	08007b44 	.word	0x08007b44
 80007ec:	08007b68 	.word	0x08007b68

080007f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d101      	bne.n	8000806 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000802:	f000 fa21 	bl	8000c48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40001000 	.word	0x40001000

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>
	...

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <HAL_MspInit+0x4c>)
 8000828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082a:	4a10      	ldr	r2, [pc, #64]	; (800086c <HAL_MspInit+0x4c>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6613      	str	r3, [r2, #96]	; 0x60
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <HAL_MspInit+0x4c>)
 8000834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <HAL_MspInit+0x4c>)
 8000840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <HAL_MspInit+0x4c>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000848:	6593      	str	r3, [r2, #88]	; 0x58
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <HAL_MspInit+0x4c>)
 800084c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	210f      	movs	r1, #15
 800085a:	f06f 0001 	mvn.w	r0, #1
 800085e:	f000 facb 	bl	8000df8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000

08000870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b0ac      	sub	sp, #176	; 0xb0
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	228c      	movs	r2, #140	; 0x8c
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f006 fd99 	bl	80073c8 <memset>
  if(huart->Instance==LPUART1)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a22      	ldr	r2, [pc, #136]	; (8000924 <HAL_UART_MspInit+0xb4>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d13d      	bne.n	800091c <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80008a0:	2320      	movs	r3, #32
 80008a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 fb43 	bl	8001f38 <HAL_RCCEx_PeriphCLKConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008b8:	f7ff ffac 	bl	8000814 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <HAL_UART_MspInit+0xb8>)
 80008be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008c0:	4a19      	ldr	r2, [pc, #100]	; (8000928 <HAL_UART_MspInit+0xb8>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <HAL_UART_MspInit+0xb8>)
 80008ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <HAL_UART_MspInit+0xb8>)
 80008d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d8:	4a13      	ldr	r2, [pc, #76]	; (8000928 <HAL_UART_MspInit+0xb8>)
 80008da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <HAL_UART_MspInit+0xb8>)
 80008e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80008ec:	f000 fca4 	bl	8001238 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80008f0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80008f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800090a:	2308      	movs	r3, #8
 800090c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000910:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000914:	4619      	mov	r1, r3
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <HAL_UART_MspInit+0xbc>)
 8000918:	f000 fa98 	bl	8000e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800091c:	bf00      	nop
 800091e:	37b0      	adds	r7, #176	; 0xb0
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40008000 	.word	0x40008000
 8000928:	40021000 	.word	0x40021000
 800092c:	48001800 	.word	0x48001800

08000930 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08e      	sub	sp, #56	; 0x38
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000938:	2300      	movs	r3, #0
 800093a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800093e:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <HAL_InitTick+0xe0>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	4a33      	ldr	r2, [pc, #204]	; (8000a10 <HAL_InitTick+0xe0>)
 8000944:	f043 0310 	orr.w	r3, r3, #16
 8000948:	6593      	str	r3, [r2, #88]	; 0x58
 800094a:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <HAL_InitTick+0xe0>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094e:	f003 0310 	and.w	r3, r3, #16
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000956:	f107 0210 	add.w	r2, r7, #16
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4611      	mov	r1, r2
 8000960:	4618      	mov	r0, r3
 8000962:	f001 fa57 	bl	8001e14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000966:	6a3b      	ldr	r3, [r7, #32]
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800096a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800096c:	2b00      	cmp	r3, #0
 800096e:	d103      	bne.n	8000978 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000970:	f001 fa24 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 8000974:	6378      	str	r0, [r7, #52]	; 0x34
 8000976:	e004      	b.n	8000982 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000978:	f001 fa20 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 800097c:	4603      	mov	r3, r0
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000984:	4a23      	ldr	r2, [pc, #140]	; (8000a14 <HAL_InitTick+0xe4>)
 8000986:	fba2 2303 	umull	r2, r3, r2, r3
 800098a:	0c9b      	lsrs	r3, r3, #18
 800098c:	3b01      	subs	r3, #1
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000990:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <HAL_InitTick+0xe8>)
 8000992:	4a22      	ldr	r2, [pc, #136]	; (8000a1c <HAL_InitTick+0xec>)
 8000994:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000996:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <HAL_InitTick+0xe8>)
 8000998:	f240 32e7 	movw	r2, #999	; 0x3e7
 800099c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800099e:	4a1e      	ldr	r2, [pc, #120]	; (8000a18 <HAL_InitTick+0xe8>)
 80009a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009a4:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <HAL_InitTick+0xe8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009aa:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <HAL_InitTick+0xe8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b0:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <HAL_InitTick+0xe8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009b6:	4818      	ldr	r0, [pc, #96]	; (8000a18 <HAL_InitTick+0xe8>)
 80009b8:	f001 ff88 	bl	80028cc <HAL_TIM_Base_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d11b      	bne.n	8000a02 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009ca:	4813      	ldr	r0, [pc, #76]	; (8000a18 <HAL_InitTick+0xe8>)
 80009cc:	f001 ffe0 	bl	8002990 <HAL_TIM_Base_Start_IT>
 80009d0:	4603      	mov	r3, r0
 80009d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d111      	bne.n	8000a02 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009de:	2036      	movs	r0, #54	; 0x36
 80009e0:	f000 fa26 	bl	8000e30 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b0f      	cmp	r3, #15
 80009e8:	d808      	bhi.n	80009fc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009ea:	2200      	movs	r2, #0
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	2036      	movs	r0, #54	; 0x36
 80009f0:	f000 fa02 	bl	8000df8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f4:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <HAL_InitTick+0xf0>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6013      	str	r3, [r2, #0]
 80009fa:	e002      	b.n	8000a02 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80009fc:	2301      	movs	r3, #1
 80009fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3738      	adds	r7, #56	; 0x38
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000
 8000a14:	431bde83 	.word	0x431bde83
 8000a18:	20000124 	.word	0x20000124
 8000a1c:	40001000 	.word	0x40001000
 8000a20:	20000004 	.word	0x20000004

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <NMI_Handler+0x4>

08000a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <MemManage_Handler+0x4>

08000a36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <TIM6_DAC_IRQHandler+0x10>)
 8000a56:	f002 f80b 	bl	8002a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000124 	.word	0x20000124

08000a64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	e00a      	b.n	8000a8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a76:	f3af 8000 	nop.w
 8000a7a:	4601      	mov	r1, r0
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	1c5a      	adds	r2, r3, #1
 8000a80:	60ba      	str	r2, [r7, #8]
 8000a82:	b2ca      	uxtb	r2, r1
 8000a84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697a      	ldr	r2, [r7, #20]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	dbf0      	blt.n	8000a76 <_read+0x12>
  }

  return len;
 8000a94:	687b      	ldr	r3, [r7, #4]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (unsigned char const *) ptr, len, 2000);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ab4:	68b9      	ldr	r1, [r7, #8]
 8000ab6:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <_write+0x28>)
 8000ab8:	f002 fa0a 	bl	8002ed0 <HAL_UART_Transmit>
	return len;
 8000abc:	687b      	ldr	r3, [r7, #4]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000088 	.word	0x20000088

08000acc <_close>:

int _close(int file)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000af4:	605a      	str	r2, [r3, #4]
  return 0;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <_isatty>:

int _isatty(int file)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b0c:	2301      	movs	r3, #1
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	b085      	sub	sp, #20
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b3c:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <_sbrk+0x5c>)
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <_sbrk+0x60>)
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <_sbrk+0x64>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <_sbrk+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d207      	bcs.n	8000b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b64:	f006 fcd4 	bl	8007510 <__errno>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b72:	e009      	b.n	8000b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <_sbrk+0x64>)
 8000b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b86:	68fb      	ldr	r3, [r7, #12]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20050000 	.word	0x20050000
 8000b94:	00000400 	.word	0x00000400
 8000b98:	20000170 	.word	0x20000170
 8000b9c:	20001c68 	.word	0x20001c68

08000ba0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <SystemInit+0x20>)
 8000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <SystemInit+0x20>)
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc8:	f7ff ffea 	bl	8000ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bcc:	480c      	ldr	r0, [pc, #48]	; (8000c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bce:	490d      	ldr	r1, [pc, #52]	; (8000c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <LoopForever+0xe>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be4:	4c0a      	ldr	r4, [pc, #40]	; (8000c10 <LoopForever+0x16>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f006 fc93 	bl	800751c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf6:	f7ff fc81 	bl	80004fc <main>

08000bfa <LoopForever>:

LoopForever:
    b LoopForever
 8000bfa:	e7fe      	b.n	8000bfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bfc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c08:	08007c74 	.word	0x08007c74
  ldr r2, =_sbss
 8000c0c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c10:	20001c64 	.word	0x20001c64

08000c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC1_2_IRQHandler>

08000c16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f000 f8de 	bl	8000de2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c26:	200f      	movs	r0, #15
 8000c28:	f7ff fe82 	bl	8000930 <HAL_InitTick>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d002      	beq.n	8000c38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	71fb      	strb	r3, [r7, #7]
 8000c36:	e001      	b.n	8000c3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c38:	f7ff fdf2 	bl	8000820 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x20>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x24>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_IncTick+0x24>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000174 	.word	0x20000174

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <HAL_GetTick+0x14>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000174 	.word	0x20000174

08000c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cba:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	60d3      	str	r3, [r2, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	f003 0307 	and.w	r3, r3, #7
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	db0b      	blt.n	8000d16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	f003 021f 	and.w	r2, r3, #31
 8000d04:	4907      	ldr	r1, [pc, #28]	; (8000d24 <__NVIC_EnableIRQ+0x38>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	095b      	lsrs	r3, r3, #5
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000e100 	.word	0xe000e100

08000d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db0a      	blt.n	8000d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	490c      	ldr	r1, [pc, #48]	; (8000d74 <__NVIC_SetPriority+0x4c>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	0112      	lsls	r2, r2, #4
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d50:	e00a      	b.n	8000d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4908      	ldr	r1, [pc, #32]	; (8000d78 <__NVIC_SetPriority+0x50>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	3b04      	subs	r3, #4
 8000d60:	0112      	lsls	r2, r2, #4
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	440b      	add	r3, r1
 8000d66:	761a      	strb	r2, [r3, #24]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000e100 	.word	0xe000e100
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f1c3 0307 	rsb	r3, r3, #7
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	bf28      	it	cs
 8000d9a:	2304      	movcs	r3, #4
 8000d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3304      	adds	r3, #4
 8000da2:	2b06      	cmp	r3, #6
 8000da4:	d902      	bls.n	8000dac <NVIC_EncodePriority+0x30>
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3b03      	subs	r3, #3
 8000daa:	e000      	b.n	8000dae <NVIC_EncodePriority+0x32>
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	43d9      	mvns	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	4313      	orrs	r3, r2
         );
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3724      	adds	r7, #36	; 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ff4c 	bl	8000c88 <__NVIC_SetPriorityGrouping>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
 8000e04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e0a:	f7ff ff61 	bl	8000cd0 <__NVIC_GetPriorityGrouping>
 8000e0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	68b9      	ldr	r1, [r7, #8]
 8000e14:	6978      	ldr	r0, [r7, #20]
 8000e16:	f7ff ffb1 	bl	8000d7c <NVIC_EncodePriority>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e20:	4611      	mov	r1, r2
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff80 	bl	8000d28 <__NVIC_SetPriority>
}
 8000e28:	bf00      	nop
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ff54 	bl	8000cec <__NVIC_EnableIRQ>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5a:	e166      	b.n	800112a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	2101      	movs	r1, #1
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 8158 	beq.w	8001124 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d005      	beq.n	8000e8c <HAL_GPIO_Init+0x40>
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d130      	bne.n	8000eee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	091b      	lsrs	r3, r3, #4
 8000ed8:	f003 0201 	and.w	r2, r3, #1
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d017      	beq.n	8000f2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	2203      	movs	r2, #3
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d123      	bne.n	8000f7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	08da      	lsrs	r2, r3, #3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3208      	adds	r2, #8
 8000f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	220f      	movs	r2, #15
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	691a      	ldr	r2, [r3, #16]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	08da      	lsrs	r2, r3, #3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3208      	adds	r2, #8
 8000f78:	6939      	ldr	r1, [r7, #16]
 8000f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0203 	and.w	r2, r3, #3
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 80b2 	beq.w	8001124 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc0:	4b61      	ldr	r3, [pc, #388]	; (8001148 <HAL_GPIO_Init+0x2fc>)
 8000fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc4:	4a60      	ldr	r2, [pc, #384]	; (8001148 <HAL_GPIO_Init+0x2fc>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6613      	str	r3, [r2, #96]	; 0x60
 8000fcc:	4b5e      	ldr	r3, [pc, #376]	; (8001148 <HAL_GPIO_Init+0x2fc>)
 8000fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fd8:	4a5c      	ldr	r2, [pc, #368]	; (800114c <HAL_GPIO_Init+0x300>)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3302      	adds	r3, #2
 8000fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	220f      	movs	r2, #15
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001002:	d02b      	beq.n	800105c <HAL_GPIO_Init+0x210>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a52      	ldr	r2, [pc, #328]	; (8001150 <HAL_GPIO_Init+0x304>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d025      	beq.n	8001058 <HAL_GPIO_Init+0x20c>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a51      	ldr	r2, [pc, #324]	; (8001154 <HAL_GPIO_Init+0x308>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d01f      	beq.n	8001054 <HAL_GPIO_Init+0x208>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a50      	ldr	r2, [pc, #320]	; (8001158 <HAL_GPIO_Init+0x30c>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d019      	beq.n	8001050 <HAL_GPIO_Init+0x204>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a4f      	ldr	r2, [pc, #316]	; (800115c <HAL_GPIO_Init+0x310>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d013      	beq.n	800104c <HAL_GPIO_Init+0x200>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a4e      	ldr	r2, [pc, #312]	; (8001160 <HAL_GPIO_Init+0x314>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d00d      	beq.n	8001048 <HAL_GPIO_Init+0x1fc>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a4d      	ldr	r2, [pc, #308]	; (8001164 <HAL_GPIO_Init+0x318>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d007      	beq.n	8001044 <HAL_GPIO_Init+0x1f8>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a4c      	ldr	r2, [pc, #304]	; (8001168 <HAL_GPIO_Init+0x31c>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d101      	bne.n	8001040 <HAL_GPIO_Init+0x1f4>
 800103c:	2307      	movs	r3, #7
 800103e:	e00e      	b.n	800105e <HAL_GPIO_Init+0x212>
 8001040:	2308      	movs	r3, #8
 8001042:	e00c      	b.n	800105e <HAL_GPIO_Init+0x212>
 8001044:	2306      	movs	r3, #6
 8001046:	e00a      	b.n	800105e <HAL_GPIO_Init+0x212>
 8001048:	2305      	movs	r3, #5
 800104a:	e008      	b.n	800105e <HAL_GPIO_Init+0x212>
 800104c:	2304      	movs	r3, #4
 800104e:	e006      	b.n	800105e <HAL_GPIO_Init+0x212>
 8001050:	2303      	movs	r3, #3
 8001052:	e004      	b.n	800105e <HAL_GPIO_Init+0x212>
 8001054:	2302      	movs	r3, #2
 8001056:	e002      	b.n	800105e <HAL_GPIO_Init+0x212>
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <HAL_GPIO_Init+0x212>
 800105c:	2300      	movs	r3, #0
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	f002 0203 	and.w	r2, r2, #3
 8001064:	0092      	lsls	r2, r2, #2
 8001066:	4093      	lsls	r3, r2
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800106e:	4937      	ldr	r1, [pc, #220]	; (800114c <HAL_GPIO_Init+0x300>)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800107c:	4b3b      	ldr	r3, [pc, #236]	; (800116c <HAL_GPIO_Init+0x320>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010a0:	4a32      	ldr	r2, [pc, #200]	; (800116c <HAL_GPIO_Init+0x320>)
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010a6:	4b31      	ldr	r3, [pc, #196]	; (800116c <HAL_GPIO_Init+0x320>)
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ca:	4a28      	ldr	r2, [pc, #160]	; (800116c <HAL_GPIO_Init+0x320>)
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010d0:	4b26      	ldr	r3, [pc, #152]	; (800116c <HAL_GPIO_Init+0x320>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010f4:	4a1d      	ldr	r2, [pc, #116]	; (800116c <HAL_GPIO_Init+0x320>)
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <HAL_GPIO_Init+0x320>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800111e:	4a13      	ldr	r2, [pc, #76]	; (800116c <HAL_GPIO_Init+0x320>)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3301      	adds	r3, #1
 8001128:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	fa22 f303 	lsr.w	r3, r2, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	f47f ae91 	bne.w	8000e5c <HAL_GPIO_Init+0x10>
  }
}
 800113a:	bf00      	nop
 800113c:	bf00      	nop
 800113e:	371c      	adds	r7, #28
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	40021000 	.word	0x40021000
 800114c:	40010000 	.word	0x40010000
 8001150:	48000400 	.word	0x48000400
 8001154:	48000800 	.word	0x48000800
 8001158:	48000c00 	.word	0x48000c00
 800115c:	48001000 	.word	0x48001000
 8001160:	48001400 	.word	0x48001400
 8001164:	48001800 	.word	0x48001800
 8001168:	48001c00 	.word	0x48001c00
 800116c:	40010400 	.word	0x40010400

08001170 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <HAL_PWREx_GetVoltageRange+0x18>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40007000 	.word	0x40007000

0800118c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800119a:	d130      	bne.n	80011fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800119c:	4b23      	ldr	r3, [pc, #140]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011a8:	d038      	beq.n	800121c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011aa:	4b20      	ldr	r3, [pc, #128]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011b2:	4a1e      	ldr	r2, [pc, #120]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2232      	movs	r2, #50	; 0x32
 80011c0:	fb02 f303 	mul.w	r3, r2, r3
 80011c4:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	0c9b      	lsrs	r3, r3, #18
 80011cc:	3301      	adds	r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011d0:	e002      	b.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e4:	d102      	bne.n	80011ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1f2      	bne.n	80011d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f8:	d110      	bne.n	800121c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e00f      	b.n	800121e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800120a:	d007      	beq.n	800121c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001214:	4a05      	ldr	r2, [pc, #20]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800121a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40007000 	.word	0x40007000
 8001230:	20000000 	.word	0x20000000
 8001234:	431bde83 	.word	0x431bde83

08001238 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <HAL_PWREx_EnableVddIO2+0x1c>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001242:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001246:	6053      	str	r3, [r2, #4]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40007000 	.word	0x40007000

08001258 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d102      	bne.n	800126c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	f000 bc08 	b.w	8001a7c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800126c:	4b96      	ldr	r3, [pc, #600]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 030c 	and.w	r3, r3, #12
 8001274:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001276:	4b94      	ldr	r3, [pc, #592]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0310 	and.w	r3, r3, #16
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 80e4 	beq.w	8001456 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d007      	beq.n	80012a4 <HAL_RCC_OscConfig+0x4c>
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	2b0c      	cmp	r3, #12
 8001298:	f040 808b 	bne.w	80013b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	f040 8087 	bne.w	80013b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012a4:	4b88      	ldr	r3, [pc, #544]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <HAL_RCC_OscConfig+0x64>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e3df      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a1a      	ldr	r2, [r3, #32]
 80012c0:	4b81      	ldr	r3, [pc, #516]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d004      	beq.n	80012d6 <HAL_RCC_OscConfig+0x7e>
 80012cc:	4b7e      	ldr	r3, [pc, #504]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012d4:	e005      	b.n	80012e2 <HAL_RCC_OscConfig+0x8a>
 80012d6:	4b7c      	ldr	r3, [pc, #496]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80012d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012dc:	091b      	lsrs	r3, r3, #4
 80012de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d223      	bcs.n	800132e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 fdc4 	bl	8001e78 <RCC_SetFlashLatencyFromMSIRange>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e3c0      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012fa:	4b73      	ldr	r3, [pc, #460]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a72      	ldr	r2, [pc, #456]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001300:	f043 0308 	orr.w	r3, r3, #8
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	4b70      	ldr	r3, [pc, #448]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	496d      	ldr	r1, [pc, #436]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001314:	4313      	orrs	r3, r2
 8001316:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001318:	4b6b      	ldr	r3, [pc, #428]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69db      	ldr	r3, [r3, #28]
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	4968      	ldr	r1, [pc, #416]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001328:	4313      	orrs	r3, r2
 800132a:	604b      	str	r3, [r1, #4]
 800132c:	e025      	b.n	800137a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800132e:	4b66      	ldr	r3, [pc, #408]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a65      	ldr	r2, [pc, #404]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001334:	f043 0308 	orr.w	r3, r3, #8
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	4b63      	ldr	r3, [pc, #396]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	4960      	ldr	r1, [pc, #384]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001348:	4313      	orrs	r3, r2
 800134a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800134c:	4b5e      	ldr	r3, [pc, #376]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	495b      	ldr	r1, [pc, #364]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d109      	bne.n	800137a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 fd84 	bl	8001e78 <RCC_SetFlashLatencyFromMSIRange>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e380      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800137a:	f000 fc87 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 800137e:	4602      	mov	r2, r0
 8001380:	4b51      	ldr	r3, [pc, #324]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	4950      	ldr	r1, [pc, #320]	; (80014cc <HAL_RCC_OscConfig+0x274>)
 800138c:	5ccb      	ldrb	r3, [r1, r3]
 800138e:	f003 031f 	and.w	r3, r3, #31
 8001392:	fa22 f303 	lsr.w	r3, r2, r3
 8001396:	4a4e      	ldr	r2, [pc, #312]	; (80014d0 <HAL_RCC_OscConfig+0x278>)
 8001398:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800139a:	4b4e      	ldr	r3, [pc, #312]	; (80014d4 <HAL_RCC_OscConfig+0x27c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fac6 	bl	8000930 <HAL_InitTick>
 80013a4:	4603      	mov	r3, r0
 80013a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d052      	beq.n	8001454 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	e364      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d032      	beq.n	8001420 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013ba:	4b43      	ldr	r3, [pc, #268]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a42      	ldr	r2, [pc, #264]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013c6:	f7ff fc53 	bl	8000c70 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ce:	f7ff fc4f 	bl	8000c70 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e34d      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013e0:	4b39      	ldr	r3, [pc, #228]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ec:	4b36      	ldr	r3, [pc, #216]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a35      	ldr	r2, [pc, #212]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80013f2:	f043 0308 	orr.w	r3, r3, #8
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	4930      	ldr	r1, [pc, #192]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001406:	4313      	orrs	r3, r2
 8001408:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800140a:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	492b      	ldr	r1, [pc, #172]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 800141a:	4313      	orrs	r3, r2
 800141c:	604b      	str	r3, [r1, #4]
 800141e:	e01a      	b.n	8001456 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001420:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a28      	ldr	r2, [pc, #160]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001426:	f023 0301 	bic.w	r3, r3, #1
 800142a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800142c:	f7ff fc20 	bl	8000c70 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001434:	f7ff fc1c 	bl	8000c70 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e31a      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x1dc>
 8001452:	e000      	b.n	8001456 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001454:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d073      	beq.n	800154a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	2b08      	cmp	r3, #8
 8001466:	d005      	beq.n	8001474 <HAL_RCC_OscConfig+0x21c>
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2b0c      	cmp	r3, #12
 800146c:	d10e      	bne.n	800148c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	2b03      	cmp	r3, #3
 8001472:	d10b      	bne.n	800148c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d063      	beq.n	8001548 <HAL_RCC_OscConfig+0x2f0>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d15f      	bne.n	8001548 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e2f7      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001494:	d106      	bne.n	80014a4 <HAL_RCC_OscConfig+0x24c>
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e025      	b.n	80014f0 <HAL_RCC_OscConfig+0x298>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ac:	d114      	bne.n	80014d8 <HAL_RCC_OscConfig+0x280>
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80014b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a02      	ldr	r2, [pc, #8]	; (80014c8 <HAL_RCC_OscConfig+0x270>)
 80014c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	e013      	b.n	80014f0 <HAL_RCC_OscConfig+0x298>
 80014c8:	40021000 	.word	0x40021000
 80014cc:	08007c1c 	.word	0x08007c1c
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000004 	.word	0x20000004
 80014d8:	4ba0      	ldr	r3, [pc, #640]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a9f      	ldr	r2, [pc, #636]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80014de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b9d      	ldr	r3, [pc, #628]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a9c      	ldr	r2, [pc, #624]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80014ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fbba 	bl	8000c70 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fbb6 	bl	8000c70 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	; 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e2b4      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001512:	4b92      	ldr	r3, [pc, #584]	; (800175c <HAL_RCC_OscConfig+0x504>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0x2a8>
 800151e:	e014      	b.n	800154a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001520:	f7ff fba6 	bl	8000c70 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001528:	f7ff fba2 	bl	8000c70 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	; 0x64
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e2a0      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800153a:	4b88      	ldr	r3, [pc, #544]	; (800175c <HAL_RCC_OscConfig+0x504>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x2d0>
 8001546:	e000      	b.n	800154a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d060      	beq.n	8001618 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	2b04      	cmp	r3, #4
 800155a:	d005      	beq.n	8001568 <HAL_RCC_OscConfig+0x310>
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2b0c      	cmp	r3, #12
 8001560:	d119      	bne.n	8001596 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	2b02      	cmp	r3, #2
 8001566:	d116      	bne.n	8001596 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001568:	4b7c      	ldr	r3, [pc, #496]	; (800175c <HAL_RCC_OscConfig+0x504>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <HAL_RCC_OscConfig+0x328>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e27d      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001580:	4b76      	ldr	r3, [pc, #472]	; (800175c <HAL_RCC_OscConfig+0x504>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	061b      	lsls	r3, r3, #24
 800158e:	4973      	ldr	r1, [pc, #460]	; (800175c <HAL_RCC_OscConfig+0x504>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001594:	e040      	b.n	8001618 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d023      	beq.n	80015e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800159e:	4b6f      	ldr	r3, [pc, #444]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a6e      	ldr	r2, [pc, #440]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80015a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015aa:	f7ff fb61 	bl	8000c70 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b2:	f7ff fb5d 	bl	8000c70 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e25b      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015c4:	4b65      	ldr	r3, [pc, #404]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d0:	4b62      	ldr	r3, [pc, #392]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	061b      	lsls	r3, r3, #24
 80015de:	495f      	ldr	r1, [pc, #380]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
 80015e4:	e018      	b.n	8001618 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e6:	4b5d      	ldr	r3, [pc, #372]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a5c      	ldr	r2, [pc, #368]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80015ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f2:	f7ff fb3d 	bl	8000c70 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015fa:	f7ff fb39 	bl	8000c70 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e237      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800160c:	4b53      	ldr	r3, [pc, #332]	; (800175c <HAL_RCC_OscConfig+0x504>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f0      	bne.n	80015fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b00      	cmp	r3, #0
 8001622:	d03c      	beq.n	800169e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d01c      	beq.n	8001666 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162c:	4b4b      	ldr	r3, [pc, #300]	; (800175c <HAL_RCC_OscConfig+0x504>)
 800162e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001632:	4a4a      	ldr	r2, [pc, #296]	; (800175c <HAL_RCC_OscConfig+0x504>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163c:	f7ff fb18 	bl	8000c70 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001644:	f7ff fb14 	bl	8000c70 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e212      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001656:	4b41      	ldr	r3, [pc, #260]	; (800175c <HAL_RCC_OscConfig+0x504>)
 8001658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0ef      	beq.n	8001644 <HAL_RCC_OscConfig+0x3ec>
 8001664:	e01b      	b.n	800169e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001666:	4b3d      	ldr	r3, [pc, #244]	; (800175c <HAL_RCC_OscConfig+0x504>)
 8001668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166c:	4a3b      	ldr	r2, [pc, #236]	; (800175c <HAL_RCC_OscConfig+0x504>)
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001676:	f7ff fafb 	bl	8000c70 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167e:	f7ff faf7 	bl	8000c70 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e1f5      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001690:	4b32      	ldr	r3, [pc, #200]	; (800175c <HAL_RCC_OscConfig+0x504>)
 8001692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1ef      	bne.n	800167e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 80a6 	beq.w	80017f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ac:	2300      	movs	r3, #0
 80016ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016b0:	4b2a      	ldr	r3, [pc, #168]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80016b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10d      	bne.n	80016d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016bc:	4b27      	ldr	r3, [pc, #156]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80016be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c0:	4a26      	ldr	r2, [pc, #152]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80016c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c6:	6593      	str	r3, [r2, #88]	; 0x58
 80016c8:	4b24      	ldr	r3, [pc, #144]	; (800175c <HAL_RCC_OscConfig+0x504>)
 80016ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016d4:	2301      	movs	r3, #1
 80016d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <HAL_RCC_OscConfig+0x508>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d118      	bne.n	8001716 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <HAL_RCC_OscConfig+0x508>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a1d      	ldr	r2, [pc, #116]	; (8001760 <HAL_RCC_OscConfig+0x508>)
 80016ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f0:	f7ff fabe 	bl	8000c70 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f8:	f7ff faba 	bl	8000c70 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e1b8      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_RCC_OscConfig+0x508>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d108      	bne.n	8001730 <HAL_RCC_OscConfig+0x4d8>
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <HAL_RCC_OscConfig+0x504>)
 8001720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001724:	4a0d      	ldr	r2, [pc, #52]	; (800175c <HAL_RCC_OscConfig+0x504>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800172e:	e029      	b.n	8001784 <HAL_RCC_OscConfig+0x52c>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b05      	cmp	r3, #5
 8001736:	d115      	bne.n	8001764 <HAL_RCC_OscConfig+0x50c>
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <HAL_RCC_OscConfig+0x504>)
 800173a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173e:	4a07      	ldr	r2, [pc, #28]	; (800175c <HAL_RCC_OscConfig+0x504>)
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <HAL_RCC_OscConfig+0x504>)
 800174a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174e:	4a03      	ldr	r2, [pc, #12]	; (800175c <HAL_RCC_OscConfig+0x504>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001758:	e014      	b.n	8001784 <HAL_RCC_OscConfig+0x52c>
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000
 8001760:	40007000 	.word	0x40007000
 8001764:	4b9d      	ldr	r3, [pc, #628]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 8001766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800176a:	4a9c      	ldr	r2, [pc, #624]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001774:	4b99      	ldr	r3, [pc, #612]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 8001776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800177a:	4a98      	ldr	r2, [pc, #608]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 800177c:	f023 0304 	bic.w	r3, r3, #4
 8001780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d016      	beq.n	80017ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178c:	f7ff fa70 	bl	8000c70 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001792:	e00a      	b.n	80017aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001794:	f7ff fa6c 	bl	8000c70 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e168      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017aa:	4b8c      	ldr	r3, [pc, #560]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 80017ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0ed      	beq.n	8001794 <HAL_RCC_OscConfig+0x53c>
 80017b8:	e015      	b.n	80017e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ba:	f7ff fa59 	bl	8000c70 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c2:	f7ff fa55 	bl	8000c70 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e151      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017d8:	4b80      	ldr	r3, [pc, #512]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 80017da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1ed      	bne.n	80017c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017e6:	7ffb      	ldrb	r3, [r7, #31]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d105      	bne.n	80017f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ec:	4b7b      	ldr	r3, [pc, #492]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 80017ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f0:	4a7a      	ldr	r2, [pc, #488]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 80017f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0320 	and.w	r3, r3, #32
 8001800:	2b00      	cmp	r3, #0
 8001802:	d03c      	beq.n	800187e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	2b00      	cmp	r3, #0
 800180a:	d01c      	beq.n	8001846 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800180c:	4b73      	ldr	r3, [pc, #460]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 800180e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001812:	4a72      	ldr	r2, [pc, #456]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181c:	f7ff fa28 	bl	8000c70 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001824:	f7ff fa24 	bl	8000c70 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e122      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001836:	4b69      	ldr	r3, [pc, #420]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 8001838:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0ef      	beq.n	8001824 <HAL_RCC_OscConfig+0x5cc>
 8001844:	e01b      	b.n	800187e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001846:	4b65      	ldr	r3, [pc, #404]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 8001848:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800184c:	4a63      	ldr	r2, [pc, #396]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001856:	f7ff fa0b 	bl	8000c70 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800185e:	f7ff fa07 	bl	8000c70 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e105      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001870:	4b5a      	ldr	r3, [pc, #360]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 8001872:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1ef      	bne.n	800185e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 80f9 	beq.w	8001a7a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188c:	2b02      	cmp	r3, #2
 800188e:	f040 80cf 	bne.w	8001a30 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001892:	4b52      	ldr	r3, [pc, #328]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f003 0203 	and.w	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d12c      	bne.n	8001900 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	3b01      	subs	r3, #1
 80018b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d123      	bne.n	8001900 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d11b      	bne.n	8001900 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d113      	bne.n	8001900 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e2:	085b      	lsrs	r3, r3, #1
 80018e4:	3b01      	subs	r3, #1
 80018e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d109      	bne.n	8001900 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	085b      	lsrs	r3, r3, #1
 80018f8:	3b01      	subs	r3, #1
 80018fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d071      	beq.n	80019e4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	2b0c      	cmp	r3, #12
 8001904:	d068      	beq.n	80019d8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001906:	4b35      	ldr	r3, [pc, #212]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d105      	bne.n	800191e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001912:	4b32      	ldr	r3, [pc, #200]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e0ac      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001922:	4b2e      	ldr	r3, [pc, #184]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a2d      	ldr	r2, [pc, #180]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 8001928:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800192c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800192e:	f7ff f99f 	bl	8000c70 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001936:	f7ff f99b 	bl	8000c70 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e099      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001948:	4b24      	ldr	r3, [pc, #144]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1f0      	bne.n	8001936 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001954:	4b21      	ldr	r3, [pc, #132]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <HAL_RCC_OscConfig+0x788>)
 800195a:	4013      	ands	r3, r2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001964:	3a01      	subs	r2, #1
 8001966:	0112      	lsls	r2, r2, #4
 8001968:	4311      	orrs	r1, r2
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800196e:	0212      	lsls	r2, r2, #8
 8001970:	4311      	orrs	r1, r2
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001976:	0852      	lsrs	r2, r2, #1
 8001978:	3a01      	subs	r2, #1
 800197a:	0552      	lsls	r2, r2, #21
 800197c:	4311      	orrs	r1, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001982:	0852      	lsrs	r2, r2, #1
 8001984:	3a01      	subs	r2, #1
 8001986:	0652      	lsls	r2, r2, #25
 8001988:	4311      	orrs	r1, r2
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800198e:	06d2      	lsls	r2, r2, #27
 8001990:	430a      	orrs	r2, r1
 8001992:	4912      	ldr	r1, [pc, #72]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 8001994:	4313      	orrs	r3, r2
 8001996:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001998:	4b10      	ldr	r3, [pc, #64]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0f      	ldr	r2, [pc, #60]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 800199e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019a4:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	4a0c      	ldr	r2, [pc, #48]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 80019aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019b0:	f7ff f95e 	bl	8000c70 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b8:	f7ff f95a 	bl	8000c70 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e058      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ca:	4b04      	ldr	r3, [pc, #16]	; (80019dc <HAL_RCC_OscConfig+0x784>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019d6:	e050      	b.n	8001a7a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e04f      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
 80019dc:	40021000 	.word	0x40021000
 80019e0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <HAL_RCC_OscConfig+0x82c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d144      	bne.n	8001a7a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019f0:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <HAL_RCC_OscConfig+0x82c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a23      	ldr	r2, [pc, #140]	; (8001a84 <HAL_RCC_OscConfig+0x82c>)
 80019f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019fc:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <HAL_RCC_OscConfig+0x82c>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	4a20      	ldr	r2, [pc, #128]	; (8001a84 <HAL_RCC_OscConfig+0x82c>)
 8001a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a08:	f7ff f932 	bl	8000c70 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a10:	f7ff f92e 	bl	8000c70 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e02c      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <HAL_RCC_OscConfig+0x82c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0x7b8>
 8001a2e:	e024      	b.n	8001a7a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2b0c      	cmp	r3, #12
 8001a34:	d01f      	beq.n	8001a76 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a36:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <HAL_RCC_OscConfig+0x82c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <HAL_RCC_OscConfig+0x82c>)
 8001a3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7ff f915 	bl	8000c70 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4a:	f7ff f911 	bl	8000c70 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e00f      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_RCC_OscConfig+0x82c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f0      	bne.n	8001a4a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_RCC_OscConfig+0x82c>)
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	4905      	ldr	r1, [pc, #20]	; (8001a84 <HAL_RCC_OscConfig+0x82c>)
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_RCC_OscConfig+0x830>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	60cb      	str	r3, [r1, #12]
 8001a74:	e001      	b.n	8001a7a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3720      	adds	r7, #32
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40021000 	.word	0x40021000
 8001a88:	feeefffc 	.word	0xfeeefffc

08001a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0e7      	b.n	8001c70 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa0:	4b75      	ldr	r3, [pc, #468]	; (8001c78 <HAL_RCC_ClockConfig+0x1ec>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d910      	bls.n	8001ad0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aae:	4b72      	ldr	r3, [pc, #456]	; (8001c78 <HAL_RCC_ClockConfig+0x1ec>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 0207 	bic.w	r2, r3, #7
 8001ab6:	4970      	ldr	r1, [pc, #448]	; (8001c78 <HAL_RCC_ClockConfig+0x1ec>)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abe:	4b6e      	ldr	r3, [pc, #440]	; (8001c78 <HAL_RCC_ClockConfig+0x1ec>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0cf      	b.n	8001c70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d010      	beq.n	8001afe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	4b66      	ldr	r3, [pc, #408]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d908      	bls.n	8001afe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aec:	4b63      	ldr	r3, [pc, #396]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4960      	ldr	r1, [pc, #384]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d04c      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b12:	4b5a      	ldr	r3, [pc, #360]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d121      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e0a6      	b.n	8001c70 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d107      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b2a:	4b54      	ldr	r3, [pc, #336]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d115      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e09a      	b.n	8001c70 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b42:	4b4e      	ldr	r3, [pc, #312]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d109      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e08e      	b.n	8001c70 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b52:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e086      	b.n	8001c70 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b62:	4b46      	ldr	r3, [pc, #280]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f023 0203 	bic.w	r2, r3, #3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4943      	ldr	r1, [pc, #268]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b74:	f7ff f87c 	bl	8000c70 <HAL_GetTick>
 8001b78:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7a:	e00a      	b.n	8001b92 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7c:	f7ff f878 	bl	8000c70 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e06e      	b.n	8001c70 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b92:	4b3a      	ldr	r3, [pc, #232]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 020c 	and.w	r2, r3, #12
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d1eb      	bne.n	8001b7c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d010      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	4b31      	ldr	r3, [pc, #196]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d208      	bcs.n	8001bd2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc0:	4b2e      	ldr	r3, [pc, #184]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	492b      	ldr	r1, [pc, #172]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd2:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <HAL_RCC_ClockConfig+0x1ec>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d210      	bcs.n	8001c02 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be0:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <HAL_RCC_ClockConfig+0x1ec>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f023 0207 	bic.w	r2, r3, #7
 8001be8:	4923      	ldr	r1, [pc, #140]	; (8001c78 <HAL_RCC_ClockConfig+0x1ec>)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf0:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <HAL_RCC_ClockConfig+0x1ec>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d001      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e036      	b.n	8001c70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d008      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	4918      	ldr	r1, [pc, #96]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d009      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4910      	ldr	r1, [pc, #64]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c40:	f000 f824 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 8001c44:	4602      	mov	r2, r0
 8001c46:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	490b      	ldr	r1, [pc, #44]	; (8001c80 <HAL_RCC_ClockConfig+0x1f4>)
 8001c52:	5ccb      	ldrb	r3, [r1, r3]
 8001c54:	f003 031f 	and.w	r3, r3, #31
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5c:	4a09      	ldr	r2, [pc, #36]	; (8001c84 <HAL_RCC_ClockConfig+0x1f8>)
 8001c5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_RCC_ClockConfig+0x1fc>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fe63 	bl	8000930 <HAL_InitTick>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c6e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40022000 	.word	0x40022000
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	08007c1c 	.word	0x08007c1c
 8001c84:	20000000 	.word	0x20000000
 8001c88:	20000004 	.word	0x20000004

08001c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c9a:	4b3e      	ldr	r3, [pc, #248]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ca4:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x34>
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	2b0c      	cmp	r3, #12
 8001cb8:	d121      	bne.n	8001cfe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d11e      	bne.n	8001cfe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cc0:	4b34      	ldr	r3, [pc, #208]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d107      	bne.n	8001cdc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ccc:	4b31      	ldr	r3, [pc, #196]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd2:	0a1b      	lsrs	r3, r3, #8
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	e005      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cdc:	4b2d      	ldr	r3, [pc, #180]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ce8:	4a2b      	ldr	r2, [pc, #172]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10d      	bne.n	8001d14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cfc:	e00a      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d102      	bne.n	8001d0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d04:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x110>)
 8001d06:	61bb      	str	r3, [r7, #24]
 8001d08:	e004      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d10:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	2b0c      	cmp	r3, #12
 8001d18:	d134      	bne.n	8001d84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d003      	beq.n	8001d32 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2b03      	cmp	r3, #3
 8001d2e:	d003      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0xac>
 8001d30:	e005      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d32:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x110>)
 8001d34:	617b      	str	r3, [r7, #20]
      break;
 8001d36:	e005      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d38:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d3a:	617b      	str	r3, [r7, #20]
      break;
 8001d3c:	e002      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	617b      	str	r3, [r7, #20]
      break;
 8001d42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d44:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	091b      	lsrs	r3, r3, #4
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	3301      	adds	r3, #1
 8001d50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	fb03 f202 	mul.w	r2, r3, r2
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	0e5b      	lsrs	r3, r3, #25
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	3301      	adds	r3, #1
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d84:	69bb      	ldr	r3, [r7, #24]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3724      	adds	r7, #36	; 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
 8001d98:	08007c34 	.word	0x08007c34
 8001d9c:	00f42400 	.word	0x00f42400
 8001da0:	007a1200 	.word	0x007a1200

08001da4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000000 	.word	0x20000000

08001dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001dc0:	f7ff fff0 	bl	8001da4 <HAL_RCC_GetHCLKFreq>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	0a1b      	lsrs	r3, r3, #8
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	4904      	ldr	r1, [pc, #16]	; (8001de4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dd2:	5ccb      	ldrb	r3, [r1, r3]
 8001dd4:	f003 031f 	and.w	r3, r3, #31
 8001dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000
 8001de4:	08007c2c 	.word	0x08007c2c

08001de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dec:	f7ff ffda 	bl	8001da4 <HAL_RCC_GetHCLKFreq>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	0adb      	lsrs	r3, r3, #11
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	4904      	ldr	r1, [pc, #16]	; (8001e10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dfe:	5ccb      	ldrb	r3, [r1, r3]
 8001e00:	f003 031f 	and.w	r3, r3, #31
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	08007c2c 	.word	0x08007c2c

08001e14 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	220f      	movs	r2, #15
 8001e22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_RCC_GetClockConfig+0x5c>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 0203 	and.w	r2, r3, #3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e30:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <HAL_RCC_GetClockConfig+0x5c>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <HAL_RCC_GetClockConfig+0x5c>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <HAL_RCC_GetClockConfig+0x5c>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	08db      	lsrs	r3, r3, #3
 8001e4e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <HAL_RCC_GetClockConfig+0x60>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0207 	and.w	r2, r3, #7
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	601a      	str	r2, [r3, #0]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40022000 	.word	0x40022000

08001e78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e80:	2300      	movs	r3, #0
 8001e82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e84:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e90:	f7ff f96e 	bl	8001170 <HAL_PWREx_GetVoltageRange>
 8001e94:	6178      	str	r0, [r7, #20]
 8001e96:	e014      	b.n	8001ec2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e98:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	4a24      	ldr	r2, [pc, #144]	; (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea4:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001eb0:	f7ff f95e 	bl	8001170 <HAL_PWREx_GetVoltageRange>
 8001eb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eba:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ec8:	d10b      	bne.n	8001ee2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b80      	cmp	r3, #128	; 0x80
 8001ece:	d919      	bls.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2ba0      	cmp	r3, #160	; 0xa0
 8001ed4:	d902      	bls.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	e013      	b.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001edc:	2301      	movs	r3, #1
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	e010      	b.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b80      	cmp	r3, #128	; 0x80
 8001ee6:	d902      	bls.n	8001eee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ee8:	2303      	movs	r3, #3
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	e00a      	b.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b80      	cmp	r3, #128	; 0x80
 8001ef2:	d102      	bne.n	8001efa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	e004      	b.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b70      	cmp	r3, #112	; 0x70
 8001efe:	d101      	bne.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f00:	2301      	movs	r3, #1
 8001f02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f023 0207 	bic.w	r2, r3, #7
 8001f0c:	4909      	ldr	r1, [pc, #36]	; (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d001      	beq.n	8001f26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40022000 	.word	0x40022000

08001f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f40:	2300      	movs	r3, #0
 8001f42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f44:	2300      	movs	r3, #0
 8001f46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d041      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f5c:	d02a      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f62:	d824      	bhi.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f68:	d008      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f6e:	d81e      	bhi.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00a      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f78:	d010      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f7a:	e018      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f7c:	4b86      	ldr	r3, [pc, #536]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4a85      	ldr	r2, [pc, #532]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f88:	e015      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 facd 	bl	8002530 <RCCEx_PLLSAI1_Config>
 8001f96:	4603      	mov	r3, r0
 8001f98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f9a:	e00c      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3320      	adds	r3, #32
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 fbb6 	bl	8002714 <RCCEx_PLLSAI2_Config>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fac:	e003      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	74fb      	strb	r3, [r7, #19]
      break;
 8001fb2:	e000      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fb6:	7cfb      	ldrb	r3, [r7, #19]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10b      	bne.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fbc:	4b76      	ldr	r3, [pc, #472]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fca:	4973      	ldr	r1, [pc, #460]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fd2:	e001      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fd4:	7cfb      	ldrb	r3, [r7, #19]
 8001fd6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d041      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fe8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001fec:	d02a      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001fee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ff2:	d824      	bhi.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ff4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ff8:	d008      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ffa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ffe:	d81e      	bhi.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002008:	d010      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800200a:	e018      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800200c:	4b62      	ldr	r3, [pc, #392]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4a61      	ldr	r2, [pc, #388]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002016:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002018:	e015      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3304      	adds	r3, #4
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f000 fa85 	bl	8002530 <RCCEx_PLLSAI1_Config>
 8002026:	4603      	mov	r3, r0
 8002028:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800202a:	e00c      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3320      	adds	r3, #32
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fb6e 	bl	8002714 <RCCEx_PLLSAI2_Config>
 8002038:	4603      	mov	r3, r0
 800203a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800203c:	e003      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	74fb      	strb	r3, [r7, #19]
      break;
 8002042:	e000      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002046:	7cfb      	ldrb	r3, [r7, #19]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10b      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800204c:	4b52      	ldr	r3, [pc, #328]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002052:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800205a:	494f      	ldr	r1, [pc, #316]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205c:	4313      	orrs	r3, r2
 800205e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002062:	e001      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002064:	7cfb      	ldrb	r3, [r7, #19]
 8002066:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80a0 	beq.w	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002076:	2300      	movs	r3, #0
 8002078:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800207a:	4b47      	ldr	r3, [pc, #284]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800208a:	2300      	movs	r3, #0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00d      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002090:	4b41      	ldr	r3, [pc, #260]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002094:	4a40      	ldr	r2, [pc, #256]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800209a:	6593      	str	r3, [r2, #88]	; 0x58
 800209c:	4b3e      	ldr	r3, [pc, #248]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a8:	2301      	movs	r3, #1
 80020aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020ac:	4b3b      	ldr	r3, [pc, #236]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a3a      	ldr	r2, [pc, #232]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020b8:	f7fe fdda 	bl	8000c70 <HAL_GetTick>
 80020bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020be:	e009      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c0:	f7fe fdd6 	bl	8000c70 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d902      	bls.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	74fb      	strb	r3, [r7, #19]
        break;
 80020d2:	e005      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020d4:	4b31      	ldr	r3, [pc, #196]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0ef      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020e0:	7cfb      	ldrb	r3, [r7, #19]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d15c      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020e6:	4b2c      	ldr	r3, [pc, #176]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d01f      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	429a      	cmp	r2, r3
 8002102:	d019      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002104:	4b24      	ldr	r3, [pc, #144]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800210e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002110:	4b21      	ldr	r3, [pc, #132]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002116:	4a20      	ldr	r2, [pc, #128]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002126:	4a1c      	ldr	r2, [pc, #112]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002130:	4a19      	ldr	r2, [pc, #100]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d016      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002142:	f7fe fd95 	bl	8000c70 <HAL_GetTick>
 8002146:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002148:	e00b      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214a:	f7fe fd91 	bl	8000c70 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	f241 3288 	movw	r2, #5000	; 0x1388
 8002158:	4293      	cmp	r3, r2
 800215a:	d902      	bls.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	74fb      	strb	r3, [r7, #19]
            break;
 8002160:	e006      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002162:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0ec      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002170:	7cfb      	ldrb	r3, [r7, #19]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10c      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002186:	4904      	ldr	r1, [pc, #16]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800218e:	e009      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002190:	7cfb      	ldrb	r3, [r7, #19]
 8002192:	74bb      	strb	r3, [r7, #18]
 8002194:	e006      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
 800219c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021a0:	7cfb      	ldrb	r3, [r7, #19]
 80021a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021a4:	7c7b      	ldrb	r3, [r7, #17]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d105      	bne.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021aa:	4ba6      	ldr	r3, [pc, #664]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ae:	4aa5      	ldr	r2, [pc, #660]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021c2:	4ba0      	ldr	r3, [pc, #640]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c8:	f023 0203 	bic.w	r2, r3, #3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d0:	499c      	ldr	r1, [pc, #624]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00a      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021e4:	4b97      	ldr	r3, [pc, #604]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ea:	f023 020c 	bic.w	r2, r3, #12
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	4994      	ldr	r1, [pc, #592]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002206:	4b8f      	ldr	r3, [pc, #572]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	498b      	ldr	r1, [pc, #556]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00a      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002228:	4b86      	ldr	r3, [pc, #536]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	4983      	ldr	r1, [pc, #524]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800224a:	4b7e      	ldr	r3, [pc, #504]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800224c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002250:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002258:	497a      	ldr	r1, [pc, #488]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800225a:	4313      	orrs	r3, r2
 800225c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800226c:	4b75      	ldr	r3, [pc, #468]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002272:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227a:	4972      	ldr	r1, [pc, #456]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800228e:	4b6d      	ldr	r3, [pc, #436]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002294:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229c:	4969      	ldr	r1, [pc, #420]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00a      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022b0:	4b64      	ldr	r3, [pc, #400]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022be:	4961      	ldr	r1, [pc, #388]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022d2:	4b5c      	ldr	r3, [pc, #368]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e0:	4958      	ldr	r1, [pc, #352]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022f4:	4b53      	ldr	r3, [pc, #332]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002302:	4950      	ldr	r1, [pc, #320]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002316:	4b4b      	ldr	r3, [pc, #300]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002324:	4947      	ldr	r1, [pc, #284]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002338:	4b42      	ldr	r3, [pc, #264]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800233a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800233e:	f023 0203 	bic.w	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002346:	493f      	ldr	r1, [pc, #252]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d028      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800235a:	4b3a      	ldr	r3, [pc, #232]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800235c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002360:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	4936      	ldr	r1, [pc, #216]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002378:	d106      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800237a:	4b32      	ldr	r3, [pc, #200]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	4a31      	ldr	r2, [pc, #196]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002380:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002384:	60d3      	str	r3, [r2, #12]
 8002386:	e011      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002390:	d10c      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3304      	adds	r3, #4
 8002396:	2101      	movs	r1, #1
 8002398:	4618      	mov	r0, r3
 800239a:	f000 f8c9 	bl	8002530 <RCCEx_PLLSAI1_Config>
 800239e:	4603      	mov	r3, r0
 80023a0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023a2:	7cfb      	ldrb	r3, [r7, #19]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80023a8:	7cfb      	ldrb	r3, [r7, #19]
 80023aa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d028      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023b8:	4b22      	ldr	r3, [pc, #136]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c6:	491f      	ldr	r1, [pc, #124]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023d6:	d106      	bne.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023d8:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4a19      	ldr	r2, [pc, #100]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023e2:	60d3      	str	r3, [r2, #12]
 80023e4:	e011      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023ee:	d10c      	bne.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3304      	adds	r3, #4
 80023f4:	2101      	movs	r1, #1
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 f89a 	bl	8002530 <RCCEx_PLLSAI1_Config>
 80023fc:	4603      	mov	r3, r0
 80023fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002400:	7cfb      	ldrb	r3, [r7, #19]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002406:	7cfb      	ldrb	r3, [r7, #19]
 8002408:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d02a      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002424:	4907      	ldr	r1, [pc, #28]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002430:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002434:	d108      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002436:	4b03      	ldr	r3, [pc, #12]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	4a02      	ldr	r2, [pc, #8]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800243c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002440:	60d3      	str	r3, [r2, #12]
 8002442:	e013      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002444:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800244c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002450:	d10c      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3304      	adds	r3, #4
 8002456:	2101      	movs	r1, #1
 8002458:	4618      	mov	r0, r3
 800245a:	f000 f869 	bl	8002530 <RCCEx_PLLSAI1_Config>
 800245e:	4603      	mov	r3, r0
 8002460:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002462:	7cfb      	ldrb	r3, [r7, #19]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002468:	7cfb      	ldrb	r3, [r7, #19]
 800246a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d02f      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002478:	4b2c      	ldr	r3, [pc, #176]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002486:	4929      	ldr	r1, [pc, #164]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002492:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002496:	d10d      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3304      	adds	r3, #4
 800249c:	2102      	movs	r1, #2
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f846 	bl	8002530 <RCCEx_PLLSAI1_Config>
 80024a4:	4603      	mov	r3, r0
 80024a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024a8:	7cfb      	ldrb	r3, [r7, #19]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d014      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80024ae:	7cfb      	ldrb	r3, [r7, #19]
 80024b0:	74bb      	strb	r3, [r7, #18]
 80024b2:	e011      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3320      	adds	r3, #32
 80024c2:	2102      	movs	r1, #2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 f925 	bl	8002714 <RCCEx_PLLSAI2_Config>
 80024ca:	4603      	mov	r3, r0
 80024cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ce:	7cfb      	ldrb	r3, [r7, #19]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80024d4:	7cfb      	ldrb	r3, [r7, #19]
 80024d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00b      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024f4:	490d      	ldr	r1, [pc, #52]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00b      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002518:	4904      	ldr	r1, [pc, #16]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002520:	7cbb      	ldrb	r3, [r7, #18]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000

08002530 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800253e:	4b74      	ldr	r3, [pc, #464]	; (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d018      	beq.n	800257c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800254a:	4b71      	ldr	r3, [pc, #452]	; (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f003 0203 	and.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d10d      	bne.n	8002576 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
       ||
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002562:	4b6b      	ldr	r3, [pc, #428]	; (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
       ||
 8002572:	429a      	cmp	r2, r3
 8002574:	d047      	beq.n	8002606 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	73fb      	strb	r3, [r7, #15]
 800257a:	e044      	b.n	8002606 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b03      	cmp	r3, #3
 8002582:	d018      	beq.n	80025b6 <RCCEx_PLLSAI1_Config+0x86>
 8002584:	2b03      	cmp	r3, #3
 8002586:	d825      	bhi.n	80025d4 <RCCEx_PLLSAI1_Config+0xa4>
 8002588:	2b01      	cmp	r3, #1
 800258a:	d002      	beq.n	8002592 <RCCEx_PLLSAI1_Config+0x62>
 800258c:	2b02      	cmp	r3, #2
 800258e:	d009      	beq.n	80025a4 <RCCEx_PLLSAI1_Config+0x74>
 8002590:	e020      	b.n	80025d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002592:	4b5f      	ldr	r3, [pc, #380]	; (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d11d      	bne.n	80025da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a2:	e01a      	b.n	80025da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025a4:	4b5a      	ldr	r3, [pc, #360]	; (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d116      	bne.n	80025de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b4:	e013      	b.n	80025de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025b6:	4b56      	ldr	r3, [pc, #344]	; (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10f      	bne.n	80025e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025c2:	4b53      	ldr	r3, [pc, #332]	; (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025d2:	e006      	b.n	80025e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
      break;
 80025d8:	e004      	b.n	80025e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025da:	bf00      	nop
 80025dc:	e002      	b.n	80025e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025de:	bf00      	nop
 80025e0:	e000      	b.n	80025e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10d      	bne.n	8002606 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025ea:	4b49      	ldr	r3, [pc, #292]	; (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6819      	ldr	r1, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	430b      	orrs	r3, r1
 8002600:	4943      	ldr	r1, [pc, #268]	; (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002602:	4313      	orrs	r3, r2
 8002604:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d17c      	bne.n	8002706 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800260c:	4b40      	ldr	r3, [pc, #256]	; (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a3f      	ldr	r2, [pc, #252]	; (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002612:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002616:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002618:	f7fe fb2a 	bl	8000c70 <HAL_GetTick>
 800261c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800261e:	e009      	b.n	8002634 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002620:	f7fe fb26 	bl	8000c70 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d902      	bls.n	8002634 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	73fb      	strb	r3, [r7, #15]
        break;
 8002632:	e005      	b.n	8002640 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002634:	4b36      	ldr	r3, [pc, #216]	; (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1ef      	bne.n	8002620 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d15f      	bne.n	8002706 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d110      	bne.n	800266e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800264c:	4b30      	ldr	r3, [pc, #192]	; (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002654:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6892      	ldr	r2, [r2, #8]
 800265c:	0211      	lsls	r1, r2, #8
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68d2      	ldr	r2, [r2, #12]
 8002662:	06d2      	lsls	r2, r2, #27
 8002664:	430a      	orrs	r2, r1
 8002666:	492a      	ldr	r1, [pc, #168]	; (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002668:	4313      	orrs	r3, r2
 800266a:	610b      	str	r3, [r1, #16]
 800266c:	e027      	b.n	80026be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d112      	bne.n	800269a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002674:	4b26      	ldr	r3, [pc, #152]	; (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800267c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6892      	ldr	r2, [r2, #8]
 8002684:	0211      	lsls	r1, r2, #8
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6912      	ldr	r2, [r2, #16]
 800268a:	0852      	lsrs	r2, r2, #1
 800268c:	3a01      	subs	r2, #1
 800268e:	0552      	lsls	r2, r2, #21
 8002690:	430a      	orrs	r2, r1
 8002692:	491f      	ldr	r1, [pc, #124]	; (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002694:	4313      	orrs	r3, r2
 8002696:	610b      	str	r3, [r1, #16]
 8002698:	e011      	b.n	80026be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800269a:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6892      	ldr	r2, [r2, #8]
 80026aa:	0211      	lsls	r1, r2, #8
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6952      	ldr	r2, [r2, #20]
 80026b0:	0852      	lsrs	r2, r2, #1
 80026b2:	3a01      	subs	r2, #1
 80026b4:	0652      	lsls	r2, r2, #25
 80026b6:	430a      	orrs	r2, r1
 80026b8:	4915      	ldr	r1, [pc, #84]	; (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026be:	4b14      	ldr	r3, [pc, #80]	; (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a13      	ldr	r2, [pc, #76]	; (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ca:	f7fe fad1 	bl	8000c70 <HAL_GetTick>
 80026ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026d0:	e009      	b.n	80026e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026d2:	f7fe facd 	bl	8000c70 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d902      	bls.n	80026e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	73fb      	strb	r3, [r7, #15]
          break;
 80026e4:	e005      	b.n	80026f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0ef      	beq.n	80026d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d106      	bne.n	8002706 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026f8:	4b05      	ldr	r3, [pc, #20]	; (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	4903      	ldr	r1, [pc, #12]	; (8002710 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002702:	4313      	orrs	r3, r2
 8002704:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002706:	7bfb      	ldrb	r3, [r7, #15]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40021000 	.word	0x40021000

08002714 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002722:	4b69      	ldr	r3, [pc, #420]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d018      	beq.n	8002760 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800272e:	4b66      	ldr	r3, [pc, #408]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f003 0203 	and.w	r2, r3, #3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d10d      	bne.n	800275a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
       ||
 8002742:	2b00      	cmp	r3, #0
 8002744:	d009      	beq.n	800275a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002746:	4b60      	ldr	r3, [pc, #384]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	091b      	lsrs	r3, r3, #4
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
       ||
 8002756:	429a      	cmp	r2, r3
 8002758:	d047      	beq.n	80027ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	73fb      	strb	r3, [r7, #15]
 800275e:	e044      	b.n	80027ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b03      	cmp	r3, #3
 8002766:	d018      	beq.n	800279a <RCCEx_PLLSAI2_Config+0x86>
 8002768:	2b03      	cmp	r3, #3
 800276a:	d825      	bhi.n	80027b8 <RCCEx_PLLSAI2_Config+0xa4>
 800276c:	2b01      	cmp	r3, #1
 800276e:	d002      	beq.n	8002776 <RCCEx_PLLSAI2_Config+0x62>
 8002770:	2b02      	cmp	r3, #2
 8002772:	d009      	beq.n	8002788 <RCCEx_PLLSAI2_Config+0x74>
 8002774:	e020      	b.n	80027b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002776:	4b54      	ldr	r3, [pc, #336]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d11d      	bne.n	80027be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002786:	e01a      	b.n	80027be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002788:	4b4f      	ldr	r3, [pc, #316]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002790:	2b00      	cmp	r3, #0
 8002792:	d116      	bne.n	80027c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002798:	e013      	b.n	80027c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800279a:	4b4b      	ldr	r3, [pc, #300]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10f      	bne.n	80027c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027a6:	4b48      	ldr	r3, [pc, #288]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d109      	bne.n	80027c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027b6:	e006      	b.n	80027c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
      break;
 80027bc:	e004      	b.n	80027c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027be:	bf00      	nop
 80027c0:	e002      	b.n	80027c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027c2:	bf00      	nop
 80027c4:	e000      	b.n	80027c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10d      	bne.n	80027ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027ce:	4b3e      	ldr	r3, [pc, #248]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6819      	ldr	r1, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	430b      	orrs	r3, r1
 80027e4:	4938      	ldr	r1, [pc, #224]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d166      	bne.n	80028be <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027f0:	4b35      	ldr	r3, [pc, #212]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a34      	ldr	r2, [pc, #208]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027fc:	f7fe fa38 	bl	8000c70 <HAL_GetTick>
 8002800:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002802:	e009      	b.n	8002818 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002804:	f7fe fa34 	bl	8000c70 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d902      	bls.n	8002818 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	73fb      	strb	r3, [r7, #15]
        break;
 8002816:	e005      	b.n	8002824 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002818:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1ef      	bne.n	8002804 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d149      	bne.n	80028be <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d110      	bne.n	8002852 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002830:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002838:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6892      	ldr	r2, [r2, #8]
 8002840:	0211      	lsls	r1, r2, #8
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68d2      	ldr	r2, [r2, #12]
 8002846:	06d2      	lsls	r2, r2, #27
 8002848:	430a      	orrs	r2, r1
 800284a:	491f      	ldr	r1, [pc, #124]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800284c:	4313      	orrs	r3, r2
 800284e:	614b      	str	r3, [r1, #20]
 8002850:	e011      	b.n	8002876 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002852:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800285a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6892      	ldr	r2, [r2, #8]
 8002862:	0211      	lsls	r1, r2, #8
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6912      	ldr	r2, [r2, #16]
 8002868:	0852      	lsrs	r2, r2, #1
 800286a:	3a01      	subs	r2, #1
 800286c:	0652      	lsls	r2, r2, #25
 800286e:	430a      	orrs	r2, r1
 8002870:	4915      	ldr	r1, [pc, #84]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002872:	4313      	orrs	r3, r2
 8002874:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002876:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a13      	ldr	r2, [pc, #76]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800287c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002880:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002882:	f7fe f9f5 	bl	8000c70 <HAL_GetTick>
 8002886:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002888:	e009      	b.n	800289e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800288a:	f7fe f9f1 	bl	8000c70 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d902      	bls.n	800289e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	73fb      	strb	r3, [r7, #15]
          break;
 800289c:	e005      	b.n	80028aa <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0ef      	beq.n	800288a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d106      	bne.n	80028be <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028b2:	695a      	ldr	r2, [r3, #20]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	4903      	ldr	r1, [pc, #12]	; (80028c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028be:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000

080028cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e049      	b.n	8002972 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f841 	bl	800297a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3304      	adds	r3, #4
 8002908:	4619      	mov	r1, r3
 800290a:	4610      	mov	r0, r2
 800290c:	f000 f9da 	bl	8002cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d001      	beq.n	80029a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e04f      	b.n	8002a48 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a23      	ldr	r2, [pc, #140]	; (8002a54 <HAL_TIM_Base_Start_IT+0xc4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d01d      	beq.n	8002a06 <HAL_TIM_Base_Start_IT+0x76>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d2:	d018      	beq.n	8002a06 <HAL_TIM_Base_Start_IT+0x76>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a1f      	ldr	r2, [pc, #124]	; (8002a58 <HAL_TIM_Base_Start_IT+0xc8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d013      	beq.n	8002a06 <HAL_TIM_Base_Start_IT+0x76>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a1e      	ldr	r2, [pc, #120]	; (8002a5c <HAL_TIM_Base_Start_IT+0xcc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d00e      	beq.n	8002a06 <HAL_TIM_Base_Start_IT+0x76>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a1c      	ldr	r2, [pc, #112]	; (8002a60 <HAL_TIM_Base_Start_IT+0xd0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d009      	beq.n	8002a06 <HAL_TIM_Base_Start_IT+0x76>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a1b      	ldr	r2, [pc, #108]	; (8002a64 <HAL_TIM_Base_Start_IT+0xd4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d004      	beq.n	8002a06 <HAL_TIM_Base_Start_IT+0x76>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a19      	ldr	r2, [pc, #100]	; (8002a68 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d115      	bne.n	8002a32 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	4b17      	ldr	r3, [pc, #92]	; (8002a6c <HAL_TIM_Base_Start_IT+0xdc>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b06      	cmp	r3, #6
 8002a16:	d015      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0xb4>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1e:	d011      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a30:	e008      	b.n	8002a44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0201 	orr.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	e000      	b.n	8002a46 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	40012c00 	.word	0x40012c00
 8002a58:	40000400 	.word	0x40000400
 8002a5c:	40000800 	.word	0x40000800
 8002a60:	40000c00 	.word	0x40000c00
 8002a64:	40013400 	.word	0x40013400
 8002a68:	40014000 	.word	0x40014000
 8002a6c:	00010007 	.word	0x00010007

08002a70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d020      	beq.n	8002ad4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01b      	beq.n	8002ad4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0202 	mvn.w	r2, #2
 8002aa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f8e4 	bl	8002c88 <HAL_TIM_IC_CaptureCallback>
 8002ac0:	e005      	b.n	8002ace <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f8d6 	bl	8002c74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f8e7 	bl	8002c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d020      	beq.n	8002b20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d01b      	beq.n	8002b20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0204 	mvn.w	r2, #4
 8002af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2202      	movs	r2, #2
 8002af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f8be 	bl	8002c88 <HAL_TIM_IC_CaptureCallback>
 8002b0c:	e005      	b.n	8002b1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f8b0 	bl	8002c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f8c1 	bl	8002c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d020      	beq.n	8002b6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01b      	beq.n	8002b6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0208 	mvn.w	r2, #8
 8002b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2204      	movs	r2, #4
 8002b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f898 	bl	8002c88 <HAL_TIM_IC_CaptureCallback>
 8002b58:	e005      	b.n	8002b66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f88a 	bl	8002c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f89b 	bl	8002c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f003 0310 	and.w	r3, r3, #16
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d020      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01b      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0210 	mvn.w	r2, #16
 8002b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2208      	movs	r2, #8
 8002b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f872 	bl	8002c88 <HAL_TIM_IC_CaptureCallback>
 8002ba4:	e005      	b.n	8002bb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f864 	bl	8002c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f875 	bl	8002c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00c      	beq.n	8002bdc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0201 	mvn.w	r2, #1
 8002bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7fd fe0a 	bl	80007f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00c      	beq.n	8002c00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d007      	beq.n	8002c00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f906 	bl	8002e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00c      	beq.n	8002c24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d007      	beq.n	8002c24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f8fe 	bl	8002e20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00c      	beq.n	8002c48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d007      	beq.n	8002c48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f834 	bl	8002cb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f003 0320 	and.w	r3, r3, #32
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00c      	beq.n	8002c6c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f003 0320 	and.w	r3, r3, #32
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0220 	mvn.w	r2, #32
 8002c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f8c6 	bl	8002df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a40      	ldr	r2, [pc, #256]	; (8002dd8 <TIM_Base_SetConfig+0x114>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d013      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce2:	d00f      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a3d      	ldr	r2, [pc, #244]	; (8002ddc <TIM_Base_SetConfig+0x118>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d00b      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a3c      	ldr	r2, [pc, #240]	; (8002de0 <TIM_Base_SetConfig+0x11c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d007      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a3b      	ldr	r2, [pc, #236]	; (8002de4 <TIM_Base_SetConfig+0x120>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d003      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a3a      	ldr	r2, [pc, #232]	; (8002de8 <TIM_Base_SetConfig+0x124>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d108      	bne.n	8002d16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a2f      	ldr	r2, [pc, #188]	; (8002dd8 <TIM_Base_SetConfig+0x114>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d01f      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d24:	d01b      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a2c      	ldr	r2, [pc, #176]	; (8002ddc <TIM_Base_SetConfig+0x118>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d017      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a2b      	ldr	r2, [pc, #172]	; (8002de0 <TIM_Base_SetConfig+0x11c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d013      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a2a      	ldr	r2, [pc, #168]	; (8002de4 <TIM_Base_SetConfig+0x120>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00f      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a29      	ldr	r2, [pc, #164]	; (8002de8 <TIM_Base_SetConfig+0x124>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00b      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a28      	ldr	r2, [pc, #160]	; (8002dec <TIM_Base_SetConfig+0x128>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d007      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a27      	ldr	r2, [pc, #156]	; (8002df0 <TIM_Base_SetConfig+0x12c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d003      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a26      	ldr	r2, [pc, #152]	; (8002df4 <TIM_Base_SetConfig+0x130>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d108      	bne.n	8002d70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <TIM_Base_SetConfig+0x114>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d00f      	beq.n	8002dbc <TIM_Base_SetConfig+0xf8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a12      	ldr	r2, [pc, #72]	; (8002de8 <TIM_Base_SetConfig+0x124>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d00b      	beq.n	8002dbc <TIM_Base_SetConfig+0xf8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a11      	ldr	r2, [pc, #68]	; (8002dec <TIM_Base_SetConfig+0x128>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d007      	beq.n	8002dbc <TIM_Base_SetConfig+0xf8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a10      	ldr	r2, [pc, #64]	; (8002df0 <TIM_Base_SetConfig+0x12c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d003      	beq.n	8002dbc <TIM_Base_SetConfig+0xf8>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a0f      	ldr	r2, [pc, #60]	; (8002df4 <TIM_Base_SetConfig+0x130>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d103      	bne.n	8002dc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	615a      	str	r2, [r3, #20]
}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40012c00 	.word	0x40012c00
 8002ddc:	40000400 	.word	0x40000400
 8002de0:	40000800 	.word	0x40000800
 8002de4:	40000c00 	.word	0x40000c00
 8002de8:	40013400 	.word	0x40013400
 8002dec:	40014000 	.word	0x40014000
 8002df0:	40014400 	.word	0x40014400
 8002df4:	40014800 	.word	0x40014800

08002df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e040      	b.n	8002ec8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fd fd0a 	bl	8000870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2224      	movs	r2, #36	; 0x24
 8002e60:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fb6a 	bl	8003554 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f8af 	bl	8002fe4 <UART_SetConfig>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e01b      	b.n	8002ec8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fbe9 	bl	8003698 <UART_CheckIdleState>
 8002ec6:	4603      	mov	r3, r0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	; 0x28
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	4613      	mov	r3, r2
 8002ede:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d178      	bne.n	8002fda <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_UART_Transmit+0x24>
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e071      	b.n	8002fdc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2221      	movs	r2, #33	; 0x21
 8002f04:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f06:	f7fd feb3 	bl	8000c70 <HAL_GetTick>
 8002f0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	88fa      	ldrh	r2, [r7, #6]
 8002f10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	88fa      	ldrh	r2, [r7, #6]
 8002f18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f24:	d108      	bne.n	8002f38 <HAL_UART_Transmit+0x68>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d104      	bne.n	8002f38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	e003      	b.n	8002f40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f40:	e030      	b.n	8002fa4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2180      	movs	r1, #128	; 0x80
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 fc4b 	bl	80037e8 <UART_WaitOnFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d004      	beq.n	8002f62 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e03c      	b.n	8002fdc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10b      	bne.n	8002f80 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	881a      	ldrh	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f74:	b292      	uxth	r2, r2
 8002f76:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	3302      	adds	r3, #2
 8002f7c:	61bb      	str	r3, [r7, #24]
 8002f7e:	e008      	b.n	8002f92 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	781a      	ldrb	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	b292      	uxth	r2, r2
 8002f8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1c8      	bne.n	8002f42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2140      	movs	r1, #64	; 0x40
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 fc14 	bl	80037e8 <UART_WaitOnFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d004      	beq.n	8002fd0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e005      	b.n	8002fdc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	e000      	b.n	8002fdc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002fda:	2302      	movs	r3, #2
  }
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3720      	adds	r7, #32
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe8:	b08a      	sub	sp, #40	; 0x28
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	431a      	orrs	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	4313      	orrs	r3, r2
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	4ba4      	ldr	r3, [pc, #656]	; (80032a4 <UART_SetConfig+0x2c0>)
 8003014:	4013      	ands	r3, r2
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800301c:	430b      	orrs	r3, r1
 800301e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a99      	ldr	r2, [pc, #612]	; (80032a8 <UART_SetConfig+0x2c4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d004      	beq.n	8003050 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304c:	4313      	orrs	r3, r2
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003060:	430a      	orrs	r2, r1
 8003062:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a90      	ldr	r2, [pc, #576]	; (80032ac <UART_SetConfig+0x2c8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d126      	bne.n	80030bc <UART_SetConfig+0xd8>
 800306e:	4b90      	ldr	r3, [pc, #576]	; (80032b0 <UART_SetConfig+0x2cc>)
 8003070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	2b03      	cmp	r3, #3
 800307a:	d81b      	bhi.n	80030b4 <UART_SetConfig+0xd0>
 800307c:	a201      	add	r2, pc, #4	; (adr r2, 8003084 <UART_SetConfig+0xa0>)
 800307e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003082:	bf00      	nop
 8003084:	08003095 	.word	0x08003095
 8003088:	080030a5 	.word	0x080030a5
 800308c:	0800309d 	.word	0x0800309d
 8003090:	080030ad 	.word	0x080030ad
 8003094:	2301      	movs	r3, #1
 8003096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800309a:	e116      	b.n	80032ca <UART_SetConfig+0x2e6>
 800309c:	2302      	movs	r3, #2
 800309e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030a2:	e112      	b.n	80032ca <UART_SetConfig+0x2e6>
 80030a4:	2304      	movs	r3, #4
 80030a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030aa:	e10e      	b.n	80032ca <UART_SetConfig+0x2e6>
 80030ac:	2308      	movs	r3, #8
 80030ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030b2:	e10a      	b.n	80032ca <UART_SetConfig+0x2e6>
 80030b4:	2310      	movs	r3, #16
 80030b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ba:	e106      	b.n	80032ca <UART_SetConfig+0x2e6>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a7c      	ldr	r2, [pc, #496]	; (80032b4 <UART_SetConfig+0x2d0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d138      	bne.n	8003138 <UART_SetConfig+0x154>
 80030c6:	4b7a      	ldr	r3, [pc, #488]	; (80032b0 <UART_SetConfig+0x2cc>)
 80030c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b0c      	cmp	r3, #12
 80030d2:	d82d      	bhi.n	8003130 <UART_SetConfig+0x14c>
 80030d4:	a201      	add	r2, pc, #4	; (adr r2, 80030dc <UART_SetConfig+0xf8>)
 80030d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030da:	bf00      	nop
 80030dc:	08003111 	.word	0x08003111
 80030e0:	08003131 	.word	0x08003131
 80030e4:	08003131 	.word	0x08003131
 80030e8:	08003131 	.word	0x08003131
 80030ec:	08003121 	.word	0x08003121
 80030f0:	08003131 	.word	0x08003131
 80030f4:	08003131 	.word	0x08003131
 80030f8:	08003131 	.word	0x08003131
 80030fc:	08003119 	.word	0x08003119
 8003100:	08003131 	.word	0x08003131
 8003104:	08003131 	.word	0x08003131
 8003108:	08003131 	.word	0x08003131
 800310c:	08003129 	.word	0x08003129
 8003110:	2300      	movs	r3, #0
 8003112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003116:	e0d8      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003118:	2302      	movs	r3, #2
 800311a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800311e:	e0d4      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003120:	2304      	movs	r3, #4
 8003122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003126:	e0d0      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003128:	2308      	movs	r3, #8
 800312a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800312e:	e0cc      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003130:	2310      	movs	r3, #16
 8003132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003136:	e0c8      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a5e      	ldr	r2, [pc, #376]	; (80032b8 <UART_SetConfig+0x2d4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d125      	bne.n	800318e <UART_SetConfig+0x1aa>
 8003142:	4b5b      	ldr	r3, [pc, #364]	; (80032b0 <UART_SetConfig+0x2cc>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003148:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800314c:	2b30      	cmp	r3, #48	; 0x30
 800314e:	d016      	beq.n	800317e <UART_SetConfig+0x19a>
 8003150:	2b30      	cmp	r3, #48	; 0x30
 8003152:	d818      	bhi.n	8003186 <UART_SetConfig+0x1a2>
 8003154:	2b20      	cmp	r3, #32
 8003156:	d00a      	beq.n	800316e <UART_SetConfig+0x18a>
 8003158:	2b20      	cmp	r3, #32
 800315a:	d814      	bhi.n	8003186 <UART_SetConfig+0x1a2>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <UART_SetConfig+0x182>
 8003160:	2b10      	cmp	r3, #16
 8003162:	d008      	beq.n	8003176 <UART_SetConfig+0x192>
 8003164:	e00f      	b.n	8003186 <UART_SetConfig+0x1a2>
 8003166:	2300      	movs	r3, #0
 8003168:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800316c:	e0ad      	b.n	80032ca <UART_SetConfig+0x2e6>
 800316e:	2302      	movs	r3, #2
 8003170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003174:	e0a9      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003176:	2304      	movs	r3, #4
 8003178:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800317c:	e0a5      	b.n	80032ca <UART_SetConfig+0x2e6>
 800317e:	2308      	movs	r3, #8
 8003180:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003184:	e0a1      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003186:	2310      	movs	r3, #16
 8003188:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800318c:	e09d      	b.n	80032ca <UART_SetConfig+0x2e6>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a4a      	ldr	r2, [pc, #296]	; (80032bc <UART_SetConfig+0x2d8>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d125      	bne.n	80031e4 <UART_SetConfig+0x200>
 8003198:	4b45      	ldr	r3, [pc, #276]	; (80032b0 <UART_SetConfig+0x2cc>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031a2:	2bc0      	cmp	r3, #192	; 0xc0
 80031a4:	d016      	beq.n	80031d4 <UART_SetConfig+0x1f0>
 80031a6:	2bc0      	cmp	r3, #192	; 0xc0
 80031a8:	d818      	bhi.n	80031dc <UART_SetConfig+0x1f8>
 80031aa:	2b80      	cmp	r3, #128	; 0x80
 80031ac:	d00a      	beq.n	80031c4 <UART_SetConfig+0x1e0>
 80031ae:	2b80      	cmp	r3, #128	; 0x80
 80031b0:	d814      	bhi.n	80031dc <UART_SetConfig+0x1f8>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <UART_SetConfig+0x1d8>
 80031b6:	2b40      	cmp	r3, #64	; 0x40
 80031b8:	d008      	beq.n	80031cc <UART_SetConfig+0x1e8>
 80031ba:	e00f      	b.n	80031dc <UART_SetConfig+0x1f8>
 80031bc:	2300      	movs	r3, #0
 80031be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031c2:	e082      	b.n	80032ca <UART_SetConfig+0x2e6>
 80031c4:	2302      	movs	r3, #2
 80031c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ca:	e07e      	b.n	80032ca <UART_SetConfig+0x2e6>
 80031cc:	2304      	movs	r3, #4
 80031ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031d2:	e07a      	b.n	80032ca <UART_SetConfig+0x2e6>
 80031d4:	2308      	movs	r3, #8
 80031d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031da:	e076      	b.n	80032ca <UART_SetConfig+0x2e6>
 80031dc:	2310      	movs	r3, #16
 80031de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031e2:	e072      	b.n	80032ca <UART_SetConfig+0x2e6>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a35      	ldr	r2, [pc, #212]	; (80032c0 <UART_SetConfig+0x2dc>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d12a      	bne.n	8003244 <UART_SetConfig+0x260>
 80031ee:	4b30      	ldr	r3, [pc, #192]	; (80032b0 <UART_SetConfig+0x2cc>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031fc:	d01a      	beq.n	8003234 <UART_SetConfig+0x250>
 80031fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003202:	d81b      	bhi.n	800323c <UART_SetConfig+0x258>
 8003204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003208:	d00c      	beq.n	8003224 <UART_SetConfig+0x240>
 800320a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800320e:	d815      	bhi.n	800323c <UART_SetConfig+0x258>
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <UART_SetConfig+0x238>
 8003214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003218:	d008      	beq.n	800322c <UART_SetConfig+0x248>
 800321a:	e00f      	b.n	800323c <UART_SetConfig+0x258>
 800321c:	2300      	movs	r3, #0
 800321e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003222:	e052      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003224:	2302      	movs	r3, #2
 8003226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800322a:	e04e      	b.n	80032ca <UART_SetConfig+0x2e6>
 800322c:	2304      	movs	r3, #4
 800322e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003232:	e04a      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003234:	2308      	movs	r3, #8
 8003236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800323a:	e046      	b.n	80032ca <UART_SetConfig+0x2e6>
 800323c:	2310      	movs	r3, #16
 800323e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003242:	e042      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a17      	ldr	r2, [pc, #92]	; (80032a8 <UART_SetConfig+0x2c4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d13a      	bne.n	80032c4 <UART_SetConfig+0x2e0>
 800324e:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <UART_SetConfig+0x2cc>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003254:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003258:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800325c:	d01a      	beq.n	8003294 <UART_SetConfig+0x2b0>
 800325e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003262:	d81b      	bhi.n	800329c <UART_SetConfig+0x2b8>
 8003264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003268:	d00c      	beq.n	8003284 <UART_SetConfig+0x2a0>
 800326a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800326e:	d815      	bhi.n	800329c <UART_SetConfig+0x2b8>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <UART_SetConfig+0x298>
 8003274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003278:	d008      	beq.n	800328c <UART_SetConfig+0x2a8>
 800327a:	e00f      	b.n	800329c <UART_SetConfig+0x2b8>
 800327c:	2300      	movs	r3, #0
 800327e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003282:	e022      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003284:	2302      	movs	r3, #2
 8003286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800328a:	e01e      	b.n	80032ca <UART_SetConfig+0x2e6>
 800328c:	2304      	movs	r3, #4
 800328e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003292:	e01a      	b.n	80032ca <UART_SetConfig+0x2e6>
 8003294:	2308      	movs	r3, #8
 8003296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800329a:	e016      	b.n	80032ca <UART_SetConfig+0x2e6>
 800329c:	2310      	movs	r3, #16
 800329e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032a2:	e012      	b.n	80032ca <UART_SetConfig+0x2e6>
 80032a4:	efff69f3 	.word	0xefff69f3
 80032a8:	40008000 	.word	0x40008000
 80032ac:	40013800 	.word	0x40013800
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40004400 	.word	0x40004400
 80032b8:	40004800 	.word	0x40004800
 80032bc:	40004c00 	.word	0x40004c00
 80032c0:	40005000 	.word	0x40005000
 80032c4:	2310      	movs	r3, #16
 80032c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a9f      	ldr	r2, [pc, #636]	; (800354c <UART_SetConfig+0x568>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d17a      	bne.n	80033ca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d824      	bhi.n	8003326 <UART_SetConfig+0x342>
 80032dc:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <UART_SetConfig+0x300>)
 80032de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e2:	bf00      	nop
 80032e4:	08003309 	.word	0x08003309
 80032e8:	08003327 	.word	0x08003327
 80032ec:	08003311 	.word	0x08003311
 80032f0:	08003327 	.word	0x08003327
 80032f4:	08003317 	.word	0x08003317
 80032f8:	08003327 	.word	0x08003327
 80032fc:	08003327 	.word	0x08003327
 8003300:	08003327 	.word	0x08003327
 8003304:	0800331f 	.word	0x0800331f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003308:	f7fe fd58 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 800330c:	61f8      	str	r0, [r7, #28]
        break;
 800330e:	e010      	b.n	8003332 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003310:	4b8f      	ldr	r3, [pc, #572]	; (8003550 <UART_SetConfig+0x56c>)
 8003312:	61fb      	str	r3, [r7, #28]
        break;
 8003314:	e00d      	b.n	8003332 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003316:	f7fe fcb9 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 800331a:	61f8      	str	r0, [r7, #28]
        break;
 800331c:	e009      	b.n	8003332 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800331e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003322:	61fb      	str	r3, [r7, #28]
        break;
 8003324:	e005      	b.n	8003332 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003330:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80fb 	beq.w	8003530 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	4413      	add	r3, r2
 8003344:	69fa      	ldr	r2, [r7, #28]
 8003346:	429a      	cmp	r2, r3
 8003348:	d305      	bcc.n	8003356 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003350:	69fa      	ldr	r2, [r7, #28]
 8003352:	429a      	cmp	r2, r3
 8003354:	d903      	bls.n	800335e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800335c:	e0e8      	b.n	8003530 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	2200      	movs	r2, #0
 8003362:	461c      	mov	r4, r3
 8003364:	4615      	mov	r5, r2
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	022b      	lsls	r3, r5, #8
 8003370:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003374:	0222      	lsls	r2, r4, #8
 8003376:	68f9      	ldr	r1, [r7, #12]
 8003378:	6849      	ldr	r1, [r1, #4]
 800337a:	0849      	lsrs	r1, r1, #1
 800337c:	2000      	movs	r0, #0
 800337e:	4688      	mov	r8, r1
 8003380:	4681      	mov	r9, r0
 8003382:	eb12 0a08 	adds.w	sl, r2, r8
 8003386:	eb43 0b09 	adc.w	fp, r3, r9
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	603b      	str	r3, [r7, #0]
 8003392:	607a      	str	r2, [r7, #4]
 8003394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003398:	4650      	mov	r0, sl
 800339a:	4659      	mov	r1, fp
 800339c:	f7fc ff30 	bl	8000200 <__aeabi_uldivmod>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4613      	mov	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ae:	d308      	bcc.n	80033c2 <UART_SetConfig+0x3de>
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033b6:	d204      	bcs.n	80033c2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	60da      	str	r2, [r3, #12]
 80033c0:	e0b6      	b.n	8003530 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033c8:	e0b2      	b.n	8003530 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d2:	d15e      	bne.n	8003492 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80033d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d828      	bhi.n	800342e <UART_SetConfig+0x44a>
 80033dc:	a201      	add	r2, pc, #4	; (adr r2, 80033e4 <UART_SetConfig+0x400>)
 80033de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e2:	bf00      	nop
 80033e4:	08003409 	.word	0x08003409
 80033e8:	08003411 	.word	0x08003411
 80033ec:	08003419 	.word	0x08003419
 80033f0:	0800342f 	.word	0x0800342f
 80033f4:	0800341f 	.word	0x0800341f
 80033f8:	0800342f 	.word	0x0800342f
 80033fc:	0800342f 	.word	0x0800342f
 8003400:	0800342f 	.word	0x0800342f
 8003404:	08003427 	.word	0x08003427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003408:	f7fe fcd8 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 800340c:	61f8      	str	r0, [r7, #28]
        break;
 800340e:	e014      	b.n	800343a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003410:	f7fe fcea 	bl	8001de8 <HAL_RCC_GetPCLK2Freq>
 8003414:	61f8      	str	r0, [r7, #28]
        break;
 8003416:	e010      	b.n	800343a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003418:	4b4d      	ldr	r3, [pc, #308]	; (8003550 <UART_SetConfig+0x56c>)
 800341a:	61fb      	str	r3, [r7, #28]
        break;
 800341c:	e00d      	b.n	800343a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800341e:	f7fe fc35 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 8003422:	61f8      	str	r0, [r7, #28]
        break;
 8003424:	e009      	b.n	800343a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800342a:	61fb      	str	r3, [r7, #28]
        break;
 800342c:	e005      	b.n	800343a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003438:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d077      	beq.n	8003530 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	005a      	lsls	r2, r3, #1
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	085b      	lsrs	r3, r3, #1
 800344a:	441a      	add	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	fbb2 f3f3 	udiv	r3, r2, r3
 8003454:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2b0f      	cmp	r3, #15
 800345a:	d916      	bls.n	800348a <UART_SetConfig+0x4a6>
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003462:	d212      	bcs.n	800348a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	b29b      	uxth	r3, r3
 8003468:	f023 030f 	bic.w	r3, r3, #15
 800346c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	085b      	lsrs	r3, r3, #1
 8003472:	b29b      	uxth	r3, r3
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	b29a      	uxth	r2, r3
 800347a:	8afb      	ldrh	r3, [r7, #22]
 800347c:	4313      	orrs	r3, r2
 800347e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	8afa      	ldrh	r2, [r7, #22]
 8003486:	60da      	str	r2, [r3, #12]
 8003488:	e052      	b.n	8003530 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003490:	e04e      	b.n	8003530 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003492:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003496:	2b08      	cmp	r3, #8
 8003498:	d827      	bhi.n	80034ea <UART_SetConfig+0x506>
 800349a:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <UART_SetConfig+0x4bc>)
 800349c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a0:	080034c5 	.word	0x080034c5
 80034a4:	080034cd 	.word	0x080034cd
 80034a8:	080034d5 	.word	0x080034d5
 80034ac:	080034eb 	.word	0x080034eb
 80034b0:	080034db 	.word	0x080034db
 80034b4:	080034eb 	.word	0x080034eb
 80034b8:	080034eb 	.word	0x080034eb
 80034bc:	080034eb 	.word	0x080034eb
 80034c0:	080034e3 	.word	0x080034e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034c4:	f7fe fc7a 	bl	8001dbc <HAL_RCC_GetPCLK1Freq>
 80034c8:	61f8      	str	r0, [r7, #28]
        break;
 80034ca:	e014      	b.n	80034f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034cc:	f7fe fc8c 	bl	8001de8 <HAL_RCC_GetPCLK2Freq>
 80034d0:	61f8      	str	r0, [r7, #28]
        break;
 80034d2:	e010      	b.n	80034f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034d4:	4b1e      	ldr	r3, [pc, #120]	; (8003550 <UART_SetConfig+0x56c>)
 80034d6:	61fb      	str	r3, [r7, #28]
        break;
 80034d8:	e00d      	b.n	80034f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034da:	f7fe fbd7 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 80034de:	61f8      	str	r0, [r7, #28]
        break;
 80034e0:	e009      	b.n	80034f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034e6:	61fb      	str	r3, [r7, #28]
        break;
 80034e8:	e005      	b.n	80034f6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034f4:	bf00      	nop
    }

    if (pclk != 0U)
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d019      	beq.n	8003530 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	085a      	lsrs	r2, r3, #1
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	441a      	add	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	fbb2 f3f3 	udiv	r3, r2, r3
 800350e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	2b0f      	cmp	r3, #15
 8003514:	d909      	bls.n	800352a <UART_SetConfig+0x546>
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351c:	d205      	bcs.n	800352a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60da      	str	r2, [r3, #12]
 8003528:	e002      	b.n	8003530 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800353c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003540:	4618      	mov	r0, r3
 8003542:	3728      	adds	r7, #40	; 0x28
 8003544:	46bd      	mov	sp, r7
 8003546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800354a:	bf00      	nop
 800354c:	40008000 	.word	0x40008000
 8003550:	00f42400 	.word	0x00f42400

08003554 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	f003 0304 	and.w	r3, r3, #4
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003630:	2b00      	cmp	r3, #0
 8003632:	d01a      	beq.n	800366a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003652:	d10a      	bne.n	800366a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	605a      	str	r2, [r3, #4]
  }
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b098      	sub	sp, #96	; 0x60
 800369c:	af02      	add	r7, sp, #8
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036a8:	f7fd fae2 	bl	8000c70 <HAL_GetTick>
 80036ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d12e      	bne.n	800371a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036c4:	2200      	movs	r2, #0
 80036c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f88c 	bl	80037e8 <UART_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d021      	beq.n	800371a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036de:	e853 3f00 	ldrex	r3, [r3]
 80036e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80036e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ea:	653b      	str	r3, [r7, #80]	; 0x50
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036f4:	647b      	str	r3, [r7, #68]	; 0x44
 80036f6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036fc:	e841 2300 	strex	r3, r2, [r1]
 8003700:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e6      	bne.n	80036d6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e062      	b.n	80037e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b04      	cmp	r3, #4
 8003726:	d149      	bne.n	80037bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003728:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003730:	2200      	movs	r2, #0
 8003732:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f856 	bl	80037e8 <UART_WaitOnFlagUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d03c      	beq.n	80037bc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	e853 3f00 	ldrex	r3, [r3]
 800374e:	623b      	str	r3, [r7, #32]
   return(result);
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	461a      	mov	r2, r3
 800375e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003760:	633b      	str	r3, [r7, #48]	; 0x30
 8003762:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003764:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003768:	e841 2300 	strex	r3, r2, [r1]
 800376c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e6      	bne.n	8003742 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3308      	adds	r3, #8
 800377a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	60fb      	str	r3, [r7, #12]
   return(result);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	64bb      	str	r3, [r7, #72]	; 0x48
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	3308      	adds	r3, #8
 8003792:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003794:	61fa      	str	r2, [r7, #28]
 8003796:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003798:	69b9      	ldr	r1, [r7, #24]
 800379a:	69fa      	ldr	r2, [r7, #28]
 800379c:	e841 2300 	strex	r3, r2, [r1]
 80037a0:	617b      	str	r3, [r7, #20]
   return(result);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e5      	bne.n	8003774 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e011      	b.n	80037e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3758      	adds	r7, #88	; 0x58
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f8:	e049      	b.n	800388e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003800:	d045      	beq.n	800388e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003802:	f7fd fa35 	bl	8000c70 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	429a      	cmp	r2, r3
 8003810:	d302      	bcc.n	8003818 <UART_WaitOnFlagUntilTimeout+0x30>
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e048      	b.n	80038ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d031      	beq.n	800388e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b08      	cmp	r3, #8
 8003836:	d110      	bne.n	800385a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2208      	movs	r2, #8
 800383e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f838 	bl	80038b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2208      	movs	r2, #8
 800384a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e029      	b.n	80038ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003868:	d111      	bne.n	800388e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003872:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 f81e 	bl	80038b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2220      	movs	r2, #32
 800387e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e00f      	b.n	80038ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69da      	ldr	r2, [r3, #28]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4013      	ands	r3, r2
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	429a      	cmp	r2, r3
 800389c:	bf0c      	ite	eq
 800389e:	2301      	moveq	r3, #1
 80038a0:	2300      	movne	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	461a      	mov	r2, r3
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d0a6      	beq.n	80037fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b095      	sub	sp, #84	; 0x54
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c6:	e853 3f00 	ldrex	r3, [r3]
 80038ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	461a      	mov	r2, r3
 80038da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038dc:	643b      	str	r3, [r7, #64]	; 0x40
 80038de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038e4:	e841 2300 	strex	r3, r2, [r1]
 80038e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1e6      	bne.n	80038be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3308      	adds	r3, #8
 80038f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	e853 3f00 	ldrex	r3, [r3]
 80038fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f023 0301 	bic.w	r3, r3, #1
 8003906:	64bb      	str	r3, [r7, #72]	; 0x48
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3308      	adds	r3, #8
 800390e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003910:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003912:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e5      	bne.n	80038f0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003928:	2b01      	cmp	r3, #1
 800392a:	d118      	bne.n	800395e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	e853 3f00 	ldrex	r3, [r3]
 8003938:	60bb      	str	r3, [r7, #8]
   return(result);
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f023 0310 	bic.w	r3, r3, #16
 8003940:	647b      	str	r3, [r7, #68]	; 0x44
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394e:	6979      	ldr	r1, [r7, #20]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	e841 2300 	strex	r3, r2, [r1]
 8003956:	613b      	str	r3, [r7, #16]
   return(result);
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1e6      	bne.n	800392c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2220      	movs	r2, #32
 8003962:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003972:	bf00      	nop
 8003974:	3754      	adds	r7, #84	; 0x54
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
	...

08003980 <__NVIC_SetPriority>:
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	6039      	str	r1, [r7, #0]
 800398a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800398c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003990:	2b00      	cmp	r3, #0
 8003992:	db0a      	blt.n	80039aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	b2da      	uxtb	r2, r3
 8003998:	490c      	ldr	r1, [pc, #48]	; (80039cc <__NVIC_SetPriority+0x4c>)
 800399a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399e:	0112      	lsls	r2, r2, #4
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	440b      	add	r3, r1
 80039a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80039a8:	e00a      	b.n	80039c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	4908      	ldr	r1, [pc, #32]	; (80039d0 <__NVIC_SetPriority+0x50>)
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	3b04      	subs	r3, #4
 80039b8:	0112      	lsls	r2, r2, #4
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	440b      	add	r3, r1
 80039be:	761a      	strb	r2, [r3, #24]
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	e000e100 	.word	0xe000e100
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80039d8:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <SysTick_Handler+0x1c>)
 80039da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80039dc:	f002 f99a 	bl	8005d14 <xTaskGetSchedulerState>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d001      	beq.n	80039ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80039e6:	f003 f87f 	bl	8006ae8 <xPortSysTickHandler>
  }
}
 80039ea:	bf00      	nop
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	e000e010 	.word	0xe000e010

080039f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80039f8:	2100      	movs	r1, #0
 80039fa:	f06f 0004 	mvn.w	r0, #4
 80039fe:	f7ff ffbf 	bl	8003980 <__NVIC_SetPriority>
#endif
}
 8003a02:	bf00      	nop
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a0e:	f3ef 8305 	mrs	r3, IPSR
 8003a12:	603b      	str	r3, [r7, #0]
  return(result);
 8003a14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003a1a:	f06f 0305 	mvn.w	r3, #5
 8003a1e:	607b      	str	r3, [r7, #4]
 8003a20:	e00c      	b.n	8003a3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003a22:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <osKernelInitialize+0x44>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d105      	bne.n	8003a36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003a2a:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <osKernelInitialize+0x44>)
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	607b      	str	r3, [r7, #4]
 8003a34:	e002      	b.n	8003a3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a3c:	687b      	ldr	r3, [r7, #4]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	20000178 	.word	0x20000178

08003a50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a56:	f3ef 8305 	mrs	r3, IPSR
 8003a5a:	603b      	str	r3, [r7, #0]
  return(result);
 8003a5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003a62:	f06f 0305 	mvn.w	r3, #5
 8003a66:	607b      	str	r3, [r7, #4]
 8003a68:	e010      	b.n	8003a8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <osKernelStart+0x48>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d109      	bne.n	8003a86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003a72:	f7ff ffbf 	bl	80039f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003a76:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <osKernelStart+0x48>)
 8003a78:	2202      	movs	r2, #2
 8003a7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003a7c:	f001 fcde 	bl	800543c <vTaskStartScheduler>
      stat = osOK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	607b      	str	r3, [r7, #4]
 8003a84:	e002      	b.n	8003a8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a8c:	687b      	ldr	r3, [r7, #4]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20000178 	.word	0x20000178

08003a9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08e      	sub	sp, #56	; 0x38
 8003aa0:	af04      	add	r7, sp, #16
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003aac:	f3ef 8305 	mrs	r3, IPSR
 8003ab0:	617b      	str	r3, [r7, #20]
  return(result);
 8003ab2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d17e      	bne.n	8003bb6 <osThreadNew+0x11a>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d07b      	beq.n	8003bb6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003abe:	2380      	movs	r3, #128	; 0x80
 8003ac0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003ac2:	2318      	movs	r3, #24
 8003ac4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ace:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d045      	beq.n	8003b62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <osThreadNew+0x48>
        name = attr->name;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <osThreadNew+0x6e>
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2b38      	cmp	r3, #56	; 0x38
 8003afc:	d805      	bhi.n	8003b0a <osThreadNew+0x6e>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <osThreadNew+0x72>
        return (NULL);
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e054      	b.n	8003bb8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	089b      	lsrs	r3, r3, #2
 8003b1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00e      	beq.n	8003b44 <osThreadNew+0xa8>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	2ba7      	cmp	r3, #167	; 0xa7
 8003b2c:	d90a      	bls.n	8003b44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d006      	beq.n	8003b44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <osThreadNew+0xa8>
        mem = 1;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	61bb      	str	r3, [r7, #24]
 8003b42:	e010      	b.n	8003b66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10c      	bne.n	8003b66 <osThreadNew+0xca>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d108      	bne.n	8003b66 <osThreadNew+0xca>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d104      	bne.n	8003b66 <osThreadNew+0xca>
          mem = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	e001      	b.n	8003b66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d110      	bne.n	8003b8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b74:	9202      	str	r2, [sp, #8]
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	6a3a      	ldr	r2, [r7, #32]
 8003b80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f001 fa6e 	bl	8005064 <xTaskCreateStatic>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	e013      	b.n	8003bb6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d110      	bne.n	8003bb6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	f107 0310 	add.w	r3, r7, #16
 8003b9c:	9301      	str	r3, [sp, #4]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f001 fab9 	bl	800511e <xTaskCreate>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d001      	beq.n	8003bb6 <osThreadNew+0x11a>
            hTask = NULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003bb6:	693b      	ldr	r3, [r7, #16]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3728      	adds	r7, #40	; 0x28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bc8:	f3ef 8305 	mrs	r3, IPSR
 8003bcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <osDelay+0x1c>
    stat = osErrorISR;
 8003bd4:	f06f 0305 	mvn.w	r3, #5
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	e007      	b.n	8003bec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d002      	beq.n	8003bec <osDelay+0x2c>
      vTaskDelay(ticks);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f001 fbf4 	bl	80053d4 <vTaskDelay>
    }
  }

  return (stat);
 8003bec:	68fb      	ldr	r3, [r7, #12]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b088      	sub	sp, #32
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c02:	f3ef 8305 	mrs	r3, IPSR
 8003c06:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c08:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d174      	bne.n	8003cf8 <osMutexNew+0x102>
    if (attr != NULL) {
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <osMutexNew+0x26>
      type = attr->attr_bits;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	e001      	b.n	8003c20 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <osMutexNew+0x3a>
      rmtx = 1U;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	e001      	b.n	8003c34 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d15c      	bne.n	8003cf8 <osMutexNew+0x102>
      mem = -1;
 8003c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c42:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d015      	beq.n	8003c76 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d006      	beq.n	8003c60 <osMutexNew+0x6a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	2b4f      	cmp	r3, #79	; 0x4f
 8003c58:	d902      	bls.n	8003c60 <osMutexNew+0x6a>
          mem = 1;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	e00c      	b.n	8003c7a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d108      	bne.n	8003c7a <osMutexNew+0x84>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d104      	bne.n	8003c7a <osMutexNew+0x84>
            mem = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	613b      	str	r3, [r7, #16]
 8003c74:	e001      	b.n	8003c7a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003c76:	2300      	movs	r3, #0
 8003c78:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d112      	bne.n	8003ca6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	2004      	movs	r0, #4
 8003c8e:	f000 fba0 	bl	80043d2 <xQueueCreateMutexStatic>
 8003c92:	61f8      	str	r0, [r7, #28]
 8003c94:	e016      	b.n	8003cc4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	f000 fb98 	bl	80043d2 <xQueueCreateMutexStatic>
 8003ca2:	61f8      	str	r0, [r7, #28]
 8003ca4:	e00e      	b.n	8003cc4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10b      	bne.n	8003cc4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d004      	beq.n	8003cbc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003cb2:	2004      	movs	r0, #4
 8003cb4:	f000 fb75 	bl	80043a2 <xQueueCreateMutex>
 8003cb8:	61f8      	str	r0, [r7, #28]
 8003cba:	e003      	b.n	8003cc4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	f000 fb70 	bl	80043a2 <xQueueCreateMutex>
 8003cc2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00c      	beq.n	8003ce4 <osMutexNew+0xee>
        if (attr != NULL) {
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <osMutexNew+0xe2>
          name = attr->name;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	e001      	b.n	8003cdc <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003cdc:	68f9      	ldr	r1, [r7, #12]
 8003cde:	69f8      	ldr	r0, [r7, #28]
 8003ce0:	f001 f938 	bl	8004f54 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d006      	beq.n	8003cf8 <osMutexNew+0x102>
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f043 0301 	orr.w	r3, r3, #1
 8003cf6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003cf8:	69fb      	ldr	r3, [r7, #28]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3720      	adds	r7, #32
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b086      	sub	sp, #24
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f023 0301 	bic.w	r3, r3, #1
 8003d12:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d20:	f3ef 8305 	mrs	r3, IPSR
 8003d24:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d26:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8003d2c:	f06f 0305 	mvn.w	r3, #5
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	e02c      	b.n	8003d8e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d103      	bne.n	8003d42 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8003d3a:	f06f 0303 	mvn.w	r3, #3
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	e025      	b.n	8003d8e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d011      	beq.n	8003d6c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003d48:	6839      	ldr	r1, [r7, #0]
 8003d4a:	6938      	ldr	r0, [r7, #16]
 8003d4c:	f000 fb90 	bl	8004470 <xQueueTakeMutexRecursive>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d01b      	beq.n	8003d8e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8003d5c:	f06f 0301 	mvn.w	r3, #1
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	e014      	b.n	8003d8e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003d64:	f06f 0302 	mvn.w	r3, #2
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	e010      	b.n	8003d8e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003d6c:	6839      	ldr	r1, [r7, #0]
 8003d6e:	6938      	ldr	r0, [r7, #16]
 8003d70:	f000 fe98 	bl	8004aa4 <xQueueSemaphoreTake>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d009      	beq.n	8003d8e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8003d80:	f06f 0301 	mvn.w	r3, #1
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	e002      	b.n	8003d8e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003d88:	f06f 0302 	mvn.w	r3, #2
 8003d8c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8003d8e:	697b      	ldr	r3, [r7, #20]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f023 0301 	bic.w	r3, r3, #1
 8003da6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003db4:	f3ef 8305 	mrs	r3, IPSR
 8003db8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dba:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <osMutexRelease+0x30>
    stat = osErrorISR;
 8003dc0:	f06f 0305 	mvn.w	r3, #5
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	e01f      	b.n	8003e08 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d103      	bne.n	8003dd6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8003dce:	f06f 0303 	mvn.w	r3, #3
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	e018      	b.n	8003e08 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d009      	beq.n	8003df0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003ddc:	6938      	ldr	r0, [r7, #16]
 8003dde:	f000 fb13 	bl	8004408 <xQueueGiveMutexRecursive>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d00f      	beq.n	8003e08 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003de8:	f06f 0302 	mvn.w	r3, #2
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	e00b      	b.n	8003e08 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003df0:	2300      	movs	r3, #0
 8003df2:	2200      	movs	r2, #0
 8003df4:	2100      	movs	r1, #0
 8003df6:	6938      	ldr	r0, [r7, #16]
 8003df8:	f000 fbda 	bl	80045b0 <xQueueGenericSend>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d002      	beq.n	8003e08 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003e02:	f06f 0302 	mvn.w	r3, #2
 8003e06:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003e08:	697b      	ldr	r3, [r7, #20]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b08a      	sub	sp, #40	; 0x28
 8003e16:	af02      	add	r7, sp, #8
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e22:	f3ef 8305 	mrs	r3, IPSR
 8003e26:	613b      	str	r3, [r7, #16]
  return(result);
 8003e28:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d175      	bne.n	8003f1a <osSemaphoreNew+0x108>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d072      	beq.n	8003f1a <osSemaphoreNew+0x108>
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d86e      	bhi.n	8003f1a <osSemaphoreNew+0x108>
    mem = -1;
 8003e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e40:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d015      	beq.n	8003e74 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d006      	beq.n	8003e5e <osSemaphoreNew+0x4c>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	2b4f      	cmp	r3, #79	; 0x4f
 8003e56:	d902      	bls.n	8003e5e <osSemaphoreNew+0x4c>
        mem = 1;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	61bb      	str	r3, [r7, #24]
 8003e5c:	e00c      	b.n	8003e78 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d108      	bne.n	8003e78 <osSemaphoreNew+0x66>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d104      	bne.n	8003e78 <osSemaphoreNew+0x66>
          mem = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61bb      	str	r3, [r7, #24]
 8003e72:	e001      	b.n	8003e78 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e7e:	d04c      	beq.n	8003f1a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d128      	bne.n	8003ed8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d10a      	bne.n	8003ea2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2203      	movs	r2, #3
 8003e92:	9200      	str	r2, [sp, #0]
 8003e94:	2200      	movs	r2, #0
 8003e96:	2100      	movs	r1, #0
 8003e98:	2001      	movs	r0, #1
 8003e9a:	f000 f993 	bl	80041c4 <xQueueGenericCreateStatic>
 8003e9e:	61f8      	str	r0, [r7, #28]
 8003ea0:	e005      	b.n	8003eae <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003ea2:	2203      	movs	r2, #3
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	2001      	movs	r0, #1
 8003ea8:	f000 fa04 	bl	80042b4 <xQueueGenericCreate>
 8003eac:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d022      	beq.n	8003efa <osSemaphoreNew+0xe8>
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d01f      	beq.n	8003efa <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003eba:	2300      	movs	r3, #0
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	69f8      	ldr	r0, [r7, #28]
 8003ec2:	f000 fb75 	bl	80045b0 <xQueueGenericSend>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d016      	beq.n	8003efa <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003ecc:	69f8      	ldr	r0, [r7, #28]
 8003ece:	f000 fef5 	bl	8004cbc <vQueueDelete>
            hSemaphore = NULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61fb      	str	r3, [r7, #28]
 8003ed6:	e010      	b.n	8003efa <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d108      	bne.n	8003ef0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	68b9      	ldr	r1, [r7, #8]
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 faf8 	bl	80044dc <xQueueCreateCountingSemaphoreStatic>
 8003eec:	61f8      	str	r0, [r7, #28]
 8003eee:	e004      	b.n	8003efa <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003ef0:	68b9      	ldr	r1, [r7, #8]
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 fb29 	bl	800454a <xQueueCreateCountingSemaphore>
 8003ef8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00c      	beq.n	8003f1a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <osSemaphoreNew+0xfc>
          name = attr->name;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	e001      	b.n	8003f12 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003f12:	6979      	ldr	r1, [r7, #20]
 8003f14:	69f8      	ldr	r0, [r7, #28]
 8003f16:	f001 f81d 	bl	8004f54 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003f1a:	69fb      	ldr	r3, [r7, #28]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3720      	adds	r7, #32
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4a07      	ldr	r2, [pc, #28]	; (8003f50 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	4a06      	ldr	r2, [pc, #24]	; (8003f54 <vApplicationGetIdleTaskMemory+0x30>)
 8003f3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2280      	movs	r2, #128	; 0x80
 8003f40:	601a      	str	r2, [r3, #0]
}
 8003f42:	bf00      	nop
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	2000017c 	.word	0x2000017c
 8003f54:	20000224 	.word	0x20000224

08003f58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4a07      	ldr	r2, [pc, #28]	; (8003f84 <vApplicationGetTimerTaskMemory+0x2c>)
 8003f68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	4a06      	ldr	r2, [pc, #24]	; (8003f88 <vApplicationGetTimerTaskMemory+0x30>)
 8003f6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f76:	601a      	str	r2, [r3, #0]
}
 8003f78:	bf00      	nop
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	20000424 	.word	0x20000424
 8003f88:	200004cc 	.word	0x200004cc

08003f8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f103 0208 	add.w	r2, r3, #8
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fa4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f103 0208 	add.w	r2, r3, #8
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f103 0208 	add.w	r2, r3, #8
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b085      	sub	sp, #20
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
 8003fee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	601a      	str	r2, [r3, #0]
}
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800402e:	b480      	push	{r7}
 8004030:	b085      	sub	sp, #20
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004044:	d103      	bne.n	800404e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	e00c      	b.n	8004068 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3308      	adds	r3, #8
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	e002      	b.n	800405c <vListInsert+0x2e>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	429a      	cmp	r2, r3
 8004066:	d2f6      	bcs.n	8004056 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	601a      	str	r2, [r3, #0]
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6892      	ldr	r2, [r2, #8]
 80040b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6852      	ldr	r2, [r2, #4]
 80040c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d103      	bne.n	80040d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	1e5a      	subs	r2, r3, #1
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800411a:	bf00      	nop
 800411c:	e7fe      	b.n	800411c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800411e:	f002 fc51 	bl	80069c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412a:	68f9      	ldr	r1, [r7, #12]
 800412c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800412e:	fb01 f303 	mul.w	r3, r1, r3
 8004132:	441a      	add	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414e:	3b01      	subs	r3, #1
 8004150:	68f9      	ldr	r1, [r7, #12]
 8004152:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004154:	fb01 f303 	mul.w	r3, r1, r3
 8004158:	441a      	add	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	22ff      	movs	r2, #255	; 0xff
 8004162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	22ff      	movs	r2, #255	; 0xff
 800416a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d114      	bne.n	800419e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d01a      	beq.n	80041b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	3310      	adds	r3, #16
 8004180:	4618      	mov	r0, r3
 8004182:	f001 fbf5 	bl	8005970 <xTaskRemoveFromEventList>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d012      	beq.n	80041b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800418c:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <xQueueGenericReset+0xcc>)
 800418e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	e009      	b.n	80041b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3310      	adds	r3, #16
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff fef2 	bl	8003f8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3324      	adds	r3, #36	; 0x24
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff feed 	bl	8003f8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041b2:	f002 fc37 	bl	8006a24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041b6:	2301      	movs	r3, #1
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	e000ed04 	.word	0xe000ed04

080041c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08e      	sub	sp, #56	; 0x38
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041ea:	bf00      	nop
 80041ec:	e7fe      	b.n	80041ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10a      	bne.n	800420a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004206:	bf00      	nop
 8004208:	e7fe      	b.n	8004208 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <xQueueGenericCreateStatic+0x52>
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <xQueueGenericCreateStatic+0x56>
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <xQueueGenericCreateStatic+0x58>
 800421a:	2300      	movs	r3, #0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10a      	bne.n	8004236 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	623b      	str	r3, [r7, #32]
}
 8004232:	bf00      	nop
 8004234:	e7fe      	b.n	8004234 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d102      	bne.n	8004242 <xQueueGenericCreateStatic+0x7e>
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <xQueueGenericCreateStatic+0x82>
 8004242:	2301      	movs	r3, #1
 8004244:	e000      	b.n	8004248 <xQueueGenericCreateStatic+0x84>
 8004246:	2300      	movs	r3, #0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10a      	bne.n	8004262 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	61fb      	str	r3, [r7, #28]
}
 800425e:	bf00      	nop
 8004260:	e7fe      	b.n	8004260 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004262:	2350      	movs	r3, #80	; 0x50
 8004264:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b50      	cmp	r3, #80	; 0x50
 800426a:	d00a      	beq.n	8004282 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	61bb      	str	r3, [r7, #24]
}
 800427e:	bf00      	nop
 8004280:	e7fe      	b.n	8004280 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004282:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00d      	beq.n	80042aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800428e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004296:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	4613      	mov	r3, r2
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	68b9      	ldr	r1, [r7, #8]
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 f83f 	bl	8004328 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80042aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3730      	adds	r7, #48	; 0x30
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08a      	sub	sp, #40	; 0x28
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	4613      	mov	r3, r2
 80042c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10a      	bne.n	80042de <xQueueGenericCreate+0x2a>
	__asm volatile
 80042c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	613b      	str	r3, [r7, #16]
}
 80042da:	bf00      	nop
 80042dc:	e7fe      	b.n	80042dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	fb02 f303 	mul.w	r3, r2, r3
 80042e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	3350      	adds	r3, #80	; 0x50
 80042ec:	4618      	mov	r0, r3
 80042ee:	f002 fc8b 	bl	8006c08 <pvPortMalloc>
 80042f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d011      	beq.n	800431e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	3350      	adds	r3, #80	; 0x50
 8004302:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800430c:	79fa      	ldrb	r2, [r7, #7]
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	4613      	mov	r3, r2
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f805 	bl	8004328 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800431e:	69bb      	ldr	r3, [r7, #24]
	}
 8004320:	4618      	mov	r0, r3
 8004322:	3720      	adds	r7, #32
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d103      	bne.n	8004344 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	e002      	b.n	800434a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004356:	2101      	movs	r1, #1
 8004358:	69b8      	ldr	r0, [r7, #24]
 800435a:	f7ff fecb 	bl	80040f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	78fa      	ldrb	r2, [r7, #3]
 8004362:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004366:	bf00      	nop
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800436e:	b580      	push	{r7, lr}
 8004370:	b082      	sub	sp, #8
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00e      	beq.n	800439a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800438e:	2300      	movs	r3, #0
 8004390:	2200      	movs	r2, #0
 8004392:	2100      	movs	r1, #0
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f90b 	bl	80045b0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800439a:	bf00      	nop
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b086      	sub	sp, #24
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	4603      	mov	r3, r0
 80043aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80043ac:	2301      	movs	r3, #1
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	2300      	movs	r3, #0
 80043b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80043b4:	79fb      	ldrb	r3, [r7, #7]
 80043b6:	461a      	mov	r2, r3
 80043b8:	6939      	ldr	r1, [r7, #16]
 80043ba:	6978      	ldr	r0, [r7, #20]
 80043bc:	f7ff ff7a 	bl	80042b4 <xQueueGenericCreate>
 80043c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f7ff ffd3 	bl	800436e <prvInitialiseMutex>

		return xNewQueue;
 80043c8:	68fb      	ldr	r3, [r7, #12]
	}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b088      	sub	sp, #32
 80043d6:	af02      	add	r7, sp, #8
 80043d8:	4603      	mov	r3, r0
 80043da:	6039      	str	r1, [r7, #0]
 80043dc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80043de:	2301      	movs	r3, #1
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	2300      	movs	r3, #0
 80043e4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2200      	movs	r2, #0
 80043ee:	6939      	ldr	r1, [r7, #16]
 80043f0:	6978      	ldr	r0, [r7, #20]
 80043f2:	f7ff fee7 	bl	80041c4 <xQueueGenericCreateStatic>
 80043f6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f7ff ffb8 	bl	800436e <prvInitialiseMutex>

		return xNewQueue;
 80043fe:	68fb      	ldr	r3, [r7, #12]
	}
 8004400:	4618      	mov	r0, r3
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004408:	b590      	push	{r4, r7, lr}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10a      	bne.n	8004430 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	60fb      	str	r3, [r7, #12]
}
 800442c:	bf00      	nop
 800442e:	e7fe      	b.n	800442e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	689c      	ldr	r4, [r3, #8]
 8004434:	f001 fc5e 	bl	8005cf4 <xTaskGetCurrentTaskHandle>
 8004438:	4603      	mov	r3, r0
 800443a:	429c      	cmp	r4, r3
 800443c:	d111      	bne.n	8004462 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	1e5a      	subs	r2, r3, #1
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d105      	bne.n	800445c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004450:	2300      	movs	r3, #0
 8004452:	2200      	movs	r2, #0
 8004454:	2100      	movs	r1, #0
 8004456:	6938      	ldr	r0, [r7, #16]
 8004458:	f000 f8aa 	bl	80045b0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800445c:	2301      	movs	r3, #1
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	e001      	b.n	8004466 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004466:	697b      	ldr	r3, [r7, #20]
	}
 8004468:	4618      	mov	r0, r3
 800446a:	371c      	adds	r7, #28
 800446c:	46bd      	mov	sp, r7
 800446e:	bd90      	pop	{r4, r7, pc}

08004470 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004470:	b590      	push	{r4, r7, lr}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10a      	bne.n	800449a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	60fb      	str	r3, [r7, #12]
}
 8004496:	bf00      	nop
 8004498:	e7fe      	b.n	8004498 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	689c      	ldr	r4, [r3, #8]
 800449e:	f001 fc29 	bl	8005cf4 <xTaskGetCurrentTaskHandle>
 80044a2:	4603      	mov	r3, r0
 80044a4:	429c      	cmp	r4, r3
 80044a6:	d107      	bne.n	80044b8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80044b2:	2301      	movs	r3, #1
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	e00c      	b.n	80044d2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80044b8:	6839      	ldr	r1, [r7, #0]
 80044ba:	6938      	ldr	r0, [r7, #16]
 80044bc:	f000 faf2 	bl	8004aa4 <xQueueSemaphoreTake>
 80044c0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d004      	beq.n	80044d2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80044d2:	697b      	ldr	r3, [r7, #20]
	}
 80044d4:	4618      	mov	r0, r3
 80044d6:	371c      	adds	r7, #28
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd90      	pop	{r4, r7, pc}

080044dc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08a      	sub	sp, #40	; 0x28
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10a      	bne.n	8004504 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	61bb      	str	r3, [r7, #24]
}
 8004500:	bf00      	nop
 8004502:	e7fe      	b.n	8004502 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	429a      	cmp	r2, r3
 800450a:	d90a      	bls.n	8004522 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800450c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	617b      	str	r3, [r7, #20]
}
 800451e:	bf00      	nop
 8004520:	e7fe      	b.n	8004520 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004522:	2302      	movs	r3, #2
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	2100      	movs	r1, #0
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f7ff fe49 	bl	80041c4 <xQueueGenericCreateStatic>
 8004532:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004540:	69fb      	ldr	r3, [r7, #28]
	}
 8004542:	4618      	mov	r0, r3
 8004544:	3720      	adds	r7, #32
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800454a:	b580      	push	{r7, lr}
 800454c:	b086      	sub	sp, #24
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10a      	bne.n	8004570 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800455a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	613b      	str	r3, [r7, #16]
}
 800456c:	bf00      	nop
 800456e:	e7fe      	b.n	800456e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	429a      	cmp	r2, r3
 8004576:	d90a      	bls.n	800458e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	60fb      	str	r3, [r7, #12]
}
 800458a:	bf00      	nop
 800458c:	e7fe      	b.n	800458c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800458e:	2202      	movs	r2, #2
 8004590:	2100      	movs	r1, #0
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff fe8e 	bl	80042b4 <xQueueGenericCreate>
 8004598:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80045a6:	697b      	ldr	r3, [r7, #20]
	}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08e      	sub	sp, #56	; 0x38
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80045be:	2300      	movs	r3, #0
 80045c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10a      	bne.n	80045e2 <xQueueGenericSend+0x32>
	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045de:	bf00      	nop
 80045e0:	e7fe      	b.n	80045e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d103      	bne.n	80045f0 <xQueueGenericSend+0x40>
 80045e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <xQueueGenericSend+0x44>
 80045f0:	2301      	movs	r3, #1
 80045f2:	e000      	b.n	80045f6 <xQueueGenericSend+0x46>
 80045f4:	2300      	movs	r3, #0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10a      	bne.n	8004610 <xQueueGenericSend+0x60>
	__asm volatile
 80045fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fe:	f383 8811 	msr	BASEPRI, r3
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800460c:	bf00      	nop
 800460e:	e7fe      	b.n	800460e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2b02      	cmp	r3, #2
 8004614:	d103      	bne.n	800461e <xQueueGenericSend+0x6e>
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <xQueueGenericSend+0x72>
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <xQueueGenericSend+0x74>
 8004622:	2300      	movs	r3, #0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <xQueueGenericSend+0x8e>
	__asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	623b      	str	r3, [r7, #32]
}
 800463a:	bf00      	nop
 800463c:	e7fe      	b.n	800463c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800463e:	f001 fb69 	bl	8005d14 <xTaskGetSchedulerState>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d102      	bne.n	800464e <xQueueGenericSend+0x9e>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <xQueueGenericSend+0xa2>
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <xQueueGenericSend+0xa4>
 8004652:	2300      	movs	r3, #0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10a      	bne.n	800466e <xQueueGenericSend+0xbe>
	__asm volatile
 8004658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	61fb      	str	r3, [r7, #28]
}
 800466a:	bf00      	nop
 800466c:	e7fe      	b.n	800466c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800466e:	f002 f9a9 	bl	80069c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467a:	429a      	cmp	r2, r3
 800467c:	d302      	bcc.n	8004684 <xQueueGenericSend+0xd4>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b02      	cmp	r3, #2
 8004682:	d129      	bne.n	80046d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	68b9      	ldr	r1, [r7, #8]
 8004688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800468a:	f000 fb52 	bl	8004d32 <prvCopyDataToQueue>
 800468e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	2b00      	cmp	r3, #0
 8004696:	d010      	beq.n	80046ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	3324      	adds	r3, #36	; 0x24
 800469c:	4618      	mov	r0, r3
 800469e:	f001 f967 	bl	8005970 <xTaskRemoveFromEventList>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d013      	beq.n	80046d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046a8:	4b3f      	ldr	r3, [pc, #252]	; (80047a8 <xQueueGenericSend+0x1f8>)
 80046aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	e00a      	b.n	80046d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80046ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d007      	beq.n	80046d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80046c0:	4b39      	ldr	r3, [pc, #228]	; (80047a8 <xQueueGenericSend+0x1f8>)
 80046c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80046d0:	f002 f9a8 	bl	8006a24 <vPortExitCritical>
				return pdPASS;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e063      	b.n	80047a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d103      	bne.n	80046e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046de:	f002 f9a1 	bl	8006a24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	e05c      	b.n	80047a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d106      	bne.n	80046fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046ec:	f107 0314 	add.w	r3, r7, #20
 80046f0:	4618      	mov	r0, r3
 80046f2:	f001 f9a1 	bl	8005a38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046f6:	2301      	movs	r3, #1
 80046f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046fa:	f002 f993 	bl	8006a24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046fe:	f000 ff0d 	bl	800551c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004702:	f002 f95f 	bl	80069c4 <vPortEnterCritical>
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800470c:	b25b      	sxtb	r3, r3
 800470e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004712:	d103      	bne.n	800471c <xQueueGenericSend+0x16c>
 8004714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800471c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004722:	b25b      	sxtb	r3, r3
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004728:	d103      	bne.n	8004732 <xQueueGenericSend+0x182>
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004732:	f002 f977 	bl	8006a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004736:	1d3a      	adds	r2, r7, #4
 8004738:	f107 0314 	add.w	r3, r7, #20
 800473c:	4611      	mov	r1, r2
 800473e:	4618      	mov	r0, r3
 8004740:	f001 f990 	bl	8005a64 <xTaskCheckForTimeOut>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d124      	bne.n	8004794 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800474a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800474c:	f000 fbe9 	bl	8004f22 <prvIsQueueFull>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d018      	beq.n	8004788 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	3310      	adds	r3, #16
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	4611      	mov	r1, r2
 800475e:	4618      	mov	r0, r3
 8004760:	f001 f8b6 	bl	80058d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004766:	f000 fb74 	bl	8004e52 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800476a:	f000 fee5 	bl	8005538 <xTaskResumeAll>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	f47f af7c 	bne.w	800466e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004776:	4b0c      	ldr	r3, [pc, #48]	; (80047a8 <xQueueGenericSend+0x1f8>)
 8004778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	e772      	b.n	800466e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800478a:	f000 fb62 	bl	8004e52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800478e:	f000 fed3 	bl	8005538 <xTaskResumeAll>
 8004792:	e76c      	b.n	800466e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004796:	f000 fb5c 	bl	8004e52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800479a:	f000 fecd 	bl	8005538 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800479e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3738      	adds	r7, #56	; 0x38
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	e000ed04 	.word	0xe000ed04

080047ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b090      	sub	sp, #64	; 0x40
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80047be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10a      	bne.n	80047da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80047d6:	bf00      	nop
 80047d8:	e7fe      	b.n	80047d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d103      	bne.n	80047e8 <xQueueGenericSendFromISR+0x3c>
 80047e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <xQueueGenericSendFromISR+0x40>
 80047e8:	2301      	movs	r3, #1
 80047ea:	e000      	b.n	80047ee <xQueueGenericSendFromISR+0x42>
 80047ec:	2300      	movs	r3, #0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10a      	bne.n	8004808 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80047f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004804:	bf00      	nop
 8004806:	e7fe      	b.n	8004806 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d103      	bne.n	8004816 <xQueueGenericSendFromISR+0x6a>
 800480e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <xQueueGenericSendFromISR+0x6e>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <xQueueGenericSendFromISR+0x70>
 800481a:	2300      	movs	r3, #0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10a      	bne.n	8004836 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	623b      	str	r3, [r7, #32]
}
 8004832:	bf00      	nop
 8004834:	e7fe      	b.n	8004834 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004836:	f002 f9a7 	bl	8006b88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800483a:	f3ef 8211 	mrs	r2, BASEPRI
 800483e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	61fa      	str	r2, [r7, #28]
 8004850:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004852:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004854:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800485a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485e:	429a      	cmp	r2, r3
 8004860:	d302      	bcc.n	8004868 <xQueueGenericSendFromISR+0xbc>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b02      	cmp	r3, #2
 8004866:	d12f      	bne.n	80048c8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800486e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800487e:	f000 fa58 	bl	8004d32 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004882:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800488a:	d112      	bne.n	80048b2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800488c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	2b00      	cmp	r3, #0
 8004892:	d016      	beq.n	80048c2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004896:	3324      	adds	r3, #36	; 0x24
 8004898:	4618      	mov	r0, r3
 800489a:	f001 f869 	bl	8005970 <xTaskRemoveFromEventList>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00e      	beq.n	80048c2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00b      	beq.n	80048c2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	e007      	b.n	80048c2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80048b6:	3301      	adds	r3, #1
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	b25a      	sxtb	r2, r3
 80048bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80048c2:	2301      	movs	r3, #1
 80048c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80048c6:	e001      	b.n	80048cc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80048c8:	2300      	movs	r3, #0
 80048ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80048d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80048d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3740      	adds	r7, #64	; 0x40
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08c      	sub	sp, #48	; 0x30
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80048f0:	2300      	movs	r3, #0
 80048f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10a      	bne.n	8004914 <xQueueReceive+0x30>
	__asm volatile
 80048fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	623b      	str	r3, [r7, #32]
}
 8004910:	bf00      	nop
 8004912:	e7fe      	b.n	8004912 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d103      	bne.n	8004922 <xQueueReceive+0x3e>
 800491a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <xQueueReceive+0x42>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <xQueueReceive+0x44>
 8004926:	2300      	movs	r3, #0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10a      	bne.n	8004942 <xQueueReceive+0x5e>
	__asm volatile
 800492c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004930:	f383 8811 	msr	BASEPRI, r3
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	61fb      	str	r3, [r7, #28]
}
 800493e:	bf00      	nop
 8004940:	e7fe      	b.n	8004940 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004942:	f001 f9e7 	bl	8005d14 <xTaskGetSchedulerState>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d102      	bne.n	8004952 <xQueueReceive+0x6e>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <xQueueReceive+0x72>
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <xQueueReceive+0x74>
 8004956:	2300      	movs	r3, #0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10a      	bne.n	8004972 <xQueueReceive+0x8e>
	__asm volatile
 800495c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	61bb      	str	r3, [r7, #24]
}
 800496e:	bf00      	nop
 8004970:	e7fe      	b.n	8004970 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004972:	f002 f827 	bl	80069c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	2b00      	cmp	r3, #0
 8004980:	d01f      	beq.n	80049c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004982:	68b9      	ldr	r1, [r7, #8]
 8004984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004986:	f000 fa3e 	bl	8004e06 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	1e5a      	subs	r2, r3, #1
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00f      	beq.n	80049ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	3310      	adds	r3, #16
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 ffe6 	bl	8005970 <xTaskRemoveFromEventList>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d007      	beq.n	80049ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049aa:	4b3d      	ldr	r3, [pc, #244]	; (8004aa0 <xQueueReceive+0x1bc>)
 80049ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049ba:	f002 f833 	bl	8006a24 <vPortExitCritical>
				return pdPASS;
 80049be:	2301      	movs	r3, #1
 80049c0:	e069      	b.n	8004a96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d103      	bne.n	80049d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049c8:	f002 f82c 	bl	8006a24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049cc:	2300      	movs	r3, #0
 80049ce:	e062      	b.n	8004a96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d106      	bne.n	80049e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049d6:	f107 0310 	add.w	r3, r7, #16
 80049da:	4618      	mov	r0, r3
 80049dc:	f001 f82c 	bl	8005a38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049e0:	2301      	movs	r3, #1
 80049e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049e4:	f002 f81e 	bl	8006a24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049e8:	f000 fd98 	bl	800551c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049ec:	f001 ffea 	bl	80069c4 <vPortEnterCritical>
 80049f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049f6:	b25b      	sxtb	r3, r3
 80049f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049fc:	d103      	bne.n	8004a06 <xQueueReceive+0x122>
 80049fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a0c:	b25b      	sxtb	r3, r3
 8004a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a12:	d103      	bne.n	8004a1c <xQueueReceive+0x138>
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a1c:	f002 f802 	bl	8006a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a20:	1d3a      	adds	r2, r7, #4
 8004a22:	f107 0310 	add.w	r3, r7, #16
 8004a26:	4611      	mov	r1, r2
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f001 f81b 	bl	8005a64 <xTaskCheckForTimeOut>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d123      	bne.n	8004a7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a36:	f000 fa5e 	bl	8004ef6 <prvIsQueueEmpty>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d017      	beq.n	8004a70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	3324      	adds	r3, #36	; 0x24
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	4611      	mov	r1, r2
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 ff41 	bl	80058d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a50:	f000 f9ff 	bl	8004e52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a54:	f000 fd70 	bl	8005538 <xTaskResumeAll>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d189      	bne.n	8004972 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004a5e:	4b10      	ldr	r3, [pc, #64]	; (8004aa0 <xQueueReceive+0x1bc>)
 8004a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	e780      	b.n	8004972 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a72:	f000 f9ee 	bl	8004e52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a76:	f000 fd5f 	bl	8005538 <xTaskResumeAll>
 8004a7a:	e77a      	b.n	8004972 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a7e:	f000 f9e8 	bl	8004e52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a82:	f000 fd59 	bl	8005538 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a88:	f000 fa35 	bl	8004ef6 <prvIsQueueEmpty>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f43f af6f 	beq.w	8004972 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3730      	adds	r7, #48	; 0x30
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	e000ed04 	.word	0xe000ed04

08004aa4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08e      	sub	sp, #56	; 0x38
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10a      	bne.n	8004ad6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac4:	f383 8811 	msr	BASEPRI, r3
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	623b      	str	r3, [r7, #32]
}
 8004ad2:	bf00      	nop
 8004ad4:	e7fe      	b.n	8004ad4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	61fb      	str	r3, [r7, #28]
}
 8004af0:	bf00      	nop
 8004af2:	e7fe      	b.n	8004af2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004af4:	f001 f90e 	bl	8005d14 <xTaskGetSchedulerState>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d102      	bne.n	8004b04 <xQueueSemaphoreTake+0x60>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <xQueueSemaphoreTake+0x64>
 8004b04:	2301      	movs	r3, #1
 8004b06:	e000      	b.n	8004b0a <xQueueSemaphoreTake+0x66>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10a      	bne.n	8004b24 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	61bb      	str	r3, [r7, #24]
}
 8004b20:	bf00      	nop
 8004b22:	e7fe      	b.n	8004b22 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b24:	f001 ff4e 	bl	80069c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d024      	beq.n	8004b7e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b36:	1e5a      	subs	r2, r3, #1
 8004b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d104      	bne.n	8004b4e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004b44:	f001 fa5c 	bl	8006000 <pvTaskIncrementMutexHeldCount>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00f      	beq.n	8004b76 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b58:	3310      	adds	r3, #16
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 ff08 	bl	8005970 <xTaskRemoveFromEventList>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b66:	4b54      	ldr	r3, [pc, #336]	; (8004cb8 <xQueueSemaphoreTake+0x214>)
 8004b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b76:	f001 ff55 	bl	8006a24 <vPortExitCritical>
				return pdPASS;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e097      	b.n	8004cae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d111      	bne.n	8004ba8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	617b      	str	r3, [r7, #20]
}
 8004b9c:	bf00      	nop
 8004b9e:	e7fe      	b.n	8004b9e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004ba0:	f001 ff40 	bl	8006a24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	e082      	b.n	8004cae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bae:	f107 030c 	add.w	r3, r7, #12
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 ff40 	bl	8005a38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bbc:	f001 ff32 	bl	8006a24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bc0:	f000 fcac 	bl	800551c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bc4:	f001 fefe 	bl	80069c4 <vPortEnterCritical>
 8004bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bce:	b25b      	sxtb	r3, r3
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bd4:	d103      	bne.n	8004bde <xQueueSemaphoreTake+0x13a>
 8004bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004be4:	b25b      	sxtb	r3, r3
 8004be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bea:	d103      	bne.n	8004bf4 <xQueueSemaphoreTake+0x150>
 8004bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bf4:	f001 ff16 	bl	8006a24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bf8:	463a      	mov	r2, r7
 8004bfa:	f107 030c 	add.w	r3, r7, #12
 8004bfe:	4611      	mov	r1, r2
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 ff2f 	bl	8005a64 <xTaskCheckForTimeOut>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d132      	bne.n	8004c72 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c0e:	f000 f972 	bl	8004ef6 <prvIsQueueEmpty>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d026      	beq.n	8004c66 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d109      	bne.n	8004c34 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004c20:	f001 fed0 	bl	80069c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f001 f891 	bl	8005d50 <xTaskPriorityInherit>
 8004c2e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004c30:	f001 fef8 	bl	8006a24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c36:	3324      	adds	r3, #36	; 0x24
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 fe47 	bl	80058d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c44:	f000 f905 	bl	8004e52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c48:	f000 fc76 	bl	8005538 <xTaskResumeAll>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f47f af68 	bne.w	8004b24 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004c54:	4b18      	ldr	r3, [pc, #96]	; (8004cb8 <xQueueSemaphoreTake+0x214>)
 8004c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	e75e      	b.n	8004b24 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004c66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c68:	f000 f8f3 	bl	8004e52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c6c:	f000 fc64 	bl	8005538 <xTaskResumeAll>
 8004c70:	e758      	b.n	8004b24 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004c72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c74:	f000 f8ed 	bl	8004e52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c78:	f000 fc5e 	bl	8005538 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c7e:	f000 f93a 	bl	8004ef6 <prvIsQueueEmpty>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f43f af4d 	beq.w	8004b24 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00d      	beq.n	8004cac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004c90:	f001 fe98 	bl	80069c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004c94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c96:	f000 f834 	bl	8004d02 <prvGetDisinheritPriorityAfterTimeout>
 8004c9a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f001 f92a 	bl	8005efc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004ca8:	f001 febc 	bl	8006a24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004cac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3738      	adds	r7, #56	; 0x38
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	e000ed04 	.word	0xe000ed04

08004cbc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10a      	bne.n	8004ce4 <vQueueDelete+0x28>
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	60bb      	str	r3, [r7, #8]
}
 8004ce0:	bf00      	nop
 8004ce2:	e7fe      	b.n	8004ce2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 f95f 	bl	8004fa8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d102      	bne.n	8004cfa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f002 f853 	bl	8006da0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004cfa:	bf00      	nop
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004d02:	b480      	push	{r7}
 8004d04:	b085      	sub	sp, #20
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d006      	beq.n	8004d20 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	e001      	b.n	8004d24 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004d24:	68fb      	ldr	r3, [r7, #12]
	}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b086      	sub	sp, #24
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10d      	bne.n	8004d6c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d14d      	bne.n	8004df4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f001 f85f 	bl	8005e20 <xTaskPriorityDisinherit>
 8004d62:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	609a      	str	r2, [r3, #8]
 8004d6a:	e043      	b.n	8004df4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d119      	bne.n	8004da6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6858      	ldr	r0, [r3, #4]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	68b9      	ldr	r1, [r7, #8]
 8004d7e:	f002 fbf4 	bl	800756a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	441a      	add	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d32b      	bcc.n	8004df4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	605a      	str	r2, [r3, #4]
 8004da4:	e026      	b.n	8004df4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	68d8      	ldr	r0, [r3, #12]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	461a      	mov	r2, r3
 8004db0:	68b9      	ldr	r1, [r7, #8]
 8004db2:	f002 fbda 	bl	800756a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	425b      	negs	r3, r3
 8004dc0:	441a      	add	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d207      	bcs.n	8004de2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	425b      	negs	r3, r3
 8004ddc:	441a      	add	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d105      	bne.n	8004df4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	3b01      	subs	r3, #1
 8004df2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004dfc:	697b      	ldr	r3, [r7, #20]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b082      	sub	sp, #8
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d018      	beq.n	8004e4a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e20:	441a      	add	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d303      	bcc.n	8004e3a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68d9      	ldr	r1, [r3, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	461a      	mov	r2, r3
 8004e44:	6838      	ldr	r0, [r7, #0]
 8004e46:	f002 fb90 	bl	800756a <memcpy>
	}
}
 8004e4a:	bf00      	nop
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b084      	sub	sp, #16
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e5a:	f001 fdb3 	bl	80069c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e64:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e66:	e011      	b.n	8004e8c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d012      	beq.n	8004e96 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3324      	adds	r3, #36	; 0x24
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 fd7b 	bl	8005970 <xTaskRemoveFromEventList>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e80:	f000 fe52 	bl	8005b28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	dce9      	bgt.n	8004e68 <prvUnlockQueue+0x16>
 8004e94:	e000      	b.n	8004e98 <prvUnlockQueue+0x46>
					break;
 8004e96:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	22ff      	movs	r2, #255	; 0xff
 8004e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004ea0:	f001 fdc0 	bl	8006a24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004ea4:	f001 fd8e 	bl	80069c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eb0:	e011      	b.n	8004ed6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d012      	beq.n	8004ee0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3310      	adds	r3, #16
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fd56 	bl	8005970 <xTaskRemoveFromEventList>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004eca:	f000 fe2d 	bl	8005b28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ece:	7bbb      	ldrb	r3, [r7, #14]
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ed6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	dce9      	bgt.n	8004eb2 <prvUnlockQueue+0x60>
 8004ede:	e000      	b.n	8004ee2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ee0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	22ff      	movs	r2, #255	; 0xff
 8004ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004eea:	f001 fd9b 	bl	8006a24 <vPortExitCritical>
}
 8004eee:	bf00      	nop
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004efe:	f001 fd61 	bl	80069c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d102      	bne.n	8004f10 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	e001      	b.n	8004f14 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f10:	2300      	movs	r3, #0
 8004f12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f14:	f001 fd86 	bl	8006a24 <vPortExitCritical>

	return xReturn;
 8004f18:	68fb      	ldr	r3, [r7, #12]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b084      	sub	sp, #16
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f2a:	f001 fd4b 	bl	80069c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d102      	bne.n	8004f40 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	e001      	b.n	8004f44 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f44:	f001 fd6e 	bl	8006a24 <vPortExitCritical>

	return xReturn;
 8004f48:	68fb      	ldr	r3, [r7, #12]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	e014      	b.n	8004f8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f64:	4a0f      	ldr	r2, [pc, #60]	; (8004fa4 <vQueueAddToRegistry+0x50>)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10b      	bne.n	8004f88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f70:	490c      	ldr	r1, [pc, #48]	; (8004fa4 <vQueueAddToRegistry+0x50>)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f7a:	4a0a      	ldr	r2, [pc, #40]	; (8004fa4 <vQueueAddToRegistry+0x50>)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	4413      	add	r3, r2
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f86:	e006      	b.n	8004f96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2b07      	cmp	r3, #7
 8004f92:	d9e7      	bls.n	8004f64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	200008cc 	.word	0x200008cc

08004fa8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	e016      	b.n	8004fe4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004fb6:	4a10      	ldr	r2, [pc, #64]	; (8004ff8 <vQueueUnregisterQueue+0x50>)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	4413      	add	r3, r2
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d10b      	bne.n	8004fde <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004fc6:	4a0c      	ldr	r2, [pc, #48]	; (8004ff8 <vQueueUnregisterQueue+0x50>)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2100      	movs	r1, #0
 8004fcc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004fd0:	4a09      	ldr	r2, [pc, #36]	; (8004ff8 <vQueueUnregisterQueue+0x50>)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	4413      	add	r3, r2
 8004fd8:	2200      	movs	r2, #0
 8004fda:	605a      	str	r2, [r3, #4]
				break;
 8004fdc:	e006      	b.n	8004fec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b07      	cmp	r3, #7
 8004fe8:	d9e5      	bls.n	8004fb6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004fea:	bf00      	nop
 8004fec:	bf00      	nop
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	200008cc 	.word	0x200008cc

08004ffc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800500c:	f001 fcda 	bl	80069c4 <vPortEnterCritical>
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005016:	b25b      	sxtb	r3, r3
 8005018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800501c:	d103      	bne.n	8005026 <vQueueWaitForMessageRestricted+0x2a>
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800502c:	b25b      	sxtb	r3, r3
 800502e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005032:	d103      	bne.n	800503c <vQueueWaitForMessageRestricted+0x40>
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800503c:	f001 fcf2 	bl	8006a24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	2b00      	cmp	r3, #0
 8005046:	d106      	bne.n	8005056 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	3324      	adds	r3, #36	; 0x24
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	4618      	mov	r0, r3
 8005052:	f000 fc61 	bl	8005918 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005056:	6978      	ldr	r0, [r7, #20]
 8005058:	f7ff fefb 	bl	8004e52 <prvUnlockQueue>
	}
 800505c:	bf00      	nop
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08e      	sub	sp, #56	; 0x38
 8005068:	af04      	add	r7, sp, #16
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10a      	bne.n	800508e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	623b      	str	r3, [r7, #32]
}
 800508a:	bf00      	nop
 800508c:	e7fe      	b.n	800508c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800508e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10a      	bne.n	80050aa <xTaskCreateStatic+0x46>
	__asm volatile
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	61fb      	str	r3, [r7, #28]
}
 80050a6:	bf00      	nop
 80050a8:	e7fe      	b.n	80050a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050aa:	23a8      	movs	r3, #168	; 0xa8
 80050ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	2ba8      	cmp	r3, #168	; 0xa8
 80050b2:	d00a      	beq.n	80050ca <xTaskCreateStatic+0x66>
	__asm volatile
 80050b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	61bb      	str	r3, [r7, #24]
}
 80050c6:	bf00      	nop
 80050c8:	e7fe      	b.n	80050c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d01e      	beq.n	8005110 <xTaskCreateStatic+0xac>
 80050d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d01b      	beq.n	8005110 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e4:	2202      	movs	r2, #2
 80050e6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050ea:	2300      	movs	r3, #0
 80050ec:	9303      	str	r3, [sp, #12]
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	9302      	str	r3, [sp, #8]
 80050f2:	f107 0314 	add.w	r3, r7, #20
 80050f6:	9301      	str	r3, [sp, #4]
 80050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	68b9      	ldr	r1, [r7, #8]
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 f850 	bl	80051a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800510a:	f000 f8f3 	bl	80052f4 <prvAddNewTaskToReadyList>
 800510e:	e001      	b.n	8005114 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005114:	697b      	ldr	r3, [r7, #20]
	}
 8005116:	4618      	mov	r0, r3
 8005118:	3728      	adds	r7, #40	; 0x28
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800511e:	b580      	push	{r7, lr}
 8005120:	b08c      	sub	sp, #48	; 0x30
 8005122:	af04      	add	r7, sp, #16
 8005124:	60f8      	str	r0, [r7, #12]
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	603b      	str	r3, [r7, #0]
 800512a:	4613      	mov	r3, r2
 800512c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800512e:	88fb      	ldrh	r3, [r7, #6]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4618      	mov	r0, r3
 8005134:	f001 fd68 	bl	8006c08 <pvPortMalloc>
 8005138:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00e      	beq.n	800515e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005140:	20a8      	movs	r0, #168	; 0xa8
 8005142:	f001 fd61 	bl	8006c08 <pvPortMalloc>
 8005146:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	631a      	str	r2, [r3, #48]	; 0x30
 8005154:	e005      	b.n	8005162 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005156:	6978      	ldr	r0, [r7, #20]
 8005158:	f001 fe22 	bl	8006da0 <vPortFree>
 800515c:	e001      	b.n	8005162 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800515e:	2300      	movs	r3, #0
 8005160:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d017      	beq.n	8005198 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005170:	88fa      	ldrh	r2, [r7, #6]
 8005172:	2300      	movs	r3, #0
 8005174:	9303      	str	r3, [sp, #12]
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	9302      	str	r3, [sp, #8]
 800517a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68b9      	ldr	r1, [r7, #8]
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 f80e 	bl	80051a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800518c:	69f8      	ldr	r0, [r7, #28]
 800518e:	f000 f8b1 	bl	80052f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005192:	2301      	movs	r3, #1
 8005194:	61bb      	str	r3, [r7, #24]
 8005196:	e002      	b.n	800519e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800519c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800519e:	69bb      	ldr	r3, [r7, #24]
	}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3720      	adds	r7, #32
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	461a      	mov	r2, r3
 80051c0:	21a5      	movs	r1, #165	; 0xa5
 80051c2:	f002 f901 	bl	80073c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051d0:	3b01      	subs	r3, #1
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	f023 0307 	bic.w	r3, r3, #7
 80051de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <prvInitialiseNewTask+0x58>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	617b      	str	r3, [r7, #20]
}
 80051fc:	bf00      	nop
 80051fe:	e7fe      	b.n	80051fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d01f      	beq.n	8005246 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005206:	2300      	movs	r3, #0
 8005208:	61fb      	str	r3, [r7, #28]
 800520a:	e012      	b.n	8005232 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	4413      	add	r3, r2
 8005212:	7819      	ldrb	r1, [r3, #0]
 8005214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	4413      	add	r3, r2
 800521a:	3334      	adds	r3, #52	; 0x34
 800521c:	460a      	mov	r2, r1
 800521e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	4413      	add	r3, r2
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d006      	beq.n	800523a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	3301      	adds	r3, #1
 8005230:	61fb      	str	r3, [r7, #28]
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	2b0f      	cmp	r3, #15
 8005236:	d9e9      	bls.n	800520c <prvInitialiseNewTask+0x64>
 8005238:	e000      	b.n	800523c <prvInitialiseNewTask+0x94>
			{
				break;
 800523a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800523c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005244:	e003      	b.n	800524e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005250:	2b37      	cmp	r3, #55	; 0x37
 8005252:	d901      	bls.n	8005258 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005254:	2337      	movs	r3, #55	; 0x37
 8005256:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800525c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005262:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005266:	2200      	movs	r2, #0
 8005268:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800526a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526c:	3304      	adds	r3, #4
 800526e:	4618      	mov	r0, r3
 8005270:	f7fe feac 	bl	8003fcc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005276:	3318      	adds	r3, #24
 8005278:	4618      	mov	r0, r3
 800527a:	f7fe fea7 	bl	8003fcc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005282:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005286:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005292:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	2200      	movs	r2, #0
 8005298:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800529c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80052a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a6:	3354      	adds	r3, #84	; 0x54
 80052a8:	224c      	movs	r2, #76	; 0x4c
 80052aa:	2100      	movs	r1, #0
 80052ac:	4618      	mov	r0, r3
 80052ae:	f002 f88b 	bl	80073c8 <memset>
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	4a0c      	ldr	r2, [pc, #48]	; (80052e8 <prvInitialiseNewTask+0x140>)
 80052b6:	659a      	str	r2, [r3, #88]	; 0x58
 80052b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ba:	4a0c      	ldr	r2, [pc, #48]	; (80052ec <prvInitialiseNewTask+0x144>)
 80052bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80052be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c0:	4a0b      	ldr	r2, [pc, #44]	; (80052f0 <prvInitialiseNewTask+0x148>)
 80052c2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	68f9      	ldr	r1, [r7, #12]
 80052c8:	69b8      	ldr	r0, [r7, #24]
 80052ca:	f001 fa4f 	bl	800676c <pxPortInitialiseStack>
 80052ce:	4602      	mov	r2, r0
 80052d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052e0:	bf00      	nop
 80052e2:	3720      	adds	r7, #32
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20001b18 	.word	0x20001b18
 80052ec:	20001b80 	.word	0x20001b80
 80052f0:	20001be8 	.word	0x20001be8

080052f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052fc:	f001 fb62 	bl	80069c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005300:	4b2d      	ldr	r3, [pc, #180]	; (80053b8 <prvAddNewTaskToReadyList+0xc4>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3301      	adds	r3, #1
 8005306:	4a2c      	ldr	r2, [pc, #176]	; (80053b8 <prvAddNewTaskToReadyList+0xc4>)
 8005308:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800530a:	4b2c      	ldr	r3, [pc, #176]	; (80053bc <prvAddNewTaskToReadyList+0xc8>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d109      	bne.n	8005326 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005312:	4a2a      	ldr	r2, [pc, #168]	; (80053bc <prvAddNewTaskToReadyList+0xc8>)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005318:	4b27      	ldr	r3, [pc, #156]	; (80053b8 <prvAddNewTaskToReadyList+0xc4>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d110      	bne.n	8005342 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005320:	f000 fc26 	bl	8005b70 <prvInitialiseTaskLists>
 8005324:	e00d      	b.n	8005342 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005326:	4b26      	ldr	r3, [pc, #152]	; (80053c0 <prvAddNewTaskToReadyList+0xcc>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d109      	bne.n	8005342 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800532e:	4b23      	ldr	r3, [pc, #140]	; (80053bc <prvAddNewTaskToReadyList+0xc8>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	429a      	cmp	r2, r3
 800533a:	d802      	bhi.n	8005342 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800533c:	4a1f      	ldr	r2, [pc, #124]	; (80053bc <prvAddNewTaskToReadyList+0xc8>)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005342:	4b20      	ldr	r3, [pc, #128]	; (80053c4 <prvAddNewTaskToReadyList+0xd0>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3301      	adds	r3, #1
 8005348:	4a1e      	ldr	r2, [pc, #120]	; (80053c4 <prvAddNewTaskToReadyList+0xd0>)
 800534a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800534c:	4b1d      	ldr	r3, [pc, #116]	; (80053c4 <prvAddNewTaskToReadyList+0xd0>)
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005358:	4b1b      	ldr	r3, [pc, #108]	; (80053c8 <prvAddNewTaskToReadyList+0xd4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	429a      	cmp	r2, r3
 800535e:	d903      	bls.n	8005368 <prvAddNewTaskToReadyList+0x74>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005364:	4a18      	ldr	r2, [pc, #96]	; (80053c8 <prvAddNewTaskToReadyList+0xd4>)
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4a15      	ldr	r2, [pc, #84]	; (80053cc <prvAddNewTaskToReadyList+0xd8>)
 8005376:	441a      	add	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3304      	adds	r3, #4
 800537c:	4619      	mov	r1, r3
 800537e:	4610      	mov	r0, r2
 8005380:	f7fe fe31 	bl	8003fe6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005384:	f001 fb4e 	bl	8006a24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005388:	4b0d      	ldr	r3, [pc, #52]	; (80053c0 <prvAddNewTaskToReadyList+0xcc>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00e      	beq.n	80053ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005390:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <prvAddNewTaskToReadyList+0xc8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	429a      	cmp	r2, r3
 800539c:	d207      	bcs.n	80053ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800539e:	4b0c      	ldr	r3, [pc, #48]	; (80053d0 <prvAddNewTaskToReadyList+0xdc>)
 80053a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053ae:	bf00      	nop
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20000de0 	.word	0x20000de0
 80053bc:	2000090c 	.word	0x2000090c
 80053c0:	20000dec 	.word	0x20000dec
 80053c4:	20000dfc 	.word	0x20000dfc
 80053c8:	20000de8 	.word	0x20000de8
 80053cc:	20000910 	.word	0x20000910
 80053d0:	e000ed04 	.word	0xe000ed04

080053d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053dc:	2300      	movs	r3, #0
 80053de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d017      	beq.n	8005416 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053e6:	4b13      	ldr	r3, [pc, #76]	; (8005434 <vTaskDelay+0x60>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <vTaskDelay+0x30>
	__asm volatile
 80053ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	60bb      	str	r3, [r7, #8]
}
 8005400:	bf00      	nop
 8005402:	e7fe      	b.n	8005402 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005404:	f000 f88a 	bl	800551c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005408:	2100      	movs	r1, #0
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fe0c 	bl	8006028 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005410:	f000 f892 	bl	8005538 <xTaskResumeAll>
 8005414:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d107      	bne.n	800542c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800541c:	4b06      	ldr	r3, [pc, #24]	; (8005438 <vTaskDelay+0x64>)
 800541e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800542c:	bf00      	nop
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	20000e08 	.word	0x20000e08
 8005438:	e000ed04 	.word	0xe000ed04

0800543c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08a      	sub	sp, #40	; 0x28
 8005440:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005442:	2300      	movs	r3, #0
 8005444:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005446:	2300      	movs	r3, #0
 8005448:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800544a:	463a      	mov	r2, r7
 800544c:	1d39      	adds	r1, r7, #4
 800544e:	f107 0308 	add.w	r3, r7, #8
 8005452:	4618      	mov	r0, r3
 8005454:	f7fe fd66 	bl	8003f24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005458:	6839      	ldr	r1, [r7, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	9202      	str	r2, [sp, #8]
 8005460:	9301      	str	r3, [sp, #4]
 8005462:	2300      	movs	r3, #0
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	2300      	movs	r3, #0
 8005468:	460a      	mov	r2, r1
 800546a:	4924      	ldr	r1, [pc, #144]	; (80054fc <vTaskStartScheduler+0xc0>)
 800546c:	4824      	ldr	r0, [pc, #144]	; (8005500 <vTaskStartScheduler+0xc4>)
 800546e:	f7ff fdf9 	bl	8005064 <xTaskCreateStatic>
 8005472:	4603      	mov	r3, r0
 8005474:	4a23      	ldr	r2, [pc, #140]	; (8005504 <vTaskStartScheduler+0xc8>)
 8005476:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005478:	4b22      	ldr	r3, [pc, #136]	; (8005504 <vTaskStartScheduler+0xc8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005480:	2301      	movs	r3, #1
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	e001      	b.n	800548a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d102      	bne.n	8005496 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005490:	f000 fe1e 	bl	80060d0 <xTimerCreateTimerTask>
 8005494:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d11b      	bne.n	80054d4 <vTaskStartScheduler+0x98>
	__asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	613b      	str	r3, [r7, #16]
}
 80054ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054b0:	4b15      	ldr	r3, [pc, #84]	; (8005508 <vTaskStartScheduler+0xcc>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3354      	adds	r3, #84	; 0x54
 80054b6:	4a15      	ldr	r2, [pc, #84]	; (800550c <vTaskStartScheduler+0xd0>)
 80054b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054ba:	4b15      	ldr	r3, [pc, #84]	; (8005510 <vTaskStartScheduler+0xd4>)
 80054bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054c2:	4b14      	ldr	r3, [pc, #80]	; (8005514 <vTaskStartScheduler+0xd8>)
 80054c4:	2201      	movs	r2, #1
 80054c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80054c8:	4b13      	ldr	r3, [pc, #76]	; (8005518 <vTaskStartScheduler+0xdc>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054ce:	f001 f9d7 	bl	8006880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054d2:	e00e      	b.n	80054f2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054da:	d10a      	bne.n	80054f2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	60fb      	str	r3, [r7, #12]
}
 80054ee:	bf00      	nop
 80054f0:	e7fe      	b.n	80054f0 <vTaskStartScheduler+0xb4>
}
 80054f2:	bf00      	nop
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	08007b78 	.word	0x08007b78
 8005500:	08005b41 	.word	0x08005b41
 8005504:	20000e04 	.word	0x20000e04
 8005508:	2000090c 	.word	0x2000090c
 800550c:	20000068 	.word	0x20000068
 8005510:	20000e00 	.word	0x20000e00
 8005514:	20000dec 	.word	0x20000dec
 8005518:	20000de4 	.word	0x20000de4

0800551c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005520:	4b04      	ldr	r3, [pc, #16]	; (8005534 <vTaskSuspendAll+0x18>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3301      	adds	r3, #1
 8005526:	4a03      	ldr	r2, [pc, #12]	; (8005534 <vTaskSuspendAll+0x18>)
 8005528:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800552a:	bf00      	nop
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	20000e08 	.word	0x20000e08

08005538 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800553e:	2300      	movs	r3, #0
 8005540:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005542:	2300      	movs	r3, #0
 8005544:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005546:	4b42      	ldr	r3, [pc, #264]	; (8005650 <xTaskResumeAll+0x118>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <xTaskResumeAll+0x2c>
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	603b      	str	r3, [r7, #0]
}
 8005560:	bf00      	nop
 8005562:	e7fe      	b.n	8005562 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005564:	f001 fa2e 	bl	80069c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005568:	4b39      	ldr	r3, [pc, #228]	; (8005650 <xTaskResumeAll+0x118>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3b01      	subs	r3, #1
 800556e:	4a38      	ldr	r2, [pc, #224]	; (8005650 <xTaskResumeAll+0x118>)
 8005570:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005572:	4b37      	ldr	r3, [pc, #220]	; (8005650 <xTaskResumeAll+0x118>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d162      	bne.n	8005640 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800557a:	4b36      	ldr	r3, [pc, #216]	; (8005654 <xTaskResumeAll+0x11c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d05e      	beq.n	8005640 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005582:	e02f      	b.n	80055e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005584:	4b34      	ldr	r3, [pc, #208]	; (8005658 <xTaskResumeAll+0x120>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3318      	adds	r3, #24
 8005590:	4618      	mov	r0, r3
 8005592:	f7fe fd85 	bl	80040a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	3304      	adds	r3, #4
 800559a:	4618      	mov	r0, r3
 800559c:	f7fe fd80 	bl	80040a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a4:	4b2d      	ldr	r3, [pc, #180]	; (800565c <xTaskResumeAll+0x124>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d903      	bls.n	80055b4 <xTaskResumeAll+0x7c>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	4a2a      	ldr	r2, [pc, #168]	; (800565c <xTaskResumeAll+0x124>)
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4a27      	ldr	r2, [pc, #156]	; (8005660 <xTaskResumeAll+0x128>)
 80055c2:	441a      	add	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3304      	adds	r3, #4
 80055c8:	4619      	mov	r1, r3
 80055ca:	4610      	mov	r0, r2
 80055cc:	f7fe fd0b 	bl	8003fe6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d4:	4b23      	ldr	r3, [pc, #140]	; (8005664 <xTaskResumeAll+0x12c>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055da:	429a      	cmp	r2, r3
 80055dc:	d302      	bcc.n	80055e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80055de:	4b22      	ldr	r3, [pc, #136]	; (8005668 <xTaskResumeAll+0x130>)
 80055e0:	2201      	movs	r2, #1
 80055e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055e4:	4b1c      	ldr	r3, [pc, #112]	; (8005658 <xTaskResumeAll+0x120>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1cb      	bne.n	8005584 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055f2:	f000 fb5f 	bl	8005cb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055f6:	4b1d      	ldr	r3, [pc, #116]	; (800566c <xTaskResumeAll+0x134>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d010      	beq.n	8005624 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005602:	f000 f847 	bl	8005694 <xTaskIncrementTick>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d002      	beq.n	8005612 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800560c:	4b16      	ldr	r3, [pc, #88]	; (8005668 <xTaskResumeAll+0x130>)
 800560e:	2201      	movs	r2, #1
 8005610:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	3b01      	subs	r3, #1
 8005616:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1f1      	bne.n	8005602 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800561e:	4b13      	ldr	r3, [pc, #76]	; (800566c <xTaskResumeAll+0x134>)
 8005620:	2200      	movs	r2, #0
 8005622:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005624:	4b10      	ldr	r3, [pc, #64]	; (8005668 <xTaskResumeAll+0x130>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d009      	beq.n	8005640 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800562c:	2301      	movs	r3, #1
 800562e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005630:	4b0f      	ldr	r3, [pc, #60]	; (8005670 <xTaskResumeAll+0x138>)
 8005632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005640:	f001 f9f0 	bl	8006a24 <vPortExitCritical>

	return xAlreadyYielded;
 8005644:	68bb      	ldr	r3, [r7, #8]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20000e08 	.word	0x20000e08
 8005654:	20000de0 	.word	0x20000de0
 8005658:	20000da0 	.word	0x20000da0
 800565c:	20000de8 	.word	0x20000de8
 8005660:	20000910 	.word	0x20000910
 8005664:	2000090c 	.word	0x2000090c
 8005668:	20000df4 	.word	0x20000df4
 800566c:	20000df0 	.word	0x20000df0
 8005670:	e000ed04 	.word	0xe000ed04

08005674 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800567a:	4b05      	ldr	r3, [pc, #20]	; (8005690 <xTaskGetTickCount+0x1c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005680:	687b      	ldr	r3, [r7, #4]
}
 8005682:	4618      	mov	r0, r3
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	20000de4 	.word	0x20000de4

08005694 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800569a:	2300      	movs	r3, #0
 800569c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800569e:	4b4f      	ldr	r3, [pc, #316]	; (80057dc <xTaskIncrementTick+0x148>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f040 808f 	bne.w	80057c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056a8:	4b4d      	ldr	r3, [pc, #308]	; (80057e0 <xTaskIncrementTick+0x14c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3301      	adds	r3, #1
 80056ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056b0:	4a4b      	ldr	r2, [pc, #300]	; (80057e0 <xTaskIncrementTick+0x14c>)
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d120      	bne.n	80056fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80056bc:	4b49      	ldr	r3, [pc, #292]	; (80057e4 <xTaskIncrementTick+0x150>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <xTaskIncrementTick+0x48>
	__asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	603b      	str	r3, [r7, #0]
}
 80056d8:	bf00      	nop
 80056da:	e7fe      	b.n	80056da <xTaskIncrementTick+0x46>
 80056dc:	4b41      	ldr	r3, [pc, #260]	; (80057e4 <xTaskIncrementTick+0x150>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	4b41      	ldr	r3, [pc, #260]	; (80057e8 <xTaskIncrementTick+0x154>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a3f      	ldr	r2, [pc, #252]	; (80057e4 <xTaskIncrementTick+0x150>)
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	4a3f      	ldr	r2, [pc, #252]	; (80057e8 <xTaskIncrementTick+0x154>)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	4b3e      	ldr	r3, [pc, #248]	; (80057ec <xTaskIncrementTick+0x158>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3301      	adds	r3, #1
 80056f6:	4a3d      	ldr	r2, [pc, #244]	; (80057ec <xTaskIncrementTick+0x158>)
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	f000 fadb 	bl	8005cb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056fe:	4b3c      	ldr	r3, [pc, #240]	; (80057f0 <xTaskIncrementTick+0x15c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	429a      	cmp	r2, r3
 8005706:	d349      	bcc.n	800579c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005708:	4b36      	ldr	r3, [pc, #216]	; (80057e4 <xTaskIncrementTick+0x150>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d104      	bne.n	800571c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005712:	4b37      	ldr	r3, [pc, #220]	; (80057f0 <xTaskIncrementTick+0x15c>)
 8005714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005718:	601a      	str	r2, [r3, #0]
					break;
 800571a:	e03f      	b.n	800579c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800571c:	4b31      	ldr	r3, [pc, #196]	; (80057e4 <xTaskIncrementTick+0x150>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	429a      	cmp	r2, r3
 8005732:	d203      	bcs.n	800573c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005734:	4a2e      	ldr	r2, [pc, #184]	; (80057f0 <xTaskIncrementTick+0x15c>)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800573a:	e02f      	b.n	800579c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	3304      	adds	r3, #4
 8005740:	4618      	mov	r0, r3
 8005742:	f7fe fcad 	bl	80040a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574a:	2b00      	cmp	r3, #0
 800574c:	d004      	beq.n	8005758 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	3318      	adds	r3, #24
 8005752:	4618      	mov	r0, r3
 8005754:	f7fe fca4 	bl	80040a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575c:	4b25      	ldr	r3, [pc, #148]	; (80057f4 <xTaskIncrementTick+0x160>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	429a      	cmp	r2, r3
 8005762:	d903      	bls.n	800576c <xTaskIncrementTick+0xd8>
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	4a22      	ldr	r2, [pc, #136]	; (80057f4 <xTaskIncrementTick+0x160>)
 800576a:	6013      	str	r3, [r2, #0]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005770:	4613      	mov	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4a1f      	ldr	r2, [pc, #124]	; (80057f8 <xTaskIncrementTick+0x164>)
 800577a:	441a      	add	r2, r3
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	3304      	adds	r3, #4
 8005780:	4619      	mov	r1, r3
 8005782:	4610      	mov	r0, r2
 8005784:	f7fe fc2f 	bl	8003fe6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800578c:	4b1b      	ldr	r3, [pc, #108]	; (80057fc <xTaskIncrementTick+0x168>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005792:	429a      	cmp	r2, r3
 8005794:	d3b8      	bcc.n	8005708 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005796:	2301      	movs	r3, #1
 8005798:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800579a:	e7b5      	b.n	8005708 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800579c:	4b17      	ldr	r3, [pc, #92]	; (80057fc <xTaskIncrementTick+0x168>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a2:	4915      	ldr	r1, [pc, #84]	; (80057f8 <xTaskIncrementTick+0x164>)
 80057a4:	4613      	mov	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	440b      	add	r3, r1
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d901      	bls.n	80057b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80057b4:	2301      	movs	r3, #1
 80057b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80057b8:	4b11      	ldr	r3, [pc, #68]	; (8005800 <xTaskIncrementTick+0x16c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d007      	beq.n	80057d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80057c0:	2301      	movs	r3, #1
 80057c2:	617b      	str	r3, [r7, #20]
 80057c4:	e004      	b.n	80057d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80057c6:	4b0f      	ldr	r3, [pc, #60]	; (8005804 <xTaskIncrementTick+0x170>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3301      	adds	r3, #1
 80057cc:	4a0d      	ldr	r2, [pc, #52]	; (8005804 <xTaskIncrementTick+0x170>)
 80057ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057d0:	697b      	ldr	r3, [r7, #20]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	20000e08 	.word	0x20000e08
 80057e0:	20000de4 	.word	0x20000de4
 80057e4:	20000d98 	.word	0x20000d98
 80057e8:	20000d9c 	.word	0x20000d9c
 80057ec:	20000df8 	.word	0x20000df8
 80057f0:	20000e00 	.word	0x20000e00
 80057f4:	20000de8 	.word	0x20000de8
 80057f8:	20000910 	.word	0x20000910
 80057fc:	2000090c 	.word	0x2000090c
 8005800:	20000df4 	.word	0x20000df4
 8005804:	20000df0 	.word	0x20000df0

08005808 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800580e:	4b2a      	ldr	r3, [pc, #168]	; (80058b8 <vTaskSwitchContext+0xb0>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005816:	4b29      	ldr	r3, [pc, #164]	; (80058bc <vTaskSwitchContext+0xb4>)
 8005818:	2201      	movs	r2, #1
 800581a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800581c:	e046      	b.n	80058ac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800581e:	4b27      	ldr	r3, [pc, #156]	; (80058bc <vTaskSwitchContext+0xb4>)
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005824:	4b26      	ldr	r3, [pc, #152]	; (80058c0 <vTaskSwitchContext+0xb8>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	e010      	b.n	800584e <vTaskSwitchContext+0x46>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10a      	bne.n	8005848 <vTaskSwitchContext+0x40>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	607b      	str	r3, [r7, #4]
}
 8005844:	bf00      	nop
 8005846:	e7fe      	b.n	8005846 <vTaskSwitchContext+0x3e>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	3b01      	subs	r3, #1
 800584c:	60fb      	str	r3, [r7, #12]
 800584e:	491d      	ldr	r1, [pc, #116]	; (80058c4 <vTaskSwitchContext+0xbc>)
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	4613      	mov	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	440b      	add	r3, r1
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0e4      	beq.n	800582c <vTaskSwitchContext+0x24>
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4613      	mov	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4a15      	ldr	r2, [pc, #84]	; (80058c4 <vTaskSwitchContext+0xbc>)
 800586e:	4413      	add	r3, r2
 8005870:	60bb      	str	r3, [r7, #8]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	605a      	str	r2, [r3, #4]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	3308      	adds	r3, #8
 8005884:	429a      	cmp	r2, r3
 8005886:	d104      	bne.n	8005892 <vTaskSwitchContext+0x8a>
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	605a      	str	r2, [r3, #4]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	4a0b      	ldr	r2, [pc, #44]	; (80058c8 <vTaskSwitchContext+0xc0>)
 800589a:	6013      	str	r3, [r2, #0]
 800589c:	4a08      	ldr	r2, [pc, #32]	; (80058c0 <vTaskSwitchContext+0xb8>)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058a2:	4b09      	ldr	r3, [pc, #36]	; (80058c8 <vTaskSwitchContext+0xc0>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	3354      	adds	r3, #84	; 0x54
 80058a8:	4a08      	ldr	r2, [pc, #32]	; (80058cc <vTaskSwitchContext+0xc4>)
 80058aa:	6013      	str	r3, [r2, #0]
}
 80058ac:	bf00      	nop
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	20000e08 	.word	0x20000e08
 80058bc:	20000df4 	.word	0x20000df4
 80058c0:	20000de8 	.word	0x20000de8
 80058c4:	20000910 	.word	0x20000910
 80058c8:	2000090c 	.word	0x2000090c
 80058cc:	20000068 	.word	0x20000068

080058d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	60fb      	str	r3, [r7, #12]
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058f6:	4b07      	ldr	r3, [pc, #28]	; (8005914 <vTaskPlaceOnEventList+0x44>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3318      	adds	r3, #24
 80058fc:	4619      	mov	r1, r3
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7fe fb95 	bl	800402e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005904:	2101      	movs	r1, #1
 8005906:	6838      	ldr	r0, [r7, #0]
 8005908:	f000 fb8e 	bl	8006028 <prvAddCurrentTaskToDelayedList>
}
 800590c:	bf00      	nop
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	2000090c 	.word	0x2000090c

08005918 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10a      	bne.n	8005940 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	617b      	str	r3, [r7, #20]
}
 800593c:	bf00      	nop
 800593e:	e7fe      	b.n	800593e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005940:	4b0a      	ldr	r3, [pc, #40]	; (800596c <vTaskPlaceOnEventListRestricted+0x54>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3318      	adds	r3, #24
 8005946:	4619      	mov	r1, r3
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f7fe fb4c 	bl	8003fe6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005958:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800595a:	6879      	ldr	r1, [r7, #4]
 800595c:	68b8      	ldr	r0, [r7, #8]
 800595e:	f000 fb63 	bl	8006028 <prvAddCurrentTaskToDelayedList>
	}
 8005962:	bf00      	nop
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	2000090c 	.word	0x2000090c

08005970 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10a      	bne.n	800599c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	60fb      	str	r3, [r7, #12]
}
 8005998:	bf00      	nop
 800599a:	e7fe      	b.n	800599a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	3318      	adds	r3, #24
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7fe fb7d 	bl	80040a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059a6:	4b1e      	ldr	r3, [pc, #120]	; (8005a20 <xTaskRemoveFromEventList+0xb0>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d11d      	bne.n	80059ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	3304      	adds	r3, #4
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fe fb74 	bl	80040a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059bc:	4b19      	ldr	r3, [pc, #100]	; (8005a24 <xTaskRemoveFromEventList+0xb4>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d903      	bls.n	80059cc <xTaskRemoveFromEventList+0x5c>
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c8:	4a16      	ldr	r2, [pc, #88]	; (8005a24 <xTaskRemoveFromEventList+0xb4>)
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d0:	4613      	mov	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4a13      	ldr	r2, [pc, #76]	; (8005a28 <xTaskRemoveFromEventList+0xb8>)
 80059da:	441a      	add	r2, r3
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	3304      	adds	r3, #4
 80059e0:	4619      	mov	r1, r3
 80059e2:	4610      	mov	r0, r2
 80059e4:	f7fe faff 	bl	8003fe6 <vListInsertEnd>
 80059e8:	e005      	b.n	80059f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	3318      	adds	r3, #24
 80059ee:	4619      	mov	r1, r3
 80059f0:	480e      	ldr	r0, [pc, #56]	; (8005a2c <xTaskRemoveFromEventList+0xbc>)
 80059f2:	f7fe faf8 	bl	8003fe6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059fa:	4b0d      	ldr	r3, [pc, #52]	; (8005a30 <xTaskRemoveFromEventList+0xc0>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d905      	bls.n	8005a10 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a04:	2301      	movs	r3, #1
 8005a06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a08:	4b0a      	ldr	r3, [pc, #40]	; (8005a34 <xTaskRemoveFromEventList+0xc4>)
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	e001      	b.n	8005a14 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005a10:	2300      	movs	r3, #0
 8005a12:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a14:	697b      	ldr	r3, [r7, #20]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000e08 	.word	0x20000e08
 8005a24:	20000de8 	.word	0x20000de8
 8005a28:	20000910 	.word	0x20000910
 8005a2c:	20000da0 	.word	0x20000da0
 8005a30:	2000090c 	.word	0x2000090c
 8005a34:	20000df4 	.word	0x20000df4

08005a38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a40:	4b06      	ldr	r3, [pc, #24]	; (8005a5c <vTaskInternalSetTimeOutState+0x24>)
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a48:	4b05      	ldr	r3, [pc, #20]	; (8005a60 <vTaskInternalSetTimeOutState+0x28>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	605a      	str	r2, [r3, #4]
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	20000df8 	.word	0x20000df8
 8005a60:	20000de4 	.word	0x20000de4

08005a64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10a      	bne.n	8005a8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	613b      	str	r3, [r7, #16]
}
 8005a86:	bf00      	nop
 8005a88:	e7fe      	b.n	8005a88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10a      	bne.n	8005aa6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	60fb      	str	r3, [r7, #12]
}
 8005aa2:	bf00      	nop
 8005aa4:	e7fe      	b.n	8005aa4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005aa6:	f000 ff8d 	bl	80069c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005aaa:	4b1d      	ldr	r3, [pc, #116]	; (8005b20 <xTaskCheckForTimeOut+0xbc>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ac2:	d102      	bne.n	8005aca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61fb      	str	r3, [r7, #28]
 8005ac8:	e023      	b.n	8005b12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	4b15      	ldr	r3, [pc, #84]	; (8005b24 <xTaskCheckForTimeOut+0xc0>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d007      	beq.n	8005ae6 <xTaskCheckForTimeOut+0x82>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d302      	bcc.n	8005ae6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	61fb      	str	r3, [r7, #28]
 8005ae4:	e015      	b.n	8005b12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d20b      	bcs.n	8005b08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	1ad2      	subs	r2, r2, r3
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff ff9b 	bl	8005a38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b02:	2300      	movs	r3, #0
 8005b04:	61fb      	str	r3, [r7, #28]
 8005b06:	e004      	b.n	8005b12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b12:	f000 ff87 	bl	8006a24 <vPortExitCritical>

	return xReturn;
 8005b16:	69fb      	ldr	r3, [r7, #28]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3720      	adds	r7, #32
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	20000de4 	.word	0x20000de4
 8005b24:	20000df8 	.word	0x20000df8

08005b28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b28:	b480      	push	{r7}
 8005b2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b2c:	4b03      	ldr	r3, [pc, #12]	; (8005b3c <vTaskMissedYield+0x14>)
 8005b2e:	2201      	movs	r2, #1
 8005b30:	601a      	str	r2, [r3, #0]
}
 8005b32:	bf00      	nop
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	20000df4 	.word	0x20000df4

08005b40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b48:	f000 f852 	bl	8005bf0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b4c:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <prvIdleTask+0x28>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d9f9      	bls.n	8005b48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b54:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <prvIdleTask+0x2c>)
 8005b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b64:	e7f0      	b.n	8005b48 <prvIdleTask+0x8>
 8005b66:	bf00      	nop
 8005b68:	20000910 	.word	0x20000910
 8005b6c:	e000ed04 	.word	0xe000ed04

08005b70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b76:	2300      	movs	r3, #0
 8005b78:	607b      	str	r3, [r7, #4]
 8005b7a:	e00c      	b.n	8005b96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4a12      	ldr	r2, [pc, #72]	; (8005bd0 <prvInitialiseTaskLists+0x60>)
 8005b88:	4413      	add	r3, r2
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fe f9fe 	bl	8003f8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	3301      	adds	r3, #1
 8005b94:	607b      	str	r3, [r7, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b37      	cmp	r3, #55	; 0x37
 8005b9a:	d9ef      	bls.n	8005b7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b9c:	480d      	ldr	r0, [pc, #52]	; (8005bd4 <prvInitialiseTaskLists+0x64>)
 8005b9e:	f7fe f9f5 	bl	8003f8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ba2:	480d      	ldr	r0, [pc, #52]	; (8005bd8 <prvInitialiseTaskLists+0x68>)
 8005ba4:	f7fe f9f2 	bl	8003f8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ba8:	480c      	ldr	r0, [pc, #48]	; (8005bdc <prvInitialiseTaskLists+0x6c>)
 8005baa:	f7fe f9ef 	bl	8003f8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005bae:	480c      	ldr	r0, [pc, #48]	; (8005be0 <prvInitialiseTaskLists+0x70>)
 8005bb0:	f7fe f9ec 	bl	8003f8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005bb4:	480b      	ldr	r0, [pc, #44]	; (8005be4 <prvInitialiseTaskLists+0x74>)
 8005bb6:	f7fe f9e9 	bl	8003f8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bba:	4b0b      	ldr	r3, [pc, #44]	; (8005be8 <prvInitialiseTaskLists+0x78>)
 8005bbc:	4a05      	ldr	r2, [pc, #20]	; (8005bd4 <prvInitialiseTaskLists+0x64>)
 8005bbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bc0:	4b0a      	ldr	r3, [pc, #40]	; (8005bec <prvInitialiseTaskLists+0x7c>)
 8005bc2:	4a05      	ldr	r2, [pc, #20]	; (8005bd8 <prvInitialiseTaskLists+0x68>)
 8005bc4:	601a      	str	r2, [r3, #0]
}
 8005bc6:	bf00      	nop
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	20000910 	.word	0x20000910
 8005bd4:	20000d70 	.word	0x20000d70
 8005bd8:	20000d84 	.word	0x20000d84
 8005bdc:	20000da0 	.word	0x20000da0
 8005be0:	20000db4 	.word	0x20000db4
 8005be4:	20000dcc 	.word	0x20000dcc
 8005be8:	20000d98 	.word	0x20000d98
 8005bec:	20000d9c 	.word	0x20000d9c

08005bf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bf6:	e019      	b.n	8005c2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005bf8:	f000 fee4 	bl	80069c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bfc:	4b10      	ldr	r3, [pc, #64]	; (8005c40 <prvCheckTasksWaitingTermination+0x50>)
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3304      	adds	r3, #4
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fe fa49 	bl	80040a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c0e:	4b0d      	ldr	r3, [pc, #52]	; (8005c44 <prvCheckTasksWaitingTermination+0x54>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3b01      	subs	r3, #1
 8005c14:	4a0b      	ldr	r2, [pc, #44]	; (8005c44 <prvCheckTasksWaitingTermination+0x54>)
 8005c16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c18:	4b0b      	ldr	r3, [pc, #44]	; (8005c48 <prvCheckTasksWaitingTermination+0x58>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	4a0a      	ldr	r2, [pc, #40]	; (8005c48 <prvCheckTasksWaitingTermination+0x58>)
 8005c20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c22:	f000 feff 	bl	8006a24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f810 	bl	8005c4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c2c:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <prvCheckTasksWaitingTermination+0x58>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1e1      	bne.n	8005bf8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000db4 	.word	0x20000db4
 8005c44:	20000de0 	.word	0x20000de0
 8005c48:	20000dc8 	.word	0x20000dc8

08005c4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3354      	adds	r3, #84	; 0x54
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f001 fbcd 	bl	80073f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d108      	bne.n	8005c7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f001 f897 	bl	8006da0 <vPortFree>
				vPortFree( pxTCB );
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f001 f894 	bl	8006da0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c78:	e018      	b.n	8005cac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d103      	bne.n	8005c8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f001 f88b 	bl	8006da0 <vPortFree>
	}
 8005c8a:	e00f      	b.n	8005cac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d00a      	beq.n	8005cac <prvDeleteTCB+0x60>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	60fb      	str	r3, [r7, #12]
}
 8005ca8:	bf00      	nop
 8005caa:	e7fe      	b.n	8005caa <prvDeleteTCB+0x5e>
	}
 8005cac:	bf00      	nop
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cba:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <prvResetNextTaskUnblockTime+0x38>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d104      	bne.n	8005cce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cc4:	4b0a      	ldr	r3, [pc, #40]	; (8005cf0 <prvResetNextTaskUnblockTime+0x3c>)
 8005cc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ccc:	e008      	b.n	8005ce0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cce:	4b07      	ldr	r3, [pc, #28]	; (8005cec <prvResetNextTaskUnblockTime+0x38>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	4a04      	ldr	r2, [pc, #16]	; (8005cf0 <prvResetNextTaskUnblockTime+0x3c>)
 8005cde:	6013      	str	r3, [r2, #0]
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	20000d98 	.word	0x20000d98
 8005cf0:	20000e00 	.word	0x20000e00

08005cf4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005cfa:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <xTaskGetCurrentTaskHandle+0x1c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005d00:	687b      	ldr	r3, [r7, #4]
	}
 8005d02:	4618      	mov	r0, r3
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	2000090c 	.word	0x2000090c

08005d14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d1a:	4b0b      	ldr	r3, [pc, #44]	; (8005d48 <xTaskGetSchedulerState+0x34>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d102      	bne.n	8005d28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d22:	2301      	movs	r3, #1
 8005d24:	607b      	str	r3, [r7, #4]
 8005d26:	e008      	b.n	8005d3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d28:	4b08      	ldr	r3, [pc, #32]	; (8005d4c <xTaskGetSchedulerState+0x38>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d102      	bne.n	8005d36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d30:	2302      	movs	r3, #2
 8005d32:	607b      	str	r3, [r7, #4]
 8005d34:	e001      	b.n	8005d3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d36:	2300      	movs	r3, #0
 8005d38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d3a:	687b      	ldr	r3, [r7, #4]
	}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	20000dec 	.word	0x20000dec
 8005d4c:	20000e08 	.word	0x20000e08

08005d50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d051      	beq.n	8005e0a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d6a:	4b2a      	ldr	r3, [pc, #168]	; (8005e14 <xTaskPriorityInherit+0xc4>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d241      	bcs.n	8005df8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	db06      	blt.n	8005d8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d7c:	4b25      	ldr	r3, [pc, #148]	; (8005e14 <xTaskPriorityInherit+0xc4>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	6959      	ldr	r1, [r3, #20]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4a1f      	ldr	r2, [pc, #124]	; (8005e18 <xTaskPriorityInherit+0xc8>)
 8005d9c:	4413      	add	r3, r2
 8005d9e:	4299      	cmp	r1, r3
 8005da0:	d122      	bne.n	8005de8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	3304      	adds	r3, #4
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fe f97a 	bl	80040a0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005dac:	4b19      	ldr	r3, [pc, #100]	; (8005e14 <xTaskPriorityInherit+0xc4>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dba:	4b18      	ldr	r3, [pc, #96]	; (8005e1c <xTaskPriorityInherit+0xcc>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d903      	bls.n	8005dca <xTaskPriorityInherit+0x7a>
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc6:	4a15      	ldr	r2, [pc, #84]	; (8005e1c <xTaskPriorityInherit+0xcc>)
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dce:	4613      	mov	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4a10      	ldr	r2, [pc, #64]	; (8005e18 <xTaskPriorityInherit+0xc8>)
 8005dd8:	441a      	add	r2, r3
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	3304      	adds	r3, #4
 8005dde:	4619      	mov	r1, r3
 8005de0:	4610      	mov	r0, r2
 8005de2:	f7fe f900 	bl	8003fe6 <vListInsertEnd>
 8005de6:	e004      	b.n	8005df2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005de8:	4b0a      	ldr	r3, [pc, #40]	; (8005e14 <xTaskPriorityInherit+0xc4>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005df2:	2301      	movs	r3, #1
 8005df4:	60fb      	str	r3, [r7, #12]
 8005df6:	e008      	b.n	8005e0a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005dfc:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <xTaskPriorityInherit+0xc4>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d201      	bcs.n	8005e0a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005e06:	2301      	movs	r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
	}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	2000090c 	.word	0x2000090c
 8005e18:	20000910 	.word	0x20000910
 8005e1c:	20000de8 	.word	0x20000de8

08005e20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d056      	beq.n	8005ee4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e36:	4b2e      	ldr	r3, [pc, #184]	; (8005ef0 <xTaskPriorityDisinherit+0xd0>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d00a      	beq.n	8005e56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	60fb      	str	r3, [r7, #12]
}
 8005e52:	bf00      	nop
 8005e54:	e7fe      	b.n	8005e54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10a      	bne.n	8005e74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	60bb      	str	r3, [r7, #8]
}
 8005e70:	bf00      	nop
 8005e72:	e7fe      	b.n	8005e72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e78:	1e5a      	subs	r2, r3, #1
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d02c      	beq.n	8005ee4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d128      	bne.n	8005ee4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	3304      	adds	r3, #4
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fe f902 	bl	80040a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ef4 <xTaskPriorityDisinherit+0xd4>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d903      	bls.n	8005ec4 <xTaskPriorityDisinherit+0xa4>
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	4a0c      	ldr	r2, [pc, #48]	; (8005ef4 <xTaskPriorityDisinherit+0xd4>)
 8005ec2:	6013      	str	r3, [r2, #0]
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec8:	4613      	mov	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4413      	add	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4a09      	ldr	r2, [pc, #36]	; (8005ef8 <xTaskPriorityDisinherit+0xd8>)
 8005ed2:	441a      	add	r2, r3
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4610      	mov	r0, r2
 8005edc:	f7fe f883 	bl	8003fe6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ee4:	697b      	ldr	r3, [r7, #20]
	}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	2000090c 	.word	0x2000090c
 8005ef4:	20000de8 	.word	0x20000de8
 8005ef8:	20000910 	.word	0x20000910

08005efc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b088      	sub	sp, #32
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d06a      	beq.n	8005fea <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10a      	bne.n	8005f32 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	60fb      	str	r3, [r7, #12]
}
 8005f2e:	bf00      	nop
 8005f30:	e7fe      	b.n	8005f30 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d902      	bls.n	8005f42 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	61fb      	str	r3, [r7, #28]
 8005f40:	e002      	b.n	8005f48 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f46:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	69fa      	ldr	r2, [r7, #28]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d04b      	beq.n	8005fea <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d146      	bne.n	8005fea <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005f5c:	4b25      	ldr	r3, [pc, #148]	; (8005ff4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	69ba      	ldr	r2, [r7, #24]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d10a      	bne.n	8005f7c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	60bb      	str	r3, [r7, #8]
}
 8005f78:	bf00      	nop
 8005f7a:	e7fe      	b.n	8005f7a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	db04      	blt.n	8005f9a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	6959      	ldr	r1, [r3, #20]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4a13      	ldr	r2, [pc, #76]	; (8005ff8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005faa:	4413      	add	r3, r2
 8005fac:	4299      	cmp	r1, r3
 8005fae:	d11c      	bne.n	8005fea <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7fe f873 	bl	80040a0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fbe:	4b0f      	ldr	r3, [pc, #60]	; (8005ffc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d903      	bls.n	8005fce <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fca:	4a0c      	ldr	r2, [pc, #48]	; (8005ffc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4a07      	ldr	r2, [pc, #28]	; (8005ff8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005fdc:	441a      	add	r2, r3
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	f7fd fffe 	bl	8003fe6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fea:	bf00      	nop
 8005fec:	3720      	adds	r7, #32
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	2000090c 	.word	0x2000090c
 8005ff8:	20000910 	.word	0x20000910
 8005ffc:	20000de8 	.word	0x20000de8

08006000 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006000:	b480      	push	{r7}
 8006002:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006004:	4b07      	ldr	r3, [pc, #28]	; (8006024 <pvTaskIncrementMutexHeldCount+0x24>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d004      	beq.n	8006016 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800600c:	4b05      	ldr	r3, [pc, #20]	; (8006024 <pvTaskIncrementMutexHeldCount+0x24>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006012:	3201      	adds	r2, #1
 8006014:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006016:	4b03      	ldr	r3, [pc, #12]	; (8006024 <pvTaskIncrementMutexHeldCount+0x24>)
 8006018:	681b      	ldr	r3, [r3, #0]
	}
 800601a:	4618      	mov	r0, r3
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	2000090c 	.word	0x2000090c

08006028 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006032:	4b21      	ldr	r3, [pc, #132]	; (80060b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006038:	4b20      	ldr	r3, [pc, #128]	; (80060bc <prvAddCurrentTaskToDelayedList+0x94>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3304      	adds	r3, #4
 800603e:	4618      	mov	r0, r3
 8006040:	f7fe f82e 	bl	80040a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800604a:	d10a      	bne.n	8006062 <prvAddCurrentTaskToDelayedList+0x3a>
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d007      	beq.n	8006062 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006052:	4b1a      	ldr	r3, [pc, #104]	; (80060bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3304      	adds	r3, #4
 8006058:	4619      	mov	r1, r3
 800605a:	4819      	ldr	r0, [pc, #100]	; (80060c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800605c:	f7fd ffc3 	bl	8003fe6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006060:	e026      	b.n	80060b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4413      	add	r3, r2
 8006068:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800606a:	4b14      	ldr	r3, [pc, #80]	; (80060bc <prvAddCurrentTaskToDelayedList+0x94>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	429a      	cmp	r2, r3
 8006078:	d209      	bcs.n	800608e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800607a:	4b12      	ldr	r3, [pc, #72]	; (80060c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	4b0f      	ldr	r3, [pc, #60]	; (80060bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3304      	adds	r3, #4
 8006084:	4619      	mov	r1, r3
 8006086:	4610      	mov	r0, r2
 8006088:	f7fd ffd1 	bl	800402e <vListInsert>
}
 800608c:	e010      	b.n	80060b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800608e:	4b0e      	ldr	r3, [pc, #56]	; (80060c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4b0a      	ldr	r3, [pc, #40]	; (80060bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3304      	adds	r3, #4
 8006098:	4619      	mov	r1, r3
 800609a:	4610      	mov	r0, r2
 800609c:	f7fd ffc7 	bl	800402e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060a0:	4b0a      	ldr	r3, [pc, #40]	; (80060cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d202      	bcs.n	80060b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80060aa:	4a08      	ldr	r2, [pc, #32]	; (80060cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	6013      	str	r3, [r2, #0]
}
 80060b0:	bf00      	nop
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	20000de4 	.word	0x20000de4
 80060bc:	2000090c 	.word	0x2000090c
 80060c0:	20000dcc 	.word	0x20000dcc
 80060c4:	20000d9c 	.word	0x20000d9c
 80060c8:	20000d98 	.word	0x20000d98
 80060cc:	20000e00 	.word	0x20000e00

080060d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08a      	sub	sp, #40	; 0x28
 80060d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060da:	f000 fb07 	bl	80066ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060de:	4b1c      	ldr	r3, [pc, #112]	; (8006150 <xTimerCreateTimerTask+0x80>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d021      	beq.n	800612a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060ee:	1d3a      	adds	r2, r7, #4
 80060f0:	f107 0108 	add.w	r1, r7, #8
 80060f4:	f107 030c 	add.w	r3, r7, #12
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fd ff2d 	bl	8003f58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060fe:	6879      	ldr	r1, [r7, #4]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	9202      	str	r2, [sp, #8]
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	2302      	movs	r3, #2
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	2300      	movs	r3, #0
 800610e:	460a      	mov	r2, r1
 8006110:	4910      	ldr	r1, [pc, #64]	; (8006154 <xTimerCreateTimerTask+0x84>)
 8006112:	4811      	ldr	r0, [pc, #68]	; (8006158 <xTimerCreateTimerTask+0x88>)
 8006114:	f7fe ffa6 	bl	8005064 <xTaskCreateStatic>
 8006118:	4603      	mov	r3, r0
 800611a:	4a10      	ldr	r2, [pc, #64]	; (800615c <xTimerCreateTimerTask+0x8c>)
 800611c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800611e:	4b0f      	ldr	r3, [pc, #60]	; (800615c <xTimerCreateTimerTask+0x8c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006126:	2301      	movs	r3, #1
 8006128:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10a      	bne.n	8006146 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	613b      	str	r3, [r7, #16]
}
 8006142:	bf00      	nop
 8006144:	e7fe      	b.n	8006144 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006146:	697b      	ldr	r3, [r7, #20]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	20000e3c 	.word	0x20000e3c
 8006154:	08007b80 	.word	0x08007b80
 8006158:	08006295 	.word	0x08006295
 800615c:	20000e40 	.word	0x20000e40

08006160 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08a      	sub	sp, #40	; 0x28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800616e:	2300      	movs	r3, #0
 8006170:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10a      	bne.n	800618e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	623b      	str	r3, [r7, #32]
}
 800618a:	bf00      	nop
 800618c:	e7fe      	b.n	800618c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800618e:	4b1a      	ldr	r3, [pc, #104]	; (80061f8 <xTimerGenericCommand+0x98>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d02a      	beq.n	80061ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2b05      	cmp	r3, #5
 80061a6:	dc18      	bgt.n	80061da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80061a8:	f7ff fdb4 	bl	8005d14 <xTaskGetSchedulerState>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d109      	bne.n	80061c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80061b2:	4b11      	ldr	r3, [pc, #68]	; (80061f8 <xTimerGenericCommand+0x98>)
 80061b4:	6818      	ldr	r0, [r3, #0]
 80061b6:	f107 0110 	add.w	r1, r7, #16
 80061ba:	2300      	movs	r3, #0
 80061bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061be:	f7fe f9f7 	bl	80045b0 <xQueueGenericSend>
 80061c2:	6278      	str	r0, [r7, #36]	; 0x24
 80061c4:	e012      	b.n	80061ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80061c6:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <xTimerGenericCommand+0x98>)
 80061c8:	6818      	ldr	r0, [r3, #0]
 80061ca:	f107 0110 	add.w	r1, r7, #16
 80061ce:	2300      	movs	r3, #0
 80061d0:	2200      	movs	r2, #0
 80061d2:	f7fe f9ed 	bl	80045b0 <xQueueGenericSend>
 80061d6:	6278      	str	r0, [r7, #36]	; 0x24
 80061d8:	e008      	b.n	80061ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061da:	4b07      	ldr	r3, [pc, #28]	; (80061f8 <xTimerGenericCommand+0x98>)
 80061dc:	6818      	ldr	r0, [r3, #0]
 80061de:	f107 0110 	add.w	r1, r7, #16
 80061e2:	2300      	movs	r3, #0
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	f7fe fae1 	bl	80047ac <xQueueGenericSendFromISR>
 80061ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3728      	adds	r7, #40	; 0x28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	20000e3c 	.word	0x20000e3c

080061fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b088      	sub	sp, #32
 8006200:	af02      	add	r7, sp, #8
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006206:	4b22      	ldr	r3, [pc, #136]	; (8006290 <prvProcessExpiredTimer+0x94>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	3304      	adds	r3, #4
 8006214:	4618      	mov	r0, r3
 8006216:	f7fd ff43 	bl	80040a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006220:	f003 0304 	and.w	r3, r3, #4
 8006224:	2b00      	cmp	r3, #0
 8006226:	d022      	beq.n	800626e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	699a      	ldr	r2, [r3, #24]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	18d1      	adds	r1, r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	6978      	ldr	r0, [r7, #20]
 8006236:	f000 f8d1 	bl	80063dc <prvInsertTimerInActiveList>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d01f      	beq.n	8006280 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006240:	2300      	movs	r3, #0
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	2300      	movs	r3, #0
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	2100      	movs	r1, #0
 800624a:	6978      	ldr	r0, [r7, #20]
 800624c:	f7ff ff88 	bl	8006160 <xTimerGenericCommand>
 8006250:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d113      	bne.n	8006280 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	60fb      	str	r3, [r7, #12]
}
 800626a:	bf00      	nop
 800626c:	e7fe      	b.n	800626c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006274:	f023 0301 	bic.w	r3, r3, #1
 8006278:	b2da      	uxtb	r2, r3
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	6978      	ldr	r0, [r7, #20]
 8006286:	4798      	blx	r3
}
 8006288:	bf00      	nop
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	20000e34 	.word	0x20000e34

08006294 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800629c:	f107 0308 	add.w	r3, r7, #8
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 f857 	bl	8006354 <prvGetNextExpireTime>
 80062a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	4619      	mov	r1, r3
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 f803 	bl	80062b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80062b2:	f000 f8d5 	bl	8006460 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062b6:	e7f1      	b.n	800629c <prvTimerTask+0x8>

080062b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80062c2:	f7ff f92b 	bl	800551c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062c6:	f107 0308 	add.w	r3, r7, #8
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 f866 	bl	800639c <prvSampleTimeNow>
 80062d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d130      	bne.n	800633a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10a      	bne.n	80062f4 <prvProcessTimerOrBlockTask+0x3c>
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d806      	bhi.n	80062f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062e6:	f7ff f927 	bl	8005538 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062ea:	68f9      	ldr	r1, [r7, #12]
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7ff ff85 	bl	80061fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062f2:	e024      	b.n	800633e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d008      	beq.n	800630c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062fa:	4b13      	ldr	r3, [pc, #76]	; (8006348 <prvProcessTimerOrBlockTask+0x90>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <prvProcessTimerOrBlockTask+0x50>
 8006304:	2301      	movs	r3, #1
 8006306:	e000      	b.n	800630a <prvProcessTimerOrBlockTask+0x52>
 8006308:	2300      	movs	r3, #0
 800630a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800630c:	4b0f      	ldr	r3, [pc, #60]	; (800634c <prvProcessTimerOrBlockTask+0x94>)
 800630e:	6818      	ldr	r0, [r3, #0]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	4619      	mov	r1, r3
 800631a:	f7fe fe6f 	bl	8004ffc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800631e:	f7ff f90b 	bl	8005538 <xTaskResumeAll>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10a      	bne.n	800633e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006328:	4b09      	ldr	r3, [pc, #36]	; (8006350 <prvProcessTimerOrBlockTask+0x98>)
 800632a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	f3bf 8f6f 	isb	sy
}
 8006338:	e001      	b.n	800633e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800633a:	f7ff f8fd 	bl	8005538 <xTaskResumeAll>
}
 800633e:	bf00      	nop
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20000e38 	.word	0x20000e38
 800634c:	20000e3c 	.word	0x20000e3c
 8006350:	e000ed04 	.word	0xe000ed04

08006354 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800635c:	4b0e      	ldr	r3, [pc, #56]	; (8006398 <prvGetNextExpireTime+0x44>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <prvGetNextExpireTime+0x16>
 8006366:	2201      	movs	r2, #1
 8006368:	e000      	b.n	800636c <prvGetNextExpireTime+0x18>
 800636a:	2200      	movs	r2, #0
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d105      	bne.n	8006384 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006378:	4b07      	ldr	r3, [pc, #28]	; (8006398 <prvGetNextExpireTime+0x44>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	60fb      	str	r3, [r7, #12]
 8006382:	e001      	b.n	8006388 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006388:	68fb      	ldr	r3, [r7, #12]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	20000e34 	.word	0x20000e34

0800639c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80063a4:	f7ff f966 	bl	8005674 <xTaskGetTickCount>
 80063a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80063aa:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <prvSampleTimeNow+0x3c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d205      	bcs.n	80063c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80063b4:	f000 f936 	bl	8006624 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	e002      	b.n	80063c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80063c6:	4a04      	ldr	r2, [pc, #16]	; (80063d8 <prvSampleTimeNow+0x3c>)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80063cc:	68fb      	ldr	r3, [r7, #12]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000e44 	.word	0x20000e44

080063dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063ea:	2300      	movs	r3, #0
 80063ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d812      	bhi.n	8006428 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	1ad2      	subs	r2, r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	429a      	cmp	r2, r3
 800640e:	d302      	bcc.n	8006416 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006410:	2301      	movs	r3, #1
 8006412:	617b      	str	r3, [r7, #20]
 8006414:	e01b      	b.n	800644e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006416:	4b10      	ldr	r3, [pc, #64]	; (8006458 <prvInsertTimerInActiveList+0x7c>)
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3304      	adds	r3, #4
 800641e:	4619      	mov	r1, r3
 8006420:	4610      	mov	r0, r2
 8006422:	f7fd fe04 	bl	800402e <vListInsert>
 8006426:	e012      	b.n	800644e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	d206      	bcs.n	800643e <prvInsertTimerInActiveList+0x62>
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	429a      	cmp	r2, r3
 8006436:	d302      	bcc.n	800643e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006438:	2301      	movs	r3, #1
 800643a:	617b      	str	r3, [r7, #20]
 800643c:	e007      	b.n	800644e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800643e:	4b07      	ldr	r3, [pc, #28]	; (800645c <prvInsertTimerInActiveList+0x80>)
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	3304      	adds	r3, #4
 8006446:	4619      	mov	r1, r3
 8006448:	4610      	mov	r0, r2
 800644a:	f7fd fdf0 	bl	800402e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800644e:	697b      	ldr	r3, [r7, #20]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3718      	adds	r7, #24
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	20000e38 	.word	0x20000e38
 800645c:	20000e34 	.word	0x20000e34

08006460 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b08e      	sub	sp, #56	; 0x38
 8006464:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006466:	e0ca      	b.n	80065fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	da18      	bge.n	80064a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800646e:	1d3b      	adds	r3, r7, #4
 8006470:	3304      	adds	r3, #4
 8006472:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10a      	bne.n	8006490 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	61fb      	str	r3, [r7, #28]
}
 800648c:	bf00      	nop
 800648e:	e7fe      	b.n	800648e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006496:	6850      	ldr	r0, [r2, #4]
 8006498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800649a:	6892      	ldr	r2, [r2, #8]
 800649c:	4611      	mov	r1, r2
 800649e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f2c0 80ab 	blt.w	80065fe <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80064ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d004      	beq.n	80064be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	3304      	adds	r3, #4
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7fd fdf1 	bl	80040a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064be:	463b      	mov	r3, r7
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7ff ff6b 	bl	800639c <prvSampleTimeNow>
 80064c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b09      	cmp	r3, #9
 80064cc:	f200 8096 	bhi.w	80065fc <prvProcessReceivedCommands+0x19c>
 80064d0:	a201      	add	r2, pc, #4	; (adr r2, 80064d8 <prvProcessReceivedCommands+0x78>)
 80064d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d6:	bf00      	nop
 80064d8:	08006501 	.word	0x08006501
 80064dc:	08006501 	.word	0x08006501
 80064e0:	08006501 	.word	0x08006501
 80064e4:	08006575 	.word	0x08006575
 80064e8:	08006589 	.word	0x08006589
 80064ec:	080065d3 	.word	0x080065d3
 80064f0:	08006501 	.word	0x08006501
 80064f4:	08006501 	.word	0x08006501
 80064f8:	08006575 	.word	0x08006575
 80064fc:	08006589 	.word	0x08006589
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006506:	f043 0301 	orr.w	r3, r3, #1
 800650a:	b2da      	uxtb	r2, r3
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	18d1      	adds	r1, r2, r3
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800651e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006520:	f7ff ff5c 	bl	80063dc <prvInsertTimerInActiveList>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d069      	beq.n	80065fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800652a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006530:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	2b00      	cmp	r3, #0
 800653e:	d05e      	beq.n	80065fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	441a      	add	r2, r3
 8006548:	2300      	movs	r3, #0
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	2300      	movs	r3, #0
 800654e:	2100      	movs	r1, #0
 8006550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006552:	f7ff fe05 	bl	8006160 <xTimerGenericCommand>
 8006556:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d14f      	bne.n	80065fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	61bb      	str	r3, [r7, #24]
}
 8006570:	bf00      	nop
 8006572:	e7fe      	b.n	8006572 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800657a:	f023 0301 	bic.w	r3, r3, #1
 800657e:	b2da      	uxtb	r2, r3
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006586:	e03a      	b.n	80065fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800658e:	f043 0301 	orr.w	r3, r3, #1
 8006592:	b2da      	uxtb	r2, r3
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80065a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10a      	bne.n	80065be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80065a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	617b      	str	r3, [r7, #20]
}
 80065ba:	bf00      	nop
 80065bc:	e7fe      	b.n	80065bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	699a      	ldr	r2, [r3, #24]
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	18d1      	adds	r1, r2, r3
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065cc:	f7ff ff06 	bl	80063dc <prvInsertTimerInActiveList>
					break;
 80065d0:	e015      	b.n	80065fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d103      	bne.n	80065e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80065e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065e2:	f000 fbdd 	bl	8006da0 <vPortFree>
 80065e6:	e00a      	b.n	80065fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ee:	f023 0301 	bic.w	r3, r3, #1
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065fa:	e000      	b.n	80065fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80065fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065fe:	4b08      	ldr	r3, [pc, #32]	; (8006620 <prvProcessReceivedCommands+0x1c0>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	1d39      	adds	r1, r7, #4
 8006604:	2200      	movs	r2, #0
 8006606:	4618      	mov	r0, r3
 8006608:	f7fe f96c 	bl	80048e4 <xQueueReceive>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	f47f af2a 	bne.w	8006468 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop
 8006618:	3730      	adds	r7, #48	; 0x30
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20000e3c 	.word	0x20000e3c

08006624 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b088      	sub	sp, #32
 8006628:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800662a:	e048      	b.n	80066be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800662c:	4b2d      	ldr	r3, [pc, #180]	; (80066e4 <prvSwitchTimerLists+0xc0>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006636:	4b2b      	ldr	r3, [pc, #172]	; (80066e4 <prvSwitchTimerLists+0xc0>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	3304      	adds	r3, #4
 8006644:	4618      	mov	r0, r3
 8006646:	f7fd fd2b 	bl	80040a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	2b00      	cmp	r3, #0
 800665e:	d02e      	beq.n	80066be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	4413      	add	r3, r2
 8006668:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	429a      	cmp	r2, r3
 8006670:	d90e      	bls.n	8006690 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800667e:	4b19      	ldr	r3, [pc, #100]	; (80066e4 <prvSwitchTimerLists+0xc0>)
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3304      	adds	r3, #4
 8006686:	4619      	mov	r1, r3
 8006688:	4610      	mov	r0, r2
 800668a:	f7fd fcd0 	bl	800402e <vListInsert>
 800668e:	e016      	b.n	80066be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006690:	2300      	movs	r3, #0
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	2300      	movs	r3, #0
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	2100      	movs	r1, #0
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f7ff fd60 	bl	8006160 <xTimerGenericCommand>
 80066a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10a      	bne.n	80066be <prvSwitchTimerLists+0x9a>
	__asm volatile
 80066a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	603b      	str	r3, [r7, #0]
}
 80066ba:	bf00      	nop
 80066bc:	e7fe      	b.n	80066bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066be:	4b09      	ldr	r3, [pc, #36]	; (80066e4 <prvSwitchTimerLists+0xc0>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1b1      	bne.n	800662c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80066c8:	4b06      	ldr	r3, [pc, #24]	; (80066e4 <prvSwitchTimerLists+0xc0>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80066ce:	4b06      	ldr	r3, [pc, #24]	; (80066e8 <prvSwitchTimerLists+0xc4>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a04      	ldr	r2, [pc, #16]	; (80066e4 <prvSwitchTimerLists+0xc0>)
 80066d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80066d6:	4a04      	ldr	r2, [pc, #16]	; (80066e8 <prvSwitchTimerLists+0xc4>)
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	6013      	str	r3, [r2, #0]
}
 80066dc:	bf00      	nop
 80066de:	3718      	adds	r7, #24
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	20000e34 	.word	0x20000e34
 80066e8:	20000e38 	.word	0x20000e38

080066ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066f2:	f000 f967 	bl	80069c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80066f6:	4b15      	ldr	r3, [pc, #84]	; (800674c <prvCheckForValidListAndQueue+0x60>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d120      	bne.n	8006740 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066fe:	4814      	ldr	r0, [pc, #80]	; (8006750 <prvCheckForValidListAndQueue+0x64>)
 8006700:	f7fd fc44 	bl	8003f8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006704:	4813      	ldr	r0, [pc, #76]	; (8006754 <prvCheckForValidListAndQueue+0x68>)
 8006706:	f7fd fc41 	bl	8003f8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800670a:	4b13      	ldr	r3, [pc, #76]	; (8006758 <prvCheckForValidListAndQueue+0x6c>)
 800670c:	4a10      	ldr	r2, [pc, #64]	; (8006750 <prvCheckForValidListAndQueue+0x64>)
 800670e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006710:	4b12      	ldr	r3, [pc, #72]	; (800675c <prvCheckForValidListAndQueue+0x70>)
 8006712:	4a10      	ldr	r2, [pc, #64]	; (8006754 <prvCheckForValidListAndQueue+0x68>)
 8006714:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006716:	2300      	movs	r3, #0
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	4b11      	ldr	r3, [pc, #68]	; (8006760 <prvCheckForValidListAndQueue+0x74>)
 800671c:	4a11      	ldr	r2, [pc, #68]	; (8006764 <prvCheckForValidListAndQueue+0x78>)
 800671e:	2110      	movs	r1, #16
 8006720:	200a      	movs	r0, #10
 8006722:	f7fd fd4f 	bl	80041c4 <xQueueGenericCreateStatic>
 8006726:	4603      	mov	r3, r0
 8006728:	4a08      	ldr	r2, [pc, #32]	; (800674c <prvCheckForValidListAndQueue+0x60>)
 800672a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800672c:	4b07      	ldr	r3, [pc, #28]	; (800674c <prvCheckForValidListAndQueue+0x60>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d005      	beq.n	8006740 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006734:	4b05      	ldr	r3, [pc, #20]	; (800674c <prvCheckForValidListAndQueue+0x60>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	490b      	ldr	r1, [pc, #44]	; (8006768 <prvCheckForValidListAndQueue+0x7c>)
 800673a:	4618      	mov	r0, r3
 800673c:	f7fe fc0a 	bl	8004f54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006740:	f000 f970 	bl	8006a24 <vPortExitCritical>
}
 8006744:	bf00      	nop
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	20000e3c 	.word	0x20000e3c
 8006750:	20000e0c 	.word	0x20000e0c
 8006754:	20000e20 	.word	0x20000e20
 8006758:	20000e34 	.word	0x20000e34
 800675c:	20000e38 	.word	0x20000e38
 8006760:	20000ee8 	.word	0x20000ee8
 8006764:	20000e48 	.word	0x20000e48
 8006768:	08007b88 	.word	0x08007b88

0800676c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	3b04      	subs	r3, #4
 800677c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006784:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3b04      	subs	r3, #4
 800678a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	f023 0201 	bic.w	r2, r3, #1
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	3b04      	subs	r3, #4
 800679a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800679c:	4a0c      	ldr	r2, [pc, #48]	; (80067d0 <pxPortInitialiseStack+0x64>)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	3b14      	subs	r3, #20
 80067a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	3b04      	subs	r3, #4
 80067b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f06f 0202 	mvn.w	r2, #2
 80067ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	3b20      	subs	r3, #32
 80067c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067c2:	68fb      	ldr	r3, [r7, #12]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	080067d5 	.word	0x080067d5

080067d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067da:	2300      	movs	r3, #0
 80067dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067de:	4b12      	ldr	r3, [pc, #72]	; (8006828 <prvTaskExitError+0x54>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067e6:	d00a      	beq.n	80067fe <prvTaskExitError+0x2a>
	__asm volatile
 80067e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	60fb      	str	r3, [r7, #12]
}
 80067fa:	bf00      	nop
 80067fc:	e7fe      	b.n	80067fc <prvTaskExitError+0x28>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	60bb      	str	r3, [r7, #8]
}
 8006810:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006812:	bf00      	nop
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d0fc      	beq.n	8006814 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800681a:	bf00      	nop
 800681c:	bf00      	nop
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	2000000c 	.word	0x2000000c
 800682c:	00000000 	.word	0x00000000

08006830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006830:	4b07      	ldr	r3, [pc, #28]	; (8006850 <pxCurrentTCBConst2>)
 8006832:	6819      	ldr	r1, [r3, #0]
 8006834:	6808      	ldr	r0, [r1, #0]
 8006836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800683a:	f380 8809 	msr	PSP, r0
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f04f 0000 	mov.w	r0, #0
 8006846:	f380 8811 	msr	BASEPRI, r0
 800684a:	4770      	bx	lr
 800684c:	f3af 8000 	nop.w

08006850 <pxCurrentTCBConst2>:
 8006850:	2000090c 	.word	0x2000090c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006854:	bf00      	nop
 8006856:	bf00      	nop

08006858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006858:	4808      	ldr	r0, [pc, #32]	; (800687c <prvPortStartFirstTask+0x24>)
 800685a:	6800      	ldr	r0, [r0, #0]
 800685c:	6800      	ldr	r0, [r0, #0]
 800685e:	f380 8808 	msr	MSP, r0
 8006862:	f04f 0000 	mov.w	r0, #0
 8006866:	f380 8814 	msr	CONTROL, r0
 800686a:	b662      	cpsie	i
 800686c:	b661      	cpsie	f
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	df00      	svc	0
 8006878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800687a:	bf00      	nop
 800687c:	e000ed08 	.word	0xe000ed08

08006880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006886:	4b46      	ldr	r3, [pc, #280]	; (80069a0 <xPortStartScheduler+0x120>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a46      	ldr	r2, [pc, #280]	; (80069a4 <xPortStartScheduler+0x124>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d10a      	bne.n	80068a6 <xPortStartScheduler+0x26>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	613b      	str	r3, [r7, #16]
}
 80068a2:	bf00      	nop
 80068a4:	e7fe      	b.n	80068a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80068a6:	4b3e      	ldr	r3, [pc, #248]	; (80069a0 <xPortStartScheduler+0x120>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a3f      	ldr	r2, [pc, #252]	; (80069a8 <xPortStartScheduler+0x128>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d10a      	bne.n	80068c6 <xPortStartScheduler+0x46>
	__asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	60fb      	str	r3, [r7, #12]
}
 80068c2:	bf00      	nop
 80068c4:	e7fe      	b.n	80068c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068c6:	4b39      	ldr	r3, [pc, #228]	; (80069ac <xPortStartScheduler+0x12c>)
 80068c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	22ff      	movs	r2, #255	; 0xff
 80068d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068e0:	78fb      	ldrb	r3, [r7, #3]
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	4b31      	ldr	r3, [pc, #196]	; (80069b0 <xPortStartScheduler+0x130>)
 80068ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068ee:	4b31      	ldr	r3, [pc, #196]	; (80069b4 <xPortStartScheduler+0x134>)
 80068f0:	2207      	movs	r2, #7
 80068f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068f4:	e009      	b.n	800690a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80068f6:	4b2f      	ldr	r3, [pc, #188]	; (80069b4 <xPortStartScheduler+0x134>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3b01      	subs	r3, #1
 80068fc:	4a2d      	ldr	r2, [pc, #180]	; (80069b4 <xPortStartScheduler+0x134>)
 80068fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006900:	78fb      	ldrb	r3, [r7, #3]
 8006902:	b2db      	uxtb	r3, r3
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	b2db      	uxtb	r3, r3
 8006908:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800690a:	78fb      	ldrb	r3, [r7, #3]
 800690c:	b2db      	uxtb	r3, r3
 800690e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006912:	2b80      	cmp	r3, #128	; 0x80
 8006914:	d0ef      	beq.n	80068f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006916:	4b27      	ldr	r3, [pc, #156]	; (80069b4 <xPortStartScheduler+0x134>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f1c3 0307 	rsb	r3, r3, #7
 800691e:	2b04      	cmp	r3, #4
 8006920:	d00a      	beq.n	8006938 <xPortStartScheduler+0xb8>
	__asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	60bb      	str	r3, [r7, #8]
}
 8006934:	bf00      	nop
 8006936:	e7fe      	b.n	8006936 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006938:	4b1e      	ldr	r3, [pc, #120]	; (80069b4 <xPortStartScheduler+0x134>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	021b      	lsls	r3, r3, #8
 800693e:	4a1d      	ldr	r2, [pc, #116]	; (80069b4 <xPortStartScheduler+0x134>)
 8006940:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006942:	4b1c      	ldr	r3, [pc, #112]	; (80069b4 <xPortStartScheduler+0x134>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800694a:	4a1a      	ldr	r2, [pc, #104]	; (80069b4 <xPortStartScheduler+0x134>)
 800694c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	b2da      	uxtb	r2, r3
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006956:	4b18      	ldr	r3, [pc, #96]	; (80069b8 <xPortStartScheduler+0x138>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a17      	ldr	r2, [pc, #92]	; (80069b8 <xPortStartScheduler+0x138>)
 800695c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006960:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006962:	4b15      	ldr	r3, [pc, #84]	; (80069b8 <xPortStartScheduler+0x138>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a14      	ldr	r2, [pc, #80]	; (80069b8 <xPortStartScheduler+0x138>)
 8006968:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800696c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800696e:	f000 f8dd 	bl	8006b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006972:	4b12      	ldr	r3, [pc, #72]	; (80069bc <xPortStartScheduler+0x13c>)
 8006974:	2200      	movs	r2, #0
 8006976:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006978:	f000 f8fc 	bl	8006b74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800697c:	4b10      	ldr	r3, [pc, #64]	; (80069c0 <xPortStartScheduler+0x140>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a0f      	ldr	r2, [pc, #60]	; (80069c0 <xPortStartScheduler+0x140>)
 8006982:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006986:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006988:	f7ff ff66 	bl	8006858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800698c:	f7fe ff3c 	bl	8005808 <vTaskSwitchContext>
	prvTaskExitError();
 8006990:	f7ff ff20 	bl	80067d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3718      	adds	r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	e000ed00 	.word	0xe000ed00
 80069a4:	410fc271 	.word	0x410fc271
 80069a8:	410fc270 	.word	0x410fc270
 80069ac:	e000e400 	.word	0xe000e400
 80069b0:	20000f38 	.word	0x20000f38
 80069b4:	20000f3c 	.word	0x20000f3c
 80069b8:	e000ed20 	.word	0xe000ed20
 80069bc:	2000000c 	.word	0x2000000c
 80069c0:	e000ef34 	.word	0xe000ef34

080069c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
	__asm volatile
 80069ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	607b      	str	r3, [r7, #4]
}
 80069dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069de:	4b0f      	ldr	r3, [pc, #60]	; (8006a1c <vPortEnterCritical+0x58>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3301      	adds	r3, #1
 80069e4:	4a0d      	ldr	r2, [pc, #52]	; (8006a1c <vPortEnterCritical+0x58>)
 80069e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069e8:	4b0c      	ldr	r3, [pc, #48]	; (8006a1c <vPortEnterCritical+0x58>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d10f      	bne.n	8006a10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069f0:	4b0b      	ldr	r3, [pc, #44]	; (8006a20 <vPortEnterCritical+0x5c>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00a      	beq.n	8006a10 <vPortEnterCritical+0x4c>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	603b      	str	r3, [r7, #0]
}
 8006a0c:	bf00      	nop
 8006a0e:	e7fe      	b.n	8006a0e <vPortEnterCritical+0x4a>
	}
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	2000000c 	.word	0x2000000c
 8006a20:	e000ed04 	.word	0xe000ed04

08006a24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a2a:	4b12      	ldr	r3, [pc, #72]	; (8006a74 <vPortExitCritical+0x50>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10a      	bne.n	8006a48 <vPortExitCritical+0x24>
	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	607b      	str	r3, [r7, #4]
}
 8006a44:	bf00      	nop
 8006a46:	e7fe      	b.n	8006a46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a48:	4b0a      	ldr	r3, [pc, #40]	; (8006a74 <vPortExitCritical+0x50>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	4a09      	ldr	r2, [pc, #36]	; (8006a74 <vPortExitCritical+0x50>)
 8006a50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a52:	4b08      	ldr	r3, [pc, #32]	; (8006a74 <vPortExitCritical+0x50>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d105      	bne.n	8006a66 <vPortExitCritical+0x42>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	f383 8811 	msr	BASEPRI, r3
}
 8006a64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a66:	bf00      	nop
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	2000000c 	.word	0x2000000c
	...

08006a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a80:	f3ef 8009 	mrs	r0, PSP
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	4b15      	ldr	r3, [pc, #84]	; (8006ae0 <pxCurrentTCBConst>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	f01e 0f10 	tst.w	lr, #16
 8006a90:	bf08      	it	eq
 8006a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9a:	6010      	str	r0, [r2, #0]
 8006a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006aa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006aa4:	f380 8811 	msr	BASEPRI, r0
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	f7fe feaa 	bl	8005808 <vTaskSwitchContext>
 8006ab4:	f04f 0000 	mov.w	r0, #0
 8006ab8:	f380 8811 	msr	BASEPRI, r0
 8006abc:	bc09      	pop	{r0, r3}
 8006abe:	6819      	ldr	r1, [r3, #0]
 8006ac0:	6808      	ldr	r0, [r1, #0]
 8006ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac6:	f01e 0f10 	tst.w	lr, #16
 8006aca:	bf08      	it	eq
 8006acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ad0:	f380 8809 	msr	PSP, r0
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	f3af 8000 	nop.w

08006ae0 <pxCurrentTCBConst>:
 8006ae0:	2000090c 	.word	0x2000090c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ae4:	bf00      	nop
 8006ae6:	bf00      	nop

08006ae8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	607b      	str	r3, [r7, #4]
}
 8006b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b02:	f7fe fdc7 	bl	8005694 <xTaskIncrementTick>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d003      	beq.n	8006b14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b0c:	4b06      	ldr	r3, [pc, #24]	; (8006b28 <xPortSysTickHandler+0x40>)
 8006b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	2300      	movs	r3, #0
 8006b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	f383 8811 	msr	BASEPRI, r3
}
 8006b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b20:	bf00      	nop
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	e000ed04 	.word	0xe000ed04

08006b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b30:	4b0b      	ldr	r3, [pc, #44]	; (8006b60 <vPortSetupTimerInterrupt+0x34>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b36:	4b0b      	ldr	r3, [pc, #44]	; (8006b64 <vPortSetupTimerInterrupt+0x38>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b3c:	4b0a      	ldr	r3, [pc, #40]	; (8006b68 <vPortSetupTimerInterrupt+0x3c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a0a      	ldr	r2, [pc, #40]	; (8006b6c <vPortSetupTimerInterrupt+0x40>)
 8006b42:	fba2 2303 	umull	r2, r3, r2, r3
 8006b46:	099b      	lsrs	r3, r3, #6
 8006b48:	4a09      	ldr	r2, [pc, #36]	; (8006b70 <vPortSetupTimerInterrupt+0x44>)
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b4e:	4b04      	ldr	r3, [pc, #16]	; (8006b60 <vPortSetupTimerInterrupt+0x34>)
 8006b50:	2207      	movs	r2, #7
 8006b52:	601a      	str	r2, [r3, #0]
}
 8006b54:	bf00      	nop
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	e000e010 	.word	0xe000e010
 8006b64:	e000e018 	.word	0xe000e018
 8006b68:	20000000 	.word	0x20000000
 8006b6c:	10624dd3 	.word	0x10624dd3
 8006b70:	e000e014 	.word	0xe000e014

08006b74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b84 <vPortEnableVFP+0x10>
 8006b78:	6801      	ldr	r1, [r0, #0]
 8006b7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b7e:	6001      	str	r1, [r0, #0]
 8006b80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b82:	bf00      	nop
 8006b84:	e000ed88 	.word	0xe000ed88

08006b88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b8e:	f3ef 8305 	mrs	r3, IPSR
 8006b92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2b0f      	cmp	r3, #15
 8006b98:	d914      	bls.n	8006bc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b9a:	4a17      	ldr	r2, [pc, #92]	; (8006bf8 <vPortValidateInterruptPriority+0x70>)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ba4:	4b15      	ldr	r3, [pc, #84]	; (8006bfc <vPortValidateInterruptPriority+0x74>)
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	7afa      	ldrb	r2, [r7, #11]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d20a      	bcs.n	8006bc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	607b      	str	r3, [r7, #4]
}
 8006bc0:	bf00      	nop
 8006bc2:	e7fe      	b.n	8006bc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006bc4:	4b0e      	ldr	r3, [pc, #56]	; (8006c00 <vPortValidateInterruptPriority+0x78>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bcc:	4b0d      	ldr	r3, [pc, #52]	; (8006c04 <vPortValidateInterruptPriority+0x7c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d90a      	bls.n	8006bea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	603b      	str	r3, [r7, #0]
}
 8006be6:	bf00      	nop
 8006be8:	e7fe      	b.n	8006be8 <vPortValidateInterruptPriority+0x60>
	}
 8006bea:	bf00      	nop
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	e000e3f0 	.word	0xe000e3f0
 8006bfc:	20000f38 	.word	0x20000f38
 8006c00:	e000ed0c 	.word	0xe000ed0c
 8006c04:	20000f3c 	.word	0x20000f3c

08006c08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08a      	sub	sp, #40	; 0x28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c10:	2300      	movs	r3, #0
 8006c12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c14:	f7fe fc82 	bl	800551c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c18:	4b5b      	ldr	r3, [pc, #364]	; (8006d88 <pvPortMalloc+0x180>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c20:	f000 f920 	bl	8006e64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c24:	4b59      	ldr	r3, [pc, #356]	; (8006d8c <pvPortMalloc+0x184>)
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f040 8093 	bne.w	8006d58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d01d      	beq.n	8006c74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c38:	2208      	movs	r2, #8
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f003 0307 	and.w	r3, r3, #7
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d014      	beq.n	8006c74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f023 0307 	bic.w	r3, r3, #7
 8006c50:	3308      	adds	r3, #8
 8006c52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f003 0307 	and.w	r3, r3, #7
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00a      	beq.n	8006c74 <pvPortMalloc+0x6c>
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	617b      	str	r3, [r7, #20]
}
 8006c70:	bf00      	nop
 8006c72:	e7fe      	b.n	8006c72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d06e      	beq.n	8006d58 <pvPortMalloc+0x150>
 8006c7a:	4b45      	ldr	r3, [pc, #276]	; (8006d90 <pvPortMalloc+0x188>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d869      	bhi.n	8006d58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c84:	4b43      	ldr	r3, [pc, #268]	; (8006d94 <pvPortMalloc+0x18c>)
 8006c86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c88:	4b42      	ldr	r3, [pc, #264]	; (8006d94 <pvPortMalloc+0x18c>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c8e:	e004      	b.n	8006c9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d903      	bls.n	8006cac <pvPortMalloc+0xa4>
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1f1      	bne.n	8006c90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006cac:	4b36      	ldr	r3, [pc, #216]	; (8006d88 <pvPortMalloc+0x180>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d050      	beq.n	8006d58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2208      	movs	r2, #8
 8006cbc:	4413      	add	r3, r2
 8006cbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	1ad2      	subs	r2, r2, r3
 8006cd0:	2308      	movs	r3, #8
 8006cd2:	005b      	lsls	r3, r3, #1
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d91f      	bls.n	8006d18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4413      	add	r3, r2
 8006cde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	f003 0307 	and.w	r3, r3, #7
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00a      	beq.n	8006d00 <pvPortMalloc+0xf8>
	__asm volatile
 8006cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	613b      	str	r3, [r7, #16]
}
 8006cfc:	bf00      	nop
 8006cfe:	e7fe      	b.n	8006cfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	1ad2      	subs	r2, r2, r3
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d12:	69b8      	ldr	r0, [r7, #24]
 8006d14:	f000 f908 	bl	8006f28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d18:	4b1d      	ldr	r3, [pc, #116]	; (8006d90 <pvPortMalloc+0x188>)
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	4a1b      	ldr	r2, [pc, #108]	; (8006d90 <pvPortMalloc+0x188>)
 8006d24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d26:	4b1a      	ldr	r3, [pc, #104]	; (8006d90 <pvPortMalloc+0x188>)
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	4b1b      	ldr	r3, [pc, #108]	; (8006d98 <pvPortMalloc+0x190>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d203      	bcs.n	8006d3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d32:	4b17      	ldr	r3, [pc, #92]	; (8006d90 <pvPortMalloc+0x188>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a18      	ldr	r2, [pc, #96]	; (8006d98 <pvPortMalloc+0x190>)
 8006d38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	4b13      	ldr	r3, [pc, #76]	; (8006d8c <pvPortMalloc+0x184>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	431a      	orrs	r2, r3
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d4e:	4b13      	ldr	r3, [pc, #76]	; (8006d9c <pvPortMalloc+0x194>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3301      	adds	r3, #1
 8006d54:	4a11      	ldr	r2, [pc, #68]	; (8006d9c <pvPortMalloc+0x194>)
 8006d56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d58:	f7fe fbee 	bl	8005538 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <pvPortMalloc+0x174>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	60fb      	str	r3, [r7, #12]
}
 8006d78:	bf00      	nop
 8006d7a:	e7fe      	b.n	8006d7a <pvPortMalloc+0x172>
	return pvReturn;
 8006d7c:	69fb      	ldr	r3, [r7, #28]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3728      	adds	r7, #40	; 0x28
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	20001b00 	.word	0x20001b00
 8006d8c:	20001b14 	.word	0x20001b14
 8006d90:	20001b04 	.word	0x20001b04
 8006d94:	20001af8 	.word	0x20001af8
 8006d98:	20001b08 	.word	0x20001b08
 8006d9c:	20001b0c 	.word	0x20001b0c

08006da0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d04d      	beq.n	8006e4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006db2:	2308      	movs	r3, #8
 8006db4:	425b      	negs	r3, r3
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	4413      	add	r3, r2
 8006dba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	685a      	ldr	r2, [r3, #4]
 8006dc4:	4b24      	ldr	r3, [pc, #144]	; (8006e58 <vPortFree+0xb8>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4013      	ands	r3, r2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10a      	bne.n	8006de4 <vPortFree+0x44>
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	60fb      	str	r3, [r7, #12]
}
 8006de0:	bf00      	nop
 8006de2:	e7fe      	b.n	8006de2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00a      	beq.n	8006e02 <vPortFree+0x62>
	__asm volatile
 8006dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	60bb      	str	r3, [r7, #8]
}
 8006dfe:	bf00      	nop
 8006e00:	e7fe      	b.n	8006e00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	4b14      	ldr	r3, [pc, #80]	; (8006e58 <vPortFree+0xb8>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d01e      	beq.n	8006e4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d11a      	bne.n	8006e4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	4b0e      	ldr	r3, [pc, #56]	; (8006e58 <vPortFree+0xb8>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	43db      	mvns	r3, r3
 8006e22:	401a      	ands	r2, r3
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e28:	f7fe fb78 	bl	800551c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	4b0a      	ldr	r3, [pc, #40]	; (8006e5c <vPortFree+0xbc>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4413      	add	r3, r2
 8006e36:	4a09      	ldr	r2, [pc, #36]	; (8006e5c <vPortFree+0xbc>)
 8006e38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e3a:	6938      	ldr	r0, [r7, #16]
 8006e3c:	f000 f874 	bl	8006f28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e40:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <vPortFree+0xc0>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3301      	adds	r3, #1
 8006e46:	4a06      	ldr	r2, [pc, #24]	; (8006e60 <vPortFree+0xc0>)
 8006e48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e4a:	f7fe fb75 	bl	8005538 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e4e:	bf00      	nop
 8006e50:	3718      	adds	r7, #24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20001b14 	.word	0x20001b14
 8006e5c:	20001b04 	.word	0x20001b04
 8006e60:	20001b10 	.word	0x20001b10

08006e64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e6a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006e6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e70:	4b27      	ldr	r3, [pc, #156]	; (8006f10 <prvHeapInit+0xac>)
 8006e72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f003 0307 	and.w	r3, r3, #7
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00c      	beq.n	8006e98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	3307      	adds	r3, #7
 8006e82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 0307 	bic.w	r3, r3, #7
 8006e8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	4a1f      	ldr	r2, [pc, #124]	; (8006f10 <prvHeapInit+0xac>)
 8006e94:	4413      	add	r3, r2
 8006e96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e9c:	4a1d      	ldr	r2, [pc, #116]	; (8006f14 <prvHeapInit+0xb0>)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ea2:	4b1c      	ldr	r3, [pc, #112]	; (8006f14 <prvHeapInit+0xb0>)
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	4413      	add	r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006eb0:	2208      	movs	r2, #8
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	1a9b      	subs	r3, r3, r2
 8006eb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f023 0307 	bic.w	r3, r3, #7
 8006ebe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4a15      	ldr	r2, [pc, #84]	; (8006f18 <prvHeapInit+0xb4>)
 8006ec4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ec6:	4b14      	ldr	r3, [pc, #80]	; (8006f18 <prvHeapInit+0xb4>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ece:	4b12      	ldr	r3, [pc, #72]	; (8006f18 <prvHeapInit+0xb4>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	1ad2      	subs	r2, r2, r3
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ee4:	4b0c      	ldr	r3, [pc, #48]	; (8006f18 <prvHeapInit+0xb4>)
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	4a0a      	ldr	r2, [pc, #40]	; (8006f1c <prvHeapInit+0xb8>)
 8006ef2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	4a09      	ldr	r2, [pc, #36]	; (8006f20 <prvHeapInit+0xbc>)
 8006efa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006efc:	4b09      	ldr	r3, [pc, #36]	; (8006f24 <prvHeapInit+0xc0>)
 8006efe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f02:	601a      	str	r2, [r3, #0]
}
 8006f04:	bf00      	nop
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	20000f40 	.word	0x20000f40
 8006f14:	20001af8 	.word	0x20001af8
 8006f18:	20001b00 	.word	0x20001b00
 8006f1c:	20001b08 	.word	0x20001b08
 8006f20:	20001b04 	.word	0x20001b04
 8006f24:	20001b14 	.word	0x20001b14

08006f28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f30:	4b28      	ldr	r3, [pc, #160]	; (8006fd4 <prvInsertBlockIntoFreeList+0xac>)
 8006f32:	60fb      	str	r3, [r7, #12]
 8006f34:	e002      	b.n	8006f3c <prvInsertBlockIntoFreeList+0x14>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	60fb      	str	r3, [r7, #12]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d8f7      	bhi.n	8006f36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	4413      	add	r3, r2
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d108      	bne.n	8006f6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	441a      	add	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	441a      	add	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d118      	bne.n	8006fb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	4b15      	ldr	r3, [pc, #84]	; (8006fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d00d      	beq.n	8006fa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	441a      	add	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	e008      	b.n	8006fb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fa6:	4b0c      	ldr	r3, [pc, #48]	; (8006fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	e003      	b.n	8006fb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d002      	beq.n	8006fc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fc6:	bf00      	nop
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	20001af8 	.word	0x20001af8
 8006fd8:	20001b00 	.word	0x20001b00

08006fdc <std>:
 8006fdc:	2300      	movs	r3, #0
 8006fde:	b510      	push	{r4, lr}
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	e9c0 3300 	strd	r3, r3, [r0]
 8006fe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fea:	6083      	str	r3, [r0, #8]
 8006fec:	8181      	strh	r1, [r0, #12]
 8006fee:	6643      	str	r3, [r0, #100]	; 0x64
 8006ff0:	81c2      	strh	r2, [r0, #14]
 8006ff2:	6183      	str	r3, [r0, #24]
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	2208      	movs	r2, #8
 8006ff8:	305c      	adds	r0, #92	; 0x5c
 8006ffa:	f000 f9e5 	bl	80073c8 <memset>
 8006ffe:	4b0d      	ldr	r3, [pc, #52]	; (8007034 <std+0x58>)
 8007000:	6263      	str	r3, [r4, #36]	; 0x24
 8007002:	4b0d      	ldr	r3, [pc, #52]	; (8007038 <std+0x5c>)
 8007004:	62a3      	str	r3, [r4, #40]	; 0x28
 8007006:	4b0d      	ldr	r3, [pc, #52]	; (800703c <std+0x60>)
 8007008:	62e3      	str	r3, [r4, #44]	; 0x2c
 800700a:	4b0d      	ldr	r3, [pc, #52]	; (8007040 <std+0x64>)
 800700c:	6323      	str	r3, [r4, #48]	; 0x30
 800700e:	4b0d      	ldr	r3, [pc, #52]	; (8007044 <std+0x68>)
 8007010:	6224      	str	r4, [r4, #32]
 8007012:	429c      	cmp	r4, r3
 8007014:	d006      	beq.n	8007024 <std+0x48>
 8007016:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800701a:	4294      	cmp	r4, r2
 800701c:	d002      	beq.n	8007024 <std+0x48>
 800701e:	33d0      	adds	r3, #208	; 0xd0
 8007020:	429c      	cmp	r4, r3
 8007022:	d105      	bne.n	8007030 <std+0x54>
 8007024:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800702c:	f000 ba9a 	b.w	8007564 <__retarget_lock_init_recursive>
 8007030:	bd10      	pop	{r4, pc}
 8007032:	bf00      	nop
 8007034:	08007219 	.word	0x08007219
 8007038:	0800723b 	.word	0x0800723b
 800703c:	08007273 	.word	0x08007273
 8007040:	08007297 	.word	0x08007297
 8007044:	20001b18 	.word	0x20001b18

08007048 <stdio_exit_handler>:
 8007048:	4a02      	ldr	r2, [pc, #8]	; (8007054 <stdio_exit_handler+0xc>)
 800704a:	4903      	ldr	r1, [pc, #12]	; (8007058 <stdio_exit_handler+0x10>)
 800704c:	4803      	ldr	r0, [pc, #12]	; (800705c <stdio_exit_handler+0x14>)
 800704e:	f000 b869 	b.w	8007124 <_fwalk_sglue>
 8007052:	bf00      	nop
 8007054:	20000010 	.word	0x20000010
 8007058:	08007885 	.word	0x08007885
 800705c:	2000001c 	.word	0x2000001c

08007060 <cleanup_stdio>:
 8007060:	6841      	ldr	r1, [r0, #4]
 8007062:	4b0c      	ldr	r3, [pc, #48]	; (8007094 <cleanup_stdio+0x34>)
 8007064:	4299      	cmp	r1, r3
 8007066:	b510      	push	{r4, lr}
 8007068:	4604      	mov	r4, r0
 800706a:	d001      	beq.n	8007070 <cleanup_stdio+0x10>
 800706c:	f000 fc0a 	bl	8007884 <_fflush_r>
 8007070:	68a1      	ldr	r1, [r4, #8]
 8007072:	4b09      	ldr	r3, [pc, #36]	; (8007098 <cleanup_stdio+0x38>)
 8007074:	4299      	cmp	r1, r3
 8007076:	d002      	beq.n	800707e <cleanup_stdio+0x1e>
 8007078:	4620      	mov	r0, r4
 800707a:	f000 fc03 	bl	8007884 <_fflush_r>
 800707e:	68e1      	ldr	r1, [r4, #12]
 8007080:	4b06      	ldr	r3, [pc, #24]	; (800709c <cleanup_stdio+0x3c>)
 8007082:	4299      	cmp	r1, r3
 8007084:	d004      	beq.n	8007090 <cleanup_stdio+0x30>
 8007086:	4620      	mov	r0, r4
 8007088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800708c:	f000 bbfa 	b.w	8007884 <_fflush_r>
 8007090:	bd10      	pop	{r4, pc}
 8007092:	bf00      	nop
 8007094:	20001b18 	.word	0x20001b18
 8007098:	20001b80 	.word	0x20001b80
 800709c:	20001be8 	.word	0x20001be8

080070a0 <global_stdio_init.part.0>:
 80070a0:	b510      	push	{r4, lr}
 80070a2:	4b0b      	ldr	r3, [pc, #44]	; (80070d0 <global_stdio_init.part.0+0x30>)
 80070a4:	4c0b      	ldr	r4, [pc, #44]	; (80070d4 <global_stdio_init.part.0+0x34>)
 80070a6:	4a0c      	ldr	r2, [pc, #48]	; (80070d8 <global_stdio_init.part.0+0x38>)
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	4620      	mov	r0, r4
 80070ac:	2200      	movs	r2, #0
 80070ae:	2104      	movs	r1, #4
 80070b0:	f7ff ff94 	bl	8006fdc <std>
 80070b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80070b8:	2201      	movs	r2, #1
 80070ba:	2109      	movs	r1, #9
 80070bc:	f7ff ff8e 	bl	8006fdc <std>
 80070c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80070c4:	2202      	movs	r2, #2
 80070c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ca:	2112      	movs	r1, #18
 80070cc:	f7ff bf86 	b.w	8006fdc <std>
 80070d0:	20001c50 	.word	0x20001c50
 80070d4:	20001b18 	.word	0x20001b18
 80070d8:	08007049 	.word	0x08007049

080070dc <__sfp_lock_acquire>:
 80070dc:	4801      	ldr	r0, [pc, #4]	; (80070e4 <__sfp_lock_acquire+0x8>)
 80070de:	f000 ba42 	b.w	8007566 <__retarget_lock_acquire_recursive>
 80070e2:	bf00      	nop
 80070e4:	20001c59 	.word	0x20001c59

080070e8 <__sfp_lock_release>:
 80070e8:	4801      	ldr	r0, [pc, #4]	; (80070f0 <__sfp_lock_release+0x8>)
 80070ea:	f000 ba3d 	b.w	8007568 <__retarget_lock_release_recursive>
 80070ee:	bf00      	nop
 80070f0:	20001c59 	.word	0x20001c59

080070f4 <__sinit>:
 80070f4:	b510      	push	{r4, lr}
 80070f6:	4604      	mov	r4, r0
 80070f8:	f7ff fff0 	bl	80070dc <__sfp_lock_acquire>
 80070fc:	6a23      	ldr	r3, [r4, #32]
 80070fe:	b11b      	cbz	r3, 8007108 <__sinit+0x14>
 8007100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007104:	f7ff bff0 	b.w	80070e8 <__sfp_lock_release>
 8007108:	4b04      	ldr	r3, [pc, #16]	; (800711c <__sinit+0x28>)
 800710a:	6223      	str	r3, [r4, #32]
 800710c:	4b04      	ldr	r3, [pc, #16]	; (8007120 <__sinit+0x2c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1f5      	bne.n	8007100 <__sinit+0xc>
 8007114:	f7ff ffc4 	bl	80070a0 <global_stdio_init.part.0>
 8007118:	e7f2      	b.n	8007100 <__sinit+0xc>
 800711a:	bf00      	nop
 800711c:	08007061 	.word	0x08007061
 8007120:	20001c50 	.word	0x20001c50

08007124 <_fwalk_sglue>:
 8007124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007128:	4607      	mov	r7, r0
 800712a:	4688      	mov	r8, r1
 800712c:	4614      	mov	r4, r2
 800712e:	2600      	movs	r6, #0
 8007130:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007134:	f1b9 0901 	subs.w	r9, r9, #1
 8007138:	d505      	bpl.n	8007146 <_fwalk_sglue+0x22>
 800713a:	6824      	ldr	r4, [r4, #0]
 800713c:	2c00      	cmp	r4, #0
 800713e:	d1f7      	bne.n	8007130 <_fwalk_sglue+0xc>
 8007140:	4630      	mov	r0, r6
 8007142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007146:	89ab      	ldrh	r3, [r5, #12]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d907      	bls.n	800715c <_fwalk_sglue+0x38>
 800714c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007150:	3301      	adds	r3, #1
 8007152:	d003      	beq.n	800715c <_fwalk_sglue+0x38>
 8007154:	4629      	mov	r1, r5
 8007156:	4638      	mov	r0, r7
 8007158:	47c0      	blx	r8
 800715a:	4306      	orrs	r6, r0
 800715c:	3568      	adds	r5, #104	; 0x68
 800715e:	e7e9      	b.n	8007134 <_fwalk_sglue+0x10>

08007160 <_puts_r>:
 8007160:	6a03      	ldr	r3, [r0, #32]
 8007162:	b570      	push	{r4, r5, r6, lr}
 8007164:	6884      	ldr	r4, [r0, #8]
 8007166:	4605      	mov	r5, r0
 8007168:	460e      	mov	r6, r1
 800716a:	b90b      	cbnz	r3, 8007170 <_puts_r+0x10>
 800716c:	f7ff ffc2 	bl	80070f4 <__sinit>
 8007170:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007172:	07db      	lsls	r3, r3, #31
 8007174:	d405      	bmi.n	8007182 <_puts_r+0x22>
 8007176:	89a3      	ldrh	r3, [r4, #12]
 8007178:	0598      	lsls	r0, r3, #22
 800717a:	d402      	bmi.n	8007182 <_puts_r+0x22>
 800717c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800717e:	f000 f9f2 	bl	8007566 <__retarget_lock_acquire_recursive>
 8007182:	89a3      	ldrh	r3, [r4, #12]
 8007184:	0719      	lsls	r1, r3, #28
 8007186:	d513      	bpl.n	80071b0 <_puts_r+0x50>
 8007188:	6923      	ldr	r3, [r4, #16]
 800718a:	b18b      	cbz	r3, 80071b0 <_puts_r+0x50>
 800718c:	3e01      	subs	r6, #1
 800718e:	68a3      	ldr	r3, [r4, #8]
 8007190:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007194:	3b01      	subs	r3, #1
 8007196:	60a3      	str	r3, [r4, #8]
 8007198:	b9e9      	cbnz	r1, 80071d6 <_puts_r+0x76>
 800719a:	2b00      	cmp	r3, #0
 800719c:	da2e      	bge.n	80071fc <_puts_r+0x9c>
 800719e:	4622      	mov	r2, r4
 80071a0:	210a      	movs	r1, #10
 80071a2:	4628      	mov	r0, r5
 80071a4:	f000 f87b 	bl	800729e <__swbuf_r>
 80071a8:	3001      	adds	r0, #1
 80071aa:	d007      	beq.n	80071bc <_puts_r+0x5c>
 80071ac:	250a      	movs	r5, #10
 80071ae:	e007      	b.n	80071c0 <_puts_r+0x60>
 80071b0:	4621      	mov	r1, r4
 80071b2:	4628      	mov	r0, r5
 80071b4:	f000 f8b0 	bl	8007318 <__swsetup_r>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d0e7      	beq.n	800718c <_puts_r+0x2c>
 80071bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80071c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071c2:	07da      	lsls	r2, r3, #31
 80071c4:	d405      	bmi.n	80071d2 <_puts_r+0x72>
 80071c6:	89a3      	ldrh	r3, [r4, #12]
 80071c8:	059b      	lsls	r3, r3, #22
 80071ca:	d402      	bmi.n	80071d2 <_puts_r+0x72>
 80071cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071ce:	f000 f9cb 	bl	8007568 <__retarget_lock_release_recursive>
 80071d2:	4628      	mov	r0, r5
 80071d4:	bd70      	pop	{r4, r5, r6, pc}
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	da04      	bge.n	80071e4 <_puts_r+0x84>
 80071da:	69a2      	ldr	r2, [r4, #24]
 80071dc:	429a      	cmp	r2, r3
 80071de:	dc06      	bgt.n	80071ee <_puts_r+0x8e>
 80071e0:	290a      	cmp	r1, #10
 80071e2:	d004      	beq.n	80071ee <_puts_r+0x8e>
 80071e4:	6823      	ldr	r3, [r4, #0]
 80071e6:	1c5a      	adds	r2, r3, #1
 80071e8:	6022      	str	r2, [r4, #0]
 80071ea:	7019      	strb	r1, [r3, #0]
 80071ec:	e7cf      	b.n	800718e <_puts_r+0x2e>
 80071ee:	4622      	mov	r2, r4
 80071f0:	4628      	mov	r0, r5
 80071f2:	f000 f854 	bl	800729e <__swbuf_r>
 80071f6:	3001      	adds	r0, #1
 80071f8:	d1c9      	bne.n	800718e <_puts_r+0x2e>
 80071fa:	e7df      	b.n	80071bc <_puts_r+0x5c>
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	250a      	movs	r5, #10
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	6022      	str	r2, [r4, #0]
 8007204:	701d      	strb	r5, [r3, #0]
 8007206:	e7db      	b.n	80071c0 <_puts_r+0x60>

08007208 <puts>:
 8007208:	4b02      	ldr	r3, [pc, #8]	; (8007214 <puts+0xc>)
 800720a:	4601      	mov	r1, r0
 800720c:	6818      	ldr	r0, [r3, #0]
 800720e:	f7ff bfa7 	b.w	8007160 <_puts_r>
 8007212:	bf00      	nop
 8007214:	20000068 	.word	0x20000068

08007218 <__sread>:
 8007218:	b510      	push	{r4, lr}
 800721a:	460c      	mov	r4, r1
 800721c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007220:	f000 f952 	bl	80074c8 <_read_r>
 8007224:	2800      	cmp	r0, #0
 8007226:	bfab      	itete	ge
 8007228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800722a:	89a3      	ldrhlt	r3, [r4, #12]
 800722c:	181b      	addge	r3, r3, r0
 800722e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007232:	bfac      	ite	ge
 8007234:	6563      	strge	r3, [r4, #84]	; 0x54
 8007236:	81a3      	strhlt	r3, [r4, #12]
 8007238:	bd10      	pop	{r4, pc}

0800723a <__swrite>:
 800723a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800723e:	461f      	mov	r7, r3
 8007240:	898b      	ldrh	r3, [r1, #12]
 8007242:	05db      	lsls	r3, r3, #23
 8007244:	4605      	mov	r5, r0
 8007246:	460c      	mov	r4, r1
 8007248:	4616      	mov	r6, r2
 800724a:	d505      	bpl.n	8007258 <__swrite+0x1e>
 800724c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007250:	2302      	movs	r3, #2
 8007252:	2200      	movs	r2, #0
 8007254:	f000 f926 	bl	80074a4 <_lseek_r>
 8007258:	89a3      	ldrh	r3, [r4, #12]
 800725a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800725e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007262:	81a3      	strh	r3, [r4, #12]
 8007264:	4632      	mov	r2, r6
 8007266:	463b      	mov	r3, r7
 8007268:	4628      	mov	r0, r5
 800726a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800726e:	f000 b93d 	b.w	80074ec <_write_r>

08007272 <__sseek>:
 8007272:	b510      	push	{r4, lr}
 8007274:	460c      	mov	r4, r1
 8007276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800727a:	f000 f913 	bl	80074a4 <_lseek_r>
 800727e:	1c43      	adds	r3, r0, #1
 8007280:	89a3      	ldrh	r3, [r4, #12]
 8007282:	bf15      	itete	ne
 8007284:	6560      	strne	r0, [r4, #84]	; 0x54
 8007286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800728a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800728e:	81a3      	strheq	r3, [r4, #12]
 8007290:	bf18      	it	ne
 8007292:	81a3      	strhne	r3, [r4, #12]
 8007294:	bd10      	pop	{r4, pc}

08007296 <__sclose>:
 8007296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800729a:	f000 b89d 	b.w	80073d8 <_close_r>

0800729e <__swbuf_r>:
 800729e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a0:	460e      	mov	r6, r1
 80072a2:	4614      	mov	r4, r2
 80072a4:	4605      	mov	r5, r0
 80072a6:	b118      	cbz	r0, 80072b0 <__swbuf_r+0x12>
 80072a8:	6a03      	ldr	r3, [r0, #32]
 80072aa:	b90b      	cbnz	r3, 80072b0 <__swbuf_r+0x12>
 80072ac:	f7ff ff22 	bl	80070f4 <__sinit>
 80072b0:	69a3      	ldr	r3, [r4, #24]
 80072b2:	60a3      	str	r3, [r4, #8]
 80072b4:	89a3      	ldrh	r3, [r4, #12]
 80072b6:	071a      	lsls	r2, r3, #28
 80072b8:	d525      	bpl.n	8007306 <__swbuf_r+0x68>
 80072ba:	6923      	ldr	r3, [r4, #16]
 80072bc:	b31b      	cbz	r3, 8007306 <__swbuf_r+0x68>
 80072be:	6823      	ldr	r3, [r4, #0]
 80072c0:	6922      	ldr	r2, [r4, #16]
 80072c2:	1a98      	subs	r0, r3, r2
 80072c4:	6963      	ldr	r3, [r4, #20]
 80072c6:	b2f6      	uxtb	r6, r6
 80072c8:	4283      	cmp	r3, r0
 80072ca:	4637      	mov	r7, r6
 80072cc:	dc04      	bgt.n	80072d8 <__swbuf_r+0x3a>
 80072ce:	4621      	mov	r1, r4
 80072d0:	4628      	mov	r0, r5
 80072d2:	f000 fad7 	bl	8007884 <_fflush_r>
 80072d6:	b9e0      	cbnz	r0, 8007312 <__swbuf_r+0x74>
 80072d8:	68a3      	ldr	r3, [r4, #8]
 80072da:	3b01      	subs	r3, #1
 80072dc:	60a3      	str	r3, [r4, #8]
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	6022      	str	r2, [r4, #0]
 80072e4:	701e      	strb	r6, [r3, #0]
 80072e6:	6962      	ldr	r2, [r4, #20]
 80072e8:	1c43      	adds	r3, r0, #1
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d004      	beq.n	80072f8 <__swbuf_r+0x5a>
 80072ee:	89a3      	ldrh	r3, [r4, #12]
 80072f0:	07db      	lsls	r3, r3, #31
 80072f2:	d506      	bpl.n	8007302 <__swbuf_r+0x64>
 80072f4:	2e0a      	cmp	r6, #10
 80072f6:	d104      	bne.n	8007302 <__swbuf_r+0x64>
 80072f8:	4621      	mov	r1, r4
 80072fa:	4628      	mov	r0, r5
 80072fc:	f000 fac2 	bl	8007884 <_fflush_r>
 8007300:	b938      	cbnz	r0, 8007312 <__swbuf_r+0x74>
 8007302:	4638      	mov	r0, r7
 8007304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007306:	4621      	mov	r1, r4
 8007308:	4628      	mov	r0, r5
 800730a:	f000 f805 	bl	8007318 <__swsetup_r>
 800730e:	2800      	cmp	r0, #0
 8007310:	d0d5      	beq.n	80072be <__swbuf_r+0x20>
 8007312:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007316:	e7f4      	b.n	8007302 <__swbuf_r+0x64>

08007318 <__swsetup_r>:
 8007318:	b538      	push	{r3, r4, r5, lr}
 800731a:	4b2a      	ldr	r3, [pc, #168]	; (80073c4 <__swsetup_r+0xac>)
 800731c:	4605      	mov	r5, r0
 800731e:	6818      	ldr	r0, [r3, #0]
 8007320:	460c      	mov	r4, r1
 8007322:	b118      	cbz	r0, 800732c <__swsetup_r+0x14>
 8007324:	6a03      	ldr	r3, [r0, #32]
 8007326:	b90b      	cbnz	r3, 800732c <__swsetup_r+0x14>
 8007328:	f7ff fee4 	bl	80070f4 <__sinit>
 800732c:	89a3      	ldrh	r3, [r4, #12]
 800732e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007332:	0718      	lsls	r0, r3, #28
 8007334:	d422      	bmi.n	800737c <__swsetup_r+0x64>
 8007336:	06d9      	lsls	r1, r3, #27
 8007338:	d407      	bmi.n	800734a <__swsetup_r+0x32>
 800733a:	2309      	movs	r3, #9
 800733c:	602b      	str	r3, [r5, #0]
 800733e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007342:	81a3      	strh	r3, [r4, #12]
 8007344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007348:	e034      	b.n	80073b4 <__swsetup_r+0x9c>
 800734a:	0758      	lsls	r0, r3, #29
 800734c:	d512      	bpl.n	8007374 <__swsetup_r+0x5c>
 800734e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007350:	b141      	cbz	r1, 8007364 <__swsetup_r+0x4c>
 8007352:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007356:	4299      	cmp	r1, r3
 8007358:	d002      	beq.n	8007360 <__swsetup_r+0x48>
 800735a:	4628      	mov	r0, r5
 800735c:	f000 f914 	bl	8007588 <_free_r>
 8007360:	2300      	movs	r3, #0
 8007362:	6363      	str	r3, [r4, #52]	; 0x34
 8007364:	89a3      	ldrh	r3, [r4, #12]
 8007366:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800736a:	81a3      	strh	r3, [r4, #12]
 800736c:	2300      	movs	r3, #0
 800736e:	6063      	str	r3, [r4, #4]
 8007370:	6923      	ldr	r3, [r4, #16]
 8007372:	6023      	str	r3, [r4, #0]
 8007374:	89a3      	ldrh	r3, [r4, #12]
 8007376:	f043 0308 	orr.w	r3, r3, #8
 800737a:	81a3      	strh	r3, [r4, #12]
 800737c:	6923      	ldr	r3, [r4, #16]
 800737e:	b94b      	cbnz	r3, 8007394 <__swsetup_r+0x7c>
 8007380:	89a3      	ldrh	r3, [r4, #12]
 8007382:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800738a:	d003      	beq.n	8007394 <__swsetup_r+0x7c>
 800738c:	4621      	mov	r1, r4
 800738e:	4628      	mov	r0, r5
 8007390:	f000 fac6 	bl	8007920 <__smakebuf_r>
 8007394:	89a0      	ldrh	r0, [r4, #12]
 8007396:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800739a:	f010 0301 	ands.w	r3, r0, #1
 800739e:	d00a      	beq.n	80073b6 <__swsetup_r+0x9e>
 80073a0:	2300      	movs	r3, #0
 80073a2:	60a3      	str	r3, [r4, #8]
 80073a4:	6963      	ldr	r3, [r4, #20]
 80073a6:	425b      	negs	r3, r3
 80073a8:	61a3      	str	r3, [r4, #24]
 80073aa:	6923      	ldr	r3, [r4, #16]
 80073ac:	b943      	cbnz	r3, 80073c0 <__swsetup_r+0xa8>
 80073ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073b2:	d1c4      	bne.n	800733e <__swsetup_r+0x26>
 80073b4:	bd38      	pop	{r3, r4, r5, pc}
 80073b6:	0781      	lsls	r1, r0, #30
 80073b8:	bf58      	it	pl
 80073ba:	6963      	ldrpl	r3, [r4, #20]
 80073bc:	60a3      	str	r3, [r4, #8]
 80073be:	e7f4      	b.n	80073aa <__swsetup_r+0x92>
 80073c0:	2000      	movs	r0, #0
 80073c2:	e7f7      	b.n	80073b4 <__swsetup_r+0x9c>
 80073c4:	20000068 	.word	0x20000068

080073c8 <memset>:
 80073c8:	4402      	add	r2, r0
 80073ca:	4603      	mov	r3, r0
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d100      	bne.n	80073d2 <memset+0xa>
 80073d0:	4770      	bx	lr
 80073d2:	f803 1b01 	strb.w	r1, [r3], #1
 80073d6:	e7f9      	b.n	80073cc <memset+0x4>

080073d8 <_close_r>:
 80073d8:	b538      	push	{r3, r4, r5, lr}
 80073da:	4d06      	ldr	r5, [pc, #24]	; (80073f4 <_close_r+0x1c>)
 80073dc:	2300      	movs	r3, #0
 80073de:	4604      	mov	r4, r0
 80073e0:	4608      	mov	r0, r1
 80073e2:	602b      	str	r3, [r5, #0]
 80073e4:	f7f9 fb72 	bl	8000acc <_close>
 80073e8:	1c43      	adds	r3, r0, #1
 80073ea:	d102      	bne.n	80073f2 <_close_r+0x1a>
 80073ec:	682b      	ldr	r3, [r5, #0]
 80073ee:	b103      	cbz	r3, 80073f2 <_close_r+0x1a>
 80073f0:	6023      	str	r3, [r4, #0]
 80073f2:	bd38      	pop	{r3, r4, r5, pc}
 80073f4:	20001c54 	.word	0x20001c54

080073f8 <_reclaim_reent>:
 80073f8:	4b29      	ldr	r3, [pc, #164]	; (80074a0 <_reclaim_reent+0xa8>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4283      	cmp	r3, r0
 80073fe:	b570      	push	{r4, r5, r6, lr}
 8007400:	4604      	mov	r4, r0
 8007402:	d04b      	beq.n	800749c <_reclaim_reent+0xa4>
 8007404:	69c3      	ldr	r3, [r0, #28]
 8007406:	b143      	cbz	r3, 800741a <_reclaim_reent+0x22>
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d144      	bne.n	8007498 <_reclaim_reent+0xa0>
 800740e:	69e3      	ldr	r3, [r4, #28]
 8007410:	6819      	ldr	r1, [r3, #0]
 8007412:	b111      	cbz	r1, 800741a <_reclaim_reent+0x22>
 8007414:	4620      	mov	r0, r4
 8007416:	f000 f8b7 	bl	8007588 <_free_r>
 800741a:	6961      	ldr	r1, [r4, #20]
 800741c:	b111      	cbz	r1, 8007424 <_reclaim_reent+0x2c>
 800741e:	4620      	mov	r0, r4
 8007420:	f000 f8b2 	bl	8007588 <_free_r>
 8007424:	69e1      	ldr	r1, [r4, #28]
 8007426:	b111      	cbz	r1, 800742e <_reclaim_reent+0x36>
 8007428:	4620      	mov	r0, r4
 800742a:	f000 f8ad 	bl	8007588 <_free_r>
 800742e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007430:	b111      	cbz	r1, 8007438 <_reclaim_reent+0x40>
 8007432:	4620      	mov	r0, r4
 8007434:	f000 f8a8 	bl	8007588 <_free_r>
 8007438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800743a:	b111      	cbz	r1, 8007442 <_reclaim_reent+0x4a>
 800743c:	4620      	mov	r0, r4
 800743e:	f000 f8a3 	bl	8007588 <_free_r>
 8007442:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007444:	b111      	cbz	r1, 800744c <_reclaim_reent+0x54>
 8007446:	4620      	mov	r0, r4
 8007448:	f000 f89e 	bl	8007588 <_free_r>
 800744c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800744e:	b111      	cbz	r1, 8007456 <_reclaim_reent+0x5e>
 8007450:	4620      	mov	r0, r4
 8007452:	f000 f899 	bl	8007588 <_free_r>
 8007456:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007458:	b111      	cbz	r1, 8007460 <_reclaim_reent+0x68>
 800745a:	4620      	mov	r0, r4
 800745c:	f000 f894 	bl	8007588 <_free_r>
 8007460:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007462:	b111      	cbz	r1, 800746a <_reclaim_reent+0x72>
 8007464:	4620      	mov	r0, r4
 8007466:	f000 f88f 	bl	8007588 <_free_r>
 800746a:	6a23      	ldr	r3, [r4, #32]
 800746c:	b1b3      	cbz	r3, 800749c <_reclaim_reent+0xa4>
 800746e:	4620      	mov	r0, r4
 8007470:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007474:	4718      	bx	r3
 8007476:	5949      	ldr	r1, [r1, r5]
 8007478:	b941      	cbnz	r1, 800748c <_reclaim_reent+0x94>
 800747a:	3504      	adds	r5, #4
 800747c:	69e3      	ldr	r3, [r4, #28]
 800747e:	2d80      	cmp	r5, #128	; 0x80
 8007480:	68d9      	ldr	r1, [r3, #12]
 8007482:	d1f8      	bne.n	8007476 <_reclaim_reent+0x7e>
 8007484:	4620      	mov	r0, r4
 8007486:	f000 f87f 	bl	8007588 <_free_r>
 800748a:	e7c0      	b.n	800740e <_reclaim_reent+0x16>
 800748c:	680e      	ldr	r6, [r1, #0]
 800748e:	4620      	mov	r0, r4
 8007490:	f000 f87a 	bl	8007588 <_free_r>
 8007494:	4631      	mov	r1, r6
 8007496:	e7ef      	b.n	8007478 <_reclaim_reent+0x80>
 8007498:	2500      	movs	r5, #0
 800749a:	e7ef      	b.n	800747c <_reclaim_reent+0x84>
 800749c:	bd70      	pop	{r4, r5, r6, pc}
 800749e:	bf00      	nop
 80074a0:	20000068 	.word	0x20000068

080074a4 <_lseek_r>:
 80074a4:	b538      	push	{r3, r4, r5, lr}
 80074a6:	4d07      	ldr	r5, [pc, #28]	; (80074c4 <_lseek_r+0x20>)
 80074a8:	4604      	mov	r4, r0
 80074aa:	4608      	mov	r0, r1
 80074ac:	4611      	mov	r1, r2
 80074ae:	2200      	movs	r2, #0
 80074b0:	602a      	str	r2, [r5, #0]
 80074b2:	461a      	mov	r2, r3
 80074b4:	f7f9 fb31 	bl	8000b1a <_lseek>
 80074b8:	1c43      	adds	r3, r0, #1
 80074ba:	d102      	bne.n	80074c2 <_lseek_r+0x1e>
 80074bc:	682b      	ldr	r3, [r5, #0]
 80074be:	b103      	cbz	r3, 80074c2 <_lseek_r+0x1e>
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	bd38      	pop	{r3, r4, r5, pc}
 80074c4:	20001c54 	.word	0x20001c54

080074c8 <_read_r>:
 80074c8:	b538      	push	{r3, r4, r5, lr}
 80074ca:	4d07      	ldr	r5, [pc, #28]	; (80074e8 <_read_r+0x20>)
 80074cc:	4604      	mov	r4, r0
 80074ce:	4608      	mov	r0, r1
 80074d0:	4611      	mov	r1, r2
 80074d2:	2200      	movs	r2, #0
 80074d4:	602a      	str	r2, [r5, #0]
 80074d6:	461a      	mov	r2, r3
 80074d8:	f7f9 fac4 	bl	8000a64 <_read>
 80074dc:	1c43      	adds	r3, r0, #1
 80074de:	d102      	bne.n	80074e6 <_read_r+0x1e>
 80074e0:	682b      	ldr	r3, [r5, #0]
 80074e2:	b103      	cbz	r3, 80074e6 <_read_r+0x1e>
 80074e4:	6023      	str	r3, [r4, #0]
 80074e6:	bd38      	pop	{r3, r4, r5, pc}
 80074e8:	20001c54 	.word	0x20001c54

080074ec <_write_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	4d07      	ldr	r5, [pc, #28]	; (800750c <_write_r+0x20>)
 80074f0:	4604      	mov	r4, r0
 80074f2:	4608      	mov	r0, r1
 80074f4:	4611      	mov	r1, r2
 80074f6:	2200      	movs	r2, #0
 80074f8:	602a      	str	r2, [r5, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	f7f9 fad0 	bl	8000aa0 <_write>
 8007500:	1c43      	adds	r3, r0, #1
 8007502:	d102      	bne.n	800750a <_write_r+0x1e>
 8007504:	682b      	ldr	r3, [r5, #0]
 8007506:	b103      	cbz	r3, 800750a <_write_r+0x1e>
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	bd38      	pop	{r3, r4, r5, pc}
 800750c:	20001c54 	.word	0x20001c54

08007510 <__errno>:
 8007510:	4b01      	ldr	r3, [pc, #4]	; (8007518 <__errno+0x8>)
 8007512:	6818      	ldr	r0, [r3, #0]
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	20000068 	.word	0x20000068

0800751c <__libc_init_array>:
 800751c:	b570      	push	{r4, r5, r6, lr}
 800751e:	4d0d      	ldr	r5, [pc, #52]	; (8007554 <__libc_init_array+0x38>)
 8007520:	4c0d      	ldr	r4, [pc, #52]	; (8007558 <__libc_init_array+0x3c>)
 8007522:	1b64      	subs	r4, r4, r5
 8007524:	10a4      	asrs	r4, r4, #2
 8007526:	2600      	movs	r6, #0
 8007528:	42a6      	cmp	r6, r4
 800752a:	d109      	bne.n	8007540 <__libc_init_array+0x24>
 800752c:	4d0b      	ldr	r5, [pc, #44]	; (800755c <__libc_init_array+0x40>)
 800752e:	4c0c      	ldr	r4, [pc, #48]	; (8007560 <__libc_init_array+0x44>)
 8007530:	f000 fa64 	bl	80079fc <_init>
 8007534:	1b64      	subs	r4, r4, r5
 8007536:	10a4      	asrs	r4, r4, #2
 8007538:	2600      	movs	r6, #0
 800753a:	42a6      	cmp	r6, r4
 800753c:	d105      	bne.n	800754a <__libc_init_array+0x2e>
 800753e:	bd70      	pop	{r4, r5, r6, pc}
 8007540:	f855 3b04 	ldr.w	r3, [r5], #4
 8007544:	4798      	blx	r3
 8007546:	3601      	adds	r6, #1
 8007548:	e7ee      	b.n	8007528 <__libc_init_array+0xc>
 800754a:	f855 3b04 	ldr.w	r3, [r5], #4
 800754e:	4798      	blx	r3
 8007550:	3601      	adds	r6, #1
 8007552:	e7f2      	b.n	800753a <__libc_init_array+0x1e>
 8007554:	08007c6c 	.word	0x08007c6c
 8007558:	08007c6c 	.word	0x08007c6c
 800755c:	08007c6c 	.word	0x08007c6c
 8007560:	08007c70 	.word	0x08007c70

08007564 <__retarget_lock_init_recursive>:
 8007564:	4770      	bx	lr

08007566 <__retarget_lock_acquire_recursive>:
 8007566:	4770      	bx	lr

08007568 <__retarget_lock_release_recursive>:
 8007568:	4770      	bx	lr

0800756a <memcpy>:
 800756a:	440a      	add	r2, r1
 800756c:	4291      	cmp	r1, r2
 800756e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007572:	d100      	bne.n	8007576 <memcpy+0xc>
 8007574:	4770      	bx	lr
 8007576:	b510      	push	{r4, lr}
 8007578:	f811 4b01 	ldrb.w	r4, [r1], #1
 800757c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007580:	4291      	cmp	r1, r2
 8007582:	d1f9      	bne.n	8007578 <memcpy+0xe>
 8007584:	bd10      	pop	{r4, pc}
	...

08007588 <_free_r>:
 8007588:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800758a:	2900      	cmp	r1, #0
 800758c:	d044      	beq.n	8007618 <_free_r+0x90>
 800758e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007592:	9001      	str	r0, [sp, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	f1a1 0404 	sub.w	r4, r1, #4
 800759a:	bfb8      	it	lt
 800759c:	18e4      	addlt	r4, r4, r3
 800759e:	f000 f8df 	bl	8007760 <__malloc_lock>
 80075a2:	4a1e      	ldr	r2, [pc, #120]	; (800761c <_free_r+0x94>)
 80075a4:	9801      	ldr	r0, [sp, #4]
 80075a6:	6813      	ldr	r3, [r2, #0]
 80075a8:	b933      	cbnz	r3, 80075b8 <_free_r+0x30>
 80075aa:	6063      	str	r3, [r4, #4]
 80075ac:	6014      	str	r4, [r2, #0]
 80075ae:	b003      	add	sp, #12
 80075b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075b4:	f000 b8da 	b.w	800776c <__malloc_unlock>
 80075b8:	42a3      	cmp	r3, r4
 80075ba:	d908      	bls.n	80075ce <_free_r+0x46>
 80075bc:	6825      	ldr	r5, [r4, #0]
 80075be:	1961      	adds	r1, r4, r5
 80075c0:	428b      	cmp	r3, r1
 80075c2:	bf01      	itttt	eq
 80075c4:	6819      	ldreq	r1, [r3, #0]
 80075c6:	685b      	ldreq	r3, [r3, #4]
 80075c8:	1949      	addeq	r1, r1, r5
 80075ca:	6021      	streq	r1, [r4, #0]
 80075cc:	e7ed      	b.n	80075aa <_free_r+0x22>
 80075ce:	461a      	mov	r2, r3
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	b10b      	cbz	r3, 80075d8 <_free_r+0x50>
 80075d4:	42a3      	cmp	r3, r4
 80075d6:	d9fa      	bls.n	80075ce <_free_r+0x46>
 80075d8:	6811      	ldr	r1, [r2, #0]
 80075da:	1855      	adds	r5, r2, r1
 80075dc:	42a5      	cmp	r5, r4
 80075de:	d10b      	bne.n	80075f8 <_free_r+0x70>
 80075e0:	6824      	ldr	r4, [r4, #0]
 80075e2:	4421      	add	r1, r4
 80075e4:	1854      	adds	r4, r2, r1
 80075e6:	42a3      	cmp	r3, r4
 80075e8:	6011      	str	r1, [r2, #0]
 80075ea:	d1e0      	bne.n	80075ae <_free_r+0x26>
 80075ec:	681c      	ldr	r4, [r3, #0]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	6053      	str	r3, [r2, #4]
 80075f2:	440c      	add	r4, r1
 80075f4:	6014      	str	r4, [r2, #0]
 80075f6:	e7da      	b.n	80075ae <_free_r+0x26>
 80075f8:	d902      	bls.n	8007600 <_free_r+0x78>
 80075fa:	230c      	movs	r3, #12
 80075fc:	6003      	str	r3, [r0, #0]
 80075fe:	e7d6      	b.n	80075ae <_free_r+0x26>
 8007600:	6825      	ldr	r5, [r4, #0]
 8007602:	1961      	adds	r1, r4, r5
 8007604:	428b      	cmp	r3, r1
 8007606:	bf04      	itt	eq
 8007608:	6819      	ldreq	r1, [r3, #0]
 800760a:	685b      	ldreq	r3, [r3, #4]
 800760c:	6063      	str	r3, [r4, #4]
 800760e:	bf04      	itt	eq
 8007610:	1949      	addeq	r1, r1, r5
 8007612:	6021      	streq	r1, [r4, #0]
 8007614:	6054      	str	r4, [r2, #4]
 8007616:	e7ca      	b.n	80075ae <_free_r+0x26>
 8007618:	b003      	add	sp, #12
 800761a:	bd30      	pop	{r4, r5, pc}
 800761c:	20001c5c 	.word	0x20001c5c

08007620 <sbrk_aligned>:
 8007620:	b570      	push	{r4, r5, r6, lr}
 8007622:	4e0e      	ldr	r6, [pc, #56]	; (800765c <sbrk_aligned+0x3c>)
 8007624:	460c      	mov	r4, r1
 8007626:	6831      	ldr	r1, [r6, #0]
 8007628:	4605      	mov	r5, r0
 800762a:	b911      	cbnz	r1, 8007632 <sbrk_aligned+0x12>
 800762c:	f000 f9d6 	bl	80079dc <_sbrk_r>
 8007630:	6030      	str	r0, [r6, #0]
 8007632:	4621      	mov	r1, r4
 8007634:	4628      	mov	r0, r5
 8007636:	f000 f9d1 	bl	80079dc <_sbrk_r>
 800763a:	1c43      	adds	r3, r0, #1
 800763c:	d00a      	beq.n	8007654 <sbrk_aligned+0x34>
 800763e:	1cc4      	adds	r4, r0, #3
 8007640:	f024 0403 	bic.w	r4, r4, #3
 8007644:	42a0      	cmp	r0, r4
 8007646:	d007      	beq.n	8007658 <sbrk_aligned+0x38>
 8007648:	1a21      	subs	r1, r4, r0
 800764a:	4628      	mov	r0, r5
 800764c:	f000 f9c6 	bl	80079dc <_sbrk_r>
 8007650:	3001      	adds	r0, #1
 8007652:	d101      	bne.n	8007658 <sbrk_aligned+0x38>
 8007654:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007658:	4620      	mov	r0, r4
 800765a:	bd70      	pop	{r4, r5, r6, pc}
 800765c:	20001c60 	.word	0x20001c60

08007660 <_malloc_r>:
 8007660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007664:	1ccd      	adds	r5, r1, #3
 8007666:	f025 0503 	bic.w	r5, r5, #3
 800766a:	3508      	adds	r5, #8
 800766c:	2d0c      	cmp	r5, #12
 800766e:	bf38      	it	cc
 8007670:	250c      	movcc	r5, #12
 8007672:	2d00      	cmp	r5, #0
 8007674:	4607      	mov	r7, r0
 8007676:	db01      	blt.n	800767c <_malloc_r+0x1c>
 8007678:	42a9      	cmp	r1, r5
 800767a:	d905      	bls.n	8007688 <_malloc_r+0x28>
 800767c:	230c      	movs	r3, #12
 800767e:	603b      	str	r3, [r7, #0]
 8007680:	2600      	movs	r6, #0
 8007682:	4630      	mov	r0, r6
 8007684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007688:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800775c <_malloc_r+0xfc>
 800768c:	f000 f868 	bl	8007760 <__malloc_lock>
 8007690:	f8d8 3000 	ldr.w	r3, [r8]
 8007694:	461c      	mov	r4, r3
 8007696:	bb5c      	cbnz	r4, 80076f0 <_malloc_r+0x90>
 8007698:	4629      	mov	r1, r5
 800769a:	4638      	mov	r0, r7
 800769c:	f7ff ffc0 	bl	8007620 <sbrk_aligned>
 80076a0:	1c43      	adds	r3, r0, #1
 80076a2:	4604      	mov	r4, r0
 80076a4:	d155      	bne.n	8007752 <_malloc_r+0xf2>
 80076a6:	f8d8 4000 	ldr.w	r4, [r8]
 80076aa:	4626      	mov	r6, r4
 80076ac:	2e00      	cmp	r6, #0
 80076ae:	d145      	bne.n	800773c <_malloc_r+0xdc>
 80076b0:	2c00      	cmp	r4, #0
 80076b2:	d048      	beq.n	8007746 <_malloc_r+0xe6>
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	4631      	mov	r1, r6
 80076b8:	4638      	mov	r0, r7
 80076ba:	eb04 0903 	add.w	r9, r4, r3
 80076be:	f000 f98d 	bl	80079dc <_sbrk_r>
 80076c2:	4581      	cmp	r9, r0
 80076c4:	d13f      	bne.n	8007746 <_malloc_r+0xe6>
 80076c6:	6821      	ldr	r1, [r4, #0]
 80076c8:	1a6d      	subs	r5, r5, r1
 80076ca:	4629      	mov	r1, r5
 80076cc:	4638      	mov	r0, r7
 80076ce:	f7ff ffa7 	bl	8007620 <sbrk_aligned>
 80076d2:	3001      	adds	r0, #1
 80076d4:	d037      	beq.n	8007746 <_malloc_r+0xe6>
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	442b      	add	r3, r5
 80076da:	6023      	str	r3, [r4, #0]
 80076dc:	f8d8 3000 	ldr.w	r3, [r8]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d038      	beq.n	8007756 <_malloc_r+0xf6>
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	42a2      	cmp	r2, r4
 80076e8:	d12b      	bne.n	8007742 <_malloc_r+0xe2>
 80076ea:	2200      	movs	r2, #0
 80076ec:	605a      	str	r2, [r3, #4]
 80076ee:	e00f      	b.n	8007710 <_malloc_r+0xb0>
 80076f0:	6822      	ldr	r2, [r4, #0]
 80076f2:	1b52      	subs	r2, r2, r5
 80076f4:	d41f      	bmi.n	8007736 <_malloc_r+0xd6>
 80076f6:	2a0b      	cmp	r2, #11
 80076f8:	d917      	bls.n	800772a <_malloc_r+0xca>
 80076fa:	1961      	adds	r1, r4, r5
 80076fc:	42a3      	cmp	r3, r4
 80076fe:	6025      	str	r5, [r4, #0]
 8007700:	bf18      	it	ne
 8007702:	6059      	strne	r1, [r3, #4]
 8007704:	6863      	ldr	r3, [r4, #4]
 8007706:	bf08      	it	eq
 8007708:	f8c8 1000 	streq.w	r1, [r8]
 800770c:	5162      	str	r2, [r4, r5]
 800770e:	604b      	str	r3, [r1, #4]
 8007710:	4638      	mov	r0, r7
 8007712:	f104 060b 	add.w	r6, r4, #11
 8007716:	f000 f829 	bl	800776c <__malloc_unlock>
 800771a:	f026 0607 	bic.w	r6, r6, #7
 800771e:	1d23      	adds	r3, r4, #4
 8007720:	1af2      	subs	r2, r6, r3
 8007722:	d0ae      	beq.n	8007682 <_malloc_r+0x22>
 8007724:	1b9b      	subs	r3, r3, r6
 8007726:	50a3      	str	r3, [r4, r2]
 8007728:	e7ab      	b.n	8007682 <_malloc_r+0x22>
 800772a:	42a3      	cmp	r3, r4
 800772c:	6862      	ldr	r2, [r4, #4]
 800772e:	d1dd      	bne.n	80076ec <_malloc_r+0x8c>
 8007730:	f8c8 2000 	str.w	r2, [r8]
 8007734:	e7ec      	b.n	8007710 <_malloc_r+0xb0>
 8007736:	4623      	mov	r3, r4
 8007738:	6864      	ldr	r4, [r4, #4]
 800773a:	e7ac      	b.n	8007696 <_malloc_r+0x36>
 800773c:	4634      	mov	r4, r6
 800773e:	6876      	ldr	r6, [r6, #4]
 8007740:	e7b4      	b.n	80076ac <_malloc_r+0x4c>
 8007742:	4613      	mov	r3, r2
 8007744:	e7cc      	b.n	80076e0 <_malloc_r+0x80>
 8007746:	230c      	movs	r3, #12
 8007748:	603b      	str	r3, [r7, #0]
 800774a:	4638      	mov	r0, r7
 800774c:	f000 f80e 	bl	800776c <__malloc_unlock>
 8007750:	e797      	b.n	8007682 <_malloc_r+0x22>
 8007752:	6025      	str	r5, [r4, #0]
 8007754:	e7dc      	b.n	8007710 <_malloc_r+0xb0>
 8007756:	605b      	str	r3, [r3, #4]
 8007758:	deff      	udf	#255	; 0xff
 800775a:	bf00      	nop
 800775c:	20001c5c 	.word	0x20001c5c

08007760 <__malloc_lock>:
 8007760:	4801      	ldr	r0, [pc, #4]	; (8007768 <__malloc_lock+0x8>)
 8007762:	f7ff bf00 	b.w	8007566 <__retarget_lock_acquire_recursive>
 8007766:	bf00      	nop
 8007768:	20001c58 	.word	0x20001c58

0800776c <__malloc_unlock>:
 800776c:	4801      	ldr	r0, [pc, #4]	; (8007774 <__malloc_unlock+0x8>)
 800776e:	f7ff befb 	b.w	8007568 <__retarget_lock_release_recursive>
 8007772:	bf00      	nop
 8007774:	20001c58 	.word	0x20001c58

08007778 <__sflush_r>:
 8007778:	898a      	ldrh	r2, [r1, #12]
 800777a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800777e:	4605      	mov	r5, r0
 8007780:	0710      	lsls	r0, r2, #28
 8007782:	460c      	mov	r4, r1
 8007784:	d458      	bmi.n	8007838 <__sflush_r+0xc0>
 8007786:	684b      	ldr	r3, [r1, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	dc05      	bgt.n	8007798 <__sflush_r+0x20>
 800778c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800778e:	2b00      	cmp	r3, #0
 8007790:	dc02      	bgt.n	8007798 <__sflush_r+0x20>
 8007792:	2000      	movs	r0, #0
 8007794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800779a:	2e00      	cmp	r6, #0
 800779c:	d0f9      	beq.n	8007792 <__sflush_r+0x1a>
 800779e:	2300      	movs	r3, #0
 80077a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80077a4:	682f      	ldr	r7, [r5, #0]
 80077a6:	6a21      	ldr	r1, [r4, #32]
 80077a8:	602b      	str	r3, [r5, #0]
 80077aa:	d032      	beq.n	8007812 <__sflush_r+0x9a>
 80077ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	075a      	lsls	r2, r3, #29
 80077b2:	d505      	bpl.n	80077c0 <__sflush_r+0x48>
 80077b4:	6863      	ldr	r3, [r4, #4]
 80077b6:	1ac0      	subs	r0, r0, r3
 80077b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077ba:	b10b      	cbz	r3, 80077c0 <__sflush_r+0x48>
 80077bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077be:	1ac0      	subs	r0, r0, r3
 80077c0:	2300      	movs	r3, #0
 80077c2:	4602      	mov	r2, r0
 80077c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077c6:	6a21      	ldr	r1, [r4, #32]
 80077c8:	4628      	mov	r0, r5
 80077ca:	47b0      	blx	r6
 80077cc:	1c43      	adds	r3, r0, #1
 80077ce:	89a3      	ldrh	r3, [r4, #12]
 80077d0:	d106      	bne.n	80077e0 <__sflush_r+0x68>
 80077d2:	6829      	ldr	r1, [r5, #0]
 80077d4:	291d      	cmp	r1, #29
 80077d6:	d82b      	bhi.n	8007830 <__sflush_r+0xb8>
 80077d8:	4a29      	ldr	r2, [pc, #164]	; (8007880 <__sflush_r+0x108>)
 80077da:	410a      	asrs	r2, r1
 80077dc:	07d6      	lsls	r6, r2, #31
 80077de:	d427      	bmi.n	8007830 <__sflush_r+0xb8>
 80077e0:	2200      	movs	r2, #0
 80077e2:	6062      	str	r2, [r4, #4]
 80077e4:	04d9      	lsls	r1, r3, #19
 80077e6:	6922      	ldr	r2, [r4, #16]
 80077e8:	6022      	str	r2, [r4, #0]
 80077ea:	d504      	bpl.n	80077f6 <__sflush_r+0x7e>
 80077ec:	1c42      	adds	r2, r0, #1
 80077ee:	d101      	bne.n	80077f4 <__sflush_r+0x7c>
 80077f0:	682b      	ldr	r3, [r5, #0]
 80077f2:	b903      	cbnz	r3, 80077f6 <__sflush_r+0x7e>
 80077f4:	6560      	str	r0, [r4, #84]	; 0x54
 80077f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077f8:	602f      	str	r7, [r5, #0]
 80077fa:	2900      	cmp	r1, #0
 80077fc:	d0c9      	beq.n	8007792 <__sflush_r+0x1a>
 80077fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007802:	4299      	cmp	r1, r3
 8007804:	d002      	beq.n	800780c <__sflush_r+0x94>
 8007806:	4628      	mov	r0, r5
 8007808:	f7ff febe 	bl	8007588 <_free_r>
 800780c:	2000      	movs	r0, #0
 800780e:	6360      	str	r0, [r4, #52]	; 0x34
 8007810:	e7c0      	b.n	8007794 <__sflush_r+0x1c>
 8007812:	2301      	movs	r3, #1
 8007814:	4628      	mov	r0, r5
 8007816:	47b0      	blx	r6
 8007818:	1c41      	adds	r1, r0, #1
 800781a:	d1c8      	bne.n	80077ae <__sflush_r+0x36>
 800781c:	682b      	ldr	r3, [r5, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d0c5      	beq.n	80077ae <__sflush_r+0x36>
 8007822:	2b1d      	cmp	r3, #29
 8007824:	d001      	beq.n	800782a <__sflush_r+0xb2>
 8007826:	2b16      	cmp	r3, #22
 8007828:	d101      	bne.n	800782e <__sflush_r+0xb6>
 800782a:	602f      	str	r7, [r5, #0]
 800782c:	e7b1      	b.n	8007792 <__sflush_r+0x1a>
 800782e:	89a3      	ldrh	r3, [r4, #12]
 8007830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007834:	81a3      	strh	r3, [r4, #12]
 8007836:	e7ad      	b.n	8007794 <__sflush_r+0x1c>
 8007838:	690f      	ldr	r7, [r1, #16]
 800783a:	2f00      	cmp	r7, #0
 800783c:	d0a9      	beq.n	8007792 <__sflush_r+0x1a>
 800783e:	0793      	lsls	r3, r2, #30
 8007840:	680e      	ldr	r6, [r1, #0]
 8007842:	bf08      	it	eq
 8007844:	694b      	ldreq	r3, [r1, #20]
 8007846:	600f      	str	r7, [r1, #0]
 8007848:	bf18      	it	ne
 800784a:	2300      	movne	r3, #0
 800784c:	eba6 0807 	sub.w	r8, r6, r7
 8007850:	608b      	str	r3, [r1, #8]
 8007852:	f1b8 0f00 	cmp.w	r8, #0
 8007856:	dd9c      	ble.n	8007792 <__sflush_r+0x1a>
 8007858:	6a21      	ldr	r1, [r4, #32]
 800785a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800785c:	4643      	mov	r3, r8
 800785e:	463a      	mov	r2, r7
 8007860:	4628      	mov	r0, r5
 8007862:	47b0      	blx	r6
 8007864:	2800      	cmp	r0, #0
 8007866:	dc06      	bgt.n	8007876 <__sflush_r+0xfe>
 8007868:	89a3      	ldrh	r3, [r4, #12]
 800786a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800786e:	81a3      	strh	r3, [r4, #12]
 8007870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007874:	e78e      	b.n	8007794 <__sflush_r+0x1c>
 8007876:	4407      	add	r7, r0
 8007878:	eba8 0800 	sub.w	r8, r8, r0
 800787c:	e7e9      	b.n	8007852 <__sflush_r+0xda>
 800787e:	bf00      	nop
 8007880:	dfbffffe 	.word	0xdfbffffe

08007884 <_fflush_r>:
 8007884:	b538      	push	{r3, r4, r5, lr}
 8007886:	690b      	ldr	r3, [r1, #16]
 8007888:	4605      	mov	r5, r0
 800788a:	460c      	mov	r4, r1
 800788c:	b913      	cbnz	r3, 8007894 <_fflush_r+0x10>
 800788e:	2500      	movs	r5, #0
 8007890:	4628      	mov	r0, r5
 8007892:	bd38      	pop	{r3, r4, r5, pc}
 8007894:	b118      	cbz	r0, 800789e <_fflush_r+0x1a>
 8007896:	6a03      	ldr	r3, [r0, #32]
 8007898:	b90b      	cbnz	r3, 800789e <_fflush_r+0x1a>
 800789a:	f7ff fc2b 	bl	80070f4 <__sinit>
 800789e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d0f3      	beq.n	800788e <_fflush_r+0xa>
 80078a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80078a8:	07d0      	lsls	r0, r2, #31
 80078aa:	d404      	bmi.n	80078b6 <_fflush_r+0x32>
 80078ac:	0599      	lsls	r1, r3, #22
 80078ae:	d402      	bmi.n	80078b6 <_fflush_r+0x32>
 80078b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078b2:	f7ff fe58 	bl	8007566 <__retarget_lock_acquire_recursive>
 80078b6:	4628      	mov	r0, r5
 80078b8:	4621      	mov	r1, r4
 80078ba:	f7ff ff5d 	bl	8007778 <__sflush_r>
 80078be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078c0:	07da      	lsls	r2, r3, #31
 80078c2:	4605      	mov	r5, r0
 80078c4:	d4e4      	bmi.n	8007890 <_fflush_r+0xc>
 80078c6:	89a3      	ldrh	r3, [r4, #12]
 80078c8:	059b      	lsls	r3, r3, #22
 80078ca:	d4e1      	bmi.n	8007890 <_fflush_r+0xc>
 80078cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078ce:	f7ff fe4b 	bl	8007568 <__retarget_lock_release_recursive>
 80078d2:	e7dd      	b.n	8007890 <_fflush_r+0xc>

080078d4 <__swhatbuf_r>:
 80078d4:	b570      	push	{r4, r5, r6, lr}
 80078d6:	460c      	mov	r4, r1
 80078d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078dc:	2900      	cmp	r1, #0
 80078de:	b096      	sub	sp, #88	; 0x58
 80078e0:	4615      	mov	r5, r2
 80078e2:	461e      	mov	r6, r3
 80078e4:	da0d      	bge.n	8007902 <__swhatbuf_r+0x2e>
 80078e6:	89a3      	ldrh	r3, [r4, #12]
 80078e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80078ec:	f04f 0100 	mov.w	r1, #0
 80078f0:	bf0c      	ite	eq
 80078f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80078f6:	2340      	movne	r3, #64	; 0x40
 80078f8:	2000      	movs	r0, #0
 80078fa:	6031      	str	r1, [r6, #0]
 80078fc:	602b      	str	r3, [r5, #0]
 80078fe:	b016      	add	sp, #88	; 0x58
 8007900:	bd70      	pop	{r4, r5, r6, pc}
 8007902:	466a      	mov	r2, sp
 8007904:	f000 f848 	bl	8007998 <_fstat_r>
 8007908:	2800      	cmp	r0, #0
 800790a:	dbec      	blt.n	80078e6 <__swhatbuf_r+0x12>
 800790c:	9901      	ldr	r1, [sp, #4]
 800790e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007912:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007916:	4259      	negs	r1, r3
 8007918:	4159      	adcs	r1, r3
 800791a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800791e:	e7eb      	b.n	80078f8 <__swhatbuf_r+0x24>

08007920 <__smakebuf_r>:
 8007920:	898b      	ldrh	r3, [r1, #12]
 8007922:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007924:	079d      	lsls	r5, r3, #30
 8007926:	4606      	mov	r6, r0
 8007928:	460c      	mov	r4, r1
 800792a:	d507      	bpl.n	800793c <__smakebuf_r+0x1c>
 800792c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	6123      	str	r3, [r4, #16]
 8007934:	2301      	movs	r3, #1
 8007936:	6163      	str	r3, [r4, #20]
 8007938:	b002      	add	sp, #8
 800793a:	bd70      	pop	{r4, r5, r6, pc}
 800793c:	ab01      	add	r3, sp, #4
 800793e:	466a      	mov	r2, sp
 8007940:	f7ff ffc8 	bl	80078d4 <__swhatbuf_r>
 8007944:	9900      	ldr	r1, [sp, #0]
 8007946:	4605      	mov	r5, r0
 8007948:	4630      	mov	r0, r6
 800794a:	f7ff fe89 	bl	8007660 <_malloc_r>
 800794e:	b948      	cbnz	r0, 8007964 <__smakebuf_r+0x44>
 8007950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007954:	059a      	lsls	r2, r3, #22
 8007956:	d4ef      	bmi.n	8007938 <__smakebuf_r+0x18>
 8007958:	f023 0303 	bic.w	r3, r3, #3
 800795c:	f043 0302 	orr.w	r3, r3, #2
 8007960:	81a3      	strh	r3, [r4, #12]
 8007962:	e7e3      	b.n	800792c <__smakebuf_r+0xc>
 8007964:	89a3      	ldrh	r3, [r4, #12]
 8007966:	6020      	str	r0, [r4, #0]
 8007968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800796c:	81a3      	strh	r3, [r4, #12]
 800796e:	9b00      	ldr	r3, [sp, #0]
 8007970:	6163      	str	r3, [r4, #20]
 8007972:	9b01      	ldr	r3, [sp, #4]
 8007974:	6120      	str	r0, [r4, #16]
 8007976:	b15b      	cbz	r3, 8007990 <__smakebuf_r+0x70>
 8007978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800797c:	4630      	mov	r0, r6
 800797e:	f000 f81d 	bl	80079bc <_isatty_r>
 8007982:	b128      	cbz	r0, 8007990 <__smakebuf_r+0x70>
 8007984:	89a3      	ldrh	r3, [r4, #12]
 8007986:	f023 0303 	bic.w	r3, r3, #3
 800798a:	f043 0301 	orr.w	r3, r3, #1
 800798e:	81a3      	strh	r3, [r4, #12]
 8007990:	89a3      	ldrh	r3, [r4, #12]
 8007992:	431d      	orrs	r5, r3
 8007994:	81a5      	strh	r5, [r4, #12]
 8007996:	e7cf      	b.n	8007938 <__smakebuf_r+0x18>

08007998 <_fstat_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	4d07      	ldr	r5, [pc, #28]	; (80079b8 <_fstat_r+0x20>)
 800799c:	2300      	movs	r3, #0
 800799e:	4604      	mov	r4, r0
 80079a0:	4608      	mov	r0, r1
 80079a2:	4611      	mov	r1, r2
 80079a4:	602b      	str	r3, [r5, #0]
 80079a6:	f7f9 f89d 	bl	8000ae4 <_fstat>
 80079aa:	1c43      	adds	r3, r0, #1
 80079ac:	d102      	bne.n	80079b4 <_fstat_r+0x1c>
 80079ae:	682b      	ldr	r3, [r5, #0]
 80079b0:	b103      	cbz	r3, 80079b4 <_fstat_r+0x1c>
 80079b2:	6023      	str	r3, [r4, #0]
 80079b4:	bd38      	pop	{r3, r4, r5, pc}
 80079b6:	bf00      	nop
 80079b8:	20001c54 	.word	0x20001c54

080079bc <_isatty_r>:
 80079bc:	b538      	push	{r3, r4, r5, lr}
 80079be:	4d06      	ldr	r5, [pc, #24]	; (80079d8 <_isatty_r+0x1c>)
 80079c0:	2300      	movs	r3, #0
 80079c2:	4604      	mov	r4, r0
 80079c4:	4608      	mov	r0, r1
 80079c6:	602b      	str	r3, [r5, #0]
 80079c8:	f7f9 f89c 	bl	8000b04 <_isatty>
 80079cc:	1c43      	adds	r3, r0, #1
 80079ce:	d102      	bne.n	80079d6 <_isatty_r+0x1a>
 80079d0:	682b      	ldr	r3, [r5, #0]
 80079d2:	b103      	cbz	r3, 80079d6 <_isatty_r+0x1a>
 80079d4:	6023      	str	r3, [r4, #0]
 80079d6:	bd38      	pop	{r3, r4, r5, pc}
 80079d8:	20001c54 	.word	0x20001c54

080079dc <_sbrk_r>:
 80079dc:	b538      	push	{r3, r4, r5, lr}
 80079de:	4d06      	ldr	r5, [pc, #24]	; (80079f8 <_sbrk_r+0x1c>)
 80079e0:	2300      	movs	r3, #0
 80079e2:	4604      	mov	r4, r0
 80079e4:	4608      	mov	r0, r1
 80079e6:	602b      	str	r3, [r5, #0]
 80079e8:	f7f9 f8a4 	bl	8000b34 <_sbrk>
 80079ec:	1c43      	adds	r3, r0, #1
 80079ee:	d102      	bne.n	80079f6 <_sbrk_r+0x1a>
 80079f0:	682b      	ldr	r3, [r5, #0]
 80079f2:	b103      	cbz	r3, 80079f6 <_sbrk_r+0x1a>
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	bd38      	pop	{r3, r4, r5, pc}
 80079f8:	20001c54 	.word	0x20001c54

080079fc <_init>:
 80079fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fe:	bf00      	nop
 8007a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a02:	bc08      	pop	{r3}
 8007a04:	469e      	mov	lr, r3
 8007a06:	4770      	bx	lr

08007a08 <_fini>:
 8007a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0a:	bf00      	nop
 8007a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a0e:	bc08      	pop	{r3}
 8007a10:	469e      	mov	lr, r3
 8007a12:	4770      	bx	lr
