
FreeRTOS_Binary_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f28  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  080070d8  080070d8  000170d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072ec  080072ec  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080072ec  080072ec  000172ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072f4  080072f4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072f4  080072f4  000172f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072f8  080072f8  000172f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080072fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001be4  20000060  0800735c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c44  0800735c  00021c44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b07d  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035bd  00000000  00000000  0003b150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  0003e710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000118e  00000000  00000000  0003fd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003817  00000000  00000000  00040f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018419  00000000  00000000  0004473d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010d3e5  00000000  00000000  0005cb56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006234  00000000  00000000  00169f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00170170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080070c0 	.word	0x080070c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	080070c0 	.word	0x080070c0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000214:	f000 b970 	b.w	80004f8 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	460f      	mov	r7, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4694      	mov	ip, r2
 8000244:	d965      	bls.n	8000312 <__udivmoddi4+0xe2>
 8000246:	fab2 f382 	clz	r3, r2
 800024a:	b143      	cbz	r3, 800025e <__udivmoddi4+0x2e>
 800024c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000250:	f1c3 0220 	rsb	r2, r3, #32
 8000254:	409f      	lsls	r7, r3
 8000256:	fa20 f202 	lsr.w	r2, r0, r2
 800025a:	4317      	orrs	r7, r2
 800025c:	409c      	lsls	r4, r3
 800025e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000262:	fa1f f58c 	uxth.w	r5, ip
 8000266:	fbb7 f1fe 	udiv	r1, r7, lr
 800026a:	0c22      	lsrs	r2, r4, #16
 800026c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000270:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000274:	fb01 f005 	mul.w	r0, r1, r5
 8000278:	4290      	cmp	r0, r2
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x62>
 800027c:	eb1c 0202 	adds.w	r2, ip, r2
 8000280:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000284:	f080 811c 	bcs.w	80004c0 <__udivmoddi4+0x290>
 8000288:	4290      	cmp	r0, r2
 800028a:	f240 8119 	bls.w	80004c0 <__udivmoddi4+0x290>
 800028e:	3902      	subs	r1, #2
 8000290:	4462      	add	r2, ip
 8000292:	1a12      	subs	r2, r2, r0
 8000294:	b2a4      	uxth	r4, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a2:	fb00 f505 	mul.w	r5, r0, r5
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x90>
 80002aa:	eb1c 0404 	adds.w	r4, ip, r4
 80002ae:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x294>
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x294>
 80002bc:	4464      	add	r4, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c4:	1b64      	subs	r4, r4, r5
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11e      	cbz	r6, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40dc      	lsrs	r4, r3
 80002cc:	2300      	movs	r3, #0
 80002ce:	e9c6 4300 	strd	r4, r3, [r6]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0xbc>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80ed 	beq.w	80004ba <__udivmoddi4+0x28a>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e9c6 0500 	strd	r0, r5, [r6]
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d149      	bne.n	8000388 <__udivmoddi4+0x158>
 80002f4:	42ab      	cmp	r3, r5
 80002f6:	d302      	bcc.n	80002fe <__udivmoddi4+0xce>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	f200 80f8 	bhi.w	80004ee <__udivmoddi4+0x2be>
 80002fe:	1a84      	subs	r4, r0, r2
 8000300:	eb65 0203 	sbc.w	r2, r5, r3
 8000304:	2001      	movs	r0, #1
 8000306:	4617      	mov	r7, r2
 8000308:	2e00      	cmp	r6, #0
 800030a:	d0e2      	beq.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	e9c6 4700 	strd	r4, r7, [r6]
 8000310:	e7df      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000312:	b902      	cbnz	r2, 8000316 <__udivmoddi4+0xe6>
 8000314:	deff      	udf	#255	; 0xff
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8090 	bne.w	8000440 <__udivmoddi4+0x210>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	2101      	movs	r1, #1
 800032c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000330:	fb07 2015 	mls	r0, r7, r5, r2
 8000334:	0c22      	lsrs	r2, r4, #16
 8000336:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033a:	fb0e f005 	mul.w	r0, lr, r5
 800033e:	4290      	cmp	r0, r2
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x124>
 8000342:	eb1c 0202 	adds.w	r2, ip, r2
 8000346:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4290      	cmp	r0, r2
 800034e:	f200 80cb 	bhi.w	80004e8 <__udivmoddi4+0x2b8>
 8000352:	4645      	mov	r5, r8
 8000354:	1a12      	subs	r2, r2, r0
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb2 f0f7 	udiv	r0, r2, r7
 800035c:	fb07 2210 	mls	r2, r7, r0, r2
 8000360:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000364:	fb0e fe00 	mul.w	lr, lr, r0
 8000368:	45a6      	cmp	lr, r4
 800036a:	d908      	bls.n	800037e <__udivmoddi4+0x14e>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x14c>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f200 80bb 	bhi.w	80004f2 <__udivmoddi4+0x2c2>
 800037c:	4610      	mov	r0, r2
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000386:	e79f      	b.n	80002c8 <__udivmoddi4+0x98>
 8000388:	f1c1 0720 	rsb	r7, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000392:	ea4c 0c03 	orr.w	ip, ip, r3
 8000396:	fa05 f401 	lsl.w	r4, r5, r1
 800039a:	fa20 f307 	lsr.w	r3, r0, r7
 800039e:	40fd      	lsrs	r5, r7
 80003a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a4:	4323      	orrs	r3, r4
 80003a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	fb09 5518 	mls	r5, r9, r8, r5
 80003b2:	0c1c      	lsrs	r4, r3, #16
 80003b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b8:	fb08 f50e 	mul.w	r5, r8, lr
 80003bc:	42a5      	cmp	r5, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	fa00 f001 	lsl.w	r0, r0, r1
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d0:	f080 8088 	bcs.w	80004e4 <__udivmoddi4+0x2b4>
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	f240 8085 	bls.w	80004e4 <__udivmoddi4+0x2b4>
 80003da:	f1a8 0802 	sub.w	r8, r8, #2
 80003de:	4464      	add	r4, ip
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	b29d      	uxth	r5, r3
 80003e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000400:	d26c      	bcs.n	80004dc <__udivmoddi4+0x2ac>
 8000402:	45a6      	cmp	lr, r4
 8000404:	d96a      	bls.n	80004dc <__udivmoddi4+0x2ac>
 8000406:	3b02      	subs	r3, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040e:	fba3 9502 	umull	r9, r5, r3, r2
 8000412:	eba4 040e 	sub.w	r4, r4, lr
 8000416:	42ac      	cmp	r4, r5
 8000418:	46c8      	mov	r8, r9
 800041a:	46ae      	mov	lr, r5
 800041c:	d356      	bcc.n	80004cc <__udivmoddi4+0x29c>
 800041e:	d053      	beq.n	80004c8 <__udivmoddi4+0x298>
 8000420:	b156      	cbz	r6, 8000438 <__udivmoddi4+0x208>
 8000422:	ebb0 0208 	subs.w	r2, r0, r8
 8000426:	eb64 040e 	sbc.w	r4, r4, lr
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	40ca      	lsrs	r2, r1
 8000430:	40cc      	lsrs	r4, r1
 8000432:	4317      	orrs	r7, r2
 8000434:	e9c6 7400 	strd	r7, r4, [r6]
 8000438:	4618      	mov	r0, r3
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	f1c3 0120 	rsb	r1, r3, #32
 8000444:	fa02 fc03 	lsl.w	ip, r2, r3
 8000448:	fa20 f201 	lsr.w	r2, r0, r1
 800044c:	fa25 f101 	lsr.w	r1, r5, r1
 8000450:	409d      	lsls	r5, r3
 8000452:	432a      	orrs	r2, r5
 8000454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000460:	fb07 1510 	mls	r5, r7, r0, r1
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046a:	fb00 f50e 	mul.w	r5, r0, lr
 800046e:	428d      	cmp	r5, r1
 8000470:	fa04 f403 	lsl.w	r4, r4, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x258>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047e:	d22f      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 8000480:	428d      	cmp	r5, r1
 8000482:	d92d      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 8000484:	3802      	subs	r0, #2
 8000486:	4461      	add	r1, ip
 8000488:	1b49      	subs	r1, r1, r5
 800048a:	b292      	uxth	r2, r2
 800048c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000490:	fb07 1115 	mls	r1, r7, r5, r1
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	fb05 f10e 	mul.w	r1, r5, lr
 800049c:	4291      	cmp	r1, r2
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x282>
 80004a0:	eb1c 0202 	adds.w	r2, ip, r2
 80004a4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004a8:	d216      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 80004aa:	4291      	cmp	r1, r2
 80004ac:	d914      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 80004ae:	3d02      	subs	r5, #2
 80004b0:	4462      	add	r2, ip
 80004b2:	1a52      	subs	r2, r2, r1
 80004b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b8:	e738      	b.n	800032c <__udivmoddi4+0xfc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xa2>
 80004c0:	4639      	mov	r1, r7
 80004c2:	e6e6      	b.n	8000292 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x90>
 80004c8:	4548      	cmp	r0, r9
 80004ca:	d2a9      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004cc:	ebb9 0802 	subs.w	r8, r9, r2
 80004d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d4:	3b01      	subs	r3, #1
 80004d6:	e7a3      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d8:	4645      	mov	r5, r8
 80004da:	e7ea      	b.n	80004b2 <__udivmoddi4+0x282>
 80004dc:	462b      	mov	r3, r5
 80004de:	e794      	b.n	800040a <__udivmoddi4+0x1da>
 80004e0:	4640      	mov	r0, r8
 80004e2:	e7d1      	b.n	8000488 <__udivmoddi4+0x258>
 80004e4:	46d0      	mov	r8, sl
 80004e6:	e77b      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e8:	3d02      	subs	r5, #2
 80004ea:	4462      	add	r2, ip
 80004ec:	e732      	b.n	8000354 <__udivmoddi4+0x124>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e70a      	b.n	8000308 <__udivmoddi4+0xd8>
 80004f2:	4464      	add	r4, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e742      	b.n	800037e <__udivmoddi4+0x14e>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fb29 	bl	8000b56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f840 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f8bc 	bl	8000684 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800050c:	f000 f88e 	bl	800062c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000510:	f003 fa32 	bl	8003978 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySem */
  BinarySemHandle = osSemaphoreNew(1, 1, &BinarySem_attributes);
 8000514:	4a11      	ldr	r2, [pc, #68]	; (800055c <main+0x60>)
 8000516:	2101      	movs	r1, #1
 8000518:	2001      	movs	r0, #1
 800051a:	f003 fb24 	bl	8003b66 <osSemaphoreNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a0f      	ldr	r2, [pc, #60]	; (8000560 <main+0x64>)
 8000522:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Normal_Task */
  Normal_TaskHandle = osThreadNew(Start_Normal_Task, NULL, &Normal_Task_attributes);
 8000524:	4a0f      	ldr	r2, [pc, #60]	; (8000564 <main+0x68>)
 8000526:	2100      	movs	r1, #0
 8000528:	480f      	ldr	r0, [pc, #60]	; (8000568 <main+0x6c>)
 800052a:	f003 fa6f 	bl	8003a0c <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a0e      	ldr	r2, [pc, #56]	; (800056c <main+0x70>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of Low_Task */
  Low_TaskHandle = osThreadNew(Start_Low_Task, NULL, &Low_Task_attributes);
 8000534:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <main+0x74>)
 8000536:	2100      	movs	r1, #0
 8000538:	480e      	ldr	r0, [pc, #56]	; (8000574 <main+0x78>)
 800053a:	f003 fa67 	bl	8003a0c <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <main+0x7c>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of High_Task */
  High_TaskHandle = osThreadNew(Start_High_Task, NULL, &High_Task_attributes);
 8000544:	4a0d      	ldr	r2, [pc, #52]	; (800057c <main+0x80>)
 8000546:	2100      	movs	r1, #0
 8000548:	480d      	ldr	r0, [pc, #52]	; (8000580 <main+0x84>)
 800054a:	f003 fa5f 	bl	8003a0c <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a0c      	ldr	r2, [pc, #48]	; (8000584 <main+0x88>)
 8000552:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000554:	f003 fa34 	bl	80039c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	e7fe      	b.n	8000558 <main+0x5c>
 800055a:	bf00      	nop
 800055c:	08007294 	.word	0x08007294
 8000560:	20000110 	.word	0x20000110
 8000564:	08007228 	.word	0x08007228
 8000568:	0800071d 	.word	0x0800071d
 800056c:	20000104 	.word	0x20000104
 8000570:	0800724c 	.word	0x0800724c
 8000574:	0800079d 	.word	0x0800079d
 8000578:	20000108 	.word	0x20000108
 800057c:	08007270 	.word	0x08007270
 8000580:	080007ed 	.word	0x080007ed
 8000584:	2000010c 	.word	0x2000010c

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b096      	sub	sp, #88	; 0x58
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	2244      	movs	r2, #68	; 0x44
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f006 fca8 	bl	8006eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	463b      	mov	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ae:	f000 fda5 	bl	80010fc <HAL_PWREx_ControlVoltageScaling>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b8:	f000 f96a 	bl	8000890 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005bc:	2302      	movs	r3, #2
 80005be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c6:	2340      	movs	r3, #64	; 0x40
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ce:	2302      	movs	r3, #2
 80005d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005d6:	230a      	movs	r3, #10
 80005d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fdec 	bl	80011c8 <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005f6:	f000 f94b 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	2303      	movs	r3, #3
 8000600:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800060a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	2104      	movs	r1, #4
 8000614:	4618      	mov	r0, r3
 8000616:	f001 f9f1 	bl	80019fc <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000620:	f000 f936 	bl	8000890 <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	3758      	adds	r7, #88	; 0x58
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_LPUART1_UART_Init+0x50>)
 8000632:	4a13      	ldr	r2, [pc, #76]	; (8000680 <MX_LPUART1_UART_Init+0x54>)
 8000634:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_LPUART1_UART_Init+0x50>)
 8000638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800063c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_LPUART1_UART_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000644:	4b0d      	ldr	r3, [pc, #52]	; (800067c <MX_LPUART1_UART_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_LPUART1_UART_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <MX_LPUART1_UART_Init+0x50>)
 8000652:	220c      	movs	r2, #12
 8000654:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_LPUART1_UART_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <MX_LPUART1_UART_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_LPUART1_UART_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <MX_LPUART1_UART_Init+0x50>)
 800066a:	f002 fb9b 	bl	8002da4 <HAL_UART_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000674:	f000 f90c 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	2000007c 	.word	0x2000007c
 8000680:	40008000 	.word	0x40008000

08000684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800069a:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <MX_GPIO_Init+0x90>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	4a1d      	ldr	r2, [pc, #116]	; (8000714 <MX_GPIO_Init+0x90>)
 80006a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a6:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <MX_GPIO_Init+0x90>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 80006b2:	f000 fd79 	bl	80011a8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <MX_GPIO_Init+0x90>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	4a16      	ldr	r2, [pc, #88]	; (8000714 <MX_GPIO_Init+0x90>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_GPIO_Init+0x90>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_GPIO_Init+0x90>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d2:	4a10      	ldr	r2, [pc, #64]	; (8000714 <MX_GPIO_Init+0x90>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_GPIO_Init+0x90>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2180      	movs	r1, #128	; 0x80
 80006ea:	480b      	ldr	r0, [pc, #44]	; (8000718 <MX_GPIO_Init+0x94>)
 80006ec:	f000 fce0 	bl	80010b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_LED_Pin */
  GPIO_InitStruct.Pin = BSP_LED_Pin;
 80006f0:	2380      	movs	r3, #128	; 0x80
 80006f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	4619      	mov	r1, r3
 8000706:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_GPIO_Init+0x94>)
 8000708:	f000 fb40 	bl	8000d8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000
 8000718:	48000400 	.word	0x48000400

0800071c <Start_Normal_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Normal_Task */
void Start_Normal_Task(void *argument)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//    char *str1 = "\r\nEntered into NORMAL TASK & waiting for semaphore\r\n";
//    HAL_UART_Transmit(&hlpuart1, (uint8_t *) str1, strlen(str1), 100);

    osSemaphoreAcquire(BinarySemHandle, osWaitForever);
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <Start_Normal_Task+0x6c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800072c:	4618      	mov	r0, r3
 800072e:	f003 faa3 	bl	8003c78 <osSemaphoreAcquire>

    char *str2 = "\r\nNormal Task: Semaphore acquired, performing task...\r\n";
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <Start_Normal_Task+0x70>)
 8000734:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&hlpuart1, (uint8_t *) str2, strlen(str2), 100);
 8000736:	68f8      	ldr	r0, [r7, #12]
 8000738:	f7ff fd5a 	bl	80001f0 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	b29a      	uxth	r2, r3
 8000740:	2364      	movs	r3, #100	; 0x64
 8000742:	68f9      	ldr	r1, [r7, #12]
 8000744:	4812      	ldr	r0, [pc, #72]	; (8000790 <Start_Normal_Task+0x74>)
 8000746:	f002 fb7b 	bl	8002e40 <HAL_UART_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	4811      	ldr	r0, [pc, #68]	; (8000794 <Start_Normal_Task+0x78>)
 8000750:	f000 fcae 	bl	80010b0 <HAL_GPIO_WritePin>
    osDelay(1000);
 8000754:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000758:	f003 f9ea 	bl	8003b30 <osDelay>
    // below line that release the semaphore
    // if i comment this line it will not allowed to acquire semaphore
    // for high task and continue to execute the low task

    osSemaphoreRelease(BinarySemHandle);
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <Start_Normal_Task+0x6c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f003 fadb 	bl	8003d1c <osSemaphoreRelease>
    char *str3 = "Normal Task: Semaphore released, task completed.\r\n";
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <Start_Normal_Task+0x7c>)
 8000768:	60bb      	str	r3, [r7, #8]
    HAL_UART_Transmit(&hlpuart1, (uint8_t *) str3, strlen(str3), 100);
 800076a:	68b8      	ldr	r0, [r7, #8]
 800076c:	f7ff fd40 	bl	80001f0 <strlen>
 8000770:	4603      	mov	r3, r0
 8000772:	b29a      	uxth	r2, r3
 8000774:	2364      	movs	r3, #100	; 0x64
 8000776:	68b9      	ldr	r1, [r7, #8]
 8000778:	4805      	ldr	r0, [pc, #20]	; (8000790 <Start_Normal_Task+0x74>)
 800077a:	f002 fb61 	bl	8002e40 <HAL_UART_Transmit>

    osDelay(1000);  // Ensure some delay to avoid busy looping
 800077e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000782:	f003 f9d5 	bl	8003b30 <osDelay>
  {
 8000786:	e7cd      	b.n	8000724 <Start_Normal_Task+0x8>
 8000788:	20000110 	.word	0x20000110
 800078c:	08007108 	.word	0x08007108
 8000790:	2000007c 	.word	0x2000007c
 8000794:	48000400 	.word	0x48000400
 8000798:	08007140 	.word	0x08007140

0800079c <Start_Low_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Low_Task */
void Start_Low_Task(void *argument)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Low_Task */
  /* Infinite loop */
  for(;;)
  {
    char *str1 = "\r\nEntered into LOW TASK\r\n";
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <Start_Low_Task+0x44>)
 80007a6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&hlpuart1, (uint8_t *) str1, strlen(str1), 100);
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f7ff fd21 	bl	80001f0 <strlen>
 80007ae:	4603      	mov	r3, r0
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	2364      	movs	r3, #100	; 0x64
 80007b4:	68f9      	ldr	r1, [r7, #12]
 80007b6:	480b      	ldr	r0, [pc, #44]	; (80007e4 <Start_Low_Task+0x48>)
 80007b8:	f002 fb42 	bl	8002e40 <HAL_UART_Transmit>

    char *str2 = "Leaving LOW TASK\r\n";
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <Start_Low_Task+0x4c>)
 80007be:	60bb      	str	r3, [r7, #8]
    HAL_UART_Transmit(&hlpuart1, (uint8_t *) str2, strlen(str2), 100);
 80007c0:	68b8      	ldr	r0, [r7, #8]
 80007c2:	f7ff fd15 	bl	80001f0 <strlen>
 80007c6:	4603      	mov	r3, r0
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	2364      	movs	r3, #100	; 0x64
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <Start_Low_Task+0x48>)
 80007d0:	f002 fb36 	bl	8002e40 <HAL_UART_Transmit>

    osDelay(1000);
 80007d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d8:	f003 f9aa 	bl	8003b30 <osDelay>
  {
 80007dc:	e7e2      	b.n	80007a4 <Start_Low_Task+0x8>
 80007de:	bf00      	nop
 80007e0:	08007174 	.word	0x08007174
 80007e4:	2000007c 	.word	0x2000007c
 80007e8:	08007190 	.word	0x08007190

080007ec <Start_High_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_High_Task */
void Start_High_Task(void *argument)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//    char *str1 = "\r\nEntered into HIGH TASK & waiting for Semaphore\r\n";
//    HAL_UART_Transmit(&hlpuart1, (uint8_t *) str1, strlen(str1), 100);

    osSemaphoreAcquire(BinarySemHandle, osWaitForever);
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <Start_High_Task+0x6c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007fc:	4618      	mov	r0, r3
 80007fe:	f003 fa3b 	bl	8003c78 <osSemaphoreAcquire>

    char *str2 = "\r\nHigh Task: Semaphore acquired, performing task...\r\n";
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <Start_High_Task+0x70>)
 8000804:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(&hlpuart1, (uint8_t *) str2, strlen(str2), 100);
 8000806:	68f8      	ldr	r0, [r7, #12]
 8000808:	f7ff fcf2 	bl	80001f0 <strlen>
 800080c:	4603      	mov	r3, r0
 800080e:	b29a      	uxth	r2, r3
 8000810:	2364      	movs	r3, #100	; 0x64
 8000812:	68f9      	ldr	r1, [r7, #12]
 8000814:	4812      	ldr	r0, [pc, #72]	; (8000860 <Start_High_Task+0x74>)
 8000816:	f002 fb13 	bl	8002e40 <HAL_UART_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800081a:	2201      	movs	r2, #1
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	4811      	ldr	r0, [pc, #68]	; (8000864 <Start_High_Task+0x78>)
 8000820:	f000 fc46 	bl	80010b0 <HAL_GPIO_WritePin>
    osDelay(1000);
 8000824:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000828:	f003 f982 	bl	8003b30 <osDelay>
    // below line that release the semaphore
    // if i comment this line it will not allow to acquire semaphore
    // for normal task and continue to execute the low task

    osSemaphoreRelease(BinarySemHandle);
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <Start_High_Task+0x6c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f003 fa73 	bl	8003d1c <osSemaphoreRelease>
    char *str3 = "High Task: Semaphore released, task completed.\r\n";
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <Start_High_Task+0x7c>)
 8000838:	60bb      	str	r3, [r7, #8]
    HAL_UART_Transmit(&hlpuart1, (uint8_t *) str3, strlen(str3), 100);
 800083a:	68b8      	ldr	r0, [r7, #8]
 800083c:	f7ff fcd8 	bl	80001f0 <strlen>
 8000840:	4603      	mov	r3, r0
 8000842:	b29a      	uxth	r2, r3
 8000844:	2364      	movs	r3, #100	; 0x64
 8000846:	68b9      	ldr	r1, [r7, #8]
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <Start_High_Task+0x74>)
 800084a:	f002 faf9 	bl	8002e40 <HAL_UART_Transmit>

    osDelay(1000);
 800084e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000852:	f003 f96d 	bl	8003b30 <osDelay>
  {
 8000856:	e7cd      	b.n	80007f4 <Start_High_Task+0x8>
 8000858:	20000110 	.word	0x20000110
 800085c:	080071a4 	.word	0x080071a4
 8000860:	2000007c 	.word	0x2000007c
 8000864:	48000400 	.word	0x48000400
 8000868:	080071dc 	.word	0x080071dc

0800086c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d101      	bne.n	8000882 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800087e:	f000 f983 	bl	8000b88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40001000 	.word	0x40001000

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	e7fe      	b.n	8000898 <Error_Handler+0x8>
	...

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <HAL_MspInit+0x4c>)
 80008a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a6:	4a10      	ldr	r2, [pc, #64]	; (80008e8 <HAL_MspInit+0x4c>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6613      	str	r3, [r2, #96]	; 0x60
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <HAL_MspInit+0x4c>)
 80008b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <HAL_MspInit+0x4c>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6593      	str	r3, [r2, #88]	; 0x58
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	210f      	movs	r1, #15
 80008d6:	f06f 0001 	mvn.w	r0, #1
 80008da:	f000 fa2d 	bl	8000d38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0ac      	sub	sp, #176	; 0xb0
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	228c      	movs	r2, #140	; 0x8c
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f006 faed 	bl	8006eec <memset>
  if(huart->Instance==LPUART1)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a22      	ldr	r2, [pc, #136]	; (80009a0 <HAL_UART_MspInit+0xb4>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d13d      	bne.n	8000998 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800091c:	2320      	movs	r3, #32
 800091e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000920:	2300      	movs	r3, #0
 8000922:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4618      	mov	r0, r3
 800092a:	f001 fabd 	bl	8001ea8 <HAL_RCCEx_PeriphCLKConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000934:	f7ff ffac 	bl	8000890 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000938:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <HAL_UART_MspInit+0xb8>)
 800093a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800093c:	4a19      	ldr	r2, [pc, #100]	; (80009a4 <HAL_UART_MspInit+0xb8>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000944:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <HAL_UART_MspInit+0xb8>)
 8000946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <HAL_UART_MspInit+0xb8>)
 8000952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000954:	4a13      	ldr	r2, [pc, #76]	; (80009a4 <HAL_UART_MspInit+0xb8>)
 8000956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800095a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_UART_MspInit+0xb8>)
 800095e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000968:	f000 fc1e 	bl	80011a8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800096c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000970:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000986:	2308      	movs	r3, #8
 8000988:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800098c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000990:	4619      	mov	r1, r3
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <HAL_UART_MspInit+0xbc>)
 8000994:	f000 f9fa 	bl	8000d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000998:	bf00      	nop
 800099a:	37b0      	adds	r7, #176	; 0xb0
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40008000 	.word	0x40008000
 80009a4:	40021000 	.word	0x40021000
 80009a8:	48001800 	.word	0x48001800

080009ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08e      	sub	sp, #56	; 0x38
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009b4:	2300      	movs	r3, #0
 80009b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009ba:	4b34      	ldr	r3, [pc, #208]	; (8000a8c <HAL_InitTick+0xe0>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009be:	4a33      	ldr	r2, [pc, #204]	; (8000a8c <HAL_InitTick+0xe0>)
 80009c0:	f043 0310 	orr.w	r3, r3, #16
 80009c4:	6593      	str	r3, [r2, #88]	; 0x58
 80009c6:	4b31      	ldr	r3, [pc, #196]	; (8000a8c <HAL_InitTick+0xe0>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ca:	f003 0310 	and.w	r3, r3, #16
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009d2:	f107 0210 	add.w	r2, r7, #16
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4611      	mov	r1, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 f9d1 	bl	8001d84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009e2:	6a3b      	ldr	r3, [r7, #32]
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d103      	bne.n	80009f4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009ec:	f001 f99e 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 80009f0:	6378      	str	r0, [r7, #52]	; 0x34
 80009f2:	e004      	b.n	80009fe <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009f4:	f001 f99a 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 80009f8:	4603      	mov	r3, r0
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a00:	4a23      	ldr	r2, [pc, #140]	; (8000a90 <HAL_InitTick+0xe4>)
 8000a02:	fba2 2303 	umull	r2, r3, r2, r3
 8000a06:	0c9b      	lsrs	r3, r3, #18
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a0c:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <HAL_InitTick+0xe8>)
 8000a0e:	4a22      	ldr	r2, [pc, #136]	; (8000a98 <HAL_InitTick+0xec>)
 8000a10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a12:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <HAL_InitTick+0xe8>)
 8000a14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a18:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a1a:	4a1e      	ldr	r2, [pc, #120]	; (8000a94 <HAL_InitTick+0xe8>)
 8000a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a20:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <HAL_InitTick+0xe8>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a26:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <HAL_InitTick+0xe8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2c:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <HAL_InitTick+0xe8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a32:	4818      	ldr	r0, [pc, #96]	; (8000a94 <HAL_InitTick+0xe8>)
 8000a34:	f001 ff02 	bl	800283c <HAL_TIM_Base_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d11b      	bne.n	8000a7e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a46:	4813      	ldr	r0, [pc, #76]	; (8000a94 <HAL_InitTick+0xe8>)
 8000a48:	f001 ff5a 	bl	8002900 <HAL_TIM_Base_Start_IT>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d111      	bne.n	8000a7e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a5a:	2036      	movs	r0, #54	; 0x36
 8000a5c:	f000 f988 	bl	8000d70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b0f      	cmp	r3, #15
 8000a64:	d808      	bhi.n	8000a78 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a66:	2200      	movs	r2, #0
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	2036      	movs	r0, #54	; 0x36
 8000a6c:	f000 f964 	bl	8000d38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a70:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <HAL_InitTick+0xf0>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
 8000a76:	e002      	b.n	8000a7e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3738      	adds	r7, #56	; 0x38
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	431bde83 	.word	0x431bde83
 8000a94:	20000114 	.word	0x20000114
 8000a98:	40001000 	.word	0x40001000
 8000a9c:	20000004 	.word	0x20000004

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <UsageFault_Handler+0x4>

08000abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <TIM6_DAC_IRQHandler+0x10>)
 8000ad2:	f001 ff85 	bl	80029e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000114 	.word	0x20000114

08000ae0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <SystemInit+0x20>)
 8000ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aea:	4a05      	ldr	r2, [pc, #20]	; (8000b00 <SystemInit+0x20>)
 8000aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b08:	f7ff ffea 	bl	8000ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0e:	490d      	ldr	r1, [pc, #52]	; (8000b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <LoopForever+0xe>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b24:	4c0a      	ldr	r4, [pc, #40]	; (8000b50 <LoopForever+0x16>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b32:	f006 fa39 	bl	8006fa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b36:	f7ff fce1 	bl	80004fc <main>

08000b3a <LoopForever>:

LoopForever:
    b LoopForever
 8000b3a:	e7fe      	b.n	8000b3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b3c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b48:	080072fc 	.word	0x080072fc
  ldr r2, =_sbss
 8000b4c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b50:	20001c44 	.word	0x20001c44

08000b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC1_2_IRQHandler>

08000b56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f8de 	bl	8000d22 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b66:	200f      	movs	r0, #15
 8000b68:	f7ff ff20 	bl	80009ac <HAL_InitTick>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d002      	beq.n	8000b78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	71fb      	strb	r3, [r7, #7]
 8000b76:	e001      	b.n	8000b7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b78:	f7ff fe90 	bl	800089c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x24>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <HAL_IncTick+0x24>)
 8000b9a:	6013      	str	r3, [r2, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000160 	.word	0x20000160

08000bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <HAL_GetTick+0x14>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000160 	.word	0x20000160

08000bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <__NVIC_SetPriorityGrouping+0x44>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be4:	4013      	ands	r3, r2
 8000be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfa:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	60d3      	str	r3, [r2, #12]
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <__NVIC_GetPriorityGrouping+0x18>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	0a1b      	lsrs	r3, r3, #8
 8000c1a:	f003 0307 	and.w	r3, r3, #7
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	db0b      	blt.n	8000c56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	f003 021f 	and.w	r2, r3, #31
 8000c44:	4907      	ldr	r1, [pc, #28]	; (8000c64 <__NVIC_EnableIRQ+0x38>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	095b      	lsrs	r3, r3, #5
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000e100 	.word	0xe000e100

08000c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db0a      	blt.n	8000c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	490c      	ldr	r1, [pc, #48]	; (8000cb4 <__NVIC_SetPriority+0x4c>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	0112      	lsls	r2, r2, #4
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c90:	e00a      	b.n	8000ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4908      	ldr	r1, [pc, #32]	; (8000cb8 <__NVIC_SetPriority+0x50>)
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	3b04      	subs	r3, #4
 8000ca0:	0112      	lsls	r2, r2, #4
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	761a      	strb	r2, [r3, #24]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	; 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f1c3 0307 	rsb	r3, r3, #7
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	bf28      	it	cs
 8000cda:	2304      	movcs	r3, #4
 8000cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	2b06      	cmp	r3, #6
 8000ce4:	d902      	bls.n	8000cec <NVIC_EncodePriority+0x30>
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3b03      	subs	r3, #3
 8000cea:	e000      	b.n	8000cee <NVIC_EncodePriority+0x32>
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	401a      	ands	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43d9      	mvns	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	4313      	orrs	r3, r2
         );
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3724      	adds	r7, #36	; 0x24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff ff4c 	bl	8000bc8 <__NVIC_SetPriorityGrouping>
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
 8000d44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d4a:	f7ff ff61 	bl	8000c10 <__NVIC_GetPriorityGrouping>
 8000d4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	68b9      	ldr	r1, [r7, #8]
 8000d54:	6978      	ldr	r0, [r7, #20]
 8000d56:	f7ff ffb1 	bl	8000cbc <NVIC_EncodePriority>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff80 	bl	8000c68 <__NVIC_SetPriority>
}
 8000d68:	bf00      	nop
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff54 	bl	8000c2c <__NVIC_EnableIRQ>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b087      	sub	sp, #28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d9a:	e166      	b.n	800106a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	2101      	movs	r1, #1
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	fa01 f303 	lsl.w	r3, r1, r3
 8000da8:	4013      	ands	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 8158 	beq.w	8001064 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d005      	beq.n	8000dcc <HAL_GPIO_Init+0x40>
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0303 	and.w	r3, r3, #3
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d130      	bne.n	8000e2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e02:	2201      	movs	r2, #1
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	091b      	lsrs	r3, r3, #4
 8000e18:	f003 0201 	and.w	r2, r3, #1
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d017      	beq.n	8000e6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	2203      	movs	r2, #3
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	689a      	ldr	r2, [r3, #8]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d123      	bne.n	8000ebe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	08da      	lsrs	r2, r3, #3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3208      	adds	r2, #8
 8000e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	220f      	movs	r2, #15
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	691a      	ldr	r2, [r3, #16]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	08da      	lsrs	r2, r3, #3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3208      	adds	r2, #8
 8000eb8:	6939      	ldr	r1, [r7, #16]
 8000eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0203 	and.w	r2, r3, #3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 80b2 	beq.w	8001064 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f00:	4b61      	ldr	r3, [pc, #388]	; (8001088 <HAL_GPIO_Init+0x2fc>)
 8000f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f04:	4a60      	ldr	r2, [pc, #384]	; (8001088 <HAL_GPIO_Init+0x2fc>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6613      	str	r3, [r2, #96]	; 0x60
 8000f0c:	4b5e      	ldr	r3, [pc, #376]	; (8001088 <HAL_GPIO_Init+0x2fc>)
 8000f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f18:	4a5c      	ldr	r2, [pc, #368]	; (800108c <HAL_GPIO_Init+0x300>)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	3302      	adds	r3, #2
 8000f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	220f      	movs	r2, #15
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f42:	d02b      	beq.n	8000f9c <HAL_GPIO_Init+0x210>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a52      	ldr	r2, [pc, #328]	; (8001090 <HAL_GPIO_Init+0x304>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d025      	beq.n	8000f98 <HAL_GPIO_Init+0x20c>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a51      	ldr	r2, [pc, #324]	; (8001094 <HAL_GPIO_Init+0x308>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d01f      	beq.n	8000f94 <HAL_GPIO_Init+0x208>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a50      	ldr	r2, [pc, #320]	; (8001098 <HAL_GPIO_Init+0x30c>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d019      	beq.n	8000f90 <HAL_GPIO_Init+0x204>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a4f      	ldr	r2, [pc, #316]	; (800109c <HAL_GPIO_Init+0x310>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d013      	beq.n	8000f8c <HAL_GPIO_Init+0x200>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a4e      	ldr	r2, [pc, #312]	; (80010a0 <HAL_GPIO_Init+0x314>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d00d      	beq.n	8000f88 <HAL_GPIO_Init+0x1fc>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a4d      	ldr	r2, [pc, #308]	; (80010a4 <HAL_GPIO_Init+0x318>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d007      	beq.n	8000f84 <HAL_GPIO_Init+0x1f8>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a4c      	ldr	r2, [pc, #304]	; (80010a8 <HAL_GPIO_Init+0x31c>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d101      	bne.n	8000f80 <HAL_GPIO_Init+0x1f4>
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	e00e      	b.n	8000f9e <HAL_GPIO_Init+0x212>
 8000f80:	2308      	movs	r3, #8
 8000f82:	e00c      	b.n	8000f9e <HAL_GPIO_Init+0x212>
 8000f84:	2306      	movs	r3, #6
 8000f86:	e00a      	b.n	8000f9e <HAL_GPIO_Init+0x212>
 8000f88:	2305      	movs	r3, #5
 8000f8a:	e008      	b.n	8000f9e <HAL_GPIO_Init+0x212>
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	e006      	b.n	8000f9e <HAL_GPIO_Init+0x212>
 8000f90:	2303      	movs	r3, #3
 8000f92:	e004      	b.n	8000f9e <HAL_GPIO_Init+0x212>
 8000f94:	2302      	movs	r3, #2
 8000f96:	e002      	b.n	8000f9e <HAL_GPIO_Init+0x212>
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e000      	b.n	8000f9e <HAL_GPIO_Init+0x212>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	f002 0203 	and.w	r2, r2, #3
 8000fa4:	0092      	lsls	r2, r2, #2
 8000fa6:	4093      	lsls	r3, r2
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fae:	4937      	ldr	r1, [pc, #220]	; (800108c <HAL_GPIO_Init+0x300>)
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fbc:	4b3b      	ldr	r3, [pc, #236]	; (80010ac <HAL_GPIO_Init+0x320>)
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fe0:	4a32      	ldr	r2, [pc, #200]	; (80010ac <HAL_GPIO_Init+0x320>)
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fe6:	4b31      	ldr	r3, [pc, #196]	; (80010ac <HAL_GPIO_Init+0x320>)
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800100a:	4a28      	ldr	r2, [pc, #160]	; (80010ac <HAL_GPIO_Init+0x320>)
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001010:	4b26      	ldr	r3, [pc, #152]	; (80010ac <HAL_GPIO_Init+0x320>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001034:	4a1d      	ldr	r2, [pc, #116]	; (80010ac <HAL_GPIO_Init+0x320>)
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <HAL_GPIO_Init+0x320>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800105e:	4a13      	ldr	r2, [pc, #76]	; (80010ac <HAL_GPIO_Init+0x320>)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	3301      	adds	r3, #1
 8001068:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	fa22 f303 	lsr.w	r3, r2, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	f47f ae91 	bne.w	8000d9c <HAL_GPIO_Init+0x10>
  }
}
 800107a:	bf00      	nop
 800107c:	bf00      	nop
 800107e:	371c      	adds	r7, #28
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	40021000 	.word	0x40021000
 800108c:	40010000 	.word	0x40010000
 8001090:	48000400 	.word	0x48000400
 8001094:	48000800 	.word	0x48000800
 8001098:	48000c00 	.word	0x48000c00
 800109c:	48001000 	.word	0x48001000
 80010a0:	48001400 	.word	0x48001400
 80010a4:	48001800 	.word	0x48001800
 80010a8:	48001c00 	.word	0x48001c00
 80010ac:	40010400 	.word	0x40010400

080010b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
 80010bc:	4613      	mov	r3, r2
 80010be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c0:	787b      	ldrb	r3, [r7, #1]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010c6:	887a      	ldrh	r2, [r7, #2]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010cc:	e002      	b.n	80010d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40007000 	.word	0x40007000

080010fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800110a:	d130      	bne.n	800116e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800110c:	4b23      	ldr	r3, [pc, #140]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001118:	d038      	beq.n	800118c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800111a:	4b20      	ldr	r3, [pc, #128]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001122:	4a1e      	ldr	r2, [pc, #120]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001124:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001128:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2232      	movs	r2, #50	; 0x32
 8001130:	fb02 f303 	mul.w	r3, r2, r3
 8001134:	4a1b      	ldr	r2, [pc, #108]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	0c9b      	lsrs	r3, r3, #18
 800113c:	3301      	adds	r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001140:	e002      	b.n	8001148 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3b01      	subs	r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001154:	d102      	bne.n	800115c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1f2      	bne.n	8001142 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001168:	d110      	bne.n	800118c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e00f      	b.n	800118e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800117a:	d007      	beq.n	800118c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001184:	4a05      	ldr	r2, [pc, #20]	; (800119c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001186:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800118a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40007000 	.word	0x40007000
 80011a0:	20000000 	.word	0x20000000
 80011a4:	431bde83 	.word	0x431bde83

080011a8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80011b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011b6:	6053      	str	r3, [r2, #4]
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40007000 	.word	0x40007000

080011c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d102      	bne.n	80011dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	f000 bc08 	b.w	80019ec <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011dc:	4b96      	ldr	r3, [pc, #600]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f003 030c 	and.w	r3, r3, #12
 80011e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011e6:	4b94      	ldr	r3, [pc, #592]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0310 	and.w	r3, r3, #16
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80e4 	beq.w	80013c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d007      	beq.n	8001214 <HAL_RCC_OscConfig+0x4c>
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	2b0c      	cmp	r3, #12
 8001208:	f040 808b 	bne.w	8001322 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	2b01      	cmp	r3, #1
 8001210:	f040 8087 	bne.w	8001322 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001214:	4b88      	ldr	r3, [pc, #544]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <HAL_RCC_OscConfig+0x64>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d101      	bne.n	800122c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e3df      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a1a      	ldr	r2, [r3, #32]
 8001230:	4b81      	ldr	r3, [pc, #516]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0308 	and.w	r3, r3, #8
 8001238:	2b00      	cmp	r3, #0
 800123a:	d004      	beq.n	8001246 <HAL_RCC_OscConfig+0x7e>
 800123c:	4b7e      	ldr	r3, [pc, #504]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001244:	e005      	b.n	8001252 <HAL_RCC_OscConfig+0x8a>
 8001246:	4b7c      	ldr	r3, [pc, #496]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 8001248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800124c:	091b      	lsrs	r3, r3, #4
 800124e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001252:	4293      	cmp	r3, r2
 8001254:	d223      	bcs.n	800129e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	4618      	mov	r0, r3
 800125c:	f000 fdc4 	bl	8001de8 <RCC_SetFlashLatencyFromMSIRange>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e3c0      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800126a:	4b73      	ldr	r3, [pc, #460]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a72      	ldr	r2, [pc, #456]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 8001270:	f043 0308 	orr.w	r3, r3, #8
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4b70      	ldr	r3, [pc, #448]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	496d      	ldr	r1, [pc, #436]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 8001284:	4313      	orrs	r3, r2
 8001286:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001288:	4b6b      	ldr	r3, [pc, #428]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	4968      	ldr	r1, [pc, #416]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 8001298:	4313      	orrs	r3, r2
 800129a:	604b      	str	r3, [r1, #4]
 800129c:	e025      	b.n	80012ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800129e:	4b66      	ldr	r3, [pc, #408]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a65      	ldr	r2, [pc, #404]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	4b63      	ldr	r3, [pc, #396]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	4960      	ldr	r1, [pc, #384]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012bc:	4b5e      	ldr	r3, [pc, #376]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	495b      	ldr	r1, [pc, #364]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d109      	bne.n	80012ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a1b      	ldr	r3, [r3, #32]
 80012da:	4618      	mov	r0, r3
 80012dc:	f000 fd84 	bl	8001de8 <RCC_SetFlashLatencyFromMSIRange>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e380      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012ea:	f000 fc87 	bl	8001bfc <HAL_RCC_GetSysClockFreq>
 80012ee:	4602      	mov	r2, r0
 80012f0:	4b51      	ldr	r3, [pc, #324]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	4950      	ldr	r1, [pc, #320]	; (800143c <HAL_RCC_OscConfig+0x274>)
 80012fc:	5ccb      	ldrb	r3, [r1, r3]
 80012fe:	f003 031f 	and.w	r3, r3, #31
 8001302:	fa22 f303 	lsr.w	r3, r2, r3
 8001306:	4a4e      	ldr	r2, [pc, #312]	; (8001440 <HAL_RCC_OscConfig+0x278>)
 8001308:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800130a:	4b4e      	ldr	r3, [pc, #312]	; (8001444 <HAL_RCC_OscConfig+0x27c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fb4c 	bl	80009ac <HAL_InitTick>
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d052      	beq.n	80013c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	e364      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d032      	beq.n	8001390 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800132a:	4b43      	ldr	r3, [pc, #268]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a42      	ldr	r2, [pc, #264]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001336:	f7ff fc3b 	bl	8000bb0 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800133e:	f7ff fc37 	bl	8000bb0 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e34d      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001350:	4b39      	ldr	r3, [pc, #228]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f0      	beq.n	800133e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800135c:	4b36      	ldr	r3, [pc, #216]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a35      	ldr	r2, [pc, #212]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 8001362:	f043 0308 	orr.w	r3, r3, #8
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b33      	ldr	r3, [pc, #204]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	4930      	ldr	r1, [pc, #192]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 8001376:	4313      	orrs	r3, r2
 8001378:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800137a:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	492b      	ldr	r1, [pc, #172]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 800138a:	4313      	orrs	r3, r2
 800138c:	604b      	str	r3, [r1, #4]
 800138e:	e01a      	b.n	80013c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001390:	4b29      	ldr	r3, [pc, #164]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a28      	ldr	r2, [pc, #160]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 8001396:	f023 0301 	bic.w	r3, r3, #1
 800139a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800139c:	f7ff fc08 	bl	8000bb0 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013a4:	f7ff fc04 	bl	8000bb0 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e31a      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013b6:	4b20      	ldr	r3, [pc, #128]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x1dc>
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d073      	beq.n	80014ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	2b08      	cmp	r3, #8
 80013d6:	d005      	beq.n	80013e4 <HAL_RCC_OscConfig+0x21c>
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2b0c      	cmp	r3, #12
 80013dc:	d10e      	bne.n	80013fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d10b      	bne.n	80013fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d063      	beq.n	80014b8 <HAL_RCC_OscConfig+0x2f0>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d15f      	bne.n	80014b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e2f7      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001404:	d106      	bne.n	8001414 <HAL_RCC_OscConfig+0x24c>
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 800140c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e025      	b.n	8001460 <HAL_RCC_OscConfig+0x298>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800141c:	d114      	bne.n	8001448 <HAL_RCC_OscConfig+0x280>
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 8001424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	4b03      	ldr	r3, [pc, #12]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a02      	ldr	r2, [pc, #8]	; (8001438 <HAL_RCC_OscConfig+0x270>)
 8001430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e013      	b.n	8001460 <HAL_RCC_OscConfig+0x298>
 8001438:	40021000 	.word	0x40021000
 800143c:	080072a4 	.word	0x080072a4
 8001440:	20000000 	.word	0x20000000
 8001444:	20000004 	.word	0x20000004
 8001448:	4ba0      	ldr	r3, [pc, #640]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a9f      	ldr	r2, [pc, #636]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 800144e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4b9d      	ldr	r3, [pc, #628]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a9c      	ldr	r2, [pc, #624]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 800145a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800145e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d013      	beq.n	8001490 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001468:	f7ff fba2 	bl	8000bb0 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fb9e 	bl	8000bb0 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	; 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e2b4      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001482:	4b92      	ldr	r3, [pc, #584]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f0      	beq.n	8001470 <HAL_RCC_OscConfig+0x2a8>
 800148e:	e014      	b.n	80014ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff fb8e 	bl	8000bb0 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff fb8a 	bl	8000bb0 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	; 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e2a0      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014aa:	4b88      	ldr	r3, [pc, #544]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x2d0>
 80014b6:	e000      	b.n	80014ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d060      	beq.n	8001588 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d005      	beq.n	80014d8 <HAL_RCC_OscConfig+0x310>
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	2b0c      	cmp	r3, #12
 80014d0:	d119      	bne.n	8001506 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d116      	bne.n	8001506 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014d8:	4b7c      	ldr	r3, [pc, #496]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <HAL_RCC_OscConfig+0x328>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e27d      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f0:	4b76      	ldr	r3, [pc, #472]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	061b      	lsls	r3, r3, #24
 80014fe:	4973      	ldr	r1, [pc, #460]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001504:	e040      	b.n	8001588 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d023      	beq.n	8001556 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800150e:	4b6f      	ldr	r3, [pc, #444]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a6e      	ldr	r2, [pc, #440]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 8001514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151a:	f7ff fb49 	bl	8000bb0 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001522:	f7ff fb45 	bl	8000bb0 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e25b      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001534:	4b65      	ldr	r3, [pc, #404]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001540:	4b62      	ldr	r3, [pc, #392]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	061b      	lsls	r3, r3, #24
 800154e:	495f      	ldr	r1, [pc, #380]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
 8001554:	e018      	b.n	8001588 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001556:	4b5d      	ldr	r3, [pc, #372]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a5c      	ldr	r2, [pc, #368]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 800155c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001562:	f7ff fb25 	bl	8000bb0 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800156a:	f7ff fb21 	bl	8000bb0 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e237      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800157c:	4b53      	ldr	r3, [pc, #332]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f0      	bne.n	800156a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b00      	cmp	r3, #0
 8001592:	d03c      	beq.n	800160e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d01c      	beq.n	80015d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800159c:	4b4b      	ldr	r3, [pc, #300]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 800159e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a2:	4a4a      	ldr	r2, [pc, #296]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ac:	f7ff fb00 	bl	8000bb0 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b4:	f7ff fafc 	bl	8000bb0 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e212      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015c6:	4b41      	ldr	r3, [pc, #260]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 80015c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0ef      	beq.n	80015b4 <HAL_RCC_OscConfig+0x3ec>
 80015d4:	e01b      	b.n	800160e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d6:	4b3d      	ldr	r3, [pc, #244]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 80015d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015dc:	4a3b      	ldr	r2, [pc, #236]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 80015de:	f023 0301 	bic.w	r3, r3, #1
 80015e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e6:	f7ff fae3 	bl	8000bb0 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ee:	f7ff fadf 	bl	8000bb0 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e1f5      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001600:	4b32      	ldr	r3, [pc, #200]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 8001602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1ef      	bne.n	80015ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 80a6 	beq.w	8001768 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161c:	2300      	movs	r3, #0
 800161e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001620:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 8001622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d10d      	bne.n	8001648 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162c:	4b27      	ldr	r3, [pc, #156]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 800162e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001630:	4a26      	ldr	r2, [pc, #152]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 8001632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001636:	6593      	str	r3, [r2, #88]	; 0x58
 8001638:	4b24      	ldr	r3, [pc, #144]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 800163a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001644:	2301      	movs	r3, #1
 8001646:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001648:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <HAL_RCC_OscConfig+0x508>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001650:	2b00      	cmp	r3, #0
 8001652:	d118      	bne.n	8001686 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001654:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <HAL_RCC_OscConfig+0x508>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a1d      	ldr	r2, [pc, #116]	; (80016d0 <HAL_RCC_OscConfig+0x508>)
 800165a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001660:	f7ff faa6 	bl	8000bb0 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001668:	f7ff faa2 	bl	8000bb0 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e1b8      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_RCC_OscConfig+0x508>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d108      	bne.n	80016a0 <HAL_RCC_OscConfig+0x4d8>
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 8001690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001694:	4a0d      	ldr	r2, [pc, #52]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800169e:	e029      	b.n	80016f4 <HAL_RCC_OscConfig+0x52c>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b05      	cmp	r3, #5
 80016a6:	d115      	bne.n	80016d4 <HAL_RCC_OscConfig+0x50c>
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 80016aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ae:	4a07      	ldr	r2, [pc, #28]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 80016ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016be:	4a03      	ldr	r2, [pc, #12]	; (80016cc <HAL_RCC_OscConfig+0x504>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c8:	e014      	b.n	80016f4 <HAL_RCC_OscConfig+0x52c>
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40007000 	.word	0x40007000
 80016d4:	4b9d      	ldr	r3, [pc, #628]	; (800194c <HAL_RCC_OscConfig+0x784>)
 80016d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016da:	4a9c      	ldr	r2, [pc, #624]	; (800194c <HAL_RCC_OscConfig+0x784>)
 80016dc:	f023 0301 	bic.w	r3, r3, #1
 80016e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016e4:	4b99      	ldr	r3, [pc, #612]	; (800194c <HAL_RCC_OscConfig+0x784>)
 80016e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ea:	4a98      	ldr	r2, [pc, #608]	; (800194c <HAL_RCC_OscConfig+0x784>)
 80016ec:	f023 0304 	bic.w	r3, r3, #4
 80016f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d016      	beq.n	800172a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fc:	f7ff fa58 	bl	8000bb0 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001702:	e00a      	b.n	800171a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001704:	f7ff fa54 	bl	8000bb0 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001712:	4293      	cmp	r3, r2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e168      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800171a:	4b8c      	ldr	r3, [pc, #560]	; (800194c <HAL_RCC_OscConfig+0x784>)
 800171c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0ed      	beq.n	8001704 <HAL_RCC_OscConfig+0x53c>
 8001728:	e015      	b.n	8001756 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172a:	f7ff fa41 	bl	8000bb0 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001730:	e00a      	b.n	8001748 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001732:	f7ff fa3d 	bl	8000bb0 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001740:	4293      	cmp	r3, r2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e151      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001748:	4b80      	ldr	r3, [pc, #512]	; (800194c <HAL_RCC_OscConfig+0x784>)
 800174a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1ed      	bne.n	8001732 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001756:	7ffb      	ldrb	r3, [r7, #31]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d105      	bne.n	8001768 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800175c:	4b7b      	ldr	r3, [pc, #492]	; (800194c <HAL_RCC_OscConfig+0x784>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	4a7a      	ldr	r2, [pc, #488]	; (800194c <HAL_RCC_OscConfig+0x784>)
 8001762:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001766:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0320 	and.w	r3, r3, #32
 8001770:	2b00      	cmp	r3, #0
 8001772:	d03c      	beq.n	80017ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	2b00      	cmp	r3, #0
 800177a:	d01c      	beq.n	80017b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800177c:	4b73      	ldr	r3, [pc, #460]	; (800194c <HAL_RCC_OscConfig+0x784>)
 800177e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001782:	4a72      	ldr	r2, [pc, #456]	; (800194c <HAL_RCC_OscConfig+0x784>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178c:	f7ff fa10 	bl	8000bb0 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001794:	f7ff fa0c 	bl	8000bb0 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e122      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017a6:	4b69      	ldr	r3, [pc, #420]	; (800194c <HAL_RCC_OscConfig+0x784>)
 80017a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0ef      	beq.n	8001794 <HAL_RCC_OscConfig+0x5cc>
 80017b4:	e01b      	b.n	80017ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017b6:	4b65      	ldr	r3, [pc, #404]	; (800194c <HAL_RCC_OscConfig+0x784>)
 80017b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017bc:	4a63      	ldr	r2, [pc, #396]	; (800194c <HAL_RCC_OscConfig+0x784>)
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c6:	f7ff f9f3 	bl	8000bb0 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017ce:	f7ff f9ef 	bl	8000bb0 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e105      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017e0:	4b5a      	ldr	r3, [pc, #360]	; (800194c <HAL_RCC_OscConfig+0x784>)
 80017e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1ef      	bne.n	80017ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 80f9 	beq.w	80019ea <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	f040 80cf 	bne.w	80019a0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001802:	4b52      	ldr	r3, [pc, #328]	; (800194c <HAL_RCC_OscConfig+0x784>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f003 0203 	and.w	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	429a      	cmp	r2, r3
 8001814:	d12c      	bne.n	8001870 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	3b01      	subs	r3, #1
 8001822:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001824:	429a      	cmp	r2, r3
 8001826:	d123      	bne.n	8001870 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001832:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001834:	429a      	cmp	r2, r3
 8001836:	d11b      	bne.n	8001870 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001842:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001844:	429a      	cmp	r2, r3
 8001846:	d113      	bne.n	8001870 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001852:	085b      	lsrs	r3, r3, #1
 8001854:	3b01      	subs	r3, #1
 8001856:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001858:	429a      	cmp	r2, r3
 800185a:	d109      	bne.n	8001870 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	085b      	lsrs	r3, r3, #1
 8001868:	3b01      	subs	r3, #1
 800186a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800186c:	429a      	cmp	r2, r3
 800186e:	d071      	beq.n	8001954 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2b0c      	cmp	r3, #12
 8001874:	d068      	beq.n	8001948 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001876:	4b35      	ldr	r3, [pc, #212]	; (800194c <HAL_RCC_OscConfig+0x784>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d105      	bne.n	800188e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001882:	4b32      	ldr	r3, [pc, #200]	; (800194c <HAL_RCC_OscConfig+0x784>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e0ac      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001892:	4b2e      	ldr	r3, [pc, #184]	; (800194c <HAL_RCC_OscConfig+0x784>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a2d      	ldr	r2, [pc, #180]	; (800194c <HAL_RCC_OscConfig+0x784>)
 8001898:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800189c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800189e:	f7ff f987 	bl	8000bb0 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a6:	f7ff f983 	bl	8000bb0 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e099      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b8:	4b24      	ldr	r3, [pc, #144]	; (800194c <HAL_RCC_OscConfig+0x784>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f0      	bne.n	80018a6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c4:	4b21      	ldr	r3, [pc, #132]	; (800194c <HAL_RCC_OscConfig+0x784>)
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	4b21      	ldr	r3, [pc, #132]	; (8001950 <HAL_RCC_OscConfig+0x788>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018d4:	3a01      	subs	r2, #1
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	4311      	orrs	r1, r2
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018de:	0212      	lsls	r2, r2, #8
 80018e0:	4311      	orrs	r1, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018e6:	0852      	lsrs	r2, r2, #1
 80018e8:	3a01      	subs	r2, #1
 80018ea:	0552      	lsls	r2, r2, #21
 80018ec:	4311      	orrs	r1, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018f2:	0852      	lsrs	r2, r2, #1
 80018f4:	3a01      	subs	r2, #1
 80018f6:	0652      	lsls	r2, r2, #25
 80018f8:	4311      	orrs	r1, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018fe:	06d2      	lsls	r2, r2, #27
 8001900:	430a      	orrs	r2, r1
 8001902:	4912      	ldr	r1, [pc, #72]	; (800194c <HAL_RCC_OscConfig+0x784>)
 8001904:	4313      	orrs	r3, r2
 8001906:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001908:	4b10      	ldr	r3, [pc, #64]	; (800194c <HAL_RCC_OscConfig+0x784>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0f      	ldr	r2, [pc, #60]	; (800194c <HAL_RCC_OscConfig+0x784>)
 800190e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001912:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001914:	4b0d      	ldr	r3, [pc, #52]	; (800194c <HAL_RCC_OscConfig+0x784>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	4a0c      	ldr	r2, [pc, #48]	; (800194c <HAL_RCC_OscConfig+0x784>)
 800191a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800191e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001920:	f7ff f946 	bl	8000bb0 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001928:	f7ff f942 	bl	8000bb0 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e058      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193a:	4b04      	ldr	r3, [pc, #16]	; (800194c <HAL_RCC_OscConfig+0x784>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001946:	e050      	b.n	80019ea <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e04f      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
 800194c:	40021000 	.word	0x40021000
 8001950:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001954:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d144      	bne.n	80019ea <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001960:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a23      	ldr	r2, [pc, #140]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 8001966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800196a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800196c:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	4a20      	ldr	r2, [pc, #128]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 8001972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001976:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001978:	f7ff f91a 	bl	8000bb0 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001980:	f7ff f916 	bl	8000bb0 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e02c      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0x7b8>
 800199e:	e024      	b.n	80019ea <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	2b0c      	cmp	r3, #12
 80019a4:	d01f      	beq.n	80019e6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a6:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 80019ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b2:	f7ff f8fd 	bl	8000bb0 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ba:	f7ff f8f9 	bl	8000bb0 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e00f      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f0      	bne.n	80019ba <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	4905      	ldr	r1, [pc, #20]	; (80019f4 <HAL_RCC_OscConfig+0x82c>)
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_RCC_OscConfig+0x830>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	60cb      	str	r3, [r1, #12]
 80019e4:	e001      	b.n	80019ea <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3720      	adds	r7, #32
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40021000 	.word	0x40021000
 80019f8:	feeefffc 	.word	0xfeeefffc

080019fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0e7      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a10:	4b75      	ldr	r3, [pc, #468]	; (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d910      	bls.n	8001a40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1e:	4b72      	ldr	r3, [pc, #456]	; (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 0207 	bic.w	r2, r3, #7
 8001a26:	4970      	ldr	r1, [pc, #448]	; (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2e:	4b6e      	ldr	r3, [pc, #440]	; (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d001      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0cf      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d010      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	4b66      	ldr	r3, [pc, #408]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d908      	bls.n	8001a6e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a5c:	4b63      	ldr	r3, [pc, #396]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4960      	ldr	r1, [pc, #384]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d04c      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d107      	bne.n	8001a92 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a82:	4b5a      	ldr	r3, [pc, #360]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d121      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e0a6      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d107      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a9a:	4b54      	ldr	r3, [pc, #336]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d115      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e09a      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d107      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ab2:	4b4e      	ldr	r3, [pc, #312]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d109      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e08e      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac2:	4b4a      	ldr	r3, [pc, #296]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e086      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ad2:	4b46      	ldr	r3, [pc, #280]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f023 0203 	bic.w	r2, r3, #3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	4943      	ldr	r1, [pc, #268]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ae4:	f7ff f864 	bl	8000bb0 <HAL_GetTick>
 8001ae8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aec:	f7ff f860 	bl	8000bb0 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e06e      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b02:	4b3a      	ldr	r3, [pc, #232]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 020c 	and.w	r2, r3, #12
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d1eb      	bne.n	8001aec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d010      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	4b31      	ldr	r3, [pc, #196]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d208      	bcs.n	8001b42 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b30:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	492b      	ldr	r1, [pc, #172]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b42:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d210      	bcs.n	8001b72 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b50:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f023 0207 	bic.w	r2, r3, #7
 8001b58:	4923      	ldr	r1, [pc, #140]	; (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b60:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d001      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e036      	b.n	8001be0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d008      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b7e:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	4918      	ldr	r1, [pc, #96]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d009      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4910      	ldr	r1, [pc, #64]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bb0:	f000 f824 	bl	8001bfc <HAL_RCC_GetSysClockFreq>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <HAL_RCC_ClockConfig+0x1f0>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	490b      	ldr	r1, [pc, #44]	; (8001bf0 <HAL_RCC_ClockConfig+0x1f4>)
 8001bc2:	5ccb      	ldrb	r3, [r1, r3]
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bcc:	4a09      	ldr	r2, [pc, #36]	; (8001bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8001bce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <HAL_RCC_ClockConfig+0x1fc>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fee9 	bl	80009ac <HAL_InitTick>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bde:	7afb      	ldrb	r3, [r7, #11]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40022000 	.word	0x40022000
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	080072a4 	.word	0x080072a4
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	20000004 	.word	0x20000004

08001bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b089      	sub	sp, #36	; 0x24
 8001c00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c0a:	4b3e      	ldr	r3, [pc, #248]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c14:	4b3b      	ldr	r3, [pc, #236]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <HAL_RCC_GetSysClockFreq+0x34>
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d121      	bne.n	8001c6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d11e      	bne.n	8001c6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c30:	4b34      	ldr	r3, [pc, #208]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d107      	bne.n	8001c4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c3c:	4b31      	ldr	r3, [pc, #196]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	e005      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c4c:	4b2d      	ldr	r3, [pc, #180]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c58:	4a2b      	ldr	r2, [pc, #172]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10d      	bne.n	8001c84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c6c:	e00a      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d102      	bne.n	8001c7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c74:	4b25      	ldr	r3, [pc, #148]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x110>)
 8001c76:	61bb      	str	r3, [r7, #24]
 8001c78:	e004      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c80:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	2b0c      	cmp	r3, #12
 8001c88:	d134      	bne.n	8001cf4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d003      	beq.n	8001ca2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d003      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xac>
 8001ca0:	e005      	b.n	8001cae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ca4:	617b      	str	r3, [r7, #20]
      break;
 8001ca6:	e005      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x114>)
 8001caa:	617b      	str	r3, [r7, #20]
      break;
 8001cac:	e002      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	617b      	str	r3, [r7, #20]
      break;
 8001cb2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cb4:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	0a1b      	lsrs	r3, r3, #8
 8001cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	fb03 f202 	mul.w	r2, r3, r2
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	0e5b      	lsrs	r3, r3, #25
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cf4:	69bb      	ldr	r3, [r7, #24]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	080072bc 	.word	0x080072bc
 8001d0c:	00f42400 	.word	0x00f42400
 8001d10:	007a1200 	.word	0x007a1200

08001d14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000000 	.word	0x20000000

08001d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d30:	f7ff fff0 	bl	8001d14 <HAL_RCC_GetHCLKFreq>
 8001d34:	4602      	mov	r2, r0
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	0a1b      	lsrs	r3, r3, #8
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	4904      	ldr	r1, [pc, #16]	; (8001d54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d42:	5ccb      	ldrb	r3, [r1, r3]
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	080072b4 	.word	0x080072b4

08001d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d5c:	f7ff ffda 	bl	8001d14 <HAL_RCC_GetHCLKFreq>
 8001d60:	4602      	mov	r2, r0
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	0adb      	lsrs	r3, r3, #11
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	4904      	ldr	r1, [pc, #16]	; (8001d80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d6e:	5ccb      	ldrb	r3, [r1, r3]
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	080072b4 	.word	0x080072b4

08001d84 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	220f      	movs	r2, #15
 8001d92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0203 	and.w	r2, r3, #3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <HAL_RCC_GetClockConfig+0x5c>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <HAL_RCC_GetClockConfig+0x5c>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001db8:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_RCC_GetClockConfig+0x5c>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	08db      	lsrs	r3, r3, #3
 8001dbe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001dc6:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <HAL_RCC_GetClockConfig+0x60>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0207 	and.w	r2, r3, #7
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	601a      	str	r2, [r3, #0]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40022000 	.word	0x40022000

08001de8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001df4:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e00:	f7ff f96e 	bl	80010e0 <HAL_PWREx_GetVoltageRange>
 8001e04:	6178      	str	r0, [r7, #20]
 8001e06:	e014      	b.n	8001e32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e08:	4b25      	ldr	r3, [pc, #148]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0c:	4a24      	ldr	r2, [pc, #144]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e12:	6593      	str	r3, [r2, #88]	; 0x58
 8001e14:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e20:	f7ff f95e 	bl	80010e0 <HAL_PWREx_GetVoltageRange>
 8001e24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e26:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	4a1d      	ldr	r2, [pc, #116]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e38:	d10b      	bne.n	8001e52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b80      	cmp	r3, #128	; 0x80
 8001e3e:	d919      	bls.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2ba0      	cmp	r3, #160	; 0xa0
 8001e44:	d902      	bls.n	8001e4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e46:	2302      	movs	r3, #2
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	e013      	b.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	e010      	b.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b80      	cmp	r3, #128	; 0x80
 8001e56:	d902      	bls.n	8001e5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e58:	2303      	movs	r3, #3
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	e00a      	b.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b80      	cmp	r3, #128	; 0x80
 8001e62:	d102      	bne.n	8001e6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e64:	2302      	movs	r3, #2
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	e004      	b.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b70      	cmp	r3, #112	; 0x70
 8001e6e:	d101      	bne.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e70:	2301      	movs	r3, #1
 8001e72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 0207 	bic.w	r2, r3, #7
 8001e7c:	4909      	ldr	r1, [pc, #36]	; (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d001      	beq.n	8001e96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40022000 	.word	0x40022000

08001ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d041      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ec8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ecc:	d02a      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ece:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ed2:	d824      	bhi.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ed4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ed8:	d008      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001eda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ede:	d81e      	bhi.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00a      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ee8:	d010      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001eea:	e018      	b.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001eec:	4b86      	ldr	r3, [pc, #536]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4a85      	ldr	r2, [pc, #532]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ef8:	e015      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3304      	adds	r3, #4
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 facd 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 8001f06:	4603      	mov	r3, r0
 8001f08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f0a:	e00c      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3320      	adds	r3, #32
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 fbb6 	bl	8002684 <RCCEx_PLLSAI2_Config>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f1c:	e003      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	74fb      	strb	r3, [r7, #19]
      break;
 8001f22:	e000      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f26:	7cfb      	ldrb	r3, [r7, #19]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10b      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f2c:	4b76      	ldr	r3, [pc, #472]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f3a:	4973      	ldr	r1, [pc, #460]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f42:	e001      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f44:	7cfb      	ldrb	r3, [r7, #19]
 8001f46:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d041      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f5c:	d02a      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f62:	d824      	bhi.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f68:	d008      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f6e:	d81e      	bhi.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00a      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f78:	d010      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f7a:	e018      	b.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f7c:	4b62      	ldr	r3, [pc, #392]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4a61      	ldr	r2, [pc, #388]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f86:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f88:	e015      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 fa85 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 8001f96:	4603      	mov	r3, r0
 8001f98:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f9a:	e00c      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3320      	adds	r3, #32
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 fb6e 	bl	8002684 <RCCEx_PLLSAI2_Config>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fac:	e003      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	74fb      	strb	r3, [r7, #19]
      break;
 8001fb2:	e000      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fb6:	7cfb      	ldrb	r3, [r7, #19]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10b      	bne.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fbc:	4b52      	ldr	r3, [pc, #328]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fca:	494f      	ldr	r1, [pc, #316]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fd2:	e001      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fd4:	7cfb      	ldrb	r3, [r7, #19]
 8001fd6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80a0 	beq.w	8002126 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fea:	4b47      	ldr	r3, [pc, #284]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00d      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002000:	4b41      	ldr	r3, [pc, #260]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002004:	4a40      	ldr	r2, [pc, #256]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200a:	6593      	str	r3, [r2, #88]	; 0x58
 800200c:	4b3e      	ldr	r3, [pc, #248]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002018:	2301      	movs	r3, #1
 800201a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800201c:	4b3b      	ldr	r3, [pc, #236]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a3a      	ldr	r2, [pc, #232]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002026:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002028:	f7fe fdc2 	bl	8000bb0 <HAL_GetTick>
 800202c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800202e:	e009      	b.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002030:	f7fe fdbe 	bl	8000bb0 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d902      	bls.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	74fb      	strb	r3, [r7, #19]
        break;
 8002042:	e005      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002044:	4b31      	ldr	r3, [pc, #196]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ef      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002050:	7cfb      	ldrb	r3, [r7, #19]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d15c      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002056:	4b2c      	ldr	r3, [pc, #176]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002060:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01f      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	429a      	cmp	r2, r3
 8002072:	d019      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002074:	4b24      	ldr	r3, [pc, #144]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800207e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002080:	4b21      	ldr	r3, [pc, #132]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002086:	4a20      	ldr	r2, [pc, #128]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002090:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002096:	4a1c      	ldr	r2, [pc, #112]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800209c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020a0:	4a19      	ldr	r2, [pc, #100]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d016      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b2:	f7fe fd7d 	bl	8000bb0 <HAL_GetTick>
 80020b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b8:	e00b      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7fe fd79 	bl	8000bb0 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d902      	bls.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	74fb      	strb	r3, [r7, #19]
            break;
 80020d0:	e006      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d2:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0ec      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020e0:	7cfb      	ldrb	r3, [r7, #19]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10c      	bne.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f6:	4904      	ldr	r1, [pc, #16]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020fe:	e009      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002100:	7cfb      	ldrb	r3, [r7, #19]
 8002102:	74bb      	strb	r3, [r7, #18]
 8002104:	e006      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
 800210c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002110:	7cfb      	ldrb	r3, [r7, #19]
 8002112:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002114:	7c7b      	ldrb	r3, [r7, #17]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d105      	bne.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211a:	4ba6      	ldr	r3, [pc, #664]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800211c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211e:	4aa5      	ldr	r2, [pc, #660]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002124:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002132:	4ba0      	ldr	r3, [pc, #640]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002138:	f023 0203 	bic.w	r2, r3, #3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002140:	499c      	ldr	r1, [pc, #624]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002154:	4b97      	ldr	r3, [pc, #604]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215a:	f023 020c 	bic.w	r2, r3, #12
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002162:	4994      	ldr	r1, [pc, #592]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002176:	4b8f      	ldr	r3, [pc, #572]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	498b      	ldr	r1, [pc, #556]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00a      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002198:	4b86      	ldr	r3, [pc, #536]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	4983      	ldr	r1, [pc, #524]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021ba:	4b7e      	ldr	r3, [pc, #504]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c8:	497a      	ldr	r1, [pc, #488]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00a      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021dc:	4b75      	ldr	r3, [pc, #468]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ea:	4972      	ldr	r1, [pc, #456]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021fe:	4b6d      	ldr	r3, [pc, #436]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002204:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220c:	4969      	ldr	r1, [pc, #420]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002220:	4b64      	ldr	r3, [pc, #400]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002226:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800222e:	4961      	ldr	r1, [pc, #388]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002242:	4b5c      	ldr	r3, [pc, #368]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002248:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002250:	4958      	ldr	r1, [pc, #352]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002264:	4b53      	ldr	r3, [pc, #332]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002272:	4950      	ldr	r1, [pc, #320]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002286:	4b4b      	ldr	r3, [pc, #300]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	4947      	ldr	r1, [pc, #284]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022a8:	4b42      	ldr	r3, [pc, #264]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022ae:	f023 0203 	bic.w	r2, r3, #3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b6:	493f      	ldr	r1, [pc, #252]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d028      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022ca:	4b3a      	ldr	r3, [pc, #232]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d8:	4936      	ldr	r1, [pc, #216]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022e8:	d106      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ea:	4b32      	ldr	r3, [pc, #200]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	4a31      	ldr	r2, [pc, #196]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022f4:	60d3      	str	r3, [r2, #12]
 80022f6:	e011      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002300:	d10c      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3304      	adds	r3, #4
 8002306:	2101      	movs	r1, #1
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f8c9 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 800230e:	4603      	mov	r3, r0
 8002310:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002312:	7cfb      	ldrb	r3, [r7, #19]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002318:	7cfb      	ldrb	r3, [r7, #19]
 800231a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d028      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002328:	4b22      	ldr	r3, [pc, #136]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002336:	491f      	ldr	r1, [pc, #124]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002346:	d106      	bne.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002348:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4a19      	ldr	r2, [pc, #100]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800234e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002352:	60d3      	str	r3, [r2, #12]
 8002354:	e011      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800235a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800235e:	d10c      	bne.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3304      	adds	r3, #4
 8002364:	2101      	movs	r1, #1
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f89a 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 800236c:	4603      	mov	r3, r0
 800236e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002370:	7cfb      	ldrb	r3, [r7, #19]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002376:	7cfb      	ldrb	r3, [r7, #19]
 8002378:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d02a      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002386:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002394:	4907      	ldr	r1, [pc, #28]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023a4:	d108      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a6:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	4a02      	ldr	r2, [pc, #8]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023b0:	60d3      	str	r3, [r2, #12]
 80023b2:	e013      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x534>
 80023b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023c0:	d10c      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3304      	adds	r3, #4
 80023c6:	2101      	movs	r1, #1
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 f869 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 80023ce:	4603      	mov	r3, r0
 80023d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023d2:	7cfb      	ldrb	r3, [r7, #19]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80023d8:	7cfb      	ldrb	r3, [r7, #19]
 80023da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d02f      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023e8:	4b2c      	ldr	r3, [pc, #176]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023f6:	4929      	ldr	r1, [pc, #164]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002402:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002406:	d10d      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3304      	adds	r3, #4
 800240c:	2102      	movs	r1, #2
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f846 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 8002414:	4603      	mov	r3, r0
 8002416:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002418:	7cfb      	ldrb	r3, [r7, #19]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d014      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800241e:	7cfb      	ldrb	r3, [r7, #19]
 8002420:	74bb      	strb	r3, [r7, #18]
 8002422:	e011      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800242c:	d10c      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3320      	adds	r3, #32
 8002432:	2102      	movs	r1, #2
 8002434:	4618      	mov	r0, r3
 8002436:	f000 f925 	bl	8002684 <RCCEx_PLLSAI2_Config>
 800243a:	4603      	mov	r3, r0
 800243c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800243e:	7cfb      	ldrb	r3, [r7, #19]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002444:	7cfb      	ldrb	r3, [r7, #19]
 8002446:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00b      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002464:	490d      	ldr	r1, [pc, #52]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00b      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002488:	4904      	ldr	r1, [pc, #16]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002490:	7cbb      	ldrb	r3, [r7, #18]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000

080024a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024ae:	4b74      	ldr	r3, [pc, #464]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d018      	beq.n	80024ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024ba:	4b71      	ldr	r3, [pc, #452]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f003 0203 	and.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d10d      	bne.n	80024e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
       ||
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024d2:	4b6b      	ldr	r3, [pc, #428]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	091b      	lsrs	r3, r3, #4
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
       ||
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d047      	beq.n	8002576 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
 80024ea:	e044      	b.n	8002576 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d018      	beq.n	8002526 <RCCEx_PLLSAI1_Config+0x86>
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d825      	bhi.n	8002544 <RCCEx_PLLSAI1_Config+0xa4>
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d002      	beq.n	8002502 <RCCEx_PLLSAI1_Config+0x62>
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d009      	beq.n	8002514 <RCCEx_PLLSAI1_Config+0x74>
 8002500:	e020      	b.n	8002544 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002502:	4b5f      	ldr	r3, [pc, #380]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d11d      	bne.n	800254a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002512:	e01a      	b.n	800254a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002514:	4b5a      	ldr	r3, [pc, #360]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251c:	2b00      	cmp	r3, #0
 800251e:	d116      	bne.n	800254e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002524:	e013      	b.n	800254e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002526:	4b56      	ldr	r3, [pc, #344]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10f      	bne.n	8002552 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002532:	4b53      	ldr	r3, [pc, #332]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002542:	e006      	b.n	8002552 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
      break;
 8002548:	e004      	b.n	8002554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800254a:	bf00      	nop
 800254c:	e002      	b.n	8002554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800254e:	bf00      	nop
 8002550:	e000      	b.n	8002554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002552:	bf00      	nop
    }

    if(status == HAL_OK)
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10d      	bne.n	8002576 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800255a:	4b49      	ldr	r3, [pc, #292]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e0>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	430b      	orrs	r3, r1
 8002570:	4943      	ldr	r1, [pc, #268]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002572:	4313      	orrs	r3, r2
 8002574:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d17c      	bne.n	8002676 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800257c:	4b40      	ldr	r3, [pc, #256]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a3f      	ldr	r2, [pc, #252]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002582:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002588:	f7fe fb12 	bl	8000bb0 <HAL_GetTick>
 800258c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800258e:	e009      	b.n	80025a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002590:	f7fe fb0e 	bl	8000bb0 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d902      	bls.n	80025a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	73fb      	strb	r3, [r7, #15]
        break;
 80025a2:	e005      	b.n	80025b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025a4:	4b36      	ldr	r3, [pc, #216]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1ef      	bne.n	8002590 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d15f      	bne.n	8002676 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d110      	bne.n	80025de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025bc:	4b30      	ldr	r3, [pc, #192]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80025c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6892      	ldr	r2, [r2, #8]
 80025cc:	0211      	lsls	r1, r2, #8
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68d2      	ldr	r2, [r2, #12]
 80025d2:	06d2      	lsls	r2, r2, #27
 80025d4:	430a      	orrs	r2, r1
 80025d6:	492a      	ldr	r1, [pc, #168]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	610b      	str	r3, [r1, #16]
 80025dc:	e027      	b.n	800262e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d112      	bne.n	800260a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025e4:	4b26      	ldr	r3, [pc, #152]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6892      	ldr	r2, [r2, #8]
 80025f4:	0211      	lsls	r1, r2, #8
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6912      	ldr	r2, [r2, #16]
 80025fa:	0852      	lsrs	r2, r2, #1
 80025fc:	3a01      	subs	r2, #1
 80025fe:	0552      	lsls	r2, r2, #21
 8002600:	430a      	orrs	r2, r1
 8002602:	491f      	ldr	r1, [pc, #124]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002604:	4313      	orrs	r3, r2
 8002606:	610b      	str	r3, [r1, #16]
 8002608:	e011      	b.n	800262e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800260a:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e0>)
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002612:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6892      	ldr	r2, [r2, #8]
 800261a:	0211      	lsls	r1, r2, #8
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6952      	ldr	r2, [r2, #20]
 8002620:	0852      	lsrs	r2, r2, #1
 8002622:	3a01      	subs	r2, #1
 8002624:	0652      	lsls	r2, r2, #25
 8002626:	430a      	orrs	r2, r1
 8002628:	4915      	ldr	r1, [pc, #84]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e0>)
 800262a:	4313      	orrs	r3, r2
 800262c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a13      	ldr	r2, [pc, #76]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002634:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002638:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263a:	f7fe fab9 	bl	8000bb0 <HAL_GetTick>
 800263e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002640:	e009      	b.n	8002656 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002642:	f7fe fab5 	bl	8000bb0 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d902      	bls.n	8002656 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	73fb      	strb	r3, [r7, #15]
          break;
 8002654:	e005      	b.n	8002662 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0ef      	beq.n	8002642 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d106      	bne.n	8002676 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e0>)
 800266a:	691a      	ldr	r2, [r3, #16]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	4903      	ldr	r1, [pc, #12]	; (8002680 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002672:	4313      	orrs	r3, r2
 8002674:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002676:	7bfb      	ldrb	r3, [r7, #15]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40021000 	.word	0x40021000

08002684 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002692:	4b69      	ldr	r3, [pc, #420]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d018      	beq.n	80026d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800269e:	4b66      	ldr	r3, [pc, #408]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f003 0203 	and.w	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d10d      	bne.n	80026ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
       ||
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d009      	beq.n	80026ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026b6:	4b60      	ldr	r3, [pc, #384]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	091b      	lsrs	r3, r3, #4
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
       ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d047      	beq.n	800275a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	e044      	b.n	800275a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d018      	beq.n	800270a <RCCEx_PLLSAI2_Config+0x86>
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d825      	bhi.n	8002728 <RCCEx_PLLSAI2_Config+0xa4>
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d002      	beq.n	80026e6 <RCCEx_PLLSAI2_Config+0x62>
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d009      	beq.n	80026f8 <RCCEx_PLLSAI2_Config+0x74>
 80026e4:	e020      	b.n	8002728 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026e6:	4b54      	ldr	r3, [pc, #336]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d11d      	bne.n	800272e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f6:	e01a      	b.n	800272e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026f8:	4b4f      	ldr	r3, [pc, #316]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002700:	2b00      	cmp	r3, #0
 8002702:	d116      	bne.n	8002732 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002708:	e013      	b.n	8002732 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800270a:	4b4b      	ldr	r3, [pc, #300]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10f      	bne.n	8002736 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002716:	4b48      	ldr	r3, [pc, #288]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002726:	e006      	b.n	8002736 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
      break;
 800272c:	e004      	b.n	8002738 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800272e:	bf00      	nop
 8002730:	e002      	b.n	8002738 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002732:	bf00      	nop
 8002734:	e000      	b.n	8002738 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002736:	bf00      	nop
    }

    if(status == HAL_OK)
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10d      	bne.n	800275a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800273e:	4b3e      	ldr	r3, [pc, #248]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6819      	ldr	r1, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	3b01      	subs	r3, #1
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	430b      	orrs	r3, r1
 8002754:	4938      	ldr	r1, [pc, #224]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002756:	4313      	orrs	r3, r2
 8002758:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d166      	bne.n	800282e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002760:	4b35      	ldr	r3, [pc, #212]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a34      	ldr	r2, [pc, #208]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800276a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800276c:	f7fe fa20 	bl	8000bb0 <HAL_GetTick>
 8002770:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002772:	e009      	b.n	8002788 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002774:	f7fe fa1c 	bl	8000bb0 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d902      	bls.n	8002788 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	73fb      	strb	r3, [r7, #15]
        break;
 8002786:	e005      	b.n	8002794 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002788:	4b2b      	ldr	r3, [pc, #172]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1ef      	bne.n	8002774 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d149      	bne.n	800282e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d110      	bne.n	80027c2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027a0:	4b25      	ldr	r3, [pc, #148]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80027a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6892      	ldr	r2, [r2, #8]
 80027b0:	0211      	lsls	r1, r2, #8
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	68d2      	ldr	r2, [r2, #12]
 80027b6:	06d2      	lsls	r2, r2, #27
 80027b8:	430a      	orrs	r2, r1
 80027ba:	491f      	ldr	r1, [pc, #124]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	614b      	str	r3, [r1, #20]
 80027c0:	e011      	b.n	80027e6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027c2:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6892      	ldr	r2, [r2, #8]
 80027d2:	0211      	lsls	r1, r2, #8
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6912      	ldr	r2, [r2, #16]
 80027d8:	0852      	lsrs	r2, r2, #1
 80027da:	3a01      	subs	r2, #1
 80027dc:	0652      	lsls	r2, r2, #25
 80027de:	430a      	orrs	r2, r1
 80027e0:	4915      	ldr	r1, [pc, #84]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027e6:	4b14      	ldr	r3, [pc, #80]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a13      	ldr	r2, [pc, #76]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f2:	f7fe f9dd 	bl	8000bb0 <HAL_GetTick>
 80027f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027f8:	e009      	b.n	800280e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027fa:	f7fe f9d9 	bl	8000bb0 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d902      	bls.n	800280e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	73fb      	strb	r3, [r7, #15]
          break;
 800280c:	e005      	b.n	800281a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800280e:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0ef      	beq.n	80027fa <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d106      	bne.n	800282e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002822:	695a      	ldr	r2, [r3, #20]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	4903      	ldr	r1, [pc, #12]	; (8002838 <RCCEx_PLLSAI2_Config+0x1b4>)
 800282a:	4313      	orrs	r3, r2
 800282c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800282e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40021000 	.word	0x40021000

0800283c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e049      	b.n	80028e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f841 	bl	80028ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3304      	adds	r3, #4
 8002878:	4619      	mov	r1, r3
 800287a:	4610      	mov	r0, r2
 800287c:	f000 f9da 	bl	8002c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b01      	cmp	r3, #1
 8002912:	d001      	beq.n	8002918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e04f      	b.n	80029b8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a23      	ldr	r2, [pc, #140]	; (80029c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d01d      	beq.n	8002976 <HAL_TIM_Base_Start_IT+0x76>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002942:	d018      	beq.n	8002976 <HAL_TIM_Base_Start_IT+0x76>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a1f      	ldr	r2, [pc, #124]	; (80029c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_TIM_Base_Start_IT+0x76>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a1e      	ldr	r2, [pc, #120]	; (80029cc <HAL_TIM_Base_Start_IT+0xcc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d00e      	beq.n	8002976 <HAL_TIM_Base_Start_IT+0x76>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d009      	beq.n	8002976 <HAL_TIM_Base_Start_IT+0x76>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a1b      	ldr	r2, [pc, #108]	; (80029d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d004      	beq.n	8002976 <HAL_TIM_Base_Start_IT+0x76>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a19      	ldr	r2, [pc, #100]	; (80029d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d115      	bne.n	80029a2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	4b17      	ldr	r3, [pc, #92]	; (80029dc <HAL_TIM_Base_Start_IT+0xdc>)
 800297e:	4013      	ands	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b06      	cmp	r3, #6
 8002986:	d015      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0xb4>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298e:	d011      	beq.n	80029b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a0:	e008      	b.n	80029b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0201 	orr.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	e000      	b.n	80029b6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	40012c00 	.word	0x40012c00
 80029c8:	40000400 	.word	0x40000400
 80029cc:	40000800 	.word	0x40000800
 80029d0:	40000c00 	.word	0x40000c00
 80029d4:	40013400 	.word	0x40013400
 80029d8:	40014000 	.word	0x40014000
 80029dc:	00010007 	.word	0x00010007

080029e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d020      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01b      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0202 	mvn.w	r2, #2
 8002a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f8e4 	bl	8002bf8 <HAL_TIM_IC_CaptureCallback>
 8002a30:	e005      	b.n	8002a3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f8d6 	bl	8002be4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f8e7 	bl	8002c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d020      	beq.n	8002a90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01b      	beq.n	8002a90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0204 	mvn.w	r2, #4
 8002a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2202      	movs	r2, #2
 8002a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f8be 	bl	8002bf8 <HAL_TIM_IC_CaptureCallback>
 8002a7c:	e005      	b.n	8002a8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f8b0 	bl	8002be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f8c1 	bl	8002c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d020      	beq.n	8002adc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01b      	beq.n	8002adc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0208 	mvn.w	r2, #8
 8002aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f898 	bl	8002bf8 <HAL_TIM_IC_CaptureCallback>
 8002ac8:	e005      	b.n	8002ad6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f88a 	bl	8002be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f89b 	bl	8002c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f003 0310 	and.w	r3, r3, #16
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d020      	beq.n	8002b28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d01b      	beq.n	8002b28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0210 	mvn.w	r2, #16
 8002af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2208      	movs	r2, #8
 8002afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f872 	bl	8002bf8 <HAL_TIM_IC_CaptureCallback>
 8002b14:	e005      	b.n	8002b22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f864 	bl	8002be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f875 	bl	8002c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00c      	beq.n	8002b4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d007      	beq.n	8002b4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0201 	mvn.w	r2, #1
 8002b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fd fe90 	bl	800086c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00c      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d007      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f906 	bl	8002d7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00c      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d007      	beq.n	8002b94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f8fe 	bl	8002d90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00c      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d007      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f834 	bl	8002c20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00c      	beq.n	8002bdc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0220 	mvn.w	r2, #32
 8002bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f8c6 	bl	8002d68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bdc:	bf00      	nop
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a40      	ldr	r2, [pc, #256]	; (8002d48 <TIM_Base_SetConfig+0x114>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d013      	beq.n	8002c74 <TIM_Base_SetConfig+0x40>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c52:	d00f      	beq.n	8002c74 <TIM_Base_SetConfig+0x40>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a3d      	ldr	r2, [pc, #244]	; (8002d4c <TIM_Base_SetConfig+0x118>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d00b      	beq.n	8002c74 <TIM_Base_SetConfig+0x40>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a3c      	ldr	r2, [pc, #240]	; (8002d50 <TIM_Base_SetConfig+0x11c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d007      	beq.n	8002c74 <TIM_Base_SetConfig+0x40>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a3b      	ldr	r2, [pc, #236]	; (8002d54 <TIM_Base_SetConfig+0x120>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d003      	beq.n	8002c74 <TIM_Base_SetConfig+0x40>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a3a      	ldr	r2, [pc, #232]	; (8002d58 <TIM_Base_SetConfig+0x124>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d108      	bne.n	8002c86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a2f      	ldr	r2, [pc, #188]	; (8002d48 <TIM_Base_SetConfig+0x114>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01f      	beq.n	8002cce <TIM_Base_SetConfig+0x9a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c94:	d01b      	beq.n	8002cce <TIM_Base_SetConfig+0x9a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a2c      	ldr	r2, [pc, #176]	; (8002d4c <TIM_Base_SetConfig+0x118>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d017      	beq.n	8002cce <TIM_Base_SetConfig+0x9a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a2b      	ldr	r2, [pc, #172]	; (8002d50 <TIM_Base_SetConfig+0x11c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d013      	beq.n	8002cce <TIM_Base_SetConfig+0x9a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a2a      	ldr	r2, [pc, #168]	; (8002d54 <TIM_Base_SetConfig+0x120>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d00f      	beq.n	8002cce <TIM_Base_SetConfig+0x9a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a29      	ldr	r2, [pc, #164]	; (8002d58 <TIM_Base_SetConfig+0x124>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00b      	beq.n	8002cce <TIM_Base_SetConfig+0x9a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a28      	ldr	r2, [pc, #160]	; (8002d5c <TIM_Base_SetConfig+0x128>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d007      	beq.n	8002cce <TIM_Base_SetConfig+0x9a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a27      	ldr	r2, [pc, #156]	; (8002d60 <TIM_Base_SetConfig+0x12c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d003      	beq.n	8002cce <TIM_Base_SetConfig+0x9a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a26      	ldr	r2, [pc, #152]	; (8002d64 <TIM_Base_SetConfig+0x130>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d108      	bne.n	8002ce0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a10      	ldr	r2, [pc, #64]	; (8002d48 <TIM_Base_SetConfig+0x114>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00f      	beq.n	8002d2c <TIM_Base_SetConfig+0xf8>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a12      	ldr	r2, [pc, #72]	; (8002d58 <TIM_Base_SetConfig+0x124>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d00b      	beq.n	8002d2c <TIM_Base_SetConfig+0xf8>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a11      	ldr	r2, [pc, #68]	; (8002d5c <TIM_Base_SetConfig+0x128>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d007      	beq.n	8002d2c <TIM_Base_SetConfig+0xf8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a10      	ldr	r2, [pc, #64]	; (8002d60 <TIM_Base_SetConfig+0x12c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d003      	beq.n	8002d2c <TIM_Base_SetConfig+0xf8>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a0f      	ldr	r2, [pc, #60]	; (8002d64 <TIM_Base_SetConfig+0x130>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d103      	bne.n	8002d34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	615a      	str	r2, [r3, #20]
}
 8002d3a:	bf00      	nop
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40012c00 	.word	0x40012c00
 8002d4c:	40000400 	.word	0x40000400
 8002d50:	40000800 	.word	0x40000800
 8002d54:	40000c00 	.word	0x40000c00
 8002d58:	40013400 	.word	0x40013400
 8002d5c:	40014000 	.word	0x40014000
 8002d60:	40014400 	.word	0x40014400
 8002d64:	40014800 	.word	0x40014800

08002d68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e040      	b.n	8002e38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7fd fd90 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2224      	movs	r2, #36	; 0x24
 8002dd0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0201 	bic.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fb6a 	bl	80034c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f8af 	bl	8002f54 <UART_SetConfig>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e01b      	b.n	8002e38 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fbe9 	bl	8003608 <UART_CheckIdleState>
 8002e36:	4603      	mov	r3, r0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	; 0x28
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	d178      	bne.n	8002f4a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_UART_Transmit+0x24>
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e071      	b.n	8002f4c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2221      	movs	r2, #33	; 0x21
 8002e74:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e76:	f7fd fe9b 	bl	8000bb0 <HAL_GetTick>
 8002e7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	88fa      	ldrh	r2, [r7, #6]
 8002e80:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	88fa      	ldrh	r2, [r7, #6]
 8002e88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e94:	d108      	bne.n	8002ea8 <HAL_UART_Transmit+0x68>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d104      	bne.n	8002ea8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	e003      	b.n	8002eb0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002eb0:	e030      	b.n	8002f14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2180      	movs	r1, #128	; 0x80
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 fc4b 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d004      	beq.n	8002ed2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e03c      	b.n	8002f4c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10b      	bne.n	8002ef0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	881a      	ldrh	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ee4:	b292      	uxth	r2, r2
 8002ee6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	3302      	adds	r3, #2
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	e008      	b.n	8002f02 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	781a      	ldrb	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	b292      	uxth	r2, r2
 8002efa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	3301      	adds	r3, #1
 8002f00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1c8      	bne.n	8002eb2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2200      	movs	r2, #0
 8002f28:	2140      	movs	r1, #64	; 0x40
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fc14 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d004      	beq.n	8002f40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e005      	b.n	8002f4c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2220      	movs	r2, #32
 8002f44:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	e000      	b.n	8002f4c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002f4a:	2302      	movs	r3, #2
  }
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3720      	adds	r7, #32
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f58:	b08a      	sub	sp, #40	; 0x28
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	4ba4      	ldr	r3, [pc, #656]	; (8003214 <UART_SetConfig+0x2c0>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	6812      	ldr	r2, [r2, #0]
 8002f8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a99      	ldr	r2, [pc, #612]	; (8003218 <UART_SetConfig+0x2c4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d004      	beq.n	8002fc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a90      	ldr	r2, [pc, #576]	; (800321c <UART_SetConfig+0x2c8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d126      	bne.n	800302c <UART_SetConfig+0xd8>
 8002fde:	4b90      	ldr	r3, [pc, #576]	; (8003220 <UART_SetConfig+0x2cc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d81b      	bhi.n	8003024 <UART_SetConfig+0xd0>
 8002fec:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <UART_SetConfig+0xa0>)
 8002fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff2:	bf00      	nop
 8002ff4:	08003005 	.word	0x08003005
 8002ff8:	08003015 	.word	0x08003015
 8002ffc:	0800300d 	.word	0x0800300d
 8003000:	0800301d 	.word	0x0800301d
 8003004:	2301      	movs	r3, #1
 8003006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800300a:	e116      	b.n	800323a <UART_SetConfig+0x2e6>
 800300c:	2302      	movs	r3, #2
 800300e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003012:	e112      	b.n	800323a <UART_SetConfig+0x2e6>
 8003014:	2304      	movs	r3, #4
 8003016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800301a:	e10e      	b.n	800323a <UART_SetConfig+0x2e6>
 800301c:	2308      	movs	r3, #8
 800301e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003022:	e10a      	b.n	800323a <UART_SetConfig+0x2e6>
 8003024:	2310      	movs	r3, #16
 8003026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800302a:	e106      	b.n	800323a <UART_SetConfig+0x2e6>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a7c      	ldr	r2, [pc, #496]	; (8003224 <UART_SetConfig+0x2d0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d138      	bne.n	80030a8 <UART_SetConfig+0x154>
 8003036:	4b7a      	ldr	r3, [pc, #488]	; (8003220 <UART_SetConfig+0x2cc>)
 8003038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303c:	f003 030c 	and.w	r3, r3, #12
 8003040:	2b0c      	cmp	r3, #12
 8003042:	d82d      	bhi.n	80030a0 <UART_SetConfig+0x14c>
 8003044:	a201      	add	r2, pc, #4	; (adr r2, 800304c <UART_SetConfig+0xf8>)
 8003046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304a:	bf00      	nop
 800304c:	08003081 	.word	0x08003081
 8003050:	080030a1 	.word	0x080030a1
 8003054:	080030a1 	.word	0x080030a1
 8003058:	080030a1 	.word	0x080030a1
 800305c:	08003091 	.word	0x08003091
 8003060:	080030a1 	.word	0x080030a1
 8003064:	080030a1 	.word	0x080030a1
 8003068:	080030a1 	.word	0x080030a1
 800306c:	08003089 	.word	0x08003089
 8003070:	080030a1 	.word	0x080030a1
 8003074:	080030a1 	.word	0x080030a1
 8003078:	080030a1 	.word	0x080030a1
 800307c:	08003099 	.word	0x08003099
 8003080:	2300      	movs	r3, #0
 8003082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003086:	e0d8      	b.n	800323a <UART_SetConfig+0x2e6>
 8003088:	2302      	movs	r3, #2
 800308a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800308e:	e0d4      	b.n	800323a <UART_SetConfig+0x2e6>
 8003090:	2304      	movs	r3, #4
 8003092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003096:	e0d0      	b.n	800323a <UART_SetConfig+0x2e6>
 8003098:	2308      	movs	r3, #8
 800309a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800309e:	e0cc      	b.n	800323a <UART_SetConfig+0x2e6>
 80030a0:	2310      	movs	r3, #16
 80030a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030a6:	e0c8      	b.n	800323a <UART_SetConfig+0x2e6>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a5e      	ldr	r2, [pc, #376]	; (8003228 <UART_SetConfig+0x2d4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d125      	bne.n	80030fe <UART_SetConfig+0x1aa>
 80030b2:	4b5b      	ldr	r3, [pc, #364]	; (8003220 <UART_SetConfig+0x2cc>)
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030bc:	2b30      	cmp	r3, #48	; 0x30
 80030be:	d016      	beq.n	80030ee <UART_SetConfig+0x19a>
 80030c0:	2b30      	cmp	r3, #48	; 0x30
 80030c2:	d818      	bhi.n	80030f6 <UART_SetConfig+0x1a2>
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d00a      	beq.n	80030de <UART_SetConfig+0x18a>
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d814      	bhi.n	80030f6 <UART_SetConfig+0x1a2>
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <UART_SetConfig+0x182>
 80030d0:	2b10      	cmp	r3, #16
 80030d2:	d008      	beq.n	80030e6 <UART_SetConfig+0x192>
 80030d4:	e00f      	b.n	80030f6 <UART_SetConfig+0x1a2>
 80030d6:	2300      	movs	r3, #0
 80030d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030dc:	e0ad      	b.n	800323a <UART_SetConfig+0x2e6>
 80030de:	2302      	movs	r3, #2
 80030e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e4:	e0a9      	b.n	800323a <UART_SetConfig+0x2e6>
 80030e6:	2304      	movs	r3, #4
 80030e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ec:	e0a5      	b.n	800323a <UART_SetConfig+0x2e6>
 80030ee:	2308      	movs	r3, #8
 80030f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030f4:	e0a1      	b.n	800323a <UART_SetConfig+0x2e6>
 80030f6:	2310      	movs	r3, #16
 80030f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030fc:	e09d      	b.n	800323a <UART_SetConfig+0x2e6>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a4a      	ldr	r2, [pc, #296]	; (800322c <UART_SetConfig+0x2d8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d125      	bne.n	8003154 <UART_SetConfig+0x200>
 8003108:	4b45      	ldr	r3, [pc, #276]	; (8003220 <UART_SetConfig+0x2cc>)
 800310a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003112:	2bc0      	cmp	r3, #192	; 0xc0
 8003114:	d016      	beq.n	8003144 <UART_SetConfig+0x1f0>
 8003116:	2bc0      	cmp	r3, #192	; 0xc0
 8003118:	d818      	bhi.n	800314c <UART_SetConfig+0x1f8>
 800311a:	2b80      	cmp	r3, #128	; 0x80
 800311c:	d00a      	beq.n	8003134 <UART_SetConfig+0x1e0>
 800311e:	2b80      	cmp	r3, #128	; 0x80
 8003120:	d814      	bhi.n	800314c <UART_SetConfig+0x1f8>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <UART_SetConfig+0x1d8>
 8003126:	2b40      	cmp	r3, #64	; 0x40
 8003128:	d008      	beq.n	800313c <UART_SetConfig+0x1e8>
 800312a:	e00f      	b.n	800314c <UART_SetConfig+0x1f8>
 800312c:	2300      	movs	r3, #0
 800312e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003132:	e082      	b.n	800323a <UART_SetConfig+0x2e6>
 8003134:	2302      	movs	r3, #2
 8003136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800313a:	e07e      	b.n	800323a <UART_SetConfig+0x2e6>
 800313c:	2304      	movs	r3, #4
 800313e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003142:	e07a      	b.n	800323a <UART_SetConfig+0x2e6>
 8003144:	2308      	movs	r3, #8
 8003146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800314a:	e076      	b.n	800323a <UART_SetConfig+0x2e6>
 800314c:	2310      	movs	r3, #16
 800314e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003152:	e072      	b.n	800323a <UART_SetConfig+0x2e6>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a35      	ldr	r2, [pc, #212]	; (8003230 <UART_SetConfig+0x2dc>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d12a      	bne.n	80031b4 <UART_SetConfig+0x260>
 800315e:	4b30      	ldr	r3, [pc, #192]	; (8003220 <UART_SetConfig+0x2cc>)
 8003160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003168:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800316c:	d01a      	beq.n	80031a4 <UART_SetConfig+0x250>
 800316e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003172:	d81b      	bhi.n	80031ac <UART_SetConfig+0x258>
 8003174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003178:	d00c      	beq.n	8003194 <UART_SetConfig+0x240>
 800317a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800317e:	d815      	bhi.n	80031ac <UART_SetConfig+0x258>
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <UART_SetConfig+0x238>
 8003184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003188:	d008      	beq.n	800319c <UART_SetConfig+0x248>
 800318a:	e00f      	b.n	80031ac <UART_SetConfig+0x258>
 800318c:	2300      	movs	r3, #0
 800318e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003192:	e052      	b.n	800323a <UART_SetConfig+0x2e6>
 8003194:	2302      	movs	r3, #2
 8003196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800319a:	e04e      	b.n	800323a <UART_SetConfig+0x2e6>
 800319c:	2304      	movs	r3, #4
 800319e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a2:	e04a      	b.n	800323a <UART_SetConfig+0x2e6>
 80031a4:	2308      	movs	r3, #8
 80031a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031aa:	e046      	b.n	800323a <UART_SetConfig+0x2e6>
 80031ac:	2310      	movs	r3, #16
 80031ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b2:	e042      	b.n	800323a <UART_SetConfig+0x2e6>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a17      	ldr	r2, [pc, #92]	; (8003218 <UART_SetConfig+0x2c4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d13a      	bne.n	8003234 <UART_SetConfig+0x2e0>
 80031be:	4b18      	ldr	r3, [pc, #96]	; (8003220 <UART_SetConfig+0x2cc>)
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031cc:	d01a      	beq.n	8003204 <UART_SetConfig+0x2b0>
 80031ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031d2:	d81b      	bhi.n	800320c <UART_SetConfig+0x2b8>
 80031d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031d8:	d00c      	beq.n	80031f4 <UART_SetConfig+0x2a0>
 80031da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031de:	d815      	bhi.n	800320c <UART_SetConfig+0x2b8>
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <UART_SetConfig+0x298>
 80031e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e8:	d008      	beq.n	80031fc <UART_SetConfig+0x2a8>
 80031ea:	e00f      	b.n	800320c <UART_SetConfig+0x2b8>
 80031ec:	2300      	movs	r3, #0
 80031ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f2:	e022      	b.n	800323a <UART_SetConfig+0x2e6>
 80031f4:	2302      	movs	r3, #2
 80031f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fa:	e01e      	b.n	800323a <UART_SetConfig+0x2e6>
 80031fc:	2304      	movs	r3, #4
 80031fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003202:	e01a      	b.n	800323a <UART_SetConfig+0x2e6>
 8003204:	2308      	movs	r3, #8
 8003206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320a:	e016      	b.n	800323a <UART_SetConfig+0x2e6>
 800320c:	2310      	movs	r3, #16
 800320e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003212:	e012      	b.n	800323a <UART_SetConfig+0x2e6>
 8003214:	efff69f3 	.word	0xefff69f3
 8003218:	40008000 	.word	0x40008000
 800321c:	40013800 	.word	0x40013800
 8003220:	40021000 	.word	0x40021000
 8003224:	40004400 	.word	0x40004400
 8003228:	40004800 	.word	0x40004800
 800322c:	40004c00 	.word	0x40004c00
 8003230:	40005000 	.word	0x40005000
 8003234:	2310      	movs	r3, #16
 8003236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a9f      	ldr	r2, [pc, #636]	; (80034bc <UART_SetConfig+0x568>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d17a      	bne.n	800333a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003244:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003248:	2b08      	cmp	r3, #8
 800324a:	d824      	bhi.n	8003296 <UART_SetConfig+0x342>
 800324c:	a201      	add	r2, pc, #4	; (adr r2, 8003254 <UART_SetConfig+0x300>)
 800324e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003252:	bf00      	nop
 8003254:	08003279 	.word	0x08003279
 8003258:	08003297 	.word	0x08003297
 800325c:	08003281 	.word	0x08003281
 8003260:	08003297 	.word	0x08003297
 8003264:	08003287 	.word	0x08003287
 8003268:	08003297 	.word	0x08003297
 800326c:	08003297 	.word	0x08003297
 8003270:	08003297 	.word	0x08003297
 8003274:	0800328f 	.word	0x0800328f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003278:	f7fe fd58 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 800327c:	61f8      	str	r0, [r7, #28]
        break;
 800327e:	e010      	b.n	80032a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003280:	4b8f      	ldr	r3, [pc, #572]	; (80034c0 <UART_SetConfig+0x56c>)
 8003282:	61fb      	str	r3, [r7, #28]
        break;
 8003284:	e00d      	b.n	80032a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003286:	f7fe fcb9 	bl	8001bfc <HAL_RCC_GetSysClockFreq>
 800328a:	61f8      	str	r0, [r7, #28]
        break;
 800328c:	e009      	b.n	80032a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800328e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003292:	61fb      	str	r3, [r7, #28]
        break;
 8003294:	e005      	b.n	80032a2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 80fb 	beq.w	80034a0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4413      	add	r3, r2
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d305      	bcc.n	80032c6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032c0:	69fa      	ldr	r2, [r7, #28]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d903      	bls.n	80032ce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80032cc:	e0e8      	b.n	80034a0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	2200      	movs	r2, #0
 80032d2:	461c      	mov	r4, r3
 80032d4:	4615      	mov	r5, r2
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	022b      	lsls	r3, r5, #8
 80032e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80032e4:	0222      	lsls	r2, r4, #8
 80032e6:	68f9      	ldr	r1, [r7, #12]
 80032e8:	6849      	ldr	r1, [r1, #4]
 80032ea:	0849      	lsrs	r1, r1, #1
 80032ec:	2000      	movs	r0, #0
 80032ee:	4688      	mov	r8, r1
 80032f0:	4681      	mov	r9, r0
 80032f2:	eb12 0a08 	adds.w	sl, r2, r8
 80032f6:	eb43 0b09 	adc.w	fp, r3, r9
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	603b      	str	r3, [r7, #0]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003308:	4650      	mov	r0, sl
 800330a:	4659      	mov	r1, fp
 800330c:	f7fc ff78 	bl	8000200 <__aeabi_uldivmod>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4613      	mov	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800331e:	d308      	bcc.n	8003332 <UART_SetConfig+0x3de>
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003326:	d204      	bcs.n	8003332 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	60da      	str	r2, [r3, #12]
 8003330:	e0b6      	b.n	80034a0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003338:	e0b2      	b.n	80034a0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003342:	d15e      	bne.n	8003402 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003344:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003348:	2b08      	cmp	r3, #8
 800334a:	d828      	bhi.n	800339e <UART_SetConfig+0x44a>
 800334c:	a201      	add	r2, pc, #4	; (adr r2, 8003354 <UART_SetConfig+0x400>)
 800334e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003352:	bf00      	nop
 8003354:	08003379 	.word	0x08003379
 8003358:	08003381 	.word	0x08003381
 800335c:	08003389 	.word	0x08003389
 8003360:	0800339f 	.word	0x0800339f
 8003364:	0800338f 	.word	0x0800338f
 8003368:	0800339f 	.word	0x0800339f
 800336c:	0800339f 	.word	0x0800339f
 8003370:	0800339f 	.word	0x0800339f
 8003374:	08003397 	.word	0x08003397
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003378:	f7fe fcd8 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 800337c:	61f8      	str	r0, [r7, #28]
        break;
 800337e:	e014      	b.n	80033aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003380:	f7fe fcea 	bl	8001d58 <HAL_RCC_GetPCLK2Freq>
 8003384:	61f8      	str	r0, [r7, #28]
        break;
 8003386:	e010      	b.n	80033aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003388:	4b4d      	ldr	r3, [pc, #308]	; (80034c0 <UART_SetConfig+0x56c>)
 800338a:	61fb      	str	r3, [r7, #28]
        break;
 800338c:	e00d      	b.n	80033aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800338e:	f7fe fc35 	bl	8001bfc <HAL_RCC_GetSysClockFreq>
 8003392:	61f8      	str	r0, [r7, #28]
        break;
 8003394:	e009      	b.n	80033aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800339a:	61fb      	str	r3, [r7, #28]
        break;
 800339c:	e005      	b.n	80033aa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80033a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d077      	beq.n	80034a0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	005a      	lsls	r2, r3, #1
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	085b      	lsrs	r3, r3, #1
 80033ba:	441a      	add	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	2b0f      	cmp	r3, #15
 80033ca:	d916      	bls.n	80033fa <UART_SetConfig+0x4a6>
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d2:	d212      	bcs.n	80033fa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	f023 030f 	bic.w	r3, r3, #15
 80033dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	085b      	lsrs	r3, r3, #1
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	8afb      	ldrh	r3, [r7, #22]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	8afa      	ldrh	r2, [r7, #22]
 80033f6:	60da      	str	r2, [r3, #12]
 80033f8:	e052      	b.n	80034a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003400:	e04e      	b.n	80034a0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003402:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003406:	2b08      	cmp	r3, #8
 8003408:	d827      	bhi.n	800345a <UART_SetConfig+0x506>
 800340a:	a201      	add	r2, pc, #4	; (adr r2, 8003410 <UART_SetConfig+0x4bc>)
 800340c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003410:	08003435 	.word	0x08003435
 8003414:	0800343d 	.word	0x0800343d
 8003418:	08003445 	.word	0x08003445
 800341c:	0800345b 	.word	0x0800345b
 8003420:	0800344b 	.word	0x0800344b
 8003424:	0800345b 	.word	0x0800345b
 8003428:	0800345b 	.word	0x0800345b
 800342c:	0800345b 	.word	0x0800345b
 8003430:	08003453 	.word	0x08003453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003434:	f7fe fc7a 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 8003438:	61f8      	str	r0, [r7, #28]
        break;
 800343a:	e014      	b.n	8003466 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800343c:	f7fe fc8c 	bl	8001d58 <HAL_RCC_GetPCLK2Freq>
 8003440:	61f8      	str	r0, [r7, #28]
        break;
 8003442:	e010      	b.n	8003466 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003444:	4b1e      	ldr	r3, [pc, #120]	; (80034c0 <UART_SetConfig+0x56c>)
 8003446:	61fb      	str	r3, [r7, #28]
        break;
 8003448:	e00d      	b.n	8003466 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800344a:	f7fe fbd7 	bl	8001bfc <HAL_RCC_GetSysClockFreq>
 800344e:	61f8      	str	r0, [r7, #28]
        break;
 8003450:	e009      	b.n	8003466 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003456:	61fb      	str	r3, [r7, #28]
        break;
 8003458:	e005      	b.n	8003466 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003464:	bf00      	nop
    }

    if (pclk != 0U)
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d019      	beq.n	80034a0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	085a      	lsrs	r2, r3, #1
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	441a      	add	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	fbb2 f3f3 	udiv	r3, r2, r3
 800347e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	2b0f      	cmp	r3, #15
 8003484:	d909      	bls.n	800349a <UART_SetConfig+0x546>
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348c:	d205      	bcs.n	800349a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	60da      	str	r2, [r3, #12]
 8003498:	e002      	b.n	80034a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80034ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3728      	adds	r7, #40	; 0x28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ba:	bf00      	nop
 80034bc:	40008000 	.word	0x40008000
 80034c0:	00f42400 	.word	0x00f42400

080034c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	f003 0310 	and.w	r3, r3, #16
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d01a      	beq.n	80035da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035c2:	d10a      	bne.n	80035da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	605a      	str	r2, [r3, #4]
  }
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b098      	sub	sp, #96	; 0x60
 800360c:	af02      	add	r7, sp, #8
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003618:	f7fd faca 	bl	8000bb0 <HAL_GetTick>
 800361c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b08      	cmp	r3, #8
 800362a:	d12e      	bne.n	800368a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800362c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003634:	2200      	movs	r2, #0
 8003636:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f88c 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d021      	beq.n	800368a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364e:	e853 3f00 	ldrex	r3, [r3]
 8003652:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800365a:	653b      	str	r3, [r7, #80]	; 0x50
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003664:	647b      	str	r3, [r7, #68]	; 0x44
 8003666:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003668:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800366a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800366c:	e841 2300 	strex	r3, r2, [r1]
 8003670:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1e6      	bne.n	8003646 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2220      	movs	r2, #32
 800367c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e062      	b.n	8003750 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b04      	cmp	r3, #4
 8003696:	d149      	bne.n	800372c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003698:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a0:	2200      	movs	r2, #0
 80036a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f856 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d03c      	beq.n	800372c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	e853 3f00 	ldrex	r3, [r3]
 80036be:	623b      	str	r3, [r7, #32]
   return(result);
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	461a      	mov	r2, r3
 80036ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d0:	633b      	str	r3, [r7, #48]	; 0x30
 80036d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d8:	e841 2300 	strex	r3, r2, [r1]
 80036dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e6      	bne.n	80036b2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3308      	adds	r3, #8
 80036ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	e853 3f00 	ldrex	r3, [r3]
 80036f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f023 0301 	bic.w	r3, r3, #1
 80036fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	3308      	adds	r3, #8
 8003702:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003704:	61fa      	str	r2, [r7, #28]
 8003706:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003708:	69b9      	ldr	r1, [r7, #24]
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	e841 2300 	strex	r3, r2, [r1]
 8003710:	617b      	str	r3, [r7, #20]
   return(result);
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1e5      	bne.n	80036e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e011      	b.n	8003750 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3758      	adds	r7, #88	; 0x58
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	4613      	mov	r3, r2
 8003766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003768:	e049      	b.n	80037fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003770:	d045      	beq.n	80037fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003772:	f7fd fa1d 	bl	8000bb0 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	429a      	cmp	r2, r3
 8003780:	d302      	bcc.n	8003788 <UART_WaitOnFlagUntilTimeout+0x30>
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e048      	b.n	800381e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d031      	beq.n	80037fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d110      	bne.n	80037ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2208      	movs	r2, #8
 80037ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 f838 	bl	8003826 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2208      	movs	r2, #8
 80037ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e029      	b.n	800381e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037d8:	d111      	bne.n	80037fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f81e 	bl	8003826 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e00f      	b.n	800381e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69da      	ldr	r2, [r3, #28]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4013      	ands	r3, r2
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	429a      	cmp	r2, r3
 800380c:	bf0c      	ite	eq
 800380e:	2301      	moveq	r3, #1
 8003810:	2300      	movne	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	429a      	cmp	r2, r3
 800381a:	d0a6      	beq.n	800376a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003826:	b480      	push	{r7}
 8003828:	b095      	sub	sp, #84	; 0x54
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003836:	e853 3f00 	ldrex	r3, [r3]
 800383a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800384c:	643b      	str	r3, [r7, #64]	; 0x40
 800384e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003850:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003852:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003854:	e841 2300 	strex	r3, r2, [r1]
 8003858:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800385a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1e6      	bne.n	800382e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3308      	adds	r3, #8
 8003866:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	e853 3f00 	ldrex	r3, [r3]
 800386e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f023 0301 	bic.w	r3, r3, #1
 8003876:	64bb      	str	r3, [r7, #72]	; 0x48
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3308      	adds	r3, #8
 800387e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003880:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003882:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003884:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003888:	e841 2300 	strex	r3, r2, [r1]
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e5      	bne.n	8003860 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003898:	2b01      	cmp	r3, #1
 800389a:	d118      	bne.n	80038ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	e853 3f00 	ldrex	r3, [r3]
 80038a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f023 0310 	bic.w	r3, r3, #16
 80038b0:	647b      	str	r3, [r7, #68]	; 0x44
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038be:	6979      	ldr	r1, [r7, #20]
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	e841 2300 	strex	r3, r2, [r1]
 80038c6:	613b      	str	r3, [r7, #16]
   return(result);
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1e6      	bne.n	800389c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80038e2:	bf00      	nop
 80038e4:	3754      	adds	r7, #84	; 0x54
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
	...

080038f0 <__NVIC_SetPriority>:
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	6039      	str	r1, [r7, #0]
 80038fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003900:	2b00      	cmp	r3, #0
 8003902:	db0a      	blt.n	800391a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	b2da      	uxtb	r2, r3
 8003908:	490c      	ldr	r1, [pc, #48]	; (800393c <__NVIC_SetPriority+0x4c>)
 800390a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390e:	0112      	lsls	r2, r2, #4
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	440b      	add	r3, r1
 8003914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003918:	e00a      	b.n	8003930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	b2da      	uxtb	r2, r3
 800391e:	4908      	ldr	r1, [pc, #32]	; (8003940 <__NVIC_SetPriority+0x50>)
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	3b04      	subs	r3, #4
 8003928:	0112      	lsls	r2, r2, #4
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	440b      	add	r3, r1
 800392e:	761a      	strb	r2, [r3, #24]
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	e000e100 	.word	0xe000e100
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003948:	4b05      	ldr	r3, [pc, #20]	; (8003960 <SysTick_Handler+0x1c>)
 800394a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800394c:	f002 f968 	bl	8005c20 <xTaskGetSchedulerState>
 8003950:	4603      	mov	r3, r0
 8003952:	2b01      	cmp	r3, #1
 8003954:	d001      	beq.n	800395a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003956:	f003 f84f 	bl	80069f8 <xPortSysTickHandler>
  }
}
 800395a:	bf00      	nop
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	e000e010 	.word	0xe000e010

08003964 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003968:	2100      	movs	r1, #0
 800396a:	f06f 0004 	mvn.w	r0, #4
 800396e:	f7ff ffbf 	bl	80038f0 <__NVIC_SetPriority>
#endif
}
 8003972:	bf00      	nop
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800397e:	f3ef 8305 	mrs	r3, IPSR
 8003982:	603b      	str	r3, [r7, #0]
  return(result);
 8003984:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800398a:	f06f 0305 	mvn.w	r3, #5
 800398e:	607b      	str	r3, [r7, #4]
 8003990:	e00c      	b.n	80039ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003992:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <osKernelInitialize+0x44>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d105      	bne.n	80039a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800399a:	4b08      	ldr	r3, [pc, #32]	; (80039bc <osKernelInitialize+0x44>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	607b      	str	r3, [r7, #4]
 80039a4:	e002      	b.n	80039ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80039a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039ac:	687b      	ldr	r3, [r7, #4]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	20000164 	.word	0x20000164

080039c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039c6:	f3ef 8305 	mrs	r3, IPSR
 80039ca:	603b      	str	r3, [r7, #0]
  return(result);
 80039cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <osKernelStart+0x1a>
    stat = osErrorISR;
 80039d2:	f06f 0305 	mvn.w	r3, #5
 80039d6:	607b      	str	r3, [r7, #4]
 80039d8:	e010      	b.n	80039fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80039da:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <osKernelStart+0x48>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d109      	bne.n	80039f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80039e2:	f7ff ffbf 	bl	8003964 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80039e6:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <osKernelStart+0x48>)
 80039e8:	2202      	movs	r2, #2
 80039ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80039ec:	f001 fcbc 	bl	8005368 <vTaskStartScheduler>
      stat = osOK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	607b      	str	r3, [r7, #4]
 80039f4:	e002      	b.n	80039fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80039f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039fc:	687b      	ldr	r3, [r7, #4]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20000164 	.word	0x20000164

08003a0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08e      	sub	sp, #56	; 0x38
 8003a10:	af04      	add	r7, sp, #16
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a1c:	f3ef 8305 	mrs	r3, IPSR
 8003a20:	617b      	str	r3, [r7, #20]
  return(result);
 8003a22:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d17e      	bne.n	8003b26 <osThreadNew+0x11a>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d07b      	beq.n	8003b26 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003a32:	2318      	movs	r3, #24
 8003a34:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d045      	beq.n	8003ad2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <osThreadNew+0x48>
        name = attr->name;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <osThreadNew+0x6e>
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	2b38      	cmp	r3, #56	; 0x38
 8003a6c:	d805      	bhi.n	8003a7a <osThreadNew+0x6e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <osThreadNew+0x72>
        return (NULL);
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e054      	b.n	8003b28 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	089b      	lsrs	r3, r3, #2
 8003a8c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00e      	beq.n	8003ab4 <osThreadNew+0xa8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	2ba7      	cmp	r3, #167	; 0xa7
 8003a9c:	d90a      	bls.n	8003ab4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d006      	beq.n	8003ab4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <osThreadNew+0xa8>
        mem = 1;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	61bb      	str	r3, [r7, #24]
 8003ab2:	e010      	b.n	8003ad6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10c      	bne.n	8003ad6 <osThreadNew+0xca>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d108      	bne.n	8003ad6 <osThreadNew+0xca>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d104      	bne.n	8003ad6 <osThreadNew+0xca>
          mem = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	61bb      	str	r3, [r7, #24]
 8003ad0:	e001      	b.n	8003ad6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d110      	bne.n	8003afe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ae4:	9202      	str	r2, [sp, #8]
 8003ae6:	9301      	str	r3, [sp, #4]
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	6a3a      	ldr	r2, [r7, #32]
 8003af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f001 fa4c 	bl	8004f90 <xTaskCreateStatic>
 8003af8:	4603      	mov	r3, r0
 8003afa:	613b      	str	r3, [r7, #16]
 8003afc:	e013      	b.n	8003b26 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d110      	bne.n	8003b26 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	f107 0310 	add.w	r3, r7, #16
 8003b0c:	9301      	str	r3, [sp, #4]
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f001 fa97 	bl	800504a <xTaskCreate>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d001      	beq.n	8003b26 <osThreadNew+0x11a>
            hTask = NULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003b26:	693b      	ldr	r3, [r7, #16]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3728      	adds	r7, #40	; 0x28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b38:	f3ef 8305 	mrs	r3, IPSR
 8003b3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <osDelay+0x1c>
    stat = osErrorISR;
 8003b44:	f06f 0305 	mvn.w	r3, #5
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	e007      	b.n	8003b5c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f001 fbd2 	bl	8005300 <vTaskDelay>
    }
  }

  return (stat);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b08a      	sub	sp, #40	; 0x28
 8003b6a:	af02      	add	r7, sp, #8
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b76:	f3ef 8305 	mrs	r3, IPSR
 8003b7a:	613b      	str	r3, [r7, #16]
  return(result);
 8003b7c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d175      	bne.n	8003c6e <osSemaphoreNew+0x108>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d072      	beq.n	8003c6e <osSemaphoreNew+0x108>
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d86e      	bhi.n	8003c6e <osSemaphoreNew+0x108>
    mem = -1;
 8003b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b94:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d015      	beq.n	8003bc8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d006      	beq.n	8003bb2 <osSemaphoreNew+0x4c>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b4f      	cmp	r3, #79	; 0x4f
 8003baa:	d902      	bls.n	8003bb2 <osSemaphoreNew+0x4c>
        mem = 1;
 8003bac:	2301      	movs	r3, #1
 8003bae:	61bb      	str	r3, [r7, #24]
 8003bb0:	e00c      	b.n	8003bcc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d108      	bne.n	8003bcc <osSemaphoreNew+0x66>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d104      	bne.n	8003bcc <osSemaphoreNew+0x66>
          mem = 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61bb      	str	r3, [r7, #24]
 8003bc6:	e001      	b.n	8003bcc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bd2:	d04c      	beq.n	8003c6e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d128      	bne.n	8003c2c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d10a      	bne.n	8003bf6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2203      	movs	r2, #3
 8003be6:	9200      	str	r2, [sp, #0]
 8003be8:	2200      	movs	r2, #0
 8003bea:	2100      	movs	r1, #0
 8003bec:	2001      	movs	r0, #1
 8003bee:	f000 fa29 	bl	8004044 <xQueueGenericCreateStatic>
 8003bf2:	61f8      	str	r0, [r7, #28]
 8003bf4:	e005      	b.n	8003c02 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	f000 fa9a 	bl	8004134 <xQueueGenericCreate>
 8003c00:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d022      	beq.n	8003c4e <osSemaphoreNew+0xe8>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01f      	beq.n	8003c4e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003c0e:	2300      	movs	r3, #0
 8003c10:	2200      	movs	r2, #0
 8003c12:	2100      	movs	r1, #0
 8003c14:	69f8      	ldr	r0, [r7, #28]
 8003c16:	f000 fb55 	bl	80042c4 <xQueueGenericSend>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d016      	beq.n	8003c4e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003c20:	69f8      	ldr	r0, [r7, #28]
 8003c22:	f000 ffe1 	bl	8004be8 <vQueueDelete>
            hSemaphore = NULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	61fb      	str	r3, [r7, #28]
 8003c2a:	e010      	b.n	8003c4e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d108      	bne.n	8003c44 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	461a      	mov	r2, r3
 8003c38:	68b9      	ldr	r1, [r7, #8]
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 fad7 	bl	80041ee <xQueueCreateCountingSemaphoreStatic>
 8003c40:	61f8      	str	r0, [r7, #28]
 8003c42:	e004      	b.n	8003c4e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003c44:	68b9      	ldr	r1, [r7, #8]
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 fb08 	bl	800425c <xQueueCreateCountingSemaphore>
 8003c4c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00c      	beq.n	8003c6e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <osSemaphoreNew+0xfc>
          name = attr->name;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	e001      	b.n	8003c66 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003c66:	6979      	ldr	r1, [r7, #20]
 8003c68:	69f8      	ldr	r0, [r7, #28]
 8003c6a:	f001 f909 	bl	8004e80 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003c6e:	69fb      	ldr	r3, [r7, #28]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3720      	adds	r7, #32
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d103      	bne.n	8003c98 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003c90:	f06f 0303 	mvn.w	r3, #3
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	e039      	b.n	8003d0c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c98:	f3ef 8305 	mrs	r3, IPSR
 8003c9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d022      	beq.n	8003cea <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8003caa:	f06f 0303 	mvn.w	r3, #3
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	e02c      	b.n	8003d0c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003cb6:	f107 0308 	add.w	r3, r7, #8
 8003cba:	461a      	mov	r2, r3
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	6938      	ldr	r0, [r7, #16]
 8003cc0:	f000 ff12 	bl	8004ae8 <xQueueReceiveFromISR>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d003      	beq.n	8003cd2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003cca:	f06f 0302 	mvn.w	r3, #2
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	e01c      	b.n	8003d0c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d019      	beq.n	8003d0c <osSemaphoreAcquire+0x94>
 8003cd8:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <osSemaphoreAcquire+0xa0>)
 8003cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	e010      	b.n	8003d0c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003cea:	6839      	ldr	r1, [r7, #0]
 8003cec:	6938      	ldr	r0, [r7, #16]
 8003cee:	f000 fdef 	bl	80048d0 <xQueueSemaphoreTake>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d009      	beq.n	8003d0c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8003cfe:	f06f 0301 	mvn.w	r3, #1
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	e002      	b.n	8003d0c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8003d06:	f06f 0302 	mvn.w	r3, #2
 8003d0a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003d0c:	697b      	ldr	r3, [r7, #20]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	e000ed04 	.word	0xe000ed04

08003d1c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d103      	bne.n	8003d3a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003d32:	f06f 0303 	mvn.w	r3, #3
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	e02c      	b.n	8003d94 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d3a:	f3ef 8305 	mrs	r3, IPSR
 8003d3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d40:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d01a      	beq.n	8003d7c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8003d46:	2300      	movs	r3, #0
 8003d48:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003d4a:	f107 0308 	add.w	r3, r7, #8
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6938      	ldr	r0, [r7, #16]
 8003d52:	f000 fc50 	bl	80045f6 <xQueueGiveFromISR>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d003      	beq.n	8003d64 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8003d5c:	f06f 0302 	mvn.w	r3, #2
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	e017      	b.n	8003d94 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d014      	beq.n	8003d94 <osSemaphoreRelease+0x78>
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <osSemaphoreRelease+0x84>)
 8003d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	e00b      	b.n	8003d94 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	2200      	movs	r2, #0
 8003d80:	2100      	movs	r1, #0
 8003d82:	6938      	ldr	r0, [r7, #16]
 8003d84:	f000 fa9e 	bl	80042c4 <xQueueGenericSend>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d002      	beq.n	8003d94 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8003d8e:	f06f 0302 	mvn.w	r3, #2
 8003d92:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003d94:	697b      	ldr	r3, [r7, #20]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	e000ed04 	.word	0xe000ed04

08003da4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4a07      	ldr	r2, [pc, #28]	; (8003dd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8003db4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	4a06      	ldr	r2, [pc, #24]	; (8003dd4 <vApplicationGetIdleTaskMemory+0x30>)
 8003dba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2280      	movs	r2, #128	; 0x80
 8003dc0:	601a      	str	r2, [r3, #0]
}
 8003dc2:	bf00      	nop
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20000168 	.word	0x20000168
 8003dd4:	20000210 	.word	0x20000210

08003dd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4a07      	ldr	r2, [pc, #28]	; (8003e04 <vApplicationGetTimerTaskMemory+0x2c>)
 8003de8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	4a06      	ldr	r2, [pc, #24]	; (8003e08 <vApplicationGetTimerTaskMemory+0x30>)
 8003dee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003df6:	601a      	str	r2, [r3, #0]
}
 8003df8:	bf00      	nop
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	20000410 	.word	0x20000410
 8003e08:	200004b8 	.word	0x200004b8

08003e0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f103 0208 	add.w	r2, r3, #8
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f103 0208 	add.w	r2, r3, #8
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f103 0208 	add.w	r2, r3, #8
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e66:	b480      	push	{r7}
 8003e68:	b085      	sub	sp, #20
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	601a      	str	r2, [r3, #0]
}
 8003ea2:	bf00      	nop
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b085      	sub	sp, #20
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ec4:	d103      	bne.n	8003ece <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	e00c      	b.n	8003ee8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	e002      	b.n	8003edc <vListInsert+0x2e>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d2f6      	bcs.n	8003ed6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	601a      	str	r2, [r3, #0]
}
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6892      	ldr	r2, [r2, #8]
 8003f36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6852      	ldr	r2, [r2, #4]
 8003f40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d103      	bne.n	8003f54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	1e5a      	subs	r2, r3, #1
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f9a:	bf00      	nop
 8003f9c:	e7fe      	b.n	8003f9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f9e:	f002 fc99 	bl	80068d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003faa:	68f9      	ldr	r1, [r7, #12]
 8003fac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fae:	fb01 f303 	mul.w	r3, r1, r3
 8003fb2:	441a      	add	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	68f9      	ldr	r1, [r7, #12]
 8003fd2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fd4:	fb01 f303 	mul.w	r3, r1, r3
 8003fd8:	441a      	add	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	22ff      	movs	r2, #255	; 0xff
 8003fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	22ff      	movs	r2, #255	; 0xff
 8003fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d114      	bne.n	800401e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d01a      	beq.n	8004032 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3310      	adds	r3, #16
 8004000:	4618      	mov	r0, r3
 8004002:	f001 fc4b 	bl	800589c <xTaskRemoveFromEventList>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d012      	beq.n	8004032 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800400c:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <xQueueGenericReset+0xcc>)
 800400e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	e009      	b.n	8004032 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3310      	adds	r3, #16
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff fef2 	bl	8003e0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3324      	adds	r3, #36	; 0x24
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff feed 	bl	8003e0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004032:	f002 fc7f 	bl	8006934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004036:	2301      	movs	r3, #1
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	e000ed04 	.word	0xe000ed04

08004044 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08e      	sub	sp, #56	; 0x38
 8004048:	af02      	add	r7, sp, #8
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10a      	bne.n	800406e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800406a:	bf00      	nop
 800406c:	e7fe      	b.n	800406c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10a      	bne.n	800408a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004086:	bf00      	nop
 8004088:	e7fe      	b.n	8004088 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <xQueueGenericCreateStatic+0x52>
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <xQueueGenericCreateStatic+0x56>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <xQueueGenericCreateStatic+0x58>
 800409a:	2300      	movs	r3, #0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10a      	bne.n	80040b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	623b      	str	r3, [r7, #32]
}
 80040b2:	bf00      	nop
 80040b4:	e7fe      	b.n	80040b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d102      	bne.n	80040c2 <xQueueGenericCreateStatic+0x7e>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <xQueueGenericCreateStatic+0x82>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <xQueueGenericCreateStatic+0x84>
 80040c6:	2300      	movs	r3, #0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10a      	bne.n	80040e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80040cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	61fb      	str	r3, [r7, #28]
}
 80040de:	bf00      	nop
 80040e0:	e7fe      	b.n	80040e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80040e2:	2350      	movs	r3, #80	; 0x50
 80040e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2b50      	cmp	r3, #80	; 0x50
 80040ea:	d00a      	beq.n	8004102 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80040ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	61bb      	str	r3, [r7, #24]
}
 80040fe:	bf00      	nop
 8004100:	e7fe      	b.n	8004100 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004102:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00d      	beq.n	800412a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800410e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004116:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800411a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	4613      	mov	r3, r2
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f83f 	bl	80041a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800412a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800412c:	4618      	mov	r0, r3
 800412e:	3730      	adds	r7, #48	; 0x30
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08a      	sub	sp, #40	; 0x28
 8004138:	af02      	add	r7, sp, #8
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	4613      	mov	r3, r2
 8004140:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10a      	bne.n	800415e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414c:	f383 8811 	msr	BASEPRI, r3
 8004150:	f3bf 8f6f 	isb	sy
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	613b      	str	r3, [r7, #16]
}
 800415a:	bf00      	nop
 800415c:	e7fe      	b.n	800415c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	fb02 f303 	mul.w	r3, r2, r3
 8004166:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	3350      	adds	r3, #80	; 0x50
 800416c:	4618      	mov	r0, r3
 800416e:	f002 fcd3 	bl	8006b18 <pvPortMalloc>
 8004172:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d011      	beq.n	800419e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	3350      	adds	r3, #80	; 0x50
 8004182:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800418c:	79fa      	ldrb	r2, [r7, #7]
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	4613      	mov	r3, r2
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	68b9      	ldr	r1, [r7, #8]
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f805 	bl	80041a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800419e:	69bb      	ldr	r3, [r7, #24]
	}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3720      	adds	r7, #32
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d103      	bne.n	80041c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	e002      	b.n	80041ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041d6:	2101      	movs	r1, #1
 80041d8:	69b8      	ldr	r0, [r7, #24]
 80041da:	f7ff fecb 	bl	8003f74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	78fa      	ldrb	r2, [r7, #3]
 80041e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80041e6:	bf00      	nop
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b08a      	sub	sp, #40	; 0x28
 80041f2:	af02      	add	r7, sp, #8
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10a      	bne.n	8004216 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	61bb      	str	r3, [r7, #24]
}
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	429a      	cmp	r2, r3
 800421c:	d90a      	bls.n	8004234 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800421e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	617b      	str	r3, [r7, #20]
}
 8004230:	bf00      	nop
 8004232:	e7fe      	b.n	8004232 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004234:	2302      	movs	r3, #2
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	2100      	movs	r1, #0
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f7ff ff00 	bl	8004044 <xQueueGenericCreateStatic>
 8004244:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004252:	69fb      	ldr	r3, [r7, #28]
	}
 8004254:	4618      	mov	r0, r3
 8004256:	3720      	adds	r7, #32
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10a      	bne.n	8004282 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	613b      	str	r3, [r7, #16]
}
 800427e:	bf00      	nop
 8004280:	e7fe      	b.n	8004280 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	429a      	cmp	r2, r3
 8004288:	d90a      	bls.n	80042a0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800428a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	60fb      	str	r3, [r7, #12]
}
 800429c:	bf00      	nop
 800429e:	e7fe      	b.n	800429e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80042a0:	2202      	movs	r2, #2
 80042a2:	2100      	movs	r1, #0
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff ff45 	bl	8004134 <xQueueGenericCreate>
 80042aa:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80042b8:	697b      	ldr	r3, [r7, #20]
	}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08e      	sub	sp, #56	; 0x38
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80042d2:	2300      	movs	r3, #0
 80042d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80042da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <xQueueGenericSend+0x32>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80042f2:	bf00      	nop
 80042f4:	e7fe      	b.n	80042f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d103      	bne.n	8004304 <xQueueGenericSend+0x40>
 80042fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <xQueueGenericSend+0x44>
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <xQueueGenericSend+0x46>
 8004308:	2300      	movs	r3, #0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <xQueueGenericSend+0x60>
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004320:	bf00      	nop
 8004322:	e7fe      	b.n	8004322 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d103      	bne.n	8004332 <xQueueGenericSend+0x6e>
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <xQueueGenericSend+0x72>
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <xQueueGenericSend+0x74>
 8004336:	2300      	movs	r3, #0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <xQueueGenericSend+0x8e>
	__asm volatile
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	623b      	str	r3, [r7, #32]
}
 800434e:	bf00      	nop
 8004350:	e7fe      	b.n	8004350 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004352:	f001 fc65 	bl	8005c20 <xTaskGetSchedulerState>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d102      	bne.n	8004362 <xQueueGenericSend+0x9e>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <xQueueGenericSend+0xa2>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <xQueueGenericSend+0xa4>
 8004366:	2300      	movs	r3, #0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <xQueueGenericSend+0xbe>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	61fb      	str	r3, [r7, #28]
}
 800437e:	bf00      	nop
 8004380:	e7fe      	b.n	8004380 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004382:	f002 faa7 	bl	80068d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438e:	429a      	cmp	r2, r3
 8004390:	d302      	bcc.n	8004398 <xQueueGenericSend+0xd4>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b02      	cmp	r3, #2
 8004396:	d129      	bne.n	80043ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800439e:	f000 fc5e 	bl	8004c5e <prvCopyDataToQueue>
 80043a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d010      	beq.n	80043ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ae:	3324      	adds	r3, #36	; 0x24
 80043b0:	4618      	mov	r0, r3
 80043b2:	f001 fa73 	bl	800589c <xTaskRemoveFromEventList>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d013      	beq.n	80043e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80043bc:	4b3f      	ldr	r3, [pc, #252]	; (80044bc <xQueueGenericSend+0x1f8>)
 80043be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	e00a      	b.n	80043e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80043ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d007      	beq.n	80043e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80043d4:	4b39      	ldr	r3, [pc, #228]	; (80044bc <xQueueGenericSend+0x1f8>)
 80043d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80043e4:	f002 faa6 	bl	8006934 <vPortExitCritical>
				return pdPASS;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e063      	b.n	80044b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d103      	bne.n	80043fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043f2:	f002 fa9f 	bl	8006934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	e05c      	b.n	80044b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d106      	bne.n	800440e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004400:	f107 0314 	add.w	r3, r7, #20
 8004404:	4618      	mov	r0, r3
 8004406:	f001 faad 	bl	8005964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800440a:	2301      	movs	r3, #1
 800440c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800440e:	f002 fa91 	bl	8006934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004412:	f001 f819 	bl	8005448 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004416:	f002 fa5d 	bl	80068d4 <vPortEnterCritical>
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004420:	b25b      	sxtb	r3, r3
 8004422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004426:	d103      	bne.n	8004430 <xQueueGenericSend+0x16c>
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004436:	b25b      	sxtb	r3, r3
 8004438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800443c:	d103      	bne.n	8004446 <xQueueGenericSend+0x182>
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004446:	f002 fa75 	bl	8006934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800444a:	1d3a      	adds	r2, r7, #4
 800444c:	f107 0314 	add.w	r3, r7, #20
 8004450:	4611      	mov	r1, r2
 8004452:	4618      	mov	r0, r3
 8004454:	f001 fa9c 	bl	8005990 <xTaskCheckForTimeOut>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d124      	bne.n	80044a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800445e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004460:	f000 fcf5 	bl	8004e4e <prvIsQueueFull>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d018      	beq.n	800449c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	3310      	adds	r3, #16
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	4611      	mov	r1, r2
 8004472:	4618      	mov	r0, r3
 8004474:	f001 f9c2 	bl	80057fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004478:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800447a:	f000 fc80 	bl	8004d7e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800447e:	f000 fff1 	bl	8005464 <xTaskResumeAll>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	f47f af7c 	bne.w	8004382 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800448a:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <xQueueGenericSend+0x1f8>)
 800448c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	e772      	b.n	8004382 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800449c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800449e:	f000 fc6e 	bl	8004d7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044a2:	f000 ffdf 	bl	8005464 <xTaskResumeAll>
 80044a6:	e76c      	b.n	8004382 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80044a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044aa:	f000 fc68 	bl	8004d7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044ae:	f000 ffd9 	bl	8005464 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80044b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3738      	adds	r7, #56	; 0x38
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	e000ed04 	.word	0xe000ed04

080044c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b090      	sub	sp, #64	; 0x40
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80044d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10a      	bne.n	80044ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80044ea:	bf00      	nop
 80044ec:	e7fe      	b.n	80044ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d103      	bne.n	80044fc <xQueueGenericSendFromISR+0x3c>
 80044f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <xQueueGenericSendFromISR+0x40>
 80044fc:	2301      	movs	r3, #1
 80044fe:	e000      	b.n	8004502 <xQueueGenericSendFromISR+0x42>
 8004500:	2300      	movs	r3, #0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004518:	bf00      	nop
 800451a:	e7fe      	b.n	800451a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d103      	bne.n	800452a <xQueueGenericSendFromISR+0x6a>
 8004522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <xQueueGenericSendFromISR+0x6e>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <xQueueGenericSendFromISR+0x70>
 800452e:	2300      	movs	r3, #0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10a      	bne.n	800454a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	623b      	str	r3, [r7, #32]
}
 8004546:	bf00      	nop
 8004548:	e7fe      	b.n	8004548 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800454a:	f002 faa5 	bl	8006a98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800454e:	f3ef 8211 	mrs	r2, BASEPRI
 8004552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	61fa      	str	r2, [r7, #28]
 8004564:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004566:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004568:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800456a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800456e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004572:	429a      	cmp	r2, r3
 8004574:	d302      	bcc.n	800457c <xQueueGenericSendFromISR+0xbc>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b02      	cmp	r3, #2
 800457a:	d12f      	bne.n	80045dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800457c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004592:	f000 fb64 	bl	8004c5e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004596:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800459a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800459e:	d112      	bne.n	80045c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d016      	beq.n	80045d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045aa:	3324      	adds	r3, #36	; 0x24
 80045ac:	4618      	mov	r0, r3
 80045ae:	f001 f975 	bl	800589c <xTaskRemoveFromEventList>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00e      	beq.n	80045d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00b      	beq.n	80045d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	e007      	b.n	80045d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80045c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80045ca:	3301      	adds	r3, #1
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	b25a      	sxtb	r2, r3
 80045d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80045d6:	2301      	movs	r3, #1
 80045d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80045da:	e001      	b.n	80045e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80045ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80045ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3740      	adds	r7, #64	; 0x40
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b08e      	sub	sp, #56	; 0x38
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10a      	bne.n	8004620 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	623b      	str	r3, [r7, #32]
}
 800461c:	bf00      	nop
 800461e:	e7fe      	b.n	800461e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <xQueueGiveFromISR+0x48>
	__asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	61fb      	str	r3, [r7, #28]
}
 800463a:	bf00      	nop
 800463c:	e7fe      	b.n	800463c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d103      	bne.n	800464e <xQueueGiveFromISR+0x58>
 8004646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <xQueueGiveFromISR+0x5c>
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <xQueueGiveFromISR+0x5e>
 8004652:	2300      	movs	r3, #0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10a      	bne.n	800466e <xQueueGiveFromISR+0x78>
	__asm volatile
 8004658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	61bb      	str	r3, [r7, #24]
}
 800466a:	bf00      	nop
 800466c:	e7fe      	b.n	800466c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800466e:	f002 fa13 	bl	8006a98 <vPortValidateInterruptPriority>
	__asm volatile
 8004672:	f3ef 8211 	mrs	r2, BASEPRI
 8004676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467a:	f383 8811 	msr	BASEPRI, r3
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	617a      	str	r2, [r7, #20]
 8004688:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800468a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800468c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800469a:	429a      	cmp	r2, r3
 800469c:	d22b      	bcs.n	80046f6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80046b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046b8:	d112      	bne.n	80046e0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d016      	beq.n	80046f0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c4:	3324      	adds	r3, #36	; 0x24
 80046c6:	4618      	mov	r0, r3
 80046c8:	f001 f8e8 	bl	800589c <xTaskRemoveFromEventList>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00e      	beq.n	80046f0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00b      	beq.n	80046f0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2201      	movs	r2, #1
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	e007      	b.n	80046f0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80046e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046e4:	3301      	adds	r3, #1
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	b25a      	sxtb	r2, r3
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80046f0:	2301      	movs	r3, #1
 80046f2:	637b      	str	r3, [r7, #52]	; 0x34
 80046f4:	e001      	b.n	80046fa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	637b      	str	r3, [r7, #52]	; 0x34
 80046fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f383 8811 	msr	BASEPRI, r3
}
 8004704:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004708:	4618      	mov	r0, r3
 800470a:	3738      	adds	r7, #56	; 0x38
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08c      	sub	sp, #48	; 0x30
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800471c:	2300      	movs	r3, #0
 800471e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10a      	bne.n	8004740 <xQueueReceive+0x30>
	__asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	623b      	str	r3, [r7, #32]
}
 800473c:	bf00      	nop
 800473e:	e7fe      	b.n	800473e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d103      	bne.n	800474e <xQueueReceive+0x3e>
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <xQueueReceive+0x42>
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <xQueueReceive+0x44>
 8004752:	2300      	movs	r3, #0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10a      	bne.n	800476e <xQueueReceive+0x5e>
	__asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	61fb      	str	r3, [r7, #28]
}
 800476a:	bf00      	nop
 800476c:	e7fe      	b.n	800476c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800476e:	f001 fa57 	bl	8005c20 <xTaskGetSchedulerState>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d102      	bne.n	800477e <xQueueReceive+0x6e>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <xQueueReceive+0x72>
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <xQueueReceive+0x74>
 8004782:	2300      	movs	r3, #0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10a      	bne.n	800479e <xQueueReceive+0x8e>
	__asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	61bb      	str	r3, [r7, #24]
}
 800479a:	bf00      	nop
 800479c:	e7fe      	b.n	800479c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800479e:	f002 f899 	bl	80068d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d01f      	beq.n	80047ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80047ae:	68b9      	ldr	r1, [r7, #8]
 80047b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047b2:	f000 fabe 	bl	8004d32 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	1e5a      	subs	r2, r3, #1
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00f      	beq.n	80047e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c8:	3310      	adds	r3, #16
 80047ca:	4618      	mov	r0, r3
 80047cc:	f001 f866 	bl	800589c <xTaskRemoveFromEventList>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d007      	beq.n	80047e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047d6:	4b3d      	ldr	r3, [pc, #244]	; (80048cc <xQueueReceive+0x1bc>)
 80047d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80047e6:	f002 f8a5 	bl	8006934 <vPortExitCritical>
				return pdPASS;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e069      	b.n	80048c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d103      	bne.n	80047fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047f4:	f002 f89e 	bl	8006934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047f8:	2300      	movs	r3, #0
 80047fa:	e062      	b.n	80048c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004802:	f107 0310 	add.w	r3, r7, #16
 8004806:	4618      	mov	r0, r3
 8004808:	f001 f8ac 	bl	8005964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800480c:	2301      	movs	r3, #1
 800480e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004810:	f002 f890 	bl	8006934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004814:	f000 fe18 	bl	8005448 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004818:	f002 f85c 	bl	80068d4 <vPortEnterCritical>
 800481c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004822:	b25b      	sxtb	r3, r3
 8004824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004828:	d103      	bne.n	8004832 <xQueueReceive+0x122>
 800482a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004838:	b25b      	sxtb	r3, r3
 800483a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800483e:	d103      	bne.n	8004848 <xQueueReceive+0x138>
 8004840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004848:	f002 f874 	bl	8006934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800484c:	1d3a      	adds	r2, r7, #4
 800484e:	f107 0310 	add.w	r3, r7, #16
 8004852:	4611      	mov	r1, r2
 8004854:	4618      	mov	r0, r3
 8004856:	f001 f89b 	bl	8005990 <xTaskCheckForTimeOut>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d123      	bne.n	80048a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004862:	f000 fade 	bl	8004e22 <prvIsQueueEmpty>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d017      	beq.n	800489c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	3324      	adds	r3, #36	; 0x24
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	4611      	mov	r1, r2
 8004874:	4618      	mov	r0, r3
 8004876:	f000 ffc1 	bl	80057fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800487a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800487c:	f000 fa7f 	bl	8004d7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004880:	f000 fdf0 	bl	8005464 <xTaskResumeAll>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d189      	bne.n	800479e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800488a:	4b10      	ldr	r3, [pc, #64]	; (80048cc <xQueueReceive+0x1bc>)
 800488c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	e780      	b.n	800479e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800489c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800489e:	f000 fa6e 	bl	8004d7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048a2:	f000 fddf 	bl	8005464 <xTaskResumeAll>
 80048a6:	e77a      	b.n	800479e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80048a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048aa:	f000 fa68 	bl	8004d7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048ae:	f000 fdd9 	bl	8005464 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048b4:	f000 fab5 	bl	8004e22 <prvIsQueueEmpty>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f43f af6f 	beq.w	800479e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3730      	adds	r7, #48	; 0x30
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	e000ed04 	.word	0xe000ed04

080048d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08e      	sub	sp, #56	; 0x38
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80048da:	2300      	movs	r3, #0
 80048dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80048e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10a      	bne.n	8004902 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80048ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	623b      	str	r3, [r7, #32]
}
 80048fe:	bf00      	nop
 8004900:	e7fe      	b.n	8004900 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	61fb      	str	r3, [r7, #28]
}
 800491c:	bf00      	nop
 800491e:	e7fe      	b.n	800491e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004920:	f001 f97e 	bl	8005c20 <xTaskGetSchedulerState>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d102      	bne.n	8004930 <xQueueSemaphoreTake+0x60>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <xQueueSemaphoreTake+0x64>
 8004930:	2301      	movs	r3, #1
 8004932:	e000      	b.n	8004936 <xQueueSemaphoreTake+0x66>
 8004934:	2300      	movs	r3, #0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10a      	bne.n	8004950 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	61bb      	str	r3, [r7, #24]
}
 800494c:	bf00      	nop
 800494e:	e7fe      	b.n	800494e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004950:	f001 ffc0 	bl	80068d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	2b00      	cmp	r3, #0
 800495e:	d024      	beq.n	80049aa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	1e5a      	subs	r2, r3, #1
 8004964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004966:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d104      	bne.n	800497a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004970:	f001 facc 	bl	8005f0c <pvTaskIncrementMutexHeldCount>
 8004974:	4602      	mov	r2, r0
 8004976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004978:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00f      	beq.n	80049a2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004984:	3310      	adds	r3, #16
 8004986:	4618      	mov	r0, r3
 8004988:	f000 ff88 	bl	800589c <xTaskRemoveFromEventList>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d007      	beq.n	80049a2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004992:	4b54      	ldr	r3, [pc, #336]	; (8004ae4 <xQueueSemaphoreTake+0x214>)
 8004994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049a2:	f001 ffc7 	bl	8006934 <vPortExitCritical>
				return pdPASS;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e097      	b.n	8004ada <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d111      	bne.n	80049d4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80049b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80049b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	617b      	str	r3, [r7, #20]
}
 80049c8:	bf00      	nop
 80049ca:	e7fe      	b.n	80049ca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80049cc:	f001 ffb2 	bl	8006934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049d0:	2300      	movs	r3, #0
 80049d2:	e082      	b.n	8004ada <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d106      	bne.n	80049e8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049da:	f107 030c 	add.w	r3, r7, #12
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 ffc0 	bl	8005964 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049e4:	2301      	movs	r3, #1
 80049e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049e8:	f001 ffa4 	bl	8006934 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049ec:	f000 fd2c 	bl	8005448 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049f0:	f001 ff70 	bl	80068d4 <vPortEnterCritical>
 80049f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049fa:	b25b      	sxtb	r3, r3
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a00:	d103      	bne.n	8004a0a <xQueueSemaphoreTake+0x13a>
 8004a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a10:	b25b      	sxtb	r3, r3
 8004a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a16:	d103      	bne.n	8004a20 <xQueueSemaphoreTake+0x150>
 8004a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a20:	f001 ff88 	bl	8006934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a24:	463a      	mov	r2, r7
 8004a26:	f107 030c 	add.w	r3, r7, #12
 8004a2a:	4611      	mov	r1, r2
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 ffaf 	bl	8005990 <xTaskCheckForTimeOut>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d132      	bne.n	8004a9e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a3a:	f000 f9f2 	bl	8004e22 <prvIsQueueEmpty>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d026      	beq.n	8004a92 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d109      	bne.n	8004a60 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004a4c:	f001 ff42 	bl	80068d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f001 f901 	bl	8005c5c <xTaskPriorityInherit>
 8004a5a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004a5c:	f001 ff6a 	bl	8006934 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	3324      	adds	r3, #36	; 0x24
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	4611      	mov	r1, r2
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 fec7 	bl	80057fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a70:	f000 f985 	bl	8004d7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a74:	f000 fcf6 	bl	8005464 <xTaskResumeAll>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f47f af68 	bne.w	8004950 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004a80:	4b18      	ldr	r3, [pc, #96]	; (8004ae4 <xQueueSemaphoreTake+0x214>)
 8004a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	e75e      	b.n	8004950 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004a92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a94:	f000 f973 	bl	8004d7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a98:	f000 fce4 	bl	8005464 <xTaskResumeAll>
 8004a9c:	e758      	b.n	8004950 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004a9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004aa0:	f000 f96d 	bl	8004d7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004aa4:	f000 fcde 	bl	8005464 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004aa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004aaa:	f000 f9ba 	bl	8004e22 <prvIsQueueEmpty>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f43f af4d 	beq.w	8004950 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00d      	beq.n	8004ad8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004abc:	f001 ff0a 	bl	80068d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004ac0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ac2:	f000 f8b4 	bl	8004c2e <prvGetDisinheritPriorityAfterTimeout>
 8004ac6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f001 f99a 	bl	8005e08 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004ad4:	f001 ff2e 	bl	8006934 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ad8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3738      	adds	r7, #56	; 0x38
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	e000ed04 	.word	0xe000ed04

08004ae8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08e      	sub	sp, #56	; 0x38
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10a      	bne.n	8004b14 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	623b      	str	r3, [r7, #32]
}
 8004b10:	bf00      	nop
 8004b12:	e7fe      	b.n	8004b12 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d103      	bne.n	8004b22 <xQueueReceiveFromISR+0x3a>
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <xQueueReceiveFromISR+0x3e>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <xQueueReceiveFromISR+0x40>
 8004b26:	2300      	movs	r3, #0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10a      	bne.n	8004b42 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	61fb      	str	r3, [r7, #28]
}
 8004b3e:	bf00      	nop
 8004b40:	e7fe      	b.n	8004b40 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b42:	f001 ffa9 	bl	8006a98 <vPortValidateInterruptPriority>
	__asm volatile
 8004b46:	f3ef 8211 	mrs	r2, BASEPRI
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	61ba      	str	r2, [r7, #24]
 8004b5c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004b5e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d02f      	beq.n	8004bce <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b78:	68b9      	ldr	r1, [r7, #8]
 8004b7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b7c:	f000 f8d9 	bl	8004d32 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b82:	1e5a      	subs	r2, r3, #1
 8004b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b86:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004b88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b90:	d112      	bne.n	8004bb8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d016      	beq.n	8004bc8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9c:	3310      	adds	r3, #16
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 fe7c 	bl	800589c <xTaskRemoveFromEventList>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00e      	beq.n	8004bc8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00b      	beq.n	8004bc8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	e007      	b.n	8004bc8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	b25a      	sxtb	r2, r3
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	637b      	str	r3, [r7, #52]	; 0x34
 8004bcc:	e001      	b.n	8004bd2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8004bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f383 8811 	msr	BASEPRI, r3
}
 8004bdc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3738      	adds	r7, #56	; 0x38
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10a      	bne.n	8004c10 <vQueueDelete+0x28>
	__asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	60bb      	str	r3, [r7, #8]
}
 8004c0c:	bf00      	nop
 8004c0e:	e7fe      	b.n	8004c0e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 f95f 	bl	8004ed4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d102      	bne.n	8004c26 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f002 f845 	bl	8006cb0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004c26:	bf00      	nop
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004c2e:	b480      	push	{r7}
 8004c30:	b085      	sub	sp, #20
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d006      	beq.n	8004c4c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	e001      	b.n	8004c50 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004c50:	68fb      	ldr	r3, [r7, #12]
	}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b086      	sub	sp, #24
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c72:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10d      	bne.n	8004c98 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d14d      	bne.n	8004d20 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f001 f84f 	bl	8005d2c <xTaskPriorityDisinherit>
 8004c8e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	609a      	str	r2, [r3, #8]
 8004c96:	e043      	b.n	8004d20 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d119      	bne.n	8004cd2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6858      	ldr	r0, [r3, #4]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	f002 f9a3 	bl	8006ff4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	441a      	add	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d32b      	bcc.n	8004d20 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	605a      	str	r2, [r3, #4]
 8004cd0:	e026      	b.n	8004d20 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	68d8      	ldr	r0, [r3, #12]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	461a      	mov	r2, r3
 8004cdc:	68b9      	ldr	r1, [r7, #8]
 8004cde:	f002 f989 	bl	8006ff4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	425b      	negs	r3, r3
 8004cec:	441a      	add	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d207      	bcs.n	8004d0e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	425b      	negs	r3, r3
 8004d08:	441a      	add	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d105      	bne.n	8004d20 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004d28:	697b      	ldr	r3, [r7, #20]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b082      	sub	sp, #8
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d018      	beq.n	8004d76 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	441a      	add	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d303      	bcc.n	8004d66 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68d9      	ldr	r1, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	461a      	mov	r2, r3
 8004d70:	6838      	ldr	r0, [r7, #0]
 8004d72:	f002 f93f 	bl	8006ff4 <memcpy>
	}
}
 8004d76:	bf00      	nop
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d86:	f001 fda5 	bl	80068d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d90:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d92:	e011      	b.n	8004db8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d012      	beq.n	8004dc2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3324      	adds	r3, #36	; 0x24
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 fd7b 	bl	800589c <xTaskRemoveFromEventList>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004dac:	f000 fe52 	bl	8005a54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	dce9      	bgt.n	8004d94 <prvUnlockQueue+0x16>
 8004dc0:	e000      	b.n	8004dc4 <prvUnlockQueue+0x46>
					break;
 8004dc2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	22ff      	movs	r2, #255	; 0xff
 8004dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004dcc:	f001 fdb2 	bl	8006934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004dd0:	f001 fd80 	bl	80068d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dda:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ddc:	e011      	b.n	8004e02 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d012      	beq.n	8004e0c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3310      	adds	r3, #16
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fd56 	bl	800589c <xTaskRemoveFromEventList>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004df6:	f000 fe2d 	bl	8005a54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004dfa:	7bbb      	ldrb	r3, [r7, #14]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	dce9      	bgt.n	8004dde <prvUnlockQueue+0x60>
 8004e0a:	e000      	b.n	8004e0e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e0c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	22ff      	movs	r2, #255	; 0xff
 8004e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004e16:	f001 fd8d 	bl	8006934 <vPortExitCritical>
}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e2a:	f001 fd53 	bl	80068d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d102      	bne.n	8004e3c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e36:	2301      	movs	r3, #1
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	e001      	b.n	8004e40 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e40:	f001 fd78 	bl	8006934 <vPortExitCritical>

	return xReturn;
 8004e44:	68fb      	ldr	r3, [r7, #12]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b084      	sub	sp, #16
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e56:	f001 fd3d 	bl	80068d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d102      	bne.n	8004e6c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e66:	2301      	movs	r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	e001      	b.n	8004e70 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e70:	f001 fd60 	bl	8006934 <vPortExitCritical>

	return xReturn;
 8004e74:	68fb      	ldr	r3, [r7, #12]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	e014      	b.n	8004eba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004e90:	4a0f      	ldr	r2, [pc, #60]	; (8004ed0 <vQueueAddToRegistry+0x50>)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10b      	bne.n	8004eb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004e9c:	490c      	ldr	r1, [pc, #48]	; (8004ed0 <vQueueAddToRegistry+0x50>)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004ea6:	4a0a      	ldr	r2, [pc, #40]	; (8004ed0 <vQueueAddToRegistry+0x50>)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	4413      	add	r3, r2
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004eb2:	e006      	b.n	8004ec2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2b07      	cmp	r3, #7
 8004ebe:	d9e7      	bls.n	8004e90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ec0:	bf00      	nop
 8004ec2:	bf00      	nop
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	200008b8 	.word	0x200008b8

08004ed4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004edc:	2300      	movs	r3, #0
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	e016      	b.n	8004f10 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004ee2:	4a10      	ldr	r2, [pc, #64]	; (8004f24 <vQueueUnregisterQueue+0x50>)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	4413      	add	r3, r2
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d10b      	bne.n	8004f0a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004ef2:	4a0c      	ldr	r2, [pc, #48]	; (8004f24 <vQueueUnregisterQueue+0x50>)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004efc:	4a09      	ldr	r2, [pc, #36]	; (8004f24 <vQueueUnregisterQueue+0x50>)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	4413      	add	r3, r2
 8004f04:	2200      	movs	r2, #0
 8004f06:	605a      	str	r2, [r3, #4]
				break;
 8004f08:	e006      	b.n	8004f18 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2b07      	cmp	r3, #7
 8004f14:	d9e5      	bls.n	8004ee2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004f16:	bf00      	nop
 8004f18:	bf00      	nop
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	200008b8 	.word	0x200008b8

08004f28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f38:	f001 fccc 	bl	80068d4 <vPortEnterCritical>
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f42:	b25b      	sxtb	r3, r3
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f48:	d103      	bne.n	8004f52 <vQueueWaitForMessageRestricted+0x2a>
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f58:	b25b      	sxtb	r3, r3
 8004f5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f5e:	d103      	bne.n	8004f68 <vQueueWaitForMessageRestricted+0x40>
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f68:	f001 fce4 	bl	8006934 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d106      	bne.n	8004f82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	3324      	adds	r3, #36	; 0x24
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 fc61 	bl	8005844 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f82:	6978      	ldr	r0, [r7, #20]
 8004f84:	f7ff fefb 	bl	8004d7e <prvUnlockQueue>
	}
 8004f88:	bf00      	nop
 8004f8a:	3718      	adds	r7, #24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08e      	sub	sp, #56	; 0x38
 8004f94:	af04      	add	r7, sp, #16
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10a      	bne.n	8004fba <xTaskCreateStatic+0x2a>
	__asm volatile
 8004fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	623b      	str	r3, [r7, #32]
}
 8004fb6:	bf00      	nop
 8004fb8:	e7fe      	b.n	8004fb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10a      	bne.n	8004fd6 <xTaskCreateStatic+0x46>
	__asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	61fb      	str	r3, [r7, #28]
}
 8004fd2:	bf00      	nop
 8004fd4:	e7fe      	b.n	8004fd4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004fd6:	23a8      	movs	r3, #168	; 0xa8
 8004fd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	2ba8      	cmp	r3, #168	; 0xa8
 8004fde:	d00a      	beq.n	8004ff6 <xTaskCreateStatic+0x66>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	61bb      	str	r3, [r7, #24]
}
 8004ff2:	bf00      	nop
 8004ff4:	e7fe      	b.n	8004ff4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ff6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d01e      	beq.n	800503c <xTaskCreateStatic+0xac>
 8004ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01b      	beq.n	800503c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005006:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800500c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	2202      	movs	r2, #2
 8005012:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005016:	2300      	movs	r3, #0
 8005018:	9303      	str	r3, [sp, #12]
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	9302      	str	r3, [sp, #8]
 800501e:	f107 0314 	add.w	r3, r7, #20
 8005022:	9301      	str	r3, [sp, #4]
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	68b9      	ldr	r1, [r7, #8]
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 f850 	bl	80050d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005034:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005036:	f000 f8f3 	bl	8005220 <prvAddNewTaskToReadyList>
 800503a:	e001      	b.n	8005040 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005040:	697b      	ldr	r3, [r7, #20]
	}
 8005042:	4618      	mov	r0, r3
 8005044:	3728      	adds	r7, #40	; 0x28
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800504a:	b580      	push	{r7, lr}
 800504c:	b08c      	sub	sp, #48	; 0x30
 800504e:	af04      	add	r7, sp, #16
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	603b      	str	r3, [r7, #0]
 8005056:	4613      	mov	r3, r2
 8005058:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4618      	mov	r0, r3
 8005060:	f001 fd5a 	bl	8006b18 <pvPortMalloc>
 8005064:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00e      	beq.n	800508a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800506c:	20a8      	movs	r0, #168	; 0xa8
 800506e:	f001 fd53 	bl	8006b18 <pvPortMalloc>
 8005072:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	631a      	str	r2, [r3, #48]	; 0x30
 8005080:	e005      	b.n	800508e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005082:	6978      	ldr	r0, [r7, #20]
 8005084:	f001 fe14 	bl	8006cb0 <vPortFree>
 8005088:	e001      	b.n	800508e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800508a:	2300      	movs	r3, #0
 800508c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d017      	beq.n	80050c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800509c:	88fa      	ldrh	r2, [r7, #6]
 800509e:	2300      	movs	r3, #0
 80050a0:	9303      	str	r3, [sp, #12]
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	9302      	str	r3, [sp, #8]
 80050a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a8:	9301      	str	r3, [sp, #4]
 80050aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68b9      	ldr	r1, [r7, #8]
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 f80e 	bl	80050d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050b8:	69f8      	ldr	r0, [r7, #28]
 80050ba:	f000 f8b1 	bl	8005220 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050be:	2301      	movs	r3, #1
 80050c0:	61bb      	str	r3, [r7, #24]
 80050c2:	e002      	b.n	80050ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050ca:	69bb      	ldr	r3, [r7, #24]
	}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3720      	adds	r7, #32
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	461a      	mov	r2, r3
 80050ec:	21a5      	movs	r1, #165	; 0xa5
 80050ee:	f001 fefd 	bl	8006eec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80050fc:	3b01      	subs	r3, #1
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	f023 0307 	bic.w	r3, r3, #7
 800510a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511a:	f383 8811 	msr	BASEPRI, r3
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	617b      	str	r3, [r7, #20]
}
 8005128:	bf00      	nop
 800512a:	e7fe      	b.n	800512a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d01f      	beq.n	8005172 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005132:	2300      	movs	r3, #0
 8005134:	61fb      	str	r3, [r7, #28]
 8005136:	e012      	b.n	800515e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	4413      	add	r3, r2
 800513e:	7819      	ldrb	r1, [r3, #0]
 8005140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	4413      	add	r3, r2
 8005146:	3334      	adds	r3, #52	; 0x34
 8005148:	460a      	mov	r2, r1
 800514a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	4413      	add	r3, r2
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d006      	beq.n	8005166 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	3301      	adds	r3, #1
 800515c:	61fb      	str	r3, [r7, #28]
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	2b0f      	cmp	r3, #15
 8005162:	d9e9      	bls.n	8005138 <prvInitialiseNewTask+0x64>
 8005164:	e000      	b.n	8005168 <prvInitialiseNewTask+0x94>
			{
				break;
 8005166:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005170:	e003      	b.n	800517a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517c:	2b37      	cmp	r3, #55	; 0x37
 800517e:	d901      	bls.n	8005184 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005180:	2337      	movs	r3, #55	; 0x37
 8005182:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005188:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800518e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005192:	2200      	movs	r2, #0
 8005194:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	3304      	adds	r3, #4
 800519a:	4618      	mov	r0, r3
 800519c:	f7fe fe56 	bl	8003e4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a2:	3318      	adds	r3, #24
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fe fe51 	bl	8003e4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	2200      	movs	r2, #0
 80051c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80051d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d2:	3354      	adds	r3, #84	; 0x54
 80051d4:	224c      	movs	r2, #76	; 0x4c
 80051d6:	2100      	movs	r1, #0
 80051d8:	4618      	mov	r0, r3
 80051da:	f001 fe87 	bl	8006eec <memset>
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	4a0c      	ldr	r2, [pc, #48]	; (8005214 <prvInitialiseNewTask+0x140>)
 80051e2:	659a      	str	r2, [r3, #88]	; 0x58
 80051e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e6:	4a0c      	ldr	r2, [pc, #48]	; (8005218 <prvInitialiseNewTask+0x144>)
 80051e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	4a0b      	ldr	r2, [pc, #44]	; (800521c <prvInitialiseNewTask+0x148>)
 80051ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	68f9      	ldr	r1, [r7, #12]
 80051f4:	69b8      	ldr	r0, [r7, #24]
 80051f6:	f001 fa3f 	bl	8006678 <pxPortInitialiseStack>
 80051fa:	4602      	mov	r2, r0
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800520a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800520c:	bf00      	nop
 800520e:	3720      	adds	r7, #32
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	20001b04 	.word	0x20001b04
 8005218:	20001b6c 	.word	0x20001b6c
 800521c:	20001bd4 	.word	0x20001bd4

08005220 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005228:	f001 fb54 	bl	80068d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800522c:	4b2d      	ldr	r3, [pc, #180]	; (80052e4 <prvAddNewTaskToReadyList+0xc4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3301      	adds	r3, #1
 8005232:	4a2c      	ldr	r2, [pc, #176]	; (80052e4 <prvAddNewTaskToReadyList+0xc4>)
 8005234:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005236:	4b2c      	ldr	r3, [pc, #176]	; (80052e8 <prvAddNewTaskToReadyList+0xc8>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d109      	bne.n	8005252 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800523e:	4a2a      	ldr	r2, [pc, #168]	; (80052e8 <prvAddNewTaskToReadyList+0xc8>)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005244:	4b27      	ldr	r3, [pc, #156]	; (80052e4 <prvAddNewTaskToReadyList+0xc4>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d110      	bne.n	800526e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800524c:	f000 fc26 	bl	8005a9c <prvInitialiseTaskLists>
 8005250:	e00d      	b.n	800526e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005252:	4b26      	ldr	r3, [pc, #152]	; (80052ec <prvAddNewTaskToReadyList+0xcc>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d109      	bne.n	800526e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800525a:	4b23      	ldr	r3, [pc, #140]	; (80052e8 <prvAddNewTaskToReadyList+0xc8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	429a      	cmp	r2, r3
 8005266:	d802      	bhi.n	800526e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005268:	4a1f      	ldr	r2, [pc, #124]	; (80052e8 <prvAddNewTaskToReadyList+0xc8>)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800526e:	4b20      	ldr	r3, [pc, #128]	; (80052f0 <prvAddNewTaskToReadyList+0xd0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3301      	adds	r3, #1
 8005274:	4a1e      	ldr	r2, [pc, #120]	; (80052f0 <prvAddNewTaskToReadyList+0xd0>)
 8005276:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005278:	4b1d      	ldr	r3, [pc, #116]	; (80052f0 <prvAddNewTaskToReadyList+0xd0>)
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005284:	4b1b      	ldr	r3, [pc, #108]	; (80052f4 <prvAddNewTaskToReadyList+0xd4>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	429a      	cmp	r2, r3
 800528a:	d903      	bls.n	8005294 <prvAddNewTaskToReadyList+0x74>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	4a18      	ldr	r2, [pc, #96]	; (80052f4 <prvAddNewTaskToReadyList+0xd4>)
 8005292:	6013      	str	r3, [r2, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4a15      	ldr	r2, [pc, #84]	; (80052f8 <prvAddNewTaskToReadyList+0xd8>)
 80052a2:	441a      	add	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3304      	adds	r3, #4
 80052a8:	4619      	mov	r1, r3
 80052aa:	4610      	mov	r0, r2
 80052ac:	f7fe fddb 	bl	8003e66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052b0:	f001 fb40 	bl	8006934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052b4:	4b0d      	ldr	r3, [pc, #52]	; (80052ec <prvAddNewTaskToReadyList+0xcc>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00e      	beq.n	80052da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80052bc:	4b0a      	ldr	r3, [pc, #40]	; (80052e8 <prvAddNewTaskToReadyList+0xc8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d207      	bcs.n	80052da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052ca:	4b0c      	ldr	r3, [pc, #48]	; (80052fc <prvAddNewTaskToReadyList+0xdc>)
 80052cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052da:	bf00      	nop
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	20000dcc 	.word	0x20000dcc
 80052e8:	200008f8 	.word	0x200008f8
 80052ec:	20000dd8 	.word	0x20000dd8
 80052f0:	20000de8 	.word	0x20000de8
 80052f4:	20000dd4 	.word	0x20000dd4
 80052f8:	200008fc 	.word	0x200008fc
 80052fc:	e000ed04 	.word	0xe000ed04

08005300 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005308:	2300      	movs	r3, #0
 800530a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d017      	beq.n	8005342 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005312:	4b13      	ldr	r3, [pc, #76]	; (8005360 <vTaskDelay+0x60>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00a      	beq.n	8005330 <vTaskDelay+0x30>
	__asm volatile
 800531a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	60bb      	str	r3, [r7, #8]
}
 800532c:	bf00      	nop
 800532e:	e7fe      	b.n	800532e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005330:	f000 f88a 	bl	8005448 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005334:	2100      	movs	r1, #0
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fdfc 	bl	8005f34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800533c:	f000 f892 	bl	8005464 <xTaskResumeAll>
 8005340:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d107      	bne.n	8005358 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005348:	4b06      	ldr	r3, [pc, #24]	; (8005364 <vTaskDelay+0x64>)
 800534a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005358:	bf00      	nop
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	20000df4 	.word	0x20000df4
 8005364:	e000ed04 	.word	0xe000ed04

08005368 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08a      	sub	sp, #40	; 0x28
 800536c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800536e:	2300      	movs	r3, #0
 8005370:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005372:	2300      	movs	r3, #0
 8005374:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005376:	463a      	mov	r2, r7
 8005378:	1d39      	adds	r1, r7, #4
 800537a:	f107 0308 	add.w	r3, r7, #8
 800537e:	4618      	mov	r0, r3
 8005380:	f7fe fd10 	bl	8003da4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005384:	6839      	ldr	r1, [r7, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	9202      	str	r2, [sp, #8]
 800538c:	9301      	str	r3, [sp, #4]
 800538e:	2300      	movs	r3, #0
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	2300      	movs	r3, #0
 8005394:	460a      	mov	r2, r1
 8005396:	4924      	ldr	r1, [pc, #144]	; (8005428 <vTaskStartScheduler+0xc0>)
 8005398:	4824      	ldr	r0, [pc, #144]	; (800542c <vTaskStartScheduler+0xc4>)
 800539a:	f7ff fdf9 	bl	8004f90 <xTaskCreateStatic>
 800539e:	4603      	mov	r3, r0
 80053a0:	4a23      	ldr	r2, [pc, #140]	; (8005430 <vTaskStartScheduler+0xc8>)
 80053a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053a4:	4b22      	ldr	r3, [pc, #136]	; (8005430 <vTaskStartScheduler+0xc8>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d002      	beq.n	80053b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053ac:	2301      	movs	r3, #1
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	e001      	b.n	80053b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d102      	bne.n	80053c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80053bc:	f000 fe0e 	bl	8005fdc <xTimerCreateTimerTask>
 80053c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d11b      	bne.n	8005400 <vTaskStartScheduler+0x98>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	613b      	str	r3, [r7, #16]
}
 80053da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053dc:	4b15      	ldr	r3, [pc, #84]	; (8005434 <vTaskStartScheduler+0xcc>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3354      	adds	r3, #84	; 0x54
 80053e2:	4a15      	ldr	r2, [pc, #84]	; (8005438 <vTaskStartScheduler+0xd0>)
 80053e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053e6:	4b15      	ldr	r3, [pc, #84]	; (800543c <vTaskStartScheduler+0xd4>)
 80053e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053ee:	4b14      	ldr	r3, [pc, #80]	; (8005440 <vTaskStartScheduler+0xd8>)
 80053f0:	2201      	movs	r2, #1
 80053f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80053f4:	4b13      	ldr	r3, [pc, #76]	; (8005444 <vTaskStartScheduler+0xdc>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80053fa:	f001 f9c9 	bl	8006790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80053fe:	e00e      	b.n	800541e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005406:	d10a      	bne.n	800541e <vTaskStartScheduler+0xb6>
	__asm volatile
 8005408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	60fb      	str	r3, [r7, #12]
}
 800541a:	bf00      	nop
 800541c:	e7fe      	b.n	800541c <vTaskStartScheduler+0xb4>
}
 800541e:	bf00      	nop
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	08007210 	.word	0x08007210
 800542c:	08005a6d 	.word	0x08005a6d
 8005430:	20000df0 	.word	0x20000df0
 8005434:	200008f8 	.word	0x200008f8
 8005438:	2000005c 	.word	0x2000005c
 800543c:	20000dec 	.word	0x20000dec
 8005440:	20000dd8 	.word	0x20000dd8
 8005444:	20000dd0 	.word	0x20000dd0

08005448 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800544c:	4b04      	ldr	r3, [pc, #16]	; (8005460 <vTaskSuspendAll+0x18>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3301      	adds	r3, #1
 8005452:	4a03      	ldr	r2, [pc, #12]	; (8005460 <vTaskSuspendAll+0x18>)
 8005454:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005456:	bf00      	nop
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	20000df4 	.word	0x20000df4

08005464 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800546e:	2300      	movs	r3, #0
 8005470:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005472:	4b42      	ldr	r3, [pc, #264]	; (800557c <xTaskResumeAll+0x118>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10a      	bne.n	8005490 <xTaskResumeAll+0x2c>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	603b      	str	r3, [r7, #0]
}
 800548c:	bf00      	nop
 800548e:	e7fe      	b.n	800548e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005490:	f001 fa20 	bl	80068d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005494:	4b39      	ldr	r3, [pc, #228]	; (800557c <xTaskResumeAll+0x118>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3b01      	subs	r3, #1
 800549a:	4a38      	ldr	r2, [pc, #224]	; (800557c <xTaskResumeAll+0x118>)
 800549c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800549e:	4b37      	ldr	r3, [pc, #220]	; (800557c <xTaskResumeAll+0x118>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d162      	bne.n	800556c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054a6:	4b36      	ldr	r3, [pc, #216]	; (8005580 <xTaskResumeAll+0x11c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d05e      	beq.n	800556c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054ae:	e02f      	b.n	8005510 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054b0:	4b34      	ldr	r3, [pc, #208]	; (8005584 <xTaskResumeAll+0x120>)
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3318      	adds	r3, #24
 80054bc:	4618      	mov	r0, r3
 80054be:	f7fe fd2f 	bl	8003f20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	3304      	adds	r3, #4
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fe fd2a 	bl	8003f20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d0:	4b2d      	ldr	r3, [pc, #180]	; (8005588 <xTaskResumeAll+0x124>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d903      	bls.n	80054e0 <xTaskResumeAll+0x7c>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	4a2a      	ldr	r2, [pc, #168]	; (8005588 <xTaskResumeAll+0x124>)
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e4:	4613      	mov	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4a27      	ldr	r2, [pc, #156]	; (800558c <xTaskResumeAll+0x128>)
 80054ee:	441a      	add	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	3304      	adds	r3, #4
 80054f4:	4619      	mov	r1, r3
 80054f6:	4610      	mov	r0, r2
 80054f8:	f7fe fcb5 	bl	8003e66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005500:	4b23      	ldr	r3, [pc, #140]	; (8005590 <xTaskResumeAll+0x12c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005506:	429a      	cmp	r2, r3
 8005508:	d302      	bcc.n	8005510 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800550a:	4b22      	ldr	r3, [pc, #136]	; (8005594 <xTaskResumeAll+0x130>)
 800550c:	2201      	movs	r2, #1
 800550e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005510:	4b1c      	ldr	r3, [pc, #112]	; (8005584 <xTaskResumeAll+0x120>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1cb      	bne.n	80054b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800551e:	f000 fb5f 	bl	8005be0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005522:	4b1d      	ldr	r3, [pc, #116]	; (8005598 <xTaskResumeAll+0x134>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d010      	beq.n	8005550 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800552e:	f000 f847 	bl	80055c0 <xTaskIncrementTick>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d002      	beq.n	800553e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005538:	4b16      	ldr	r3, [pc, #88]	; (8005594 <xTaskResumeAll+0x130>)
 800553a:	2201      	movs	r2, #1
 800553c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3b01      	subs	r3, #1
 8005542:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1f1      	bne.n	800552e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800554a:	4b13      	ldr	r3, [pc, #76]	; (8005598 <xTaskResumeAll+0x134>)
 800554c:	2200      	movs	r2, #0
 800554e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005550:	4b10      	ldr	r3, [pc, #64]	; (8005594 <xTaskResumeAll+0x130>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d009      	beq.n	800556c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005558:	2301      	movs	r3, #1
 800555a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800555c:	4b0f      	ldr	r3, [pc, #60]	; (800559c <xTaskResumeAll+0x138>)
 800555e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800556c:	f001 f9e2 	bl	8006934 <vPortExitCritical>

	return xAlreadyYielded;
 8005570:	68bb      	ldr	r3, [r7, #8]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20000df4 	.word	0x20000df4
 8005580:	20000dcc 	.word	0x20000dcc
 8005584:	20000d8c 	.word	0x20000d8c
 8005588:	20000dd4 	.word	0x20000dd4
 800558c:	200008fc 	.word	0x200008fc
 8005590:	200008f8 	.word	0x200008f8
 8005594:	20000de0 	.word	0x20000de0
 8005598:	20000ddc 	.word	0x20000ddc
 800559c:	e000ed04 	.word	0xe000ed04

080055a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80055a6:	4b05      	ldr	r3, [pc, #20]	; (80055bc <xTaskGetTickCount+0x1c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80055ac:	687b      	ldr	r3, [r7, #4]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	20000dd0 	.word	0x20000dd0

080055c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055c6:	2300      	movs	r3, #0
 80055c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055ca:	4b4f      	ldr	r3, [pc, #316]	; (8005708 <xTaskIncrementTick+0x148>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f040 808f 	bne.w	80056f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055d4:	4b4d      	ldr	r3, [pc, #308]	; (800570c <xTaskIncrementTick+0x14c>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3301      	adds	r3, #1
 80055da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055dc:	4a4b      	ldr	r2, [pc, #300]	; (800570c <xTaskIncrementTick+0x14c>)
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d120      	bne.n	800562a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80055e8:	4b49      	ldr	r3, [pc, #292]	; (8005710 <xTaskIncrementTick+0x150>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <xTaskIncrementTick+0x48>
	__asm volatile
 80055f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f6:	f383 8811 	msr	BASEPRI, r3
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	603b      	str	r3, [r7, #0]
}
 8005604:	bf00      	nop
 8005606:	e7fe      	b.n	8005606 <xTaskIncrementTick+0x46>
 8005608:	4b41      	ldr	r3, [pc, #260]	; (8005710 <xTaskIncrementTick+0x150>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	4b41      	ldr	r3, [pc, #260]	; (8005714 <xTaskIncrementTick+0x154>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a3f      	ldr	r2, [pc, #252]	; (8005710 <xTaskIncrementTick+0x150>)
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	4a3f      	ldr	r2, [pc, #252]	; (8005714 <xTaskIncrementTick+0x154>)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	4b3e      	ldr	r3, [pc, #248]	; (8005718 <xTaskIncrementTick+0x158>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3301      	adds	r3, #1
 8005622:	4a3d      	ldr	r2, [pc, #244]	; (8005718 <xTaskIncrementTick+0x158>)
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	f000 fadb 	bl	8005be0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800562a:	4b3c      	ldr	r3, [pc, #240]	; (800571c <xTaskIncrementTick+0x15c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	429a      	cmp	r2, r3
 8005632:	d349      	bcc.n	80056c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005634:	4b36      	ldr	r3, [pc, #216]	; (8005710 <xTaskIncrementTick+0x150>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d104      	bne.n	8005648 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800563e:	4b37      	ldr	r3, [pc, #220]	; (800571c <xTaskIncrementTick+0x15c>)
 8005640:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005644:	601a      	str	r2, [r3, #0]
					break;
 8005646:	e03f      	b.n	80056c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005648:	4b31      	ldr	r3, [pc, #196]	; (8005710 <xTaskIncrementTick+0x150>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	429a      	cmp	r2, r3
 800565e:	d203      	bcs.n	8005668 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005660:	4a2e      	ldr	r2, [pc, #184]	; (800571c <xTaskIncrementTick+0x15c>)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005666:	e02f      	b.n	80056c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	3304      	adds	r3, #4
 800566c:	4618      	mov	r0, r3
 800566e:	f7fe fc57 	bl	8003f20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005676:	2b00      	cmp	r3, #0
 8005678:	d004      	beq.n	8005684 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	3318      	adds	r3, #24
 800567e:	4618      	mov	r0, r3
 8005680:	f7fe fc4e 	bl	8003f20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005688:	4b25      	ldr	r3, [pc, #148]	; (8005720 <xTaskIncrementTick+0x160>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	429a      	cmp	r2, r3
 800568e:	d903      	bls.n	8005698 <xTaskIncrementTick+0xd8>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005694:	4a22      	ldr	r2, [pc, #136]	; (8005720 <xTaskIncrementTick+0x160>)
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569c:	4613      	mov	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4a1f      	ldr	r2, [pc, #124]	; (8005724 <xTaskIncrementTick+0x164>)
 80056a6:	441a      	add	r2, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	3304      	adds	r3, #4
 80056ac:	4619      	mov	r1, r3
 80056ae:	4610      	mov	r0, r2
 80056b0:	f7fe fbd9 	bl	8003e66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b8:	4b1b      	ldr	r3, [pc, #108]	; (8005728 <xTaskIncrementTick+0x168>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056be:	429a      	cmp	r2, r3
 80056c0:	d3b8      	bcc.n	8005634 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80056c2:	2301      	movs	r3, #1
 80056c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056c6:	e7b5      	b.n	8005634 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056c8:	4b17      	ldr	r3, [pc, #92]	; (8005728 <xTaskIncrementTick+0x168>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ce:	4915      	ldr	r1, [pc, #84]	; (8005724 <xTaskIncrementTick+0x164>)
 80056d0:	4613      	mov	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	440b      	add	r3, r1
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d901      	bls.n	80056e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80056e0:	2301      	movs	r3, #1
 80056e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80056e4:	4b11      	ldr	r3, [pc, #68]	; (800572c <xTaskIncrementTick+0x16c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d007      	beq.n	80056fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80056ec:	2301      	movs	r3, #1
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	e004      	b.n	80056fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80056f2:	4b0f      	ldr	r3, [pc, #60]	; (8005730 <xTaskIncrementTick+0x170>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3301      	adds	r3, #1
 80056f8:	4a0d      	ldr	r2, [pc, #52]	; (8005730 <xTaskIncrementTick+0x170>)
 80056fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80056fc:	697b      	ldr	r3, [r7, #20]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20000df4 	.word	0x20000df4
 800570c:	20000dd0 	.word	0x20000dd0
 8005710:	20000d84 	.word	0x20000d84
 8005714:	20000d88 	.word	0x20000d88
 8005718:	20000de4 	.word	0x20000de4
 800571c:	20000dec 	.word	0x20000dec
 8005720:	20000dd4 	.word	0x20000dd4
 8005724:	200008fc 	.word	0x200008fc
 8005728:	200008f8 	.word	0x200008f8
 800572c:	20000de0 	.word	0x20000de0
 8005730:	20000ddc 	.word	0x20000ddc

08005734 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800573a:	4b2a      	ldr	r3, [pc, #168]	; (80057e4 <vTaskSwitchContext+0xb0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005742:	4b29      	ldr	r3, [pc, #164]	; (80057e8 <vTaskSwitchContext+0xb4>)
 8005744:	2201      	movs	r2, #1
 8005746:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005748:	e046      	b.n	80057d8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800574a:	4b27      	ldr	r3, [pc, #156]	; (80057e8 <vTaskSwitchContext+0xb4>)
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005750:	4b26      	ldr	r3, [pc, #152]	; (80057ec <vTaskSwitchContext+0xb8>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	e010      	b.n	800577a <vTaskSwitchContext+0x46>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10a      	bne.n	8005774 <vTaskSwitchContext+0x40>
	__asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	607b      	str	r3, [r7, #4]
}
 8005770:	bf00      	nop
 8005772:	e7fe      	b.n	8005772 <vTaskSwitchContext+0x3e>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3b01      	subs	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	491d      	ldr	r1, [pc, #116]	; (80057f0 <vTaskSwitchContext+0xbc>)
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4613      	mov	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	440b      	add	r3, r1
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0e4      	beq.n	8005758 <vTaskSwitchContext+0x24>
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4613      	mov	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4a15      	ldr	r2, [pc, #84]	; (80057f0 <vTaskSwitchContext+0xbc>)
 800579a:	4413      	add	r3, r2
 800579c:	60bb      	str	r3, [r7, #8]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	605a      	str	r2, [r3, #4]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	3308      	adds	r3, #8
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d104      	bne.n	80057be <vTaskSwitchContext+0x8a>
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	605a      	str	r2, [r3, #4]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	4a0b      	ldr	r2, [pc, #44]	; (80057f4 <vTaskSwitchContext+0xc0>)
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	4a08      	ldr	r2, [pc, #32]	; (80057ec <vTaskSwitchContext+0xb8>)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057ce:	4b09      	ldr	r3, [pc, #36]	; (80057f4 <vTaskSwitchContext+0xc0>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3354      	adds	r3, #84	; 0x54
 80057d4:	4a08      	ldr	r2, [pc, #32]	; (80057f8 <vTaskSwitchContext+0xc4>)
 80057d6:	6013      	str	r3, [r2, #0]
}
 80057d8:	bf00      	nop
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	20000df4 	.word	0x20000df4
 80057e8:	20000de0 	.word	0x20000de0
 80057ec:	20000dd4 	.word	0x20000dd4
 80057f0:	200008fc 	.word	0x200008fc
 80057f4:	200008f8 	.word	0x200008f8
 80057f8:	2000005c 	.word	0x2000005c

080057fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10a      	bne.n	8005822 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800580c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	60fb      	str	r3, [r7, #12]
}
 800581e:	bf00      	nop
 8005820:	e7fe      	b.n	8005820 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005822:	4b07      	ldr	r3, [pc, #28]	; (8005840 <vTaskPlaceOnEventList+0x44>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3318      	adds	r3, #24
 8005828:	4619      	mov	r1, r3
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7fe fb3f 	bl	8003eae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005830:	2101      	movs	r1, #1
 8005832:	6838      	ldr	r0, [r7, #0]
 8005834:	f000 fb7e 	bl	8005f34 <prvAddCurrentTaskToDelayedList>
}
 8005838:	bf00      	nop
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	200008f8 	.word	0x200008f8

08005844 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10a      	bne.n	800586c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	617b      	str	r3, [r7, #20]
}
 8005868:	bf00      	nop
 800586a:	e7fe      	b.n	800586a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800586c:	4b0a      	ldr	r3, [pc, #40]	; (8005898 <vTaskPlaceOnEventListRestricted+0x54>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	3318      	adds	r3, #24
 8005872:	4619      	mov	r1, r3
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f7fe faf6 	bl	8003e66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005884:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	68b8      	ldr	r0, [r7, #8]
 800588a:	f000 fb53 	bl	8005f34 <prvAddCurrentTaskToDelayedList>
	}
 800588e:	bf00      	nop
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	200008f8 	.word	0x200008f8

0800589c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10a      	bne.n	80058c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	60fb      	str	r3, [r7, #12]
}
 80058c4:	bf00      	nop
 80058c6:	e7fe      	b.n	80058c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	3318      	adds	r3, #24
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fe fb27 	bl	8003f20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058d2:	4b1e      	ldr	r3, [pc, #120]	; (800594c <xTaskRemoveFromEventList+0xb0>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d11d      	bne.n	8005916 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	3304      	adds	r3, #4
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fe fb1e 	bl	8003f20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e8:	4b19      	ldr	r3, [pc, #100]	; (8005950 <xTaskRemoveFromEventList+0xb4>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d903      	bls.n	80058f8 <xTaskRemoveFromEventList+0x5c>
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f4:	4a16      	ldr	r2, [pc, #88]	; (8005950 <xTaskRemoveFromEventList+0xb4>)
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4a13      	ldr	r2, [pc, #76]	; (8005954 <xTaskRemoveFromEventList+0xb8>)
 8005906:	441a      	add	r2, r3
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	3304      	adds	r3, #4
 800590c:	4619      	mov	r1, r3
 800590e:	4610      	mov	r0, r2
 8005910:	f7fe faa9 	bl	8003e66 <vListInsertEnd>
 8005914:	e005      	b.n	8005922 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	3318      	adds	r3, #24
 800591a:	4619      	mov	r1, r3
 800591c:	480e      	ldr	r0, [pc, #56]	; (8005958 <xTaskRemoveFromEventList+0xbc>)
 800591e:	f7fe faa2 	bl	8003e66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005926:	4b0d      	ldr	r3, [pc, #52]	; (800595c <xTaskRemoveFromEventList+0xc0>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592c:	429a      	cmp	r2, r3
 800592e:	d905      	bls.n	800593c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005930:	2301      	movs	r3, #1
 8005932:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005934:	4b0a      	ldr	r3, [pc, #40]	; (8005960 <xTaskRemoveFromEventList+0xc4>)
 8005936:	2201      	movs	r2, #1
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	e001      	b.n	8005940 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005940:	697b      	ldr	r3, [r7, #20]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	20000df4 	.word	0x20000df4
 8005950:	20000dd4 	.word	0x20000dd4
 8005954:	200008fc 	.word	0x200008fc
 8005958:	20000d8c 	.word	0x20000d8c
 800595c:	200008f8 	.word	0x200008f8
 8005960:	20000de0 	.word	0x20000de0

08005964 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800596c:	4b06      	ldr	r3, [pc, #24]	; (8005988 <vTaskInternalSetTimeOutState+0x24>)
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005974:	4b05      	ldr	r3, [pc, #20]	; (800598c <vTaskInternalSetTimeOutState+0x28>)
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	605a      	str	r2, [r3, #4]
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	20000de4 	.word	0x20000de4
 800598c:	20000dd0 	.word	0x20000dd0

08005990 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b088      	sub	sp, #32
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10a      	bne.n	80059b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	613b      	str	r3, [r7, #16]
}
 80059b2:	bf00      	nop
 80059b4:	e7fe      	b.n	80059b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10a      	bne.n	80059d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	60fb      	str	r3, [r7, #12]
}
 80059ce:	bf00      	nop
 80059d0:	e7fe      	b.n	80059d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80059d2:	f000 ff7f 	bl	80068d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80059d6:	4b1d      	ldr	r3, [pc, #116]	; (8005a4c <xTaskCheckForTimeOut+0xbc>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059ee:	d102      	bne.n	80059f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80059f0:	2300      	movs	r3, #0
 80059f2:	61fb      	str	r3, [r7, #28]
 80059f4:	e023      	b.n	8005a3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	4b15      	ldr	r3, [pc, #84]	; (8005a50 <xTaskCheckForTimeOut+0xc0>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d007      	beq.n	8005a12 <xTaskCheckForTimeOut+0x82>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d302      	bcc.n	8005a12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	61fb      	str	r3, [r7, #28]
 8005a10:	e015      	b.n	8005a3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d20b      	bcs.n	8005a34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	1ad2      	subs	r2, r2, r3
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7ff ff9b 	bl	8005964 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61fb      	str	r3, [r7, #28]
 8005a32:	e004      	b.n	8005a3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2200      	movs	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a3e:	f000 ff79 	bl	8006934 <vPortExitCritical>

	return xReturn;
 8005a42:	69fb      	ldr	r3, [r7, #28]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3720      	adds	r7, #32
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	20000dd0 	.word	0x20000dd0
 8005a50:	20000de4 	.word	0x20000de4

08005a54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a54:	b480      	push	{r7}
 8005a56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a58:	4b03      	ldr	r3, [pc, #12]	; (8005a68 <vTaskMissedYield+0x14>)
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]
}
 8005a5e:	bf00      	nop
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	20000de0 	.word	0x20000de0

08005a6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a74:	f000 f852 	bl	8005b1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a78:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <prvIdleTask+0x28>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d9f9      	bls.n	8005a74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a80:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <prvIdleTask+0x2c>)
 8005a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a90:	e7f0      	b.n	8005a74 <prvIdleTask+0x8>
 8005a92:	bf00      	nop
 8005a94:	200008fc 	.word	0x200008fc
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	607b      	str	r3, [r7, #4]
 8005aa6:	e00c      	b.n	8005ac2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4a12      	ldr	r2, [pc, #72]	; (8005afc <prvInitialiseTaskLists+0x60>)
 8005ab4:	4413      	add	r3, r2
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fe f9a8 	bl	8003e0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	607b      	str	r3, [r7, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b37      	cmp	r3, #55	; 0x37
 8005ac6:	d9ef      	bls.n	8005aa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ac8:	480d      	ldr	r0, [pc, #52]	; (8005b00 <prvInitialiseTaskLists+0x64>)
 8005aca:	f7fe f99f 	bl	8003e0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ace:	480d      	ldr	r0, [pc, #52]	; (8005b04 <prvInitialiseTaskLists+0x68>)
 8005ad0:	f7fe f99c 	bl	8003e0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ad4:	480c      	ldr	r0, [pc, #48]	; (8005b08 <prvInitialiseTaskLists+0x6c>)
 8005ad6:	f7fe f999 	bl	8003e0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ada:	480c      	ldr	r0, [pc, #48]	; (8005b0c <prvInitialiseTaskLists+0x70>)
 8005adc:	f7fe f996 	bl	8003e0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ae0:	480b      	ldr	r0, [pc, #44]	; (8005b10 <prvInitialiseTaskLists+0x74>)
 8005ae2:	f7fe f993 	bl	8003e0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ae6:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <prvInitialiseTaskLists+0x78>)
 8005ae8:	4a05      	ldr	r2, [pc, #20]	; (8005b00 <prvInitialiseTaskLists+0x64>)
 8005aea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005aec:	4b0a      	ldr	r3, [pc, #40]	; (8005b18 <prvInitialiseTaskLists+0x7c>)
 8005aee:	4a05      	ldr	r2, [pc, #20]	; (8005b04 <prvInitialiseTaskLists+0x68>)
 8005af0:	601a      	str	r2, [r3, #0]
}
 8005af2:	bf00      	nop
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	200008fc 	.word	0x200008fc
 8005b00:	20000d5c 	.word	0x20000d5c
 8005b04:	20000d70 	.word	0x20000d70
 8005b08:	20000d8c 	.word	0x20000d8c
 8005b0c:	20000da0 	.word	0x20000da0
 8005b10:	20000db8 	.word	0x20000db8
 8005b14:	20000d84 	.word	0x20000d84
 8005b18:	20000d88 	.word	0x20000d88

08005b1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b22:	e019      	b.n	8005b58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b24:	f000 fed6 	bl	80068d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b28:	4b10      	ldr	r3, [pc, #64]	; (8005b6c <prvCheckTasksWaitingTermination+0x50>)
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3304      	adds	r3, #4
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7fe f9f3 	bl	8003f20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b3a:	4b0d      	ldr	r3, [pc, #52]	; (8005b70 <prvCheckTasksWaitingTermination+0x54>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	4a0b      	ldr	r2, [pc, #44]	; (8005b70 <prvCheckTasksWaitingTermination+0x54>)
 8005b42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b44:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <prvCheckTasksWaitingTermination+0x58>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	4a0a      	ldr	r2, [pc, #40]	; (8005b74 <prvCheckTasksWaitingTermination+0x58>)
 8005b4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b4e:	f000 fef1 	bl	8006934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f810 	bl	8005b78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b58:	4b06      	ldr	r3, [pc, #24]	; (8005b74 <prvCheckTasksWaitingTermination+0x58>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1e1      	bne.n	8005b24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b60:	bf00      	nop
 8005b62:	bf00      	nop
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000da0 	.word	0x20000da0
 8005b70:	20000dcc 	.word	0x20000dcc
 8005b74:	20000db4 	.word	0x20000db4

08005b78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3354      	adds	r3, #84	; 0x54
 8005b84:	4618      	mov	r0, r3
 8005b86:	f001 f9b9 	bl	8006efc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d108      	bne.n	8005ba6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f001 f889 	bl	8006cb0 <vPortFree>
				vPortFree( pxTCB );
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f001 f886 	bl	8006cb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ba4:	e018      	b.n	8005bd8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d103      	bne.n	8005bb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f001 f87d 	bl	8006cb0 <vPortFree>
	}
 8005bb6:	e00f      	b.n	8005bd8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d00a      	beq.n	8005bd8 <prvDeleteTCB+0x60>
	__asm volatile
 8005bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc6:	f383 8811 	msr	BASEPRI, r3
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	60fb      	str	r3, [r7, #12]
}
 8005bd4:	bf00      	nop
 8005bd6:	e7fe      	b.n	8005bd6 <prvDeleteTCB+0x5e>
	}
 8005bd8:	bf00      	nop
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005be6:	4b0c      	ldr	r3, [pc, #48]	; (8005c18 <prvResetNextTaskUnblockTime+0x38>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d104      	bne.n	8005bfa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005bf0:	4b0a      	ldr	r3, [pc, #40]	; (8005c1c <prvResetNextTaskUnblockTime+0x3c>)
 8005bf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bf6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005bf8:	e008      	b.n	8005c0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bfa:	4b07      	ldr	r3, [pc, #28]	; (8005c18 <prvResetNextTaskUnblockTime+0x38>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	4a04      	ldr	r2, [pc, #16]	; (8005c1c <prvResetNextTaskUnblockTime+0x3c>)
 8005c0a:	6013      	str	r3, [r2, #0]
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	20000d84 	.word	0x20000d84
 8005c1c:	20000dec 	.word	0x20000dec

08005c20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c26:	4b0b      	ldr	r3, [pc, #44]	; (8005c54 <xTaskGetSchedulerState+0x34>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d102      	bne.n	8005c34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	607b      	str	r3, [r7, #4]
 8005c32:	e008      	b.n	8005c46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c34:	4b08      	ldr	r3, [pc, #32]	; (8005c58 <xTaskGetSchedulerState+0x38>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d102      	bne.n	8005c42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	607b      	str	r3, [r7, #4]
 8005c40:	e001      	b.n	8005c46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c42:	2300      	movs	r3, #0
 8005c44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c46:	687b      	ldr	r3, [r7, #4]
	}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	20000dd8 	.word	0x20000dd8
 8005c58:	20000df4 	.word	0x20000df4

08005c5c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d051      	beq.n	8005d16 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c76:	4b2a      	ldr	r3, [pc, #168]	; (8005d20 <xTaskPriorityInherit+0xc4>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d241      	bcs.n	8005d04 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	db06      	blt.n	8005c96 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c88:	4b25      	ldr	r3, [pc, #148]	; (8005d20 <xTaskPriorityInherit+0xc4>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	6959      	ldr	r1, [r3, #20]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4a1f      	ldr	r2, [pc, #124]	; (8005d24 <xTaskPriorityInherit+0xc8>)
 8005ca8:	4413      	add	r3, r2
 8005caa:	4299      	cmp	r1, r3
 8005cac:	d122      	bne.n	8005cf4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fe f934 	bl	8003f20 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005cb8:	4b19      	ldr	r3, [pc, #100]	; (8005d20 <xTaskPriorityInherit+0xc4>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc6:	4b18      	ldr	r3, [pc, #96]	; (8005d28 <xTaskPriorityInherit+0xcc>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d903      	bls.n	8005cd6 <xTaskPriorityInherit+0x7a>
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd2:	4a15      	ldr	r2, [pc, #84]	; (8005d28 <xTaskPriorityInherit+0xcc>)
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cda:	4613      	mov	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4a10      	ldr	r2, [pc, #64]	; (8005d24 <xTaskPriorityInherit+0xc8>)
 8005ce4:	441a      	add	r2, r3
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	3304      	adds	r3, #4
 8005cea:	4619      	mov	r1, r3
 8005cec:	4610      	mov	r0, r2
 8005cee:	f7fe f8ba 	bl	8003e66 <vListInsertEnd>
 8005cf2:	e004      	b.n	8005cfe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005cf4:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <xTaskPriorityInherit+0xc4>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	e008      	b.n	8005d16 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d08:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <xTaskPriorityInherit+0xc4>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d201      	bcs.n	8005d16 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005d12:	2301      	movs	r3, #1
 8005d14:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d16:	68fb      	ldr	r3, [r7, #12]
	}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	200008f8 	.word	0x200008f8
 8005d24:	200008fc 	.word	0x200008fc
 8005d28:	20000dd4 	.word	0x20000dd4

08005d2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d056      	beq.n	8005df0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d42:	4b2e      	ldr	r3, [pc, #184]	; (8005dfc <xTaskPriorityDisinherit+0xd0>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d00a      	beq.n	8005d62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	60fb      	str	r3, [r7, #12]
}
 8005d5e:	bf00      	nop
 8005d60:	e7fe      	b.n	8005d60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10a      	bne.n	8005d80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6e:	f383 8811 	msr	BASEPRI, r3
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	60bb      	str	r3, [r7, #8]
}
 8005d7c:	bf00      	nop
 8005d7e:	e7fe      	b.n	8005d7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d84:	1e5a      	subs	r2, r3, #1
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d02c      	beq.n	8005df0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d128      	bne.n	8005df0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	3304      	adds	r3, #4
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fe f8bc 	bl	8003f20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc0:	4b0f      	ldr	r3, [pc, #60]	; (8005e00 <xTaskPriorityDisinherit+0xd4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d903      	bls.n	8005dd0 <xTaskPriorityDisinherit+0xa4>
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dcc:	4a0c      	ldr	r2, [pc, #48]	; (8005e00 <xTaskPriorityDisinherit+0xd4>)
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4a09      	ldr	r2, [pc, #36]	; (8005e04 <xTaskPriorityDisinherit+0xd8>)
 8005dde:	441a      	add	r2, r3
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	3304      	adds	r3, #4
 8005de4:	4619      	mov	r1, r3
 8005de6:	4610      	mov	r0, r2
 8005de8:	f7fe f83d 	bl	8003e66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005dec:	2301      	movs	r3, #1
 8005dee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005df0:	697b      	ldr	r3, [r7, #20]
	}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3718      	adds	r7, #24
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	200008f8 	.word	0x200008f8
 8005e00:	20000dd4 	.word	0x20000dd4
 8005e04:	200008fc 	.word	0x200008fc

08005e08 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005e16:	2301      	movs	r3, #1
 8005e18:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d06a      	beq.n	8005ef6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10a      	bne.n	8005e3e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	60fb      	str	r3, [r7, #12]
}
 8005e3a:	bf00      	nop
 8005e3c:	e7fe      	b.n	8005e3c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d902      	bls.n	8005e4e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	61fb      	str	r3, [r7, #28]
 8005e4c:	e002      	b.n	8005e54 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e52:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d04b      	beq.n	8005ef6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d146      	bne.n	8005ef6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005e68:	4b25      	ldr	r3, [pc, #148]	; (8005f00 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d10a      	bne.n	8005e88 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	60bb      	str	r3, [r7, #8]
}
 8005e84:	bf00      	nop
 8005e86:	e7fe      	b.n	8005e86 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	69fa      	ldr	r2, [r7, #28]
 8005e92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	db04      	blt.n	8005ea6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	6959      	ldr	r1, [r3, #20]
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4613      	mov	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4a13      	ldr	r2, [pc, #76]	; (8005f04 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005eb6:	4413      	add	r3, r2
 8005eb8:	4299      	cmp	r1, r3
 8005eba:	d11c      	bne.n	8005ef6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fe f82d 	bl	8003f20 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eca:	4b0f      	ldr	r3, [pc, #60]	; (8005f08 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d903      	bls.n	8005eda <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed6:	4a0c      	ldr	r2, [pc, #48]	; (8005f08 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005ed8:	6013      	str	r3, [r2, #0]
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ede:	4613      	mov	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4413      	add	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4a07      	ldr	r2, [pc, #28]	; (8005f04 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005ee8:	441a      	add	r2, r3
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	3304      	adds	r3, #4
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	f7fd ffb8 	bl	8003e66 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ef6:	bf00      	nop
 8005ef8:	3720      	adds	r7, #32
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	200008f8 	.word	0x200008f8
 8005f04:	200008fc 	.word	0x200008fc
 8005f08:	20000dd4 	.word	0x20000dd4

08005f0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005f10:	4b07      	ldr	r3, [pc, #28]	; (8005f30 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d004      	beq.n	8005f22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005f18:	4b05      	ldr	r3, [pc, #20]	; (8005f30 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f1e:	3201      	adds	r2, #1
 8005f20:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005f22:	4b03      	ldr	r3, [pc, #12]	; (8005f30 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f24:	681b      	ldr	r3, [r3, #0]
	}
 8005f26:	4618      	mov	r0, r3
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	200008f8 	.word	0x200008f8

08005f34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f3e:	4b21      	ldr	r3, [pc, #132]	; (8005fc4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f44:	4b20      	ldr	r3, [pc, #128]	; (8005fc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3304      	adds	r3, #4
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fd ffe8 	bl	8003f20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f56:	d10a      	bne.n	8005f6e <prvAddCurrentTaskToDelayedList+0x3a>
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d007      	beq.n	8005f6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f5e:	4b1a      	ldr	r3, [pc, #104]	; (8005fc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3304      	adds	r3, #4
 8005f64:	4619      	mov	r1, r3
 8005f66:	4819      	ldr	r0, [pc, #100]	; (8005fcc <prvAddCurrentTaskToDelayedList+0x98>)
 8005f68:	f7fd ff7d 	bl	8003e66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f6c:	e026      	b.n	8005fbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4413      	add	r3, r2
 8005f74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f76:	4b14      	ldr	r3, [pc, #80]	; (8005fc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d209      	bcs.n	8005f9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f86:	4b12      	ldr	r3, [pc, #72]	; (8005fd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	4b0f      	ldr	r3, [pc, #60]	; (8005fc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3304      	adds	r3, #4
 8005f90:	4619      	mov	r1, r3
 8005f92:	4610      	mov	r0, r2
 8005f94:	f7fd ff8b 	bl	8003eae <vListInsert>
}
 8005f98:	e010      	b.n	8005fbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f9a:	4b0e      	ldr	r3, [pc, #56]	; (8005fd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	4b0a      	ldr	r3, [pc, #40]	; (8005fc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	4610      	mov	r0, r2
 8005fa8:	f7fd ff81 	bl	8003eae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005fac:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d202      	bcs.n	8005fbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005fb6:	4a08      	ldr	r2, [pc, #32]	; (8005fd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	6013      	str	r3, [r2, #0]
}
 8005fbc:	bf00      	nop
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	20000dd0 	.word	0x20000dd0
 8005fc8:	200008f8 	.word	0x200008f8
 8005fcc:	20000db8 	.word	0x20000db8
 8005fd0:	20000d88 	.word	0x20000d88
 8005fd4:	20000d84 	.word	0x20000d84
 8005fd8:	20000dec 	.word	0x20000dec

08005fdc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b08a      	sub	sp, #40	; 0x28
 8005fe0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005fe6:	f000 fb07 	bl	80065f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005fea:	4b1c      	ldr	r3, [pc, #112]	; (800605c <xTimerCreateTimerTask+0x80>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d021      	beq.n	8006036 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005ffa:	1d3a      	adds	r2, r7, #4
 8005ffc:	f107 0108 	add.w	r1, r7, #8
 8006000:	f107 030c 	add.w	r3, r7, #12
 8006004:	4618      	mov	r0, r3
 8006006:	f7fd fee7 	bl	8003dd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800600a:	6879      	ldr	r1, [r7, #4]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	9202      	str	r2, [sp, #8]
 8006012:	9301      	str	r3, [sp, #4]
 8006014:	2302      	movs	r3, #2
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	2300      	movs	r3, #0
 800601a:	460a      	mov	r2, r1
 800601c:	4910      	ldr	r1, [pc, #64]	; (8006060 <xTimerCreateTimerTask+0x84>)
 800601e:	4811      	ldr	r0, [pc, #68]	; (8006064 <xTimerCreateTimerTask+0x88>)
 8006020:	f7fe ffb6 	bl	8004f90 <xTaskCreateStatic>
 8006024:	4603      	mov	r3, r0
 8006026:	4a10      	ldr	r2, [pc, #64]	; (8006068 <xTimerCreateTimerTask+0x8c>)
 8006028:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800602a:	4b0f      	ldr	r3, [pc, #60]	; (8006068 <xTimerCreateTimerTask+0x8c>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006032:	2301      	movs	r3, #1
 8006034:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10a      	bne.n	8006052 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	613b      	str	r3, [r7, #16]
}
 800604e:	bf00      	nop
 8006050:	e7fe      	b.n	8006050 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006052:	697b      	ldr	r3, [r7, #20]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3718      	adds	r7, #24
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	20000e28 	.word	0x20000e28
 8006060:	08007218 	.word	0x08007218
 8006064:	080061a1 	.word	0x080061a1
 8006068:	20000e2c 	.word	0x20000e2c

0800606c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08a      	sub	sp, #40	; 0x28
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800607a:	2300      	movs	r3, #0
 800607c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10a      	bne.n	800609a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	623b      	str	r3, [r7, #32]
}
 8006096:	bf00      	nop
 8006098:	e7fe      	b.n	8006098 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800609a:	4b1a      	ldr	r3, [pc, #104]	; (8006104 <xTimerGenericCommand+0x98>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d02a      	beq.n	80060f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b05      	cmp	r3, #5
 80060b2:	dc18      	bgt.n	80060e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80060b4:	f7ff fdb4 	bl	8005c20 <xTaskGetSchedulerState>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d109      	bne.n	80060d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80060be:	4b11      	ldr	r3, [pc, #68]	; (8006104 <xTimerGenericCommand+0x98>)
 80060c0:	6818      	ldr	r0, [r3, #0]
 80060c2:	f107 0110 	add.w	r1, r7, #16
 80060c6:	2300      	movs	r3, #0
 80060c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ca:	f7fe f8fb 	bl	80042c4 <xQueueGenericSend>
 80060ce:	6278      	str	r0, [r7, #36]	; 0x24
 80060d0:	e012      	b.n	80060f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80060d2:	4b0c      	ldr	r3, [pc, #48]	; (8006104 <xTimerGenericCommand+0x98>)
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	f107 0110 	add.w	r1, r7, #16
 80060da:	2300      	movs	r3, #0
 80060dc:	2200      	movs	r2, #0
 80060de:	f7fe f8f1 	bl	80042c4 <xQueueGenericSend>
 80060e2:	6278      	str	r0, [r7, #36]	; 0x24
 80060e4:	e008      	b.n	80060f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80060e6:	4b07      	ldr	r3, [pc, #28]	; (8006104 <xTimerGenericCommand+0x98>)
 80060e8:	6818      	ldr	r0, [r3, #0]
 80060ea:	f107 0110 	add.w	r1, r7, #16
 80060ee:	2300      	movs	r3, #0
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	f7fe f9e5 	bl	80044c0 <xQueueGenericSendFromISR>
 80060f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3728      	adds	r7, #40	; 0x28
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	20000e28 	.word	0x20000e28

08006108 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b088      	sub	sp, #32
 800610c:	af02      	add	r7, sp, #8
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006112:	4b22      	ldr	r3, [pc, #136]	; (800619c <prvProcessExpiredTimer+0x94>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	3304      	adds	r3, #4
 8006120:	4618      	mov	r0, r3
 8006122:	f7fd fefd 	bl	8003f20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800612c:	f003 0304 	and.w	r3, r3, #4
 8006130:	2b00      	cmp	r3, #0
 8006132:	d022      	beq.n	800617a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	699a      	ldr	r2, [r3, #24]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	18d1      	adds	r1, r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	6978      	ldr	r0, [r7, #20]
 8006142:	f000 f8d1 	bl	80062e8 <prvInsertTimerInActiveList>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d01f      	beq.n	800618c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800614c:	2300      	movs	r3, #0
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	2300      	movs	r3, #0
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	2100      	movs	r1, #0
 8006156:	6978      	ldr	r0, [r7, #20]
 8006158:	f7ff ff88 	bl	800606c <xTimerGenericCommand>
 800615c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d113      	bne.n	800618c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	60fb      	str	r3, [r7, #12]
}
 8006176:	bf00      	nop
 8006178:	e7fe      	b.n	8006178 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006180:	f023 0301 	bic.w	r3, r3, #1
 8006184:	b2da      	uxtb	r2, r3
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	6978      	ldr	r0, [r7, #20]
 8006192:	4798      	blx	r3
}
 8006194:	bf00      	nop
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	20000e20 	.word	0x20000e20

080061a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061a8:	f107 0308 	add.w	r3, r7, #8
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 f857 	bl	8006260 <prvGetNextExpireTime>
 80061b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	4619      	mov	r1, r3
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 f803 	bl	80061c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80061be:	f000 f8d5 	bl	800636c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061c2:	e7f1      	b.n	80061a8 <prvTimerTask+0x8>

080061c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80061ce:	f7ff f93b 	bl	8005448 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061d2:	f107 0308 	add.w	r3, r7, #8
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 f866 	bl	80062a8 <prvSampleTimeNow>
 80061dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d130      	bne.n	8006246 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10a      	bne.n	8006200 <prvProcessTimerOrBlockTask+0x3c>
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d806      	bhi.n	8006200 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80061f2:	f7ff f937 	bl	8005464 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80061f6:	68f9      	ldr	r1, [r7, #12]
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7ff ff85 	bl	8006108 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80061fe:	e024      	b.n	800624a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d008      	beq.n	8006218 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006206:	4b13      	ldr	r3, [pc, #76]	; (8006254 <prvProcessTimerOrBlockTask+0x90>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <prvProcessTimerOrBlockTask+0x50>
 8006210:	2301      	movs	r3, #1
 8006212:	e000      	b.n	8006216 <prvProcessTimerOrBlockTask+0x52>
 8006214:	2300      	movs	r3, #0
 8006216:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006218:	4b0f      	ldr	r3, [pc, #60]	; (8006258 <prvProcessTimerOrBlockTask+0x94>)
 800621a:	6818      	ldr	r0, [r3, #0]
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	4619      	mov	r1, r3
 8006226:	f7fe fe7f 	bl	8004f28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800622a:	f7ff f91b 	bl	8005464 <xTaskResumeAll>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10a      	bne.n	800624a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006234:	4b09      	ldr	r3, [pc, #36]	; (800625c <prvProcessTimerOrBlockTask+0x98>)
 8006236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	f3bf 8f6f 	isb	sy
}
 8006244:	e001      	b.n	800624a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006246:	f7ff f90d 	bl	8005464 <xTaskResumeAll>
}
 800624a:	bf00      	nop
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	20000e24 	.word	0x20000e24
 8006258:	20000e28 	.word	0x20000e28
 800625c:	e000ed04 	.word	0xe000ed04

08006260 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006268:	4b0e      	ldr	r3, [pc, #56]	; (80062a4 <prvGetNextExpireTime+0x44>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <prvGetNextExpireTime+0x16>
 8006272:	2201      	movs	r2, #1
 8006274:	e000      	b.n	8006278 <prvGetNextExpireTime+0x18>
 8006276:	2200      	movs	r2, #0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d105      	bne.n	8006290 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006284:	4b07      	ldr	r3, [pc, #28]	; (80062a4 <prvGetNextExpireTime+0x44>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	60fb      	str	r3, [r7, #12]
 800628e:	e001      	b.n	8006294 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006294:	68fb      	ldr	r3, [r7, #12]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	20000e20 	.word	0x20000e20

080062a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80062b0:	f7ff f976 	bl	80055a0 <xTaskGetTickCount>
 80062b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80062b6:	4b0b      	ldr	r3, [pc, #44]	; (80062e4 <prvSampleTimeNow+0x3c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d205      	bcs.n	80062cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80062c0:	f000 f936 	bl	8006530 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	e002      	b.n	80062d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80062d2:	4a04      	ldr	r2, [pc, #16]	; (80062e4 <prvSampleTimeNow+0x3c>)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80062d8:	68fb      	ldr	r3, [r7, #12]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	20000e30 	.word	0x20000e30

080062e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80062f6:	2300      	movs	r3, #0
 80062f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	429a      	cmp	r2, r3
 800630c:	d812      	bhi.n	8006334 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	1ad2      	subs	r2, r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	429a      	cmp	r2, r3
 800631a:	d302      	bcc.n	8006322 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800631c:	2301      	movs	r3, #1
 800631e:	617b      	str	r3, [r7, #20]
 8006320:	e01b      	b.n	800635a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006322:	4b10      	ldr	r3, [pc, #64]	; (8006364 <prvInsertTimerInActiveList+0x7c>)
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	3304      	adds	r3, #4
 800632a:	4619      	mov	r1, r3
 800632c:	4610      	mov	r0, r2
 800632e:	f7fd fdbe 	bl	8003eae <vListInsert>
 8006332:	e012      	b.n	800635a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	429a      	cmp	r2, r3
 800633a:	d206      	bcs.n	800634a <prvInsertTimerInActiveList+0x62>
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	429a      	cmp	r2, r3
 8006342:	d302      	bcc.n	800634a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006344:	2301      	movs	r3, #1
 8006346:	617b      	str	r3, [r7, #20]
 8006348:	e007      	b.n	800635a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800634a:	4b07      	ldr	r3, [pc, #28]	; (8006368 <prvInsertTimerInActiveList+0x80>)
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	3304      	adds	r3, #4
 8006352:	4619      	mov	r1, r3
 8006354:	4610      	mov	r0, r2
 8006356:	f7fd fdaa 	bl	8003eae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800635a:	697b      	ldr	r3, [r7, #20]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	20000e24 	.word	0x20000e24
 8006368:	20000e20 	.word	0x20000e20

0800636c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b08e      	sub	sp, #56	; 0x38
 8006370:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006372:	e0ca      	b.n	800650a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	da18      	bge.n	80063ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800637a:	1d3b      	adds	r3, r7, #4
 800637c:	3304      	adds	r3, #4
 800637e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10a      	bne.n	800639c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	61fb      	str	r3, [r7, #28]
}
 8006398:	bf00      	nop
 800639a:	e7fe      	b.n	800639a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063a2:	6850      	ldr	r0, [r2, #4]
 80063a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063a6:	6892      	ldr	r2, [r2, #8]
 80063a8:	4611      	mov	r1, r2
 80063aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f2c0 80ab 	blt.w	800650a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80063b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d004      	beq.n	80063ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c2:	3304      	adds	r3, #4
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7fd fdab 	bl	8003f20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063ca:	463b      	mov	r3, r7
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7ff ff6b 	bl	80062a8 <prvSampleTimeNow>
 80063d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b09      	cmp	r3, #9
 80063d8:	f200 8096 	bhi.w	8006508 <prvProcessReceivedCommands+0x19c>
 80063dc:	a201      	add	r2, pc, #4	; (adr r2, 80063e4 <prvProcessReceivedCommands+0x78>)
 80063de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e2:	bf00      	nop
 80063e4:	0800640d 	.word	0x0800640d
 80063e8:	0800640d 	.word	0x0800640d
 80063ec:	0800640d 	.word	0x0800640d
 80063f0:	08006481 	.word	0x08006481
 80063f4:	08006495 	.word	0x08006495
 80063f8:	080064df 	.word	0x080064df
 80063fc:	0800640d 	.word	0x0800640d
 8006400:	0800640d 	.word	0x0800640d
 8006404:	08006481 	.word	0x08006481
 8006408:	08006495 	.word	0x08006495
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006412:	f043 0301 	orr.w	r3, r3, #1
 8006416:	b2da      	uxtb	r2, r3
 8006418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	18d1      	adds	r1, r2, r3
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800642a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800642c:	f7ff ff5c 	bl	80062e8 <prvInsertTimerInActiveList>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d069      	beq.n	800650a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800643c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800643e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006440:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	d05e      	beq.n	800650a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	441a      	add	r2, r3
 8006454:	2300      	movs	r3, #0
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	2300      	movs	r3, #0
 800645a:	2100      	movs	r1, #0
 800645c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800645e:	f7ff fe05 	bl	800606c <xTimerGenericCommand>
 8006462:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d14f      	bne.n	800650a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800646a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	61bb      	str	r3, [r7, #24]
}
 800647c:	bf00      	nop
 800647e:	e7fe      	b.n	800647e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006486:	f023 0301 	bic.w	r3, r3, #1
 800648a:	b2da      	uxtb	r2, r3
 800648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006492:	e03a      	b.n	800650a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006496:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800649a:	f043 0301 	orr.w	r3, r3, #1
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80064ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10a      	bne.n	80064ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80064b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	617b      	str	r3, [r7, #20]
}
 80064c6:	bf00      	nop
 80064c8:	e7fe      	b.n	80064c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80064ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064cc:	699a      	ldr	r2, [r3, #24]
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	18d1      	adds	r1, r2, r3
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064d8:	f7ff ff06 	bl	80062e8 <prvInsertTimerInActiveList>
					break;
 80064dc:	e015      	b.n	800650a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80064de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d103      	bne.n	80064f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80064ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064ee:	f000 fbdf 	bl	8006cb0 <vPortFree>
 80064f2:	e00a      	b.n	800650a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064fa:	f023 0301 	bic.w	r3, r3, #1
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006506:	e000      	b.n	800650a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006508:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800650a:	4b08      	ldr	r3, [pc, #32]	; (800652c <prvProcessReceivedCommands+0x1c0>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	1d39      	adds	r1, r7, #4
 8006510:	2200      	movs	r2, #0
 8006512:	4618      	mov	r0, r3
 8006514:	f7fe f8fc 	bl	8004710 <xQueueReceive>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	f47f af2a 	bne.w	8006374 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006520:	bf00      	nop
 8006522:	bf00      	nop
 8006524:	3730      	adds	r7, #48	; 0x30
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	20000e28 	.word	0x20000e28

08006530 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006536:	e048      	b.n	80065ca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006538:	4b2d      	ldr	r3, [pc, #180]	; (80065f0 <prvSwitchTimerLists+0xc0>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006542:	4b2b      	ldr	r3, [pc, #172]	; (80065f0 <prvSwitchTimerLists+0xc0>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	3304      	adds	r3, #4
 8006550:	4618      	mov	r0, r3
 8006552:	f7fd fce5 	bl	8003f20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b00      	cmp	r3, #0
 800656a:	d02e      	beq.n	80065ca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	4413      	add	r3, r2
 8006574:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	429a      	cmp	r2, r3
 800657c:	d90e      	bls.n	800659c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800658a:	4b19      	ldr	r3, [pc, #100]	; (80065f0 <prvSwitchTimerLists+0xc0>)
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3304      	adds	r3, #4
 8006592:	4619      	mov	r1, r3
 8006594:	4610      	mov	r0, r2
 8006596:	f7fd fc8a 	bl	8003eae <vListInsert>
 800659a:	e016      	b.n	80065ca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800659c:	2300      	movs	r3, #0
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	2300      	movs	r3, #0
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	2100      	movs	r1, #0
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f7ff fd60 	bl	800606c <xTimerGenericCommand>
 80065ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10a      	bne.n	80065ca <prvSwitchTimerLists+0x9a>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	603b      	str	r3, [r7, #0]
}
 80065c6:	bf00      	nop
 80065c8:	e7fe      	b.n	80065c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065ca:	4b09      	ldr	r3, [pc, #36]	; (80065f0 <prvSwitchTimerLists+0xc0>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1b1      	bne.n	8006538 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80065d4:	4b06      	ldr	r3, [pc, #24]	; (80065f0 <prvSwitchTimerLists+0xc0>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80065da:	4b06      	ldr	r3, [pc, #24]	; (80065f4 <prvSwitchTimerLists+0xc4>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a04      	ldr	r2, [pc, #16]	; (80065f0 <prvSwitchTimerLists+0xc0>)
 80065e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80065e2:	4a04      	ldr	r2, [pc, #16]	; (80065f4 <prvSwitchTimerLists+0xc4>)
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	6013      	str	r3, [r2, #0]
}
 80065e8:	bf00      	nop
 80065ea:	3718      	adds	r7, #24
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	20000e20 	.word	0x20000e20
 80065f4:	20000e24 	.word	0x20000e24

080065f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80065fe:	f000 f969 	bl	80068d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006602:	4b15      	ldr	r3, [pc, #84]	; (8006658 <prvCheckForValidListAndQueue+0x60>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d120      	bne.n	800664c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800660a:	4814      	ldr	r0, [pc, #80]	; (800665c <prvCheckForValidListAndQueue+0x64>)
 800660c:	f7fd fbfe 	bl	8003e0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006610:	4813      	ldr	r0, [pc, #76]	; (8006660 <prvCheckForValidListAndQueue+0x68>)
 8006612:	f7fd fbfb 	bl	8003e0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006616:	4b13      	ldr	r3, [pc, #76]	; (8006664 <prvCheckForValidListAndQueue+0x6c>)
 8006618:	4a10      	ldr	r2, [pc, #64]	; (800665c <prvCheckForValidListAndQueue+0x64>)
 800661a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800661c:	4b12      	ldr	r3, [pc, #72]	; (8006668 <prvCheckForValidListAndQueue+0x70>)
 800661e:	4a10      	ldr	r2, [pc, #64]	; (8006660 <prvCheckForValidListAndQueue+0x68>)
 8006620:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006622:	2300      	movs	r3, #0
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	4b11      	ldr	r3, [pc, #68]	; (800666c <prvCheckForValidListAndQueue+0x74>)
 8006628:	4a11      	ldr	r2, [pc, #68]	; (8006670 <prvCheckForValidListAndQueue+0x78>)
 800662a:	2110      	movs	r1, #16
 800662c:	200a      	movs	r0, #10
 800662e:	f7fd fd09 	bl	8004044 <xQueueGenericCreateStatic>
 8006632:	4603      	mov	r3, r0
 8006634:	4a08      	ldr	r2, [pc, #32]	; (8006658 <prvCheckForValidListAndQueue+0x60>)
 8006636:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006638:	4b07      	ldr	r3, [pc, #28]	; (8006658 <prvCheckForValidListAndQueue+0x60>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d005      	beq.n	800664c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006640:	4b05      	ldr	r3, [pc, #20]	; (8006658 <prvCheckForValidListAndQueue+0x60>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	490b      	ldr	r1, [pc, #44]	; (8006674 <prvCheckForValidListAndQueue+0x7c>)
 8006646:	4618      	mov	r0, r3
 8006648:	f7fe fc1a 	bl	8004e80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800664c:	f000 f972 	bl	8006934 <vPortExitCritical>
}
 8006650:	bf00      	nop
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20000e28 	.word	0x20000e28
 800665c:	20000df8 	.word	0x20000df8
 8006660:	20000e0c 	.word	0x20000e0c
 8006664:	20000e20 	.word	0x20000e20
 8006668:	20000e24 	.word	0x20000e24
 800666c:	20000ed4 	.word	0x20000ed4
 8006670:	20000e34 	.word	0x20000e34
 8006674:	08007220 	.word	0x08007220

08006678 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3b04      	subs	r3, #4
 8006688:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006690:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3b04      	subs	r3, #4
 8006696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f023 0201 	bic.w	r2, r3, #1
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3b04      	subs	r3, #4
 80066a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066a8:	4a0c      	ldr	r2, [pc, #48]	; (80066dc <pxPortInitialiseStack+0x64>)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3b14      	subs	r3, #20
 80066b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3b04      	subs	r3, #4
 80066be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f06f 0202 	mvn.w	r2, #2
 80066c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	3b20      	subs	r3, #32
 80066cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066ce:	68fb      	ldr	r3, [r7, #12]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3714      	adds	r7, #20
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	080066e1 	.word	0x080066e1

080066e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066e6:	2300      	movs	r3, #0
 80066e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066ea:	4b12      	ldr	r3, [pc, #72]	; (8006734 <prvTaskExitError+0x54>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066f2:	d00a      	beq.n	800670a <prvTaskExitError+0x2a>
	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	60fb      	str	r3, [r7, #12]
}
 8006706:	bf00      	nop
 8006708:	e7fe      	b.n	8006708 <prvTaskExitError+0x28>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	60bb      	str	r3, [r7, #8]
}
 800671c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800671e:	bf00      	nop
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0fc      	beq.n	8006720 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006726:	bf00      	nop
 8006728:	bf00      	nop
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	2000000c 	.word	0x2000000c
	...

08006740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <pxCurrentTCBConst2>)
 8006742:	6819      	ldr	r1, [r3, #0]
 8006744:	6808      	ldr	r0, [r1, #0]
 8006746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674a:	f380 8809 	msr	PSP, r0
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f04f 0000 	mov.w	r0, #0
 8006756:	f380 8811 	msr	BASEPRI, r0
 800675a:	4770      	bx	lr
 800675c:	f3af 8000 	nop.w

08006760 <pxCurrentTCBConst2>:
 8006760:	200008f8 	.word	0x200008f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006764:	bf00      	nop
 8006766:	bf00      	nop

08006768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006768:	4808      	ldr	r0, [pc, #32]	; (800678c <prvPortStartFirstTask+0x24>)
 800676a:	6800      	ldr	r0, [r0, #0]
 800676c:	6800      	ldr	r0, [r0, #0]
 800676e:	f380 8808 	msr	MSP, r0
 8006772:	f04f 0000 	mov.w	r0, #0
 8006776:	f380 8814 	msr	CONTROL, r0
 800677a:	b662      	cpsie	i
 800677c:	b661      	cpsie	f
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	df00      	svc	0
 8006788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800678a:	bf00      	nop
 800678c:	e000ed08 	.word	0xe000ed08

08006790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006796:	4b46      	ldr	r3, [pc, #280]	; (80068b0 <xPortStartScheduler+0x120>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a46      	ldr	r2, [pc, #280]	; (80068b4 <xPortStartScheduler+0x124>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d10a      	bne.n	80067b6 <xPortStartScheduler+0x26>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	613b      	str	r3, [r7, #16]
}
 80067b2:	bf00      	nop
 80067b4:	e7fe      	b.n	80067b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80067b6:	4b3e      	ldr	r3, [pc, #248]	; (80068b0 <xPortStartScheduler+0x120>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a3f      	ldr	r2, [pc, #252]	; (80068b8 <xPortStartScheduler+0x128>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d10a      	bne.n	80067d6 <xPortStartScheduler+0x46>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	60fb      	str	r3, [r7, #12]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067d6:	4b39      	ldr	r3, [pc, #228]	; (80068bc <xPortStartScheduler+0x12c>)
 80067d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	22ff      	movs	r2, #255	; 0xff
 80067e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067f0:	78fb      	ldrb	r3, [r7, #3]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	4b31      	ldr	r3, [pc, #196]	; (80068c0 <xPortStartScheduler+0x130>)
 80067fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067fe:	4b31      	ldr	r3, [pc, #196]	; (80068c4 <xPortStartScheduler+0x134>)
 8006800:	2207      	movs	r2, #7
 8006802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006804:	e009      	b.n	800681a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006806:	4b2f      	ldr	r3, [pc, #188]	; (80068c4 <xPortStartScheduler+0x134>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3b01      	subs	r3, #1
 800680c:	4a2d      	ldr	r2, [pc, #180]	; (80068c4 <xPortStartScheduler+0x134>)
 800680e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006810:	78fb      	ldrb	r3, [r7, #3]
 8006812:	b2db      	uxtb	r3, r3
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	b2db      	uxtb	r3, r3
 8006818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800681a:	78fb      	ldrb	r3, [r7, #3]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006822:	2b80      	cmp	r3, #128	; 0x80
 8006824:	d0ef      	beq.n	8006806 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006826:	4b27      	ldr	r3, [pc, #156]	; (80068c4 <xPortStartScheduler+0x134>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f1c3 0307 	rsb	r3, r3, #7
 800682e:	2b04      	cmp	r3, #4
 8006830:	d00a      	beq.n	8006848 <xPortStartScheduler+0xb8>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	60bb      	str	r3, [r7, #8]
}
 8006844:	bf00      	nop
 8006846:	e7fe      	b.n	8006846 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006848:	4b1e      	ldr	r3, [pc, #120]	; (80068c4 <xPortStartScheduler+0x134>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	021b      	lsls	r3, r3, #8
 800684e:	4a1d      	ldr	r2, [pc, #116]	; (80068c4 <xPortStartScheduler+0x134>)
 8006850:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006852:	4b1c      	ldr	r3, [pc, #112]	; (80068c4 <xPortStartScheduler+0x134>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800685a:	4a1a      	ldr	r2, [pc, #104]	; (80068c4 <xPortStartScheduler+0x134>)
 800685c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	b2da      	uxtb	r2, r3
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006866:	4b18      	ldr	r3, [pc, #96]	; (80068c8 <xPortStartScheduler+0x138>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a17      	ldr	r2, [pc, #92]	; (80068c8 <xPortStartScheduler+0x138>)
 800686c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006872:	4b15      	ldr	r3, [pc, #84]	; (80068c8 <xPortStartScheduler+0x138>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a14      	ldr	r2, [pc, #80]	; (80068c8 <xPortStartScheduler+0x138>)
 8006878:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800687c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800687e:	f000 f8dd 	bl	8006a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006882:	4b12      	ldr	r3, [pc, #72]	; (80068cc <xPortStartScheduler+0x13c>)
 8006884:	2200      	movs	r2, #0
 8006886:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006888:	f000 f8fc 	bl	8006a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800688c:	4b10      	ldr	r3, [pc, #64]	; (80068d0 <xPortStartScheduler+0x140>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a0f      	ldr	r2, [pc, #60]	; (80068d0 <xPortStartScheduler+0x140>)
 8006892:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006896:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006898:	f7ff ff66 	bl	8006768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800689c:	f7fe ff4a 	bl	8005734 <vTaskSwitchContext>
	prvTaskExitError();
 80068a0:	f7ff ff1e 	bl	80066e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	e000ed00 	.word	0xe000ed00
 80068b4:	410fc271 	.word	0x410fc271
 80068b8:	410fc270 	.word	0x410fc270
 80068bc:	e000e400 	.word	0xe000e400
 80068c0:	20000f24 	.word	0x20000f24
 80068c4:	20000f28 	.word	0x20000f28
 80068c8:	e000ed20 	.word	0xe000ed20
 80068cc:	2000000c 	.word	0x2000000c
 80068d0:	e000ef34 	.word	0xe000ef34

080068d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	607b      	str	r3, [r7, #4]
}
 80068ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068ee:	4b0f      	ldr	r3, [pc, #60]	; (800692c <vPortEnterCritical+0x58>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3301      	adds	r3, #1
 80068f4:	4a0d      	ldr	r2, [pc, #52]	; (800692c <vPortEnterCritical+0x58>)
 80068f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068f8:	4b0c      	ldr	r3, [pc, #48]	; (800692c <vPortEnterCritical+0x58>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d10f      	bne.n	8006920 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006900:	4b0b      	ldr	r3, [pc, #44]	; (8006930 <vPortEnterCritical+0x5c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <vPortEnterCritical+0x4c>
	__asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	603b      	str	r3, [r7, #0]
}
 800691c:	bf00      	nop
 800691e:	e7fe      	b.n	800691e <vPortEnterCritical+0x4a>
	}
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	2000000c 	.word	0x2000000c
 8006930:	e000ed04 	.word	0xe000ed04

08006934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800693a:	4b12      	ldr	r3, [pc, #72]	; (8006984 <vPortExitCritical+0x50>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10a      	bne.n	8006958 <vPortExitCritical+0x24>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	607b      	str	r3, [r7, #4]
}
 8006954:	bf00      	nop
 8006956:	e7fe      	b.n	8006956 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006958:	4b0a      	ldr	r3, [pc, #40]	; (8006984 <vPortExitCritical+0x50>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3b01      	subs	r3, #1
 800695e:	4a09      	ldr	r2, [pc, #36]	; (8006984 <vPortExitCritical+0x50>)
 8006960:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006962:	4b08      	ldr	r3, [pc, #32]	; (8006984 <vPortExitCritical+0x50>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d105      	bne.n	8006976 <vPortExitCritical+0x42>
 800696a:	2300      	movs	r3, #0
 800696c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	f383 8811 	msr	BASEPRI, r3
}
 8006974:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006976:	bf00      	nop
 8006978:	370c      	adds	r7, #12
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	2000000c 	.word	0x2000000c
	...

08006990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006990:	f3ef 8009 	mrs	r0, PSP
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	4b15      	ldr	r3, [pc, #84]	; (80069f0 <pxCurrentTCBConst>)
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	f01e 0f10 	tst.w	lr, #16
 80069a0:	bf08      	it	eq
 80069a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80069a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069aa:	6010      	str	r0, [r2, #0]
 80069ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80069b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80069b4:	f380 8811 	msr	BASEPRI, r0
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f7fe feb8 	bl	8005734 <vTaskSwitchContext>
 80069c4:	f04f 0000 	mov.w	r0, #0
 80069c8:	f380 8811 	msr	BASEPRI, r0
 80069cc:	bc09      	pop	{r0, r3}
 80069ce:	6819      	ldr	r1, [r3, #0]
 80069d0:	6808      	ldr	r0, [r1, #0]
 80069d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d6:	f01e 0f10 	tst.w	lr, #16
 80069da:	bf08      	it	eq
 80069dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069e0:	f380 8809 	msr	PSP, r0
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	f3af 8000 	nop.w

080069f0 <pxCurrentTCBConst>:
 80069f0:	200008f8 	.word	0x200008f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069f4:	bf00      	nop
 80069f6:	bf00      	nop

080069f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	607b      	str	r3, [r7, #4]
}
 8006a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a12:	f7fe fdd5 	bl	80055c0 <xTaskIncrementTick>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a1c:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <xPortSysTickHandler+0x40>)
 8006a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	2300      	movs	r3, #0
 8006a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	f383 8811 	msr	BASEPRI, r3
}
 8006a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a30:	bf00      	nop
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	e000ed04 	.word	0xe000ed04

08006a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a40:	4b0b      	ldr	r3, [pc, #44]	; (8006a70 <vPortSetupTimerInterrupt+0x34>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a46:	4b0b      	ldr	r3, [pc, #44]	; (8006a74 <vPortSetupTimerInterrupt+0x38>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a4c:	4b0a      	ldr	r3, [pc, #40]	; (8006a78 <vPortSetupTimerInterrupt+0x3c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a0a      	ldr	r2, [pc, #40]	; (8006a7c <vPortSetupTimerInterrupt+0x40>)
 8006a52:	fba2 2303 	umull	r2, r3, r2, r3
 8006a56:	099b      	lsrs	r3, r3, #6
 8006a58:	4a09      	ldr	r2, [pc, #36]	; (8006a80 <vPortSetupTimerInterrupt+0x44>)
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a5e:	4b04      	ldr	r3, [pc, #16]	; (8006a70 <vPortSetupTimerInterrupt+0x34>)
 8006a60:	2207      	movs	r2, #7
 8006a62:	601a      	str	r2, [r3, #0]
}
 8006a64:	bf00      	nop
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	e000e010 	.word	0xe000e010
 8006a74:	e000e018 	.word	0xe000e018
 8006a78:	20000000 	.word	0x20000000
 8006a7c:	10624dd3 	.word	0x10624dd3
 8006a80:	e000e014 	.word	0xe000e014

08006a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a94 <vPortEnableVFP+0x10>
 8006a88:	6801      	ldr	r1, [r0, #0]
 8006a8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a8e:	6001      	str	r1, [r0, #0]
 8006a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a92:	bf00      	nop
 8006a94:	e000ed88 	.word	0xe000ed88

08006a98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a9e:	f3ef 8305 	mrs	r3, IPSR
 8006aa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b0f      	cmp	r3, #15
 8006aa8:	d914      	bls.n	8006ad4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006aaa:	4a17      	ldr	r2, [pc, #92]	; (8006b08 <vPortValidateInterruptPriority+0x70>)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4413      	add	r3, r2
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ab4:	4b15      	ldr	r3, [pc, #84]	; (8006b0c <vPortValidateInterruptPriority+0x74>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	7afa      	ldrb	r2, [r7, #11]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d20a      	bcs.n	8006ad4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	607b      	str	r3, [r7, #4]
}
 8006ad0:	bf00      	nop
 8006ad2:	e7fe      	b.n	8006ad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ad4:	4b0e      	ldr	r3, [pc, #56]	; (8006b10 <vPortValidateInterruptPriority+0x78>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006adc:	4b0d      	ldr	r3, [pc, #52]	; (8006b14 <vPortValidateInterruptPriority+0x7c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d90a      	bls.n	8006afa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	603b      	str	r3, [r7, #0]
}
 8006af6:	bf00      	nop
 8006af8:	e7fe      	b.n	8006af8 <vPortValidateInterruptPriority+0x60>
	}
 8006afa:	bf00      	nop
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	e000e3f0 	.word	0xe000e3f0
 8006b0c:	20000f24 	.word	0x20000f24
 8006b10:	e000ed0c 	.word	0xe000ed0c
 8006b14:	20000f28 	.word	0x20000f28

08006b18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08a      	sub	sp, #40	; 0x28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b20:	2300      	movs	r3, #0
 8006b22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b24:	f7fe fc90 	bl	8005448 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b28:	4b5b      	ldr	r3, [pc, #364]	; (8006c98 <pvPortMalloc+0x180>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b30:	f000 f920 	bl	8006d74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b34:	4b59      	ldr	r3, [pc, #356]	; (8006c9c <pvPortMalloc+0x184>)
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f040 8093 	bne.w	8006c68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d01d      	beq.n	8006b84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006b48:	2208      	movs	r2, #8
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f003 0307 	and.w	r3, r3, #7
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d014      	beq.n	8006b84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f023 0307 	bic.w	r3, r3, #7
 8006b60:	3308      	adds	r3, #8
 8006b62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f003 0307 	and.w	r3, r3, #7
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <pvPortMalloc+0x6c>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	617b      	str	r3, [r7, #20]
}
 8006b80:	bf00      	nop
 8006b82:	e7fe      	b.n	8006b82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d06e      	beq.n	8006c68 <pvPortMalloc+0x150>
 8006b8a:	4b45      	ldr	r3, [pc, #276]	; (8006ca0 <pvPortMalloc+0x188>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d869      	bhi.n	8006c68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b94:	4b43      	ldr	r3, [pc, #268]	; (8006ca4 <pvPortMalloc+0x18c>)
 8006b96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b98:	4b42      	ldr	r3, [pc, #264]	; (8006ca4 <pvPortMalloc+0x18c>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b9e:	e004      	b.n	8006baa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d903      	bls.n	8006bbc <pvPortMalloc+0xa4>
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1f1      	bne.n	8006ba0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006bbc:	4b36      	ldr	r3, [pc, #216]	; (8006c98 <pvPortMalloc+0x180>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d050      	beq.n	8006c68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2208      	movs	r2, #8
 8006bcc:	4413      	add	r3, r2
 8006bce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	6a3b      	ldr	r3, [r7, #32]
 8006bd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	1ad2      	subs	r2, r2, r3
 8006be0:	2308      	movs	r3, #8
 8006be2:	005b      	lsls	r3, r3, #1
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d91f      	bls.n	8006c28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4413      	add	r3, r2
 8006bee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	f003 0307 	and.w	r3, r3, #7
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00a      	beq.n	8006c10 <pvPortMalloc+0xf8>
	__asm volatile
 8006bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	613b      	str	r3, [r7, #16]
}
 8006c0c:	bf00      	nop
 8006c0e:	e7fe      	b.n	8006c0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	1ad2      	subs	r2, r2, r3
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c22:	69b8      	ldr	r0, [r7, #24]
 8006c24:	f000 f908 	bl	8006e38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c28:	4b1d      	ldr	r3, [pc, #116]	; (8006ca0 <pvPortMalloc+0x188>)
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	4a1b      	ldr	r2, [pc, #108]	; (8006ca0 <pvPortMalloc+0x188>)
 8006c34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c36:	4b1a      	ldr	r3, [pc, #104]	; (8006ca0 <pvPortMalloc+0x188>)
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	4b1b      	ldr	r3, [pc, #108]	; (8006ca8 <pvPortMalloc+0x190>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d203      	bcs.n	8006c4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c42:	4b17      	ldr	r3, [pc, #92]	; (8006ca0 <pvPortMalloc+0x188>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a18      	ldr	r2, [pc, #96]	; (8006ca8 <pvPortMalloc+0x190>)
 8006c48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	4b13      	ldr	r3, [pc, #76]	; (8006c9c <pvPortMalloc+0x184>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	431a      	orrs	r2, r3
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c5e:	4b13      	ldr	r3, [pc, #76]	; (8006cac <pvPortMalloc+0x194>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3301      	adds	r3, #1
 8006c64:	4a11      	ldr	r2, [pc, #68]	; (8006cac <pvPortMalloc+0x194>)
 8006c66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c68:	f7fe fbfc 	bl	8005464 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00a      	beq.n	8006c8c <pvPortMalloc+0x174>
	__asm volatile
 8006c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	60fb      	str	r3, [r7, #12]
}
 8006c88:	bf00      	nop
 8006c8a:	e7fe      	b.n	8006c8a <pvPortMalloc+0x172>
	return pvReturn;
 8006c8c:	69fb      	ldr	r3, [r7, #28]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3728      	adds	r7, #40	; 0x28
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20001aec 	.word	0x20001aec
 8006c9c:	20001b00 	.word	0x20001b00
 8006ca0:	20001af0 	.word	0x20001af0
 8006ca4:	20001ae4 	.word	0x20001ae4
 8006ca8:	20001af4 	.word	0x20001af4
 8006cac:	20001af8 	.word	0x20001af8

08006cb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d04d      	beq.n	8006d5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006cc2:	2308      	movs	r3, #8
 8006cc4:	425b      	negs	r3, r3
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	4413      	add	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	4b24      	ldr	r3, [pc, #144]	; (8006d68 <vPortFree+0xb8>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4013      	ands	r3, r2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10a      	bne.n	8006cf4 <vPortFree+0x44>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	60fb      	str	r3, [r7, #12]
}
 8006cf0:	bf00      	nop
 8006cf2:	e7fe      	b.n	8006cf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00a      	beq.n	8006d12 <vPortFree+0x62>
	__asm volatile
 8006cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	60bb      	str	r3, [r7, #8]
}
 8006d0e:	bf00      	nop
 8006d10:	e7fe      	b.n	8006d10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	4b14      	ldr	r3, [pc, #80]	; (8006d68 <vPortFree+0xb8>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d01e      	beq.n	8006d5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d11a      	bne.n	8006d5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	4b0e      	ldr	r3, [pc, #56]	; (8006d68 <vPortFree+0xb8>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	43db      	mvns	r3, r3
 8006d32:	401a      	ands	r2, r3
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d38:	f7fe fb86 	bl	8005448 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	685a      	ldr	r2, [r3, #4]
 8006d40:	4b0a      	ldr	r3, [pc, #40]	; (8006d6c <vPortFree+0xbc>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4413      	add	r3, r2
 8006d46:	4a09      	ldr	r2, [pc, #36]	; (8006d6c <vPortFree+0xbc>)
 8006d48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d4a:	6938      	ldr	r0, [r7, #16]
 8006d4c:	f000 f874 	bl	8006e38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d50:	4b07      	ldr	r3, [pc, #28]	; (8006d70 <vPortFree+0xc0>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3301      	adds	r3, #1
 8006d56:	4a06      	ldr	r2, [pc, #24]	; (8006d70 <vPortFree+0xc0>)
 8006d58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d5a:	f7fe fb83 	bl	8005464 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d5e:	bf00      	nop
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	20001b00 	.word	0x20001b00
 8006d6c:	20001af0 	.word	0x20001af0
 8006d70:	20001afc 	.word	0x20001afc

08006d74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d7a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006d7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d80:	4b27      	ldr	r3, [pc, #156]	; (8006e20 <prvHeapInit+0xac>)
 8006d82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f003 0307 	and.w	r3, r3, #7
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00c      	beq.n	8006da8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	3307      	adds	r3, #7
 8006d92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f023 0307 	bic.w	r3, r3, #7
 8006d9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	4a1f      	ldr	r2, [pc, #124]	; (8006e20 <prvHeapInit+0xac>)
 8006da4:	4413      	add	r3, r2
 8006da6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006dac:	4a1d      	ldr	r2, [pc, #116]	; (8006e24 <prvHeapInit+0xb0>)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006db2:	4b1c      	ldr	r3, [pc, #112]	; (8006e24 <prvHeapInit+0xb0>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006dc0:	2208      	movs	r2, #8
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	1a9b      	subs	r3, r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 0307 	bic.w	r3, r3, #7
 8006dce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4a15      	ldr	r2, [pc, #84]	; (8006e28 <prvHeapInit+0xb4>)
 8006dd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006dd6:	4b14      	ldr	r3, [pc, #80]	; (8006e28 <prvHeapInit+0xb4>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dde:	4b12      	ldr	r3, [pc, #72]	; (8006e28 <prvHeapInit+0xb4>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2200      	movs	r2, #0
 8006de4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	1ad2      	subs	r2, r2, r3
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006df4:	4b0c      	ldr	r3, [pc, #48]	; (8006e28 <prvHeapInit+0xb4>)
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	4a0a      	ldr	r2, [pc, #40]	; (8006e2c <prvHeapInit+0xb8>)
 8006e02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	4a09      	ldr	r2, [pc, #36]	; (8006e30 <prvHeapInit+0xbc>)
 8006e0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e0c:	4b09      	ldr	r3, [pc, #36]	; (8006e34 <prvHeapInit+0xc0>)
 8006e0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e12:	601a      	str	r2, [r3, #0]
}
 8006e14:	bf00      	nop
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	20000f2c 	.word	0x20000f2c
 8006e24:	20001ae4 	.word	0x20001ae4
 8006e28:	20001aec 	.word	0x20001aec
 8006e2c:	20001af4 	.word	0x20001af4
 8006e30:	20001af0 	.word	0x20001af0
 8006e34:	20001b00 	.word	0x20001b00

08006e38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e40:	4b28      	ldr	r3, [pc, #160]	; (8006ee4 <prvInsertBlockIntoFreeList+0xac>)
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	e002      	b.n	8006e4c <prvInsertBlockIntoFreeList+0x14>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	60fb      	str	r3, [r7, #12]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d8f7      	bhi.n	8006e46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	4413      	add	r3, r2
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d108      	bne.n	8006e7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	441a      	add	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	441a      	add	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d118      	bne.n	8006ec0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	4b15      	ldr	r3, [pc, #84]	; (8006ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d00d      	beq.n	8006eb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	441a      	add	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	e008      	b.n	8006ec8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006eb6:	4b0c      	ldr	r3, [pc, #48]	; (8006ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	601a      	str	r2, [r3, #0]
 8006ebe:	e003      	b.n	8006ec8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d002      	beq.n	8006ed6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ed6:	bf00      	nop
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	20001ae4 	.word	0x20001ae4
 8006ee8:	20001aec 	.word	0x20001aec

08006eec <memset>:
 8006eec:	4402      	add	r2, r0
 8006eee:	4603      	mov	r3, r0
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d100      	bne.n	8006ef6 <memset+0xa>
 8006ef4:	4770      	bx	lr
 8006ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8006efa:	e7f9      	b.n	8006ef0 <memset+0x4>

08006efc <_reclaim_reent>:
 8006efc:	4b29      	ldr	r3, [pc, #164]	; (8006fa4 <_reclaim_reent+0xa8>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4283      	cmp	r3, r0
 8006f02:	b570      	push	{r4, r5, r6, lr}
 8006f04:	4604      	mov	r4, r0
 8006f06:	d04b      	beq.n	8006fa0 <_reclaim_reent+0xa4>
 8006f08:	69c3      	ldr	r3, [r0, #28]
 8006f0a:	b143      	cbz	r3, 8006f1e <_reclaim_reent+0x22>
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d144      	bne.n	8006f9c <_reclaim_reent+0xa0>
 8006f12:	69e3      	ldr	r3, [r4, #28]
 8006f14:	6819      	ldr	r1, [r3, #0]
 8006f16:	b111      	cbz	r1, 8006f1e <_reclaim_reent+0x22>
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f000 f879 	bl	8007010 <_free_r>
 8006f1e:	6961      	ldr	r1, [r4, #20]
 8006f20:	b111      	cbz	r1, 8006f28 <_reclaim_reent+0x2c>
 8006f22:	4620      	mov	r0, r4
 8006f24:	f000 f874 	bl	8007010 <_free_r>
 8006f28:	69e1      	ldr	r1, [r4, #28]
 8006f2a:	b111      	cbz	r1, 8006f32 <_reclaim_reent+0x36>
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f000 f86f 	bl	8007010 <_free_r>
 8006f32:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006f34:	b111      	cbz	r1, 8006f3c <_reclaim_reent+0x40>
 8006f36:	4620      	mov	r0, r4
 8006f38:	f000 f86a 	bl	8007010 <_free_r>
 8006f3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f3e:	b111      	cbz	r1, 8006f46 <_reclaim_reent+0x4a>
 8006f40:	4620      	mov	r0, r4
 8006f42:	f000 f865 	bl	8007010 <_free_r>
 8006f46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f48:	b111      	cbz	r1, 8006f50 <_reclaim_reent+0x54>
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	f000 f860 	bl	8007010 <_free_r>
 8006f50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006f52:	b111      	cbz	r1, 8006f5a <_reclaim_reent+0x5e>
 8006f54:	4620      	mov	r0, r4
 8006f56:	f000 f85b 	bl	8007010 <_free_r>
 8006f5a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006f5c:	b111      	cbz	r1, 8006f64 <_reclaim_reent+0x68>
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f000 f856 	bl	8007010 <_free_r>
 8006f64:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006f66:	b111      	cbz	r1, 8006f6e <_reclaim_reent+0x72>
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f000 f851 	bl	8007010 <_free_r>
 8006f6e:	6a23      	ldr	r3, [r4, #32]
 8006f70:	b1b3      	cbz	r3, 8006fa0 <_reclaim_reent+0xa4>
 8006f72:	4620      	mov	r0, r4
 8006f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006f78:	4718      	bx	r3
 8006f7a:	5949      	ldr	r1, [r1, r5]
 8006f7c:	b941      	cbnz	r1, 8006f90 <_reclaim_reent+0x94>
 8006f7e:	3504      	adds	r5, #4
 8006f80:	69e3      	ldr	r3, [r4, #28]
 8006f82:	2d80      	cmp	r5, #128	; 0x80
 8006f84:	68d9      	ldr	r1, [r3, #12]
 8006f86:	d1f8      	bne.n	8006f7a <_reclaim_reent+0x7e>
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f000 f841 	bl	8007010 <_free_r>
 8006f8e:	e7c0      	b.n	8006f12 <_reclaim_reent+0x16>
 8006f90:	680e      	ldr	r6, [r1, #0]
 8006f92:	4620      	mov	r0, r4
 8006f94:	f000 f83c 	bl	8007010 <_free_r>
 8006f98:	4631      	mov	r1, r6
 8006f9a:	e7ef      	b.n	8006f7c <_reclaim_reent+0x80>
 8006f9c:	2500      	movs	r5, #0
 8006f9e:	e7ef      	b.n	8006f80 <_reclaim_reent+0x84>
 8006fa0:	bd70      	pop	{r4, r5, r6, pc}
 8006fa2:	bf00      	nop
 8006fa4:	2000005c 	.word	0x2000005c

08006fa8 <__libc_init_array>:
 8006fa8:	b570      	push	{r4, r5, r6, lr}
 8006faa:	4d0d      	ldr	r5, [pc, #52]	; (8006fe0 <__libc_init_array+0x38>)
 8006fac:	4c0d      	ldr	r4, [pc, #52]	; (8006fe4 <__libc_init_array+0x3c>)
 8006fae:	1b64      	subs	r4, r4, r5
 8006fb0:	10a4      	asrs	r4, r4, #2
 8006fb2:	2600      	movs	r6, #0
 8006fb4:	42a6      	cmp	r6, r4
 8006fb6:	d109      	bne.n	8006fcc <__libc_init_array+0x24>
 8006fb8:	4d0b      	ldr	r5, [pc, #44]	; (8006fe8 <__libc_init_array+0x40>)
 8006fba:	4c0c      	ldr	r4, [pc, #48]	; (8006fec <__libc_init_array+0x44>)
 8006fbc:	f000 f880 	bl	80070c0 <_init>
 8006fc0:	1b64      	subs	r4, r4, r5
 8006fc2:	10a4      	asrs	r4, r4, #2
 8006fc4:	2600      	movs	r6, #0
 8006fc6:	42a6      	cmp	r6, r4
 8006fc8:	d105      	bne.n	8006fd6 <__libc_init_array+0x2e>
 8006fca:	bd70      	pop	{r4, r5, r6, pc}
 8006fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fd0:	4798      	blx	r3
 8006fd2:	3601      	adds	r6, #1
 8006fd4:	e7ee      	b.n	8006fb4 <__libc_init_array+0xc>
 8006fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fda:	4798      	blx	r3
 8006fdc:	3601      	adds	r6, #1
 8006fde:	e7f2      	b.n	8006fc6 <__libc_init_array+0x1e>
 8006fe0:	080072f4 	.word	0x080072f4
 8006fe4:	080072f4 	.word	0x080072f4
 8006fe8:	080072f4 	.word	0x080072f4
 8006fec:	080072f8 	.word	0x080072f8

08006ff0 <__retarget_lock_acquire_recursive>:
 8006ff0:	4770      	bx	lr

08006ff2 <__retarget_lock_release_recursive>:
 8006ff2:	4770      	bx	lr

08006ff4 <memcpy>:
 8006ff4:	440a      	add	r2, r1
 8006ff6:	4291      	cmp	r1, r2
 8006ff8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006ffc:	d100      	bne.n	8007000 <memcpy+0xc>
 8006ffe:	4770      	bx	lr
 8007000:	b510      	push	{r4, lr}
 8007002:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800700a:	4291      	cmp	r1, r2
 800700c:	d1f9      	bne.n	8007002 <memcpy+0xe>
 800700e:	bd10      	pop	{r4, pc}

08007010 <_free_r>:
 8007010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007012:	2900      	cmp	r1, #0
 8007014:	d044      	beq.n	80070a0 <_free_r+0x90>
 8007016:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800701a:	9001      	str	r0, [sp, #4]
 800701c:	2b00      	cmp	r3, #0
 800701e:	f1a1 0404 	sub.w	r4, r1, #4
 8007022:	bfb8      	it	lt
 8007024:	18e4      	addlt	r4, r4, r3
 8007026:	f000 f83f 	bl	80070a8 <__malloc_lock>
 800702a:	4a1e      	ldr	r2, [pc, #120]	; (80070a4 <_free_r+0x94>)
 800702c:	9801      	ldr	r0, [sp, #4]
 800702e:	6813      	ldr	r3, [r2, #0]
 8007030:	b933      	cbnz	r3, 8007040 <_free_r+0x30>
 8007032:	6063      	str	r3, [r4, #4]
 8007034:	6014      	str	r4, [r2, #0]
 8007036:	b003      	add	sp, #12
 8007038:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800703c:	f000 b83a 	b.w	80070b4 <__malloc_unlock>
 8007040:	42a3      	cmp	r3, r4
 8007042:	d908      	bls.n	8007056 <_free_r+0x46>
 8007044:	6825      	ldr	r5, [r4, #0]
 8007046:	1961      	adds	r1, r4, r5
 8007048:	428b      	cmp	r3, r1
 800704a:	bf01      	itttt	eq
 800704c:	6819      	ldreq	r1, [r3, #0]
 800704e:	685b      	ldreq	r3, [r3, #4]
 8007050:	1949      	addeq	r1, r1, r5
 8007052:	6021      	streq	r1, [r4, #0]
 8007054:	e7ed      	b.n	8007032 <_free_r+0x22>
 8007056:	461a      	mov	r2, r3
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	b10b      	cbz	r3, 8007060 <_free_r+0x50>
 800705c:	42a3      	cmp	r3, r4
 800705e:	d9fa      	bls.n	8007056 <_free_r+0x46>
 8007060:	6811      	ldr	r1, [r2, #0]
 8007062:	1855      	adds	r5, r2, r1
 8007064:	42a5      	cmp	r5, r4
 8007066:	d10b      	bne.n	8007080 <_free_r+0x70>
 8007068:	6824      	ldr	r4, [r4, #0]
 800706a:	4421      	add	r1, r4
 800706c:	1854      	adds	r4, r2, r1
 800706e:	42a3      	cmp	r3, r4
 8007070:	6011      	str	r1, [r2, #0]
 8007072:	d1e0      	bne.n	8007036 <_free_r+0x26>
 8007074:	681c      	ldr	r4, [r3, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	6053      	str	r3, [r2, #4]
 800707a:	440c      	add	r4, r1
 800707c:	6014      	str	r4, [r2, #0]
 800707e:	e7da      	b.n	8007036 <_free_r+0x26>
 8007080:	d902      	bls.n	8007088 <_free_r+0x78>
 8007082:	230c      	movs	r3, #12
 8007084:	6003      	str	r3, [r0, #0]
 8007086:	e7d6      	b.n	8007036 <_free_r+0x26>
 8007088:	6825      	ldr	r5, [r4, #0]
 800708a:	1961      	adds	r1, r4, r5
 800708c:	428b      	cmp	r3, r1
 800708e:	bf04      	itt	eq
 8007090:	6819      	ldreq	r1, [r3, #0]
 8007092:	685b      	ldreq	r3, [r3, #4]
 8007094:	6063      	str	r3, [r4, #4]
 8007096:	bf04      	itt	eq
 8007098:	1949      	addeq	r1, r1, r5
 800709a:	6021      	streq	r1, [r4, #0]
 800709c:	6054      	str	r4, [r2, #4]
 800709e:	e7ca      	b.n	8007036 <_free_r+0x26>
 80070a0:	b003      	add	sp, #12
 80070a2:	bd30      	pop	{r4, r5, pc}
 80070a4:	20001c40 	.word	0x20001c40

080070a8 <__malloc_lock>:
 80070a8:	4801      	ldr	r0, [pc, #4]	; (80070b0 <__malloc_lock+0x8>)
 80070aa:	f7ff bfa1 	b.w	8006ff0 <__retarget_lock_acquire_recursive>
 80070ae:	bf00      	nop
 80070b0:	20001c3c 	.word	0x20001c3c

080070b4 <__malloc_unlock>:
 80070b4:	4801      	ldr	r0, [pc, #4]	; (80070bc <__malloc_unlock+0x8>)
 80070b6:	f7ff bf9c 	b.w	8006ff2 <__retarget_lock_release_recursive>
 80070ba:	bf00      	nop
 80070bc:	20001c3c 	.word	0x20001c3c

080070c0 <_init>:
 80070c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c2:	bf00      	nop
 80070c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070c6:	bc08      	pop	{r3}
 80070c8:	469e      	mov	lr, r3
 80070ca:	4770      	bx	lr

080070cc <_fini>:
 80070cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ce:	bf00      	nop
 80070d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070d2:	bc08      	pop	{r3}
 80070d4:	469e      	mov	lr, r3
 80070d6:	4770      	bx	lr
