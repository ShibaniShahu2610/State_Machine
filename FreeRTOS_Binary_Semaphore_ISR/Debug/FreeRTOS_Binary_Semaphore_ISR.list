
FreeRTOS_Binary_Semaphore_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078f4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08007aa4  08007aa4  00017aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cb8  08007cb8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007cb8  08007cb8  00017cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cc0  08007cc0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cc0  08007cc0  00017cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cc4  08007cc4  00017cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf8  2000006c  08007d34  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c64  08007d34  00021c64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c16e  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038ba  00000000  00000000  0003c24d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001760  00000000  00000000  0003fb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001224  00000000  00000000  00041268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004979  00000000  00000000  0004248c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019364  00000000  00000000  00046e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f2f0  00000000  00000000  00060169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000068c0  00000000  00000000  0016f45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00175d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007a8c 	.word	0x08007a8c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08007a8c 	.word	0x08007a8c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fbd7 	bl	8000ca2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f840 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f8bc 	bl	8000674 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004fc:	f000 f88e 	bl	800061c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000500:	f003 faf8 	bl	8003af4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySem */
  BinarySemHandle = osSemaphoreNew(1, 1, &BinarySem_attributes);
 8000504:	4a11      	ldr	r2, [pc, #68]	; (800054c <main+0x60>)
 8000506:	2101      	movs	r1, #1
 8000508:	2001      	movs	r0, #1
 800050a:	f003 fbea 	bl	8003ce2 <osSemaphoreNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a0f      	ldr	r2, [pc, #60]	; (8000550 <main+0x64>)
 8000512:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Normal_Task */
  Normal_TaskHandle = osThreadNew(Start_Normal_Task, NULL, &Normal_Task_attributes);
 8000514:	4a0f      	ldr	r2, [pc, #60]	; (8000554 <main+0x68>)
 8000516:	2100      	movs	r1, #0
 8000518:	480f      	ldr	r0, [pc, #60]	; (8000558 <main+0x6c>)
 800051a:	f003 fb35 	bl	8003b88 <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a0e      	ldr	r2, [pc, #56]	; (800055c <main+0x70>)
 8000522:	6013      	str	r3, [r2, #0]

  /* creation of High_Task */
  High_TaskHandle = osThreadNew(Start_High_Task, NULL, &High_Task_attributes);
 8000524:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <main+0x74>)
 8000526:	2100      	movs	r1, #0
 8000528:	480e      	ldr	r0, [pc, #56]	; (8000564 <main+0x78>)
 800052a:	f003 fb2d 	bl	8003b88 <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <main+0x7c>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of Low_Task */
  Low_TaskHandle = osThreadNew(Start_Low_Task, NULL, &Low_Task_attributes);
 8000534:	4a0d      	ldr	r2, [pc, #52]	; (800056c <main+0x80>)
 8000536:	2100      	movs	r1, #0
 8000538:	480d      	ldr	r0, [pc, #52]	; (8000570 <main+0x84>)
 800053a:	f003 fb25 	bl	8003b88 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a0c      	ldr	r2, [pc, #48]	; (8000574 <main+0x88>)
 8000542:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000544:	f003 fafa 	bl	8003b3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0x5c>
 800054a:	bf00      	nop
 800054c:	08007c60 	.word	0x08007c60
 8000550:	2000011c 	.word	0x2000011c
 8000554:	08007bf4 	.word	0x08007bf4
 8000558:	080007a9 	.word	0x080007a9
 800055c:	20000110 	.word	0x20000110
 8000560:	08007c18 	.word	0x08007c18
 8000564:	080007ed 	.word	0x080007ed
 8000568:	20000114 	.word	0x20000114
 800056c:	08007c3c 	.word	0x08007c3c
 8000570:	08000845 	.word	0x08000845
 8000574:	20000118 	.word	0x20000118

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b096      	sub	sp, #88	; 0x58
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2244      	movs	r2, #68	; 0x44
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f006 ff66 	bl	8007458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	463b      	mov	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800059a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800059e:	f000 fe6b 	bl	8001278 <HAL_PWREx_ControlVoltageScaling>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a8:	f000 f972 	bl	8000890 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ac:	2302      	movs	r3, #2
 80005ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b6:	2340      	movs	r3, #64	; 0x40
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005be:	2302      	movs	r3, #2
 80005c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005c6:	230a      	movs	r3, #10
 80005c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 feb2 	bl	8001344 <HAL_RCC_OscConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005e6:	f000 f953 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ee:	2303      	movs	r3, #3
 80005f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000600:	463b      	mov	r3, r7
 8000602:	2104      	movs	r1, #4
 8000604:	4618      	mov	r0, r3
 8000606:	f001 fab7 	bl	8001b78 <HAL_RCC_ClockConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000610:	f000 f93e 	bl	8000890 <Error_Handler>
  }
}
 8000614:	bf00      	nop
 8000616:	3758      	adds	r7, #88	; 0x58
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_LPUART1_UART_Init+0x50>)
 8000622:	4a13      	ldr	r2, [pc, #76]	; (8000670 <MX_LPUART1_UART_Init+0x54>)
 8000624:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_LPUART1_UART_Init+0x50>)
 8000628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800062c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_LPUART1_UART_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000634:	4b0d      	ldr	r3, [pc, #52]	; (800066c <MX_LPUART1_UART_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800063a:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_LPUART1_UART_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <MX_LPUART1_UART_Init+0x50>)
 8000642:	220c      	movs	r2, #12
 8000644:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_LPUART1_UART_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <MX_LPUART1_UART_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_LPUART1_UART_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_LPUART1_UART_Init+0x50>)
 800065a:	f002 fc61 	bl	8002f20 <HAL_UART_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000664:	f000 f914 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000088 	.word	0x20000088
 8000670:	40008000 	.word	0x40008000

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	; 0x28
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	4b2f      	ldr	r3, [pc, #188]	; (8000748 <MX_GPIO_Init+0xd4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	4a2e      	ldr	r2, [pc, #184]	; (8000748 <MX_GPIO_Init+0xd4>)
 8000690:	f043 0304 	orr.w	r3, r3, #4
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b2c      	ldr	r3, [pc, #176]	; (8000748 <MX_GPIO_Init+0xd4>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0304 	and.w	r3, r3, #4
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006a2:	4b29      	ldr	r3, [pc, #164]	; (8000748 <MX_GPIO_Init+0xd4>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	4a28      	ldr	r2, [pc, #160]	; (8000748 <MX_GPIO_Init+0xd4>)
 80006a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ae:	4b26      	ldr	r3, [pc, #152]	; (8000748 <MX_GPIO_Init+0xd4>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 80006ba:	f000 fe33 	bl	8001324 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b22      	ldr	r3, [pc, #136]	; (8000748 <MX_GPIO_Init+0xd4>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a21      	ldr	r2, [pc, #132]	; (8000748 <MX_GPIO_Init+0xd4>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <MX_GPIO_Init+0xd4>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <MX_GPIO_Init+0xd4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	4a1b      	ldr	r2, [pc, #108]	; (8000748 <MX_GPIO_Init+0xd4>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_GPIO_Init+0xd4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	4816      	ldr	r0, [pc, #88]	; (800074c <MX_GPIO_Init+0xd8>)
 80006f4:	f000 fd82 	bl	80011fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_BUTTON_Pin */
  GPIO_InitStruct.Pin = BSP_BUTTON_Pin;
 80006f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BSP_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4619      	mov	r1, r3
 800070e:	4810      	ldr	r0, [pc, #64]	; (8000750 <MX_GPIO_Init+0xdc>)
 8000710:	f000 fbe2 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BSP_LED_Pin */
  GPIO_InitStruct.Pin = BSP_LED_Pin;
 8000714:	2380      	movs	r3, #128	; 0x80
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	4619      	mov	r1, r3
 800072a:	4808      	ldr	r0, [pc, #32]	; (800074c <MX_GPIO_Init+0xd8>)
 800072c:	f000 fbd4 	bl	8000ed8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2105      	movs	r1, #5
 8000734:	2028      	movs	r0, #40	; 0x28
 8000736:	f000 fba5 	bl	8000e84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800073a:	2028      	movs	r0, #40	; 0x28
 800073c:	f000 fbbe 	bl	8000ebc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000740:	bf00      	nop
 8000742:	3728      	adds	r7, #40	; 0x28
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	48000400 	.word	0x48000400
 8000750:	48000800 	.word	0x48000800

08000754 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 800075e:	88fb      	ldrh	r3, [r7, #6]
 8000760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000764:	d115      	bne.n	8000792 <HAL_GPIO_EXTI_Callback+0x3e>
  {
	  uint32_t current_time = HAL_GetTick(); // Get the current time in milliseconds
 8000766:	f000 fac9 	bl	8000cfc <HAL_GetTick>
 800076a:	60f8      	str	r0, [r7, #12]

	      // Check if the debounce time has passed
	      if ((current_time - last_debounce_time) >= debounce_delay)
 800076c:	4b0b      	ldr	r3, [pc, #44]	; (800079c <HAL_GPIO_EXTI_Callback+0x48>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	68fa      	ldr	r2, [r7, #12]
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000778:	4293      	cmp	r3, r2
 800077a:	d30a      	bcc.n	8000792 <HAL_GPIO_EXTI_Callback+0x3e>
	      {
	        osSemaphoreRelease(BinarySemHandle);
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <HAL_GPIO_EXTI_Callback+0x4c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4618      	mov	r0, r3
 8000782:	f003 fb89 	bl	8003e98 <osSemaphoreRelease>
	        printf("\r\nNormal Task: Semaphore released, task completed.\r\n");
 8000786:	4807      	ldr	r0, [pc, #28]	; (80007a4 <HAL_GPIO_EXTI_Callback+0x50>)
 8000788:	f006 fd86 	bl	8007298 <puts>
	        // Update the last debounce time
	        last_debounce_time = current_time;
 800078c:	4a03      	ldr	r2, [pc, #12]	; (800079c <HAL_GPIO_EXTI_Callback+0x48>)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	6013      	str	r3, [r2, #0]
	      }
  }
}
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000120 	.word	0x20000120
 80007a0:	2000011c 	.word	0x2000011c
 80007a4:	08007ad4 	.word	0x08007ad4

080007a8 <Start_Normal_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Normal_Task */
void Start_Normal_Task(void *argument)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	    osSemaphoreAcquire(BinarySemHandle, osWaitForever);
 80007b0:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <Start_Normal_Task+0x38>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 fb1b 	bl	8003df4 <osSemaphoreAcquire>

	    printf("\r\nNormal Task: Semaphore acquired, performing task...\r\n");
 80007be:	4809      	ldr	r0, [pc, #36]	; (80007e4 <Start_Normal_Task+0x3c>)
 80007c0:	f006 fd6a 	bl	8007298 <puts>

	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2180      	movs	r1, #128	; 0x80
 80007c8:	4807      	ldr	r0, [pc, #28]	; (80007e8 <Start_Normal_Task+0x40>)
 80007ca:	f000 fd17 	bl	80011fc <HAL_GPIO_WritePin>
	    osDelay(1000);
 80007ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d2:	f003 fa6b 	bl	8003cac <osDelay>
	    // for high task and continue to execute the low task

//	    osSemaphoreRelease(BinarySemHandle);
//	    printf("\r\nNormal Task: Semaphore released, task completed.\r\n");

	    osDelay(1000);  // Ensure some delay to avoid busy looping
 80007d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007da:	f003 fa67 	bl	8003cac <osDelay>
	    osSemaphoreAcquire(BinarySemHandle, osWaitForever);
 80007de:	e7e7      	b.n	80007b0 <Start_Normal_Task+0x8>
 80007e0:	2000011c 	.word	0x2000011c
 80007e4:	08007b08 	.word	0x08007b08
 80007e8:	48000400 	.word	0x48000400

080007ec <Start_High_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_High_Task */
void Start_High_Task(void *argument)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_High_Task */
  /* Infinite loop */
  for(;;)
  {

	    osSemaphoreAcquire(BinarySemHandle, osWaitForever);
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <Start_High_Task+0x48>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007fc:	4618      	mov	r0, r3
 80007fe:	f003 faf9 	bl	8003df4 <osSemaphoreAcquire>

	    printf("\r\nHigh Task: Semaphore acquired, performing task...\r\n");
 8000802:	480d      	ldr	r0, [pc, #52]	; (8000838 <Start_High_Task+0x4c>)
 8000804:	f006 fd48 	bl	8007298 <puts>

	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2180      	movs	r1, #128	; 0x80
 800080c:	480b      	ldr	r0, [pc, #44]	; (800083c <Start_High_Task+0x50>)
 800080e:	f000 fcf5 	bl	80011fc <HAL_GPIO_WritePin>
	    osDelay(1000);
 8000812:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000816:	f003 fa49 	bl	8003cac <osDelay>

	    // below line that release the semaphore
	    // if i comment this line it will not allow to acquire semaphore
	    // for normal task and continue to execute the low task

	    osSemaphoreRelease(BinarySemHandle);
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <Start_High_Task+0x48>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4618      	mov	r0, r3
 8000820:	f003 fb3a 	bl	8003e98 <osSemaphoreRelease>
	    printf("\r\nHigh Task: Semaphore released, task completed.\r\n");
 8000824:	4806      	ldr	r0, [pc, #24]	; (8000840 <Start_High_Task+0x54>)
 8000826:	f006 fd37 	bl	8007298 <puts>

	    osDelay(1000);
 800082a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800082e:	f003 fa3d 	bl	8003cac <osDelay>
	    osSemaphoreAcquire(BinarySemHandle, osWaitForever);
 8000832:	e7df      	b.n	80007f4 <Start_High_Task+0x8>
 8000834:	2000011c 	.word	0x2000011c
 8000838:	08007b40 	.word	0x08007b40
 800083c:	48000400 	.word	0x48000400
 8000840:	08007b78 	.word	0x08007b78

08000844 <Start_Low_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Low_Task */
void Start_Low_Task(void *argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Low_Task */
  /* Infinite loop */
  for(;;)
  {
	    printf("\r\nEntered into LOW TASK\r\n");
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <Start_Low_Task+0x20>)
 800084e:	f006 fd23 	bl	8007298 <puts>

	    printf("Leaving LOW TASK\r\n");
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <Start_Low_Task+0x24>)
 8000854:	f006 fd20 	bl	8007298 <puts>

	    osDelay(1000);
 8000858:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800085c:	f003 fa26 	bl	8003cac <osDelay>
	    printf("\r\nEntered into LOW TASK\r\n");
 8000860:	e7f4      	b.n	800084c <Start_Low_Task+0x8>
 8000862:	bf00      	nop
 8000864:	08007bac 	.word	0x08007bac
 8000868:	08007bc8 	.word	0x08007bc8

0800086c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d101      	bne.n	8000882 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800087e:	f000 fa29 	bl	8000cd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40001000 	.word	0x40001000

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	e7fe      	b.n	8000898 <Error_Handler+0x8>
	...

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <HAL_MspInit+0x4c>)
 80008a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a6:	4a10      	ldr	r2, [pc, #64]	; (80008e8 <HAL_MspInit+0x4c>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6613      	str	r3, [r2, #96]	; 0x60
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <HAL_MspInit+0x4c>)
 80008b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <HAL_MspInit+0x4c>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6593      	str	r3, [r2, #88]	; 0x58
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	210f      	movs	r1, #15
 80008d6:	f06f 0001 	mvn.w	r0, #1
 80008da:	f000 fad3 	bl	8000e84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0ac      	sub	sp, #176	; 0xb0
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	228c      	movs	r2, #140	; 0x8c
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f006 fda3 	bl	8007458 <memset>
  if(huart->Instance==LPUART1)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a22      	ldr	r2, [pc, #136]	; (80009a0 <HAL_UART_MspInit+0xb4>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d13d      	bne.n	8000998 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800091c:	2320      	movs	r3, #32
 800091e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000920:	2300      	movs	r3, #0
 8000922:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4618      	mov	r0, r3
 800092a:	f001 fb7b 	bl	8002024 <HAL_RCCEx_PeriphCLKConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000934:	f7ff ffac 	bl	8000890 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000938:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <HAL_UART_MspInit+0xb8>)
 800093a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800093c:	4a19      	ldr	r2, [pc, #100]	; (80009a4 <HAL_UART_MspInit+0xb8>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000944:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <HAL_UART_MspInit+0xb8>)
 8000946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000950:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <HAL_UART_MspInit+0xb8>)
 8000952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000954:	4a13      	ldr	r2, [pc, #76]	; (80009a4 <HAL_UART_MspInit+0xb8>)
 8000956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800095a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_UART_MspInit+0xb8>)
 800095e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000968:	f000 fcdc 	bl	8001324 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800096c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000970:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000986:	2308      	movs	r3, #8
 8000988:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800098c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000990:	4619      	mov	r1, r3
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <HAL_UART_MspInit+0xbc>)
 8000994:	f000 faa0 	bl	8000ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000998:	bf00      	nop
 800099a:	37b0      	adds	r7, #176	; 0xb0
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40008000 	.word	0x40008000
 80009a4:	40021000 	.word	0x40021000
 80009a8:	48001800 	.word	0x48001800

080009ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08e      	sub	sp, #56	; 0x38
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009b4:	2300      	movs	r3, #0
 80009b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009ba:	4b34      	ldr	r3, [pc, #208]	; (8000a8c <HAL_InitTick+0xe0>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009be:	4a33      	ldr	r2, [pc, #204]	; (8000a8c <HAL_InitTick+0xe0>)
 80009c0:	f043 0310 	orr.w	r3, r3, #16
 80009c4:	6593      	str	r3, [r2, #88]	; 0x58
 80009c6:	4b31      	ldr	r3, [pc, #196]	; (8000a8c <HAL_InitTick+0xe0>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ca:	f003 0310 	and.w	r3, r3, #16
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009d2:	f107 0210 	add.w	r2, r7, #16
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4611      	mov	r1, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 fa8f 	bl	8001f00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009e2:	6a3b      	ldr	r3, [r7, #32]
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d103      	bne.n	80009f4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009ec:	f001 fa5c 	bl	8001ea8 <HAL_RCC_GetPCLK1Freq>
 80009f0:	6378      	str	r0, [r7, #52]	; 0x34
 80009f2:	e004      	b.n	80009fe <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009f4:	f001 fa58 	bl	8001ea8 <HAL_RCC_GetPCLK1Freq>
 80009f8:	4603      	mov	r3, r0
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a00:	4a23      	ldr	r2, [pc, #140]	; (8000a90 <HAL_InitTick+0xe4>)
 8000a02:	fba2 2303 	umull	r2, r3, r2, r3
 8000a06:	0c9b      	lsrs	r3, r3, #18
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a0c:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <HAL_InitTick+0xe8>)
 8000a0e:	4a22      	ldr	r2, [pc, #136]	; (8000a98 <HAL_InitTick+0xec>)
 8000a10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a12:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <HAL_InitTick+0xe8>)
 8000a14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a18:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a1a:	4a1e      	ldr	r2, [pc, #120]	; (8000a94 <HAL_InitTick+0xe8>)
 8000a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a20:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <HAL_InitTick+0xe8>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a26:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <HAL_InitTick+0xe8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2c:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <HAL_InitTick+0xe8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a32:	4818      	ldr	r0, [pc, #96]	; (8000a94 <HAL_InitTick+0xe8>)
 8000a34:	f001 ffc0 	bl	80029b8 <HAL_TIM_Base_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d11b      	bne.n	8000a7e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a46:	4813      	ldr	r0, [pc, #76]	; (8000a94 <HAL_InitTick+0xe8>)
 8000a48:	f002 f818 	bl	8002a7c <HAL_TIM_Base_Start_IT>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d111      	bne.n	8000a7e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a5a:	2036      	movs	r0, #54	; 0x36
 8000a5c:	f000 fa2e 	bl	8000ebc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b0f      	cmp	r3, #15
 8000a64:	d808      	bhi.n	8000a78 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a66:	2200      	movs	r2, #0
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	2036      	movs	r0, #54	; 0x36
 8000a6c:	f000 fa0a 	bl	8000e84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a70:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <HAL_InitTick+0xf0>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
 8000a76:	e002      	b.n	8000a7e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3738      	adds	r7, #56	; 0x38
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	431bde83 	.word	0x431bde83
 8000a94:	20000124 	.word	0x20000124
 8000a98:	40001000 	.word	0x40001000
 8000a9c:	20000004 	.word	0x20000004

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <UsageFault_Handler+0x4>

08000abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BSP_BUTTON_Pin);
 8000ad0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ad4:	f000 fbaa 	bl	800122c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <TIM6_DAC_IRQHandler+0x10>)
 8000ae2:	f002 f83b 	bl	8002b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000124 	.word	0x20000124

08000af0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	e00a      	b.n	8000b18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b02:	f3af 8000 	nop.w
 8000b06:	4601      	mov	r1, r0
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	60ba      	str	r2, [r7, #8]
 8000b0e:	b2ca      	uxtb	r2, r1
 8000b10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3301      	adds	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	dbf0      	blt.n	8000b02 <_read+0x12>
  }

  return len;
 8000b20:	687b      	ldr	r3, [r7, #4]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (unsigned char const *) ptr, len, 2000);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b40:	68b9      	ldr	r1, [r7, #8]
 8000b42:	4804      	ldr	r0, [pc, #16]	; (8000b54 <_write+0x28>)
 8000b44:	f002 fa3a 	bl	8002fbc <HAL_UART_Transmit>
  return len;
 8000b48:	687b      	ldr	r3, [r7, #4]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000088 	.word	0x20000088

08000b58 <_close>:

int _close(int file)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b80:	605a      	str	r2, [r3, #4]
  return 0;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_isatty>:

int _isatty(int file)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b98:	2301      	movs	r3, #1
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b085      	sub	sp, #20
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	60f8      	str	r0, [r7, #12]
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc8:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <_sbrk+0x5c>)
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <_sbrk+0x60>)
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d102      	bne.n	8000be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <_sbrk+0x64>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <_sbrk+0x68>)
 8000be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d207      	bcs.n	8000c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf0:	f006 fcd6 	bl	80075a0 <__errno>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bfe:	e009      	b.n	8000c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <_sbrk+0x64>)
 8000c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c12:	68fb      	ldr	r3, [r7, #12]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20050000 	.word	0x20050000
 8000c20:	00000400 	.word	0x00000400
 8000c24:	20000170 	.word	0x20000170
 8000c28:	20001c68 	.word	0x20001c68

08000c2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <SystemInit+0x20>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <SystemInit+0x20>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c54:	f7ff ffea 	bl	8000c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c58:	480c      	ldr	r0, [pc, #48]	; (8000c8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5a:	490d      	ldr	r1, [pc, #52]	; (8000c90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <LoopForever+0xe>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c70:	4c0a      	ldr	r4, [pc, #40]	; (8000c9c <LoopForever+0x16>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f006 fc95 	bl	80075ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c82:	f7ff fc33 	bl	80004ec <main>

08000c86 <LoopForever>:

LoopForever:
    b LoopForever
 8000c86:	e7fe      	b.n	8000c86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c88:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c94:	08007cc8 	.word	0x08007cc8
  ldr r2, =_sbss
 8000c98:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c9c:	20001c64 	.word	0x20001c64

08000ca0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC1_2_IRQHandler>

08000ca2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f8de 	bl	8000e6e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb2:	200f      	movs	r0, #15
 8000cb4:	f7ff fe7a 	bl	80009ac <HAL_InitTick>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	71fb      	strb	r3, [r7, #7]
 8000cc2:	e001      	b.n	8000cc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc4:	f7ff fdea 	bl	800089c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20000174 	.word	0x20000174

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000174 	.word	0x20000174

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db0b      	blt.n	8000da2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 021f 	and.w	r2, r3, #31
 8000d90:	4907      	ldr	r1, [pc, #28]	; (8000db0 <__NVIC_EnableIRQ+0x38>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	2001      	movs	r0, #1
 8000d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	490c      	ldr	r1, [pc, #48]	; (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	0112      	lsls	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4908      	ldr	r1, [pc, #32]	; (8000e04 <__NVIC_SetPriority+0x50>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	3b04      	subs	r3, #4
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf28      	it	cs
 8000e26:	2304      	movcs	r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b03      	subs	r3, #3
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43da      	mvns	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43d9      	mvns	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	4313      	orrs	r3, r2
         );
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	; 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ff4c 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e96:	f7ff ff61 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000e9a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	68b9      	ldr	r1, [r7, #8]
 8000ea0:	6978      	ldr	r0, [r7, #20]
 8000ea2:	f7ff ffb1 	bl	8000e08 <NVIC_EncodePriority>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eac:	4611      	mov	r1, r2
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff ff80 	bl	8000db4 <__NVIC_SetPriority>
}
 8000eb4:	bf00      	nop
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff54 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b087      	sub	sp, #28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee6:	e166      	b.n	80011b6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	2101      	movs	r1, #1
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 8158 	beq.w	80011b0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d005      	beq.n	8000f18 <HAL_GPIO_Init+0x40>
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d130      	bne.n	8000f7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	68da      	ldr	r2, [r3, #12]
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f4e:	2201      	movs	r2, #1
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	091b      	lsrs	r3, r3, #4
 8000f64:	f003 0201 	and.w	r2, r3, #1
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d017      	beq.n	8000fb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	2203      	movs	r2, #3
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d123      	bne.n	800100a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	08da      	lsrs	r2, r3, #3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3208      	adds	r2, #8
 8000fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	220f      	movs	r2, #15
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	691a      	ldr	r2, [r3, #16]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	08da      	lsrs	r2, r3, #3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3208      	adds	r2, #8
 8001004:	6939      	ldr	r1, [r7, #16]
 8001006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	2203      	movs	r2, #3
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0203 	and.w	r2, r3, #3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 80b2 	beq.w	80011b0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104c:	4b61      	ldr	r3, [pc, #388]	; (80011d4 <HAL_GPIO_Init+0x2fc>)
 800104e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001050:	4a60      	ldr	r2, [pc, #384]	; (80011d4 <HAL_GPIO_Init+0x2fc>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	6613      	str	r3, [r2, #96]	; 0x60
 8001058:	4b5e      	ldr	r3, [pc, #376]	; (80011d4 <HAL_GPIO_Init+0x2fc>)
 800105a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001064:	4a5c      	ldr	r2, [pc, #368]	; (80011d8 <HAL_GPIO_Init+0x300>)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	3302      	adds	r3, #2
 800106c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	220f      	movs	r2, #15
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800108e:	d02b      	beq.n	80010e8 <HAL_GPIO_Init+0x210>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a52      	ldr	r2, [pc, #328]	; (80011dc <HAL_GPIO_Init+0x304>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d025      	beq.n	80010e4 <HAL_GPIO_Init+0x20c>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a51      	ldr	r2, [pc, #324]	; (80011e0 <HAL_GPIO_Init+0x308>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d01f      	beq.n	80010e0 <HAL_GPIO_Init+0x208>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a50      	ldr	r2, [pc, #320]	; (80011e4 <HAL_GPIO_Init+0x30c>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d019      	beq.n	80010dc <HAL_GPIO_Init+0x204>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a4f      	ldr	r2, [pc, #316]	; (80011e8 <HAL_GPIO_Init+0x310>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d013      	beq.n	80010d8 <HAL_GPIO_Init+0x200>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a4e      	ldr	r2, [pc, #312]	; (80011ec <HAL_GPIO_Init+0x314>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d00d      	beq.n	80010d4 <HAL_GPIO_Init+0x1fc>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a4d      	ldr	r2, [pc, #308]	; (80011f0 <HAL_GPIO_Init+0x318>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d007      	beq.n	80010d0 <HAL_GPIO_Init+0x1f8>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a4c      	ldr	r2, [pc, #304]	; (80011f4 <HAL_GPIO_Init+0x31c>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d101      	bne.n	80010cc <HAL_GPIO_Init+0x1f4>
 80010c8:	2307      	movs	r3, #7
 80010ca:	e00e      	b.n	80010ea <HAL_GPIO_Init+0x212>
 80010cc:	2308      	movs	r3, #8
 80010ce:	e00c      	b.n	80010ea <HAL_GPIO_Init+0x212>
 80010d0:	2306      	movs	r3, #6
 80010d2:	e00a      	b.n	80010ea <HAL_GPIO_Init+0x212>
 80010d4:	2305      	movs	r3, #5
 80010d6:	e008      	b.n	80010ea <HAL_GPIO_Init+0x212>
 80010d8:	2304      	movs	r3, #4
 80010da:	e006      	b.n	80010ea <HAL_GPIO_Init+0x212>
 80010dc:	2303      	movs	r3, #3
 80010de:	e004      	b.n	80010ea <HAL_GPIO_Init+0x212>
 80010e0:	2302      	movs	r3, #2
 80010e2:	e002      	b.n	80010ea <HAL_GPIO_Init+0x212>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <HAL_GPIO_Init+0x212>
 80010e8:	2300      	movs	r3, #0
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	f002 0203 	and.w	r2, r2, #3
 80010f0:	0092      	lsls	r2, r2, #2
 80010f2:	4093      	lsls	r3, r2
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010fa:	4937      	ldr	r1, [pc, #220]	; (80011d8 <HAL_GPIO_Init+0x300>)
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3302      	adds	r3, #2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001108:	4b3b      	ldr	r3, [pc, #236]	; (80011f8 <HAL_GPIO_Init+0x320>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800112c:	4a32      	ldr	r2, [pc, #200]	; (80011f8 <HAL_GPIO_Init+0x320>)
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001132:	4b31      	ldr	r3, [pc, #196]	; (80011f8 <HAL_GPIO_Init+0x320>)
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	43db      	mvns	r3, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001156:	4a28      	ldr	r2, [pc, #160]	; (80011f8 <HAL_GPIO_Init+0x320>)
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800115c:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <HAL_GPIO_Init+0x320>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	43db      	mvns	r3, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001180:	4a1d      	ldr	r2, [pc, #116]	; (80011f8 <HAL_GPIO_Init+0x320>)
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <HAL_GPIO_Init+0x320>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011aa:	4a13      	ldr	r2, [pc, #76]	; (80011f8 <HAL_GPIO_Init+0x320>)
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	3301      	adds	r3, #1
 80011b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	fa22 f303 	lsr.w	r3, r2, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f47f ae91 	bne.w	8000ee8 <HAL_GPIO_Init+0x10>
  }
}
 80011c6:	bf00      	nop
 80011c8:	bf00      	nop
 80011ca:	371c      	adds	r7, #28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010000 	.word	0x40010000
 80011dc:	48000400 	.word	0x48000400
 80011e0:	48000800 	.word	0x48000800
 80011e4:	48000c00 	.word	0x48000c00
 80011e8:	48001000 	.word	0x48001000
 80011ec:	48001400 	.word	0x48001400
 80011f0:	48001800 	.word	0x48001800
 80011f4:	48001c00 	.word	0x48001c00
 80011f8:	40010400 	.word	0x40010400

080011fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
 8001208:	4613      	mov	r3, r2
 800120a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800120c:	787b      	ldrb	r3, [r7, #1]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001212:	887a      	ldrh	r2, [r7, #2]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001218:	e002      	b.n	8001220 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800121a:	887a      	ldrh	r2, [r7, #2]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001238:	695a      	ldr	r2, [r3, #20]
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	4013      	ands	r3, r2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d006      	beq.n	8001250 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fa82 	bl	8000754 <HAL_GPIO_EXTI_Callback>
  }
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40010400 	.word	0x40010400

0800125c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <HAL_PWREx_GetVoltageRange+0x18>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40007000 	.word	0x40007000

08001278 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001286:	d130      	bne.n	80012ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001288:	4b23      	ldr	r3, [pc, #140]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001294:	d038      	beq.n	8001308 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800129e:	4a1e      	ldr	r2, [pc, #120]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012a6:	4b1d      	ldr	r3, [pc, #116]	; (800131c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2232      	movs	r2, #50	; 0x32
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
 80012b0:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012b2:	fba2 2303 	umull	r2, r3, r2, r3
 80012b6:	0c9b      	lsrs	r3, r3, #18
 80012b8:	3301      	adds	r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012bc:	e002      	b.n	80012c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d0:	d102      	bne.n	80012d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f2      	bne.n	80012be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e4:	d110      	bne.n	8001308 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e00f      	b.n	800130a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f6:	d007      	beq.n	8001308 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001300:	4a05      	ldr	r2, [pc, #20]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001302:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001306:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40007000 	.word	0x40007000
 800131c:	20000000 	.word	0x20000000
 8001320:	431bde83 	.word	0x431bde83

08001324 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <HAL_PWREx_EnableVddIO2+0x1c>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <HAL_PWREx_EnableVddIO2+0x1c>)
 800132e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001332:	6053      	str	r3, [r2, #4]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40007000 	.word	0x40007000

08001344 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d102      	bne.n	8001358 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	f000 bc08 	b.w	8001b68 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001358:	4b96      	ldr	r3, [pc, #600]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 030c 	and.w	r3, r3, #12
 8001360:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001362:	4b94      	ldr	r3, [pc, #592]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0310 	and.w	r3, r3, #16
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 80e4 	beq.w	8001542 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d007      	beq.n	8001390 <HAL_RCC_OscConfig+0x4c>
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	2b0c      	cmp	r3, #12
 8001384:	f040 808b 	bne.w	800149e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2b01      	cmp	r3, #1
 800138c:	f040 8087 	bne.w	800149e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001390:	4b88      	ldr	r3, [pc, #544]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_RCC_OscConfig+0x64>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e3df      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a1a      	ldr	r2, [r3, #32]
 80013ac:	4b81      	ldr	r3, [pc, #516]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d004      	beq.n	80013c2 <HAL_RCC_OscConfig+0x7e>
 80013b8:	4b7e      	ldr	r3, [pc, #504]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013c0:	e005      	b.n	80013ce <HAL_RCC_OscConfig+0x8a>
 80013c2:	4b7c      	ldr	r3, [pc, #496]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80013c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c8:	091b      	lsrs	r3, r3, #4
 80013ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d223      	bcs.n	800141a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 fdc4 	bl	8001f64 <RCC_SetFlashLatencyFromMSIRange>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e3c0      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013e6:	4b73      	ldr	r3, [pc, #460]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a72      	ldr	r2, [pc, #456]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b70      	ldr	r3, [pc, #448]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	496d      	ldr	r1, [pc, #436]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001400:	4313      	orrs	r3, r2
 8001402:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001404:	4b6b      	ldr	r3, [pc, #428]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	4968      	ldr	r1, [pc, #416]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]
 8001418:	e025      	b.n	8001466 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800141a:	4b66      	ldr	r3, [pc, #408]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a65      	ldr	r2, [pc, #404]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	4b63      	ldr	r3, [pc, #396]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	4960      	ldr	r1, [pc, #384]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001434:	4313      	orrs	r3, r2
 8001436:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001438:	4b5e      	ldr	r3, [pc, #376]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	495b      	ldr	r1, [pc, #364]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001448:	4313      	orrs	r3, r2
 800144a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d109      	bne.n	8001466 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	4618      	mov	r0, r3
 8001458:	f000 fd84 	bl	8001f64 <RCC_SetFlashLatencyFromMSIRange>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e380      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001466:	f000 fc87 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 800146a:	4602      	mov	r2, r0
 800146c:	4b51      	ldr	r3, [pc, #324]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	091b      	lsrs	r3, r3, #4
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	4950      	ldr	r1, [pc, #320]	; (80015b8 <HAL_RCC_OscConfig+0x274>)
 8001478:	5ccb      	ldrb	r3, [r1, r3]
 800147a:	f003 031f 	and.w	r3, r3, #31
 800147e:	fa22 f303 	lsr.w	r3, r2, r3
 8001482:	4a4e      	ldr	r2, [pc, #312]	; (80015bc <HAL_RCC_OscConfig+0x278>)
 8001484:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001486:	4b4e      	ldr	r3, [pc, #312]	; (80015c0 <HAL_RCC_OscConfig+0x27c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fa8e 	bl	80009ac <HAL_InitTick>
 8001490:	4603      	mov	r3, r0
 8001492:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d052      	beq.n	8001540 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	e364      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d032      	beq.n	800150c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014a6:	4b43      	ldr	r3, [pc, #268]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a42      	ldr	r2, [pc, #264]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014b2:	f7ff fc23 	bl	8000cfc <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014ba:	f7ff fc1f 	bl	8000cfc <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e34d      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014cc:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d8:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a35      	ldr	r2, [pc, #212]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80014de:	f043 0308 	orr.w	r3, r3, #8
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4930      	ldr	r1, [pc, #192]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f6:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	492b      	ldr	r1, [pc, #172]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]
 800150a:	e01a      	b.n	8001542 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800150c:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a28      	ldr	r2, [pc, #160]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001512:	f023 0301 	bic.w	r3, r3, #1
 8001516:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001518:	f7ff fbf0 	bl	8000cfc <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001520:	f7ff fbec 	bl	8000cfc <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e31a      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001532:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x1dc>
 800153e:	e000      	b.n	8001542 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001540:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d073      	beq.n	8001636 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	2b08      	cmp	r3, #8
 8001552:	d005      	beq.n	8001560 <HAL_RCC_OscConfig+0x21c>
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	2b0c      	cmp	r3, #12
 8001558:	d10e      	bne.n	8001578 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	2b03      	cmp	r3, #3
 800155e:	d10b      	bne.n	8001578 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d063      	beq.n	8001634 <HAL_RCC_OscConfig+0x2f0>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d15f      	bne.n	8001634 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e2f7      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001580:	d106      	bne.n	8001590 <HAL_RCC_OscConfig+0x24c>
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e025      	b.n	80015dc <HAL_RCC_OscConfig+0x298>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001598:	d114      	bne.n	80015c4 <HAL_RCC_OscConfig+0x280>
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80015a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a02      	ldr	r2, [pc, #8]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e013      	b.n	80015dc <HAL_RCC_OscConfig+0x298>
 80015b4:	40021000 	.word	0x40021000
 80015b8:	08007c70 	.word	0x08007c70
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000004 	.word	0x20000004
 80015c4:	4ba0      	ldr	r3, [pc, #640]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a9f      	ldr	r2, [pc, #636]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80015ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b9d      	ldr	r3, [pc, #628]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a9c      	ldr	r2, [pc, #624]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80015d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d013      	beq.n	800160c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e4:	f7ff fb8a 	bl	8000cfc <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fb86 	bl	8000cfc <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e2b4      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015fe:	4b92      	ldr	r3, [pc, #584]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x2a8>
 800160a:	e014      	b.n	8001636 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fb76 	bl	8000cfc <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fb72 	bl	8000cfc <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	; 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e2a0      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001626:	4b88      	ldr	r3, [pc, #544]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x2d0>
 8001632:	e000      	b.n	8001636 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d060      	beq.n	8001704 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	2b04      	cmp	r3, #4
 8001646:	d005      	beq.n	8001654 <HAL_RCC_OscConfig+0x310>
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	2b0c      	cmp	r3, #12
 800164c:	d119      	bne.n	8001682 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d116      	bne.n	8001682 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001654:	4b7c      	ldr	r3, [pc, #496]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <HAL_RCC_OscConfig+0x328>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e27d      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166c:	4b76      	ldr	r3, [pc, #472]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	061b      	lsls	r3, r3, #24
 800167a:	4973      	ldr	r1, [pc, #460]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 800167c:	4313      	orrs	r3, r2
 800167e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001680:	e040      	b.n	8001704 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d023      	beq.n	80016d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800168a:	4b6f      	ldr	r3, [pc, #444]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a6e      	ldr	r2, [pc, #440]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001696:	f7ff fb31 	bl	8000cfc <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169e:	f7ff fb2d 	bl	8000cfc <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e25b      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016b0:	4b65      	ldr	r3, [pc, #404]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016bc:	4b62      	ldr	r3, [pc, #392]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	061b      	lsls	r3, r3, #24
 80016ca:	495f      	ldr	r1, [pc, #380]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
 80016d0:	e018      	b.n	8001704 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d2:	4b5d      	ldr	r3, [pc, #372]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a5c      	ldr	r2, [pc, #368]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80016d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016de:	f7ff fb0d 	bl	8000cfc <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e6:	f7ff fb09 	bl	8000cfc <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e237      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016f8:	4b53      	ldr	r3, [pc, #332]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f0      	bne.n	80016e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	2b00      	cmp	r3, #0
 800170e:	d03c      	beq.n	800178a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d01c      	beq.n	8001752 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001718:	4b4b      	ldr	r3, [pc, #300]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 800171a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800171e:	4a4a      	ldr	r2, [pc, #296]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001728:	f7ff fae8 	bl	8000cfc <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001730:	f7ff fae4 	bl	8000cfc <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e212      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001742:	4b41      	ldr	r3, [pc, #260]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 8001744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0ef      	beq.n	8001730 <HAL_RCC_OscConfig+0x3ec>
 8001750:	e01b      	b.n	800178a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001752:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 8001754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001758:	4a3b      	ldr	r2, [pc, #236]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 800175a:	f023 0301 	bic.w	r3, r3, #1
 800175e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001762:	f7ff facb 	bl	8000cfc <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176a:	f7ff fac7 	bl	8000cfc <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e1f5      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800177c:	4b32      	ldr	r3, [pc, #200]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 800177e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1ef      	bne.n	800176a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 80a6 	beq.w	80018e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800179c:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 800179e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10d      	bne.n	80017c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a8:	4b27      	ldr	r3, [pc, #156]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80017aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ac:	4a26      	ldr	r2, [pc, #152]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80017ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b2:	6593      	str	r3, [r2, #88]	; 0x58
 80017b4:	4b24      	ldr	r3, [pc, #144]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80017b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017c0:	2301      	movs	r3, #1
 80017c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c4:	4b21      	ldr	r3, [pc, #132]	; (800184c <HAL_RCC_OscConfig+0x508>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d118      	bne.n	8001802 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017d0:	4b1e      	ldr	r3, [pc, #120]	; (800184c <HAL_RCC_OscConfig+0x508>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a1d      	ldr	r2, [pc, #116]	; (800184c <HAL_RCC_OscConfig+0x508>)
 80017d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017dc:	f7ff fa8e 	bl	8000cfc <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e4:	f7ff fa8a 	bl	8000cfc <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e1b8      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_RCC_OscConfig+0x508>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d108      	bne.n	800181c <HAL_RCC_OscConfig+0x4d8>
 800180a:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 800180c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001810:	4a0d      	ldr	r2, [pc, #52]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800181a:	e029      	b.n	8001870 <HAL_RCC_OscConfig+0x52c>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b05      	cmp	r3, #5
 8001822:	d115      	bne.n	8001850 <HAL_RCC_OscConfig+0x50c>
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 8001826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182a:	4a07      	ldr	r2, [pc, #28]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 8001836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183a:	4a03      	ldr	r2, [pc, #12]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001844:	e014      	b.n	8001870 <HAL_RCC_OscConfig+0x52c>
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	40007000 	.word	0x40007000
 8001850:	4b9d      	ldr	r3, [pc, #628]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 8001852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001856:	4a9c      	ldr	r2, [pc, #624]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001860:	4b99      	ldr	r3, [pc, #612]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 8001862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001866:	4a98      	ldr	r2, [pc, #608]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 8001868:	f023 0304 	bic.w	r3, r3, #4
 800186c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d016      	beq.n	80018a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff fa40 	bl	8000cfc <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800187e:	e00a      	b.n	8001896 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001880:	f7ff fa3c 	bl	8000cfc <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	; 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e168      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001896:	4b8c      	ldr	r3, [pc, #560]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 8001898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0ed      	beq.n	8001880 <HAL_RCC_OscConfig+0x53c>
 80018a4:	e015      	b.n	80018d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a6:	f7ff fa29 	bl	8000cfc <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018ac:	e00a      	b.n	80018c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ae:	f7ff fa25 	bl	8000cfc <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018bc:	4293      	cmp	r3, r2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e151      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018c4:	4b80      	ldr	r3, [pc, #512]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 80018c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1ed      	bne.n	80018ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018d2:	7ffb      	ldrb	r3, [r7, #31]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d105      	bne.n	80018e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d8:	4b7b      	ldr	r3, [pc, #492]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 80018da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018dc:	4a7a      	ldr	r2, [pc, #488]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 80018de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0320 	and.w	r3, r3, #32
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d03c      	beq.n	800196a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d01c      	beq.n	8001932 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018f8:	4b73      	ldr	r3, [pc, #460]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 80018fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018fe:	4a72      	ldr	r2, [pc, #456]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001908:	f7ff f9f8 	bl	8000cfc <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001910:	f7ff f9f4 	bl	8000cfc <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e122      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001922:	4b69      	ldr	r3, [pc, #420]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 8001924:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0ef      	beq.n	8001910 <HAL_RCC_OscConfig+0x5cc>
 8001930:	e01b      	b.n	800196a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001932:	4b65      	ldr	r3, [pc, #404]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 8001934:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001938:	4a63      	ldr	r2, [pc, #396]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 800193a:	f023 0301 	bic.w	r3, r3, #1
 800193e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001942:	f7ff f9db 	bl	8000cfc <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800194a:	f7ff f9d7 	bl	8000cfc <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e105      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800195c:	4b5a      	ldr	r3, [pc, #360]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 800195e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1ef      	bne.n	800194a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 80f9 	beq.w	8001b66 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	2b02      	cmp	r3, #2
 800197a:	f040 80cf 	bne.w	8001b1c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800197e:	4b52      	ldr	r3, [pc, #328]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f003 0203 	and.w	r2, r3, #3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	429a      	cmp	r2, r3
 8001990:	d12c      	bne.n	80019ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	3b01      	subs	r3, #1
 800199e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d123      	bne.n	80019ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d11b      	bne.n	80019ec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019be:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d113      	bne.n	80019ec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ce:	085b      	lsrs	r3, r3, #1
 80019d0:	3b01      	subs	r3, #1
 80019d2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d109      	bne.n	80019ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	085b      	lsrs	r3, r3, #1
 80019e4:	3b01      	subs	r3, #1
 80019e6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d071      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2b0c      	cmp	r3, #12
 80019f0:	d068      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019f2:	4b35      	ldr	r3, [pc, #212]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d105      	bne.n	8001a0a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019fe:	4b32      	ldr	r3, [pc, #200]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e0ac      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a2d      	ldr	r2, [pc, #180]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 8001a14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a18:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a1a:	f7ff f96f 	bl	8000cfc <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a22:	f7ff f96b 	bl	8000cfc <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e099      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a40:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	4b21      	ldr	r3, [pc, #132]	; (8001acc <HAL_RCC_OscConfig+0x788>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a50:	3a01      	subs	r2, #1
 8001a52:	0112      	lsls	r2, r2, #4
 8001a54:	4311      	orrs	r1, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a5a:	0212      	lsls	r2, r2, #8
 8001a5c:	4311      	orrs	r1, r2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a62:	0852      	lsrs	r2, r2, #1
 8001a64:	3a01      	subs	r2, #1
 8001a66:	0552      	lsls	r2, r2, #21
 8001a68:	4311      	orrs	r1, r2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a6e:	0852      	lsrs	r2, r2, #1
 8001a70:	3a01      	subs	r2, #1
 8001a72:	0652      	lsls	r2, r2, #25
 8001a74:	4311      	orrs	r1, r2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a7a:	06d2      	lsls	r2, r2, #27
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	4912      	ldr	r1, [pc, #72]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a84:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0f      	ldr	r2, [pc, #60]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 8001a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a90:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4a0c      	ldr	r2, [pc, #48]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 8001a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a9c:	f7ff f92e 	bl	8000cfc <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7ff f92a 	bl	8000cfc <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e058      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab6:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ac2:	e050      	b.n	8001b66 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e04f      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad0:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <HAL_RCC_OscConfig+0x82c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d144      	bne.n	8001b66 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001adc:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <HAL_RCC_OscConfig+0x82c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a23      	ldr	r2, [pc, #140]	; (8001b70 <HAL_RCC_OscConfig+0x82c>)
 8001ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ae8:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <HAL_RCC_OscConfig+0x82c>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	4a20      	ldr	r2, [pc, #128]	; (8001b70 <HAL_RCC_OscConfig+0x82c>)
 8001aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001af2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001af4:	f7ff f902 	bl	8000cfc <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afc:	f7ff f8fe 	bl	8000cfc <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e02c      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0e:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <HAL_RCC_OscConfig+0x82c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x7b8>
 8001b1a:	e024      	b.n	8001b66 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	2b0c      	cmp	r3, #12
 8001b20:	d01f      	beq.n	8001b62 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <HAL_RCC_OscConfig+0x82c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <HAL_RCC_OscConfig+0x82c>)
 8001b28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2e:	f7ff f8e5 	bl	8000cfc <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b36:	f7ff f8e1 	bl	8000cfc <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e00f      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_RCC_OscConfig+0x82c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f0      	bne.n	8001b36 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_RCC_OscConfig+0x82c>)
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	4905      	ldr	r1, [pc, #20]	; (8001b70 <HAL_RCC_OscConfig+0x82c>)
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_RCC_OscConfig+0x830>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60cb      	str	r3, [r1, #12]
 8001b60:	e001      	b.n	8001b66 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3720      	adds	r7, #32
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40021000 	.word	0x40021000
 8001b74:	feeefffc 	.word	0xfeeefffc

08001b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0e7      	b.n	8001d5c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b8c:	4b75      	ldr	r3, [pc, #468]	; (8001d64 <HAL_RCC_ClockConfig+0x1ec>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d910      	bls.n	8001bbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9a:	4b72      	ldr	r3, [pc, #456]	; (8001d64 <HAL_RCC_ClockConfig+0x1ec>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 0207 	bic.w	r2, r3, #7
 8001ba2:	4970      	ldr	r1, [pc, #448]	; (8001d64 <HAL_RCC_ClockConfig+0x1ec>)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b6e      	ldr	r3, [pc, #440]	; (8001d64 <HAL_RCC_ClockConfig+0x1ec>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0cf      	b.n	8001d5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d010      	beq.n	8001bea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	4b66      	ldr	r3, [pc, #408]	; (8001d68 <HAL_RCC_ClockConfig+0x1f0>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d908      	bls.n	8001bea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd8:	4b63      	ldr	r3, [pc, #396]	; (8001d68 <HAL_RCC_ClockConfig+0x1f0>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	4960      	ldr	r1, [pc, #384]	; (8001d68 <HAL_RCC_ClockConfig+0x1f0>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d04c      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d107      	bne.n	8001c0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bfe:	4b5a      	ldr	r3, [pc, #360]	; (8001d68 <HAL_RCC_ClockConfig+0x1f0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d121      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e0a6      	b.n	8001d5c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d107      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c16:	4b54      	ldr	r3, [pc, #336]	; (8001d68 <HAL_RCC_ClockConfig+0x1f0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d115      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e09a      	b.n	8001d5c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c2e:	4b4e      	ldr	r3, [pc, #312]	; (8001d68 <HAL_RCC_ClockConfig+0x1f0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d109      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e08e      	b.n	8001d5c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c3e:	4b4a      	ldr	r3, [pc, #296]	; (8001d68 <HAL_RCC_ClockConfig+0x1f0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e086      	b.n	8001d5c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c4e:	4b46      	ldr	r3, [pc, #280]	; (8001d68 <HAL_RCC_ClockConfig+0x1f0>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f023 0203 	bic.w	r2, r3, #3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	4943      	ldr	r1, [pc, #268]	; (8001d68 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c60:	f7ff f84c 	bl	8000cfc <HAL_GetTick>
 8001c64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c68:	f7ff f848 	bl	8000cfc <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e06e      	b.n	8001d5c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7e:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <HAL_RCC_ClockConfig+0x1f0>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 020c 	and.w	r2, r3, #12
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d1eb      	bne.n	8001c68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d010      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d208      	bcs.n	8001cbe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cac:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <HAL_RCC_ClockConfig+0x1f0>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	492b      	ldr	r1, [pc, #172]	; (8001d68 <HAL_RCC_ClockConfig+0x1f0>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cbe:	4b29      	ldr	r3, [pc, #164]	; (8001d64 <HAL_RCC_ClockConfig+0x1ec>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d210      	bcs.n	8001cee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ccc:	4b25      	ldr	r3, [pc, #148]	; (8001d64 <HAL_RCC_ClockConfig+0x1ec>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f023 0207 	bic.w	r2, r3, #7
 8001cd4:	4923      	ldr	r1, [pc, #140]	; (8001d64 <HAL_RCC_ClockConfig+0x1ec>)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cdc:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <HAL_RCC_ClockConfig+0x1ec>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e036      	b.n	8001d5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d008      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <HAL_RCC_ClockConfig+0x1f0>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	4918      	ldr	r1, [pc, #96]	; (8001d68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d009      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4910      	ldr	r1, [pc, #64]	; (8001d68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d2c:	f000 f824 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	091b      	lsrs	r3, r3, #4
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	490b      	ldr	r1, [pc, #44]	; (8001d6c <HAL_RCC_ClockConfig+0x1f4>)
 8001d3e:	5ccb      	ldrb	r3, [r1, r3]
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
 8001d48:	4a09      	ldr	r2, [pc, #36]	; (8001d70 <HAL_RCC_ClockConfig+0x1f8>)
 8001d4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d4c:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <HAL_RCC_ClockConfig+0x1fc>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fe2b 	bl	80009ac <HAL_InitTick>
 8001d56:	4603      	mov	r3, r0
 8001d58:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d5a:	7afb      	ldrb	r3, [r7, #11]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40022000 	.word	0x40022000
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	08007c70 	.word	0x08007c70
 8001d70:	20000000 	.word	0x20000000
 8001d74:	20000004 	.word	0x20000004

08001d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b089      	sub	sp, #36	; 0x24
 8001d7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	2300      	movs	r3, #0
 8001d84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d86:	4b3e      	ldr	r3, [pc, #248]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d90:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0x34>
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d121      	bne.n	8001dea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d11e      	bne.n	8001dea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001dac:	4b34      	ldr	r3, [pc, #208]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d107      	bne.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001db8:	4b31      	ldr	r3, [pc, #196]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	e005      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dc8:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dd4:	4a2b      	ldr	r2, [pc, #172]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ddc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10d      	bne.n	8001e00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001de8:	e00a      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d102      	bne.n	8001df6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001df2:	61bb      	str	r3, [r7, #24]
 8001df4:	e004      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dfc:	4b23      	ldr	r3, [pc, #140]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x114>)
 8001dfe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	2b0c      	cmp	r3, #12
 8001e04:	d134      	bne.n	8001e70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e06:	4b1e      	ldr	r3, [pc, #120]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d003      	beq.n	8001e1e <HAL_RCC_GetSysClockFreq+0xa6>
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d003      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0xac>
 8001e1c:	e005      	b.n	8001e2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e20:	617b      	str	r3, [r7, #20]
      break;
 8001e22:	e005      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x114>)
 8001e26:	617b      	str	r3, [r7, #20]
      break;
 8001e28:	e002      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	617b      	str	r3, [r7, #20]
      break;
 8001e2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e30:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	091b      	lsrs	r3, r3, #4
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	0a1b      	lsrs	r3, r3, #8
 8001e44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	fb03 f202 	mul.w	r2, r3, r2
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	0e5b      	lsrs	r3, r3, #25
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	3301      	adds	r3, #1
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e70:	69bb      	ldr	r3, [r7, #24]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3724      	adds	r7, #36	; 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
 8001e84:	08007c88 	.word	0x08007c88
 8001e88:	00f42400 	.word	0x00f42400
 8001e8c:	007a1200 	.word	0x007a1200

08001e90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e94:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20000000 	.word	0x20000000

08001ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001eac:	f7ff fff0 	bl	8001e90 <HAL_RCC_GetHCLKFreq>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	4904      	ldr	r1, [pc, #16]	; (8001ed0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ebe:	5ccb      	ldrb	r3, [r1, r3]
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	08007c80 	.word	0x08007c80

08001ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ed8:	f7ff ffda 	bl	8001e90 <HAL_RCC_GetHCLKFreq>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	0adb      	lsrs	r3, r3, #11
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	4904      	ldr	r1, [pc, #16]	; (8001efc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001eea:	5ccb      	ldrb	r3, [r1, r3]
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	08007c80 	.word	0x08007c80

08001f00 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_RCC_GetClockConfig+0x5c>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 0203 	and.w	r2, r3, #3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <HAL_RCC_GetClockConfig+0x5c>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <HAL_RCC_GetClockConfig+0x5c>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_RCC_GetClockConfig+0x5c>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	08db      	lsrs	r3, r3, #3
 8001f3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f42:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <HAL_RCC_GetClockConfig+0x60>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0207 	and.w	r2, r3, #7
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	601a      	str	r2, [r3, #0]
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40022000 	.word	0x40022000

08001f64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f70:	4b2a      	ldr	r3, [pc, #168]	; (800201c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f7c:	f7ff f96e 	bl	800125c <HAL_PWREx_GetVoltageRange>
 8001f80:	6178      	str	r0, [r7, #20]
 8001f82:	e014      	b.n	8001fae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f84:	4b25      	ldr	r3, [pc, #148]	; (800201c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f88:	4a24      	ldr	r2, [pc, #144]	; (800201c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f90:	4b22      	ldr	r3, [pc, #136]	; (800201c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f9c:	f7ff f95e 	bl	800125c <HAL_PWREx_GetVoltageRange>
 8001fa0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fa2:	4b1e      	ldr	r3, [pc, #120]	; (800201c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	4a1d      	ldr	r2, [pc, #116]	; (800201c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fb4:	d10b      	bne.n	8001fce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b80      	cmp	r3, #128	; 0x80
 8001fba:	d919      	bls.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2ba0      	cmp	r3, #160	; 0xa0
 8001fc0:	d902      	bls.n	8001fc8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	e013      	b.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fc8:	2301      	movs	r3, #1
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	e010      	b.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b80      	cmp	r3, #128	; 0x80
 8001fd2:	d902      	bls.n	8001fda <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	e00a      	b.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b80      	cmp	r3, #128	; 0x80
 8001fde:	d102      	bne.n	8001fe6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	e004      	b.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b70      	cmp	r3, #112	; 0x70
 8001fea:	d101      	bne.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fec:	2301      	movs	r3, #1
 8001fee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f023 0207 	bic.w	r2, r3, #7
 8001ff8:	4909      	ldr	r1, [pc, #36]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	429a      	cmp	r2, r3
 800200c:	d001      	beq.n	8002012 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40021000 	.word	0x40021000
 8002020:	40022000 	.word	0x40022000

08002024 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800202c:	2300      	movs	r3, #0
 800202e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002030:	2300      	movs	r3, #0
 8002032:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800203c:	2b00      	cmp	r3, #0
 800203e:	d041      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002044:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002048:	d02a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800204a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800204e:	d824      	bhi.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002050:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002054:	d008      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002056:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800205a:	d81e      	bhi.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00a      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002060:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002064:	d010      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002066:	e018      	b.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002068:	4b86      	ldr	r3, [pc, #536]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4a85      	ldr	r2, [pc, #532]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002072:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002074:	e015      	b.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3304      	adds	r3, #4
 800207a:	2100      	movs	r1, #0
 800207c:	4618      	mov	r0, r3
 800207e:	f000 facd 	bl	800261c <RCCEx_PLLSAI1_Config>
 8002082:	4603      	mov	r3, r0
 8002084:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002086:	e00c      	b.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3320      	adds	r3, #32
 800208c:	2100      	movs	r1, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f000 fbb6 	bl	8002800 <RCCEx_PLLSAI2_Config>
 8002094:	4603      	mov	r3, r0
 8002096:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002098:	e003      	b.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	74fb      	strb	r3, [r7, #19]
      break;
 800209e:	e000      	b.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80020a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020a2:	7cfb      	ldrb	r3, [r7, #19]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10b      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020a8:	4b76      	ldr	r3, [pc, #472]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020b6:	4973      	ldr	r1, [pc, #460]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020be:	e001      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020c0:	7cfb      	ldrb	r3, [r7, #19]
 80020c2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d041      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020d8:	d02a      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020de:	d824      	bhi.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020e4:	d008      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020ea:	d81e      	bhi.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f4:	d010      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020f6:	e018      	b.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020f8:	4b62      	ldr	r3, [pc, #392]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4a61      	ldr	r2, [pc, #388]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002102:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002104:	e015      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3304      	adds	r3, #4
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f000 fa85 	bl	800261c <RCCEx_PLLSAI1_Config>
 8002112:	4603      	mov	r3, r0
 8002114:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002116:	e00c      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3320      	adds	r3, #32
 800211c:	2100      	movs	r1, #0
 800211e:	4618      	mov	r0, r3
 8002120:	f000 fb6e 	bl	8002800 <RCCEx_PLLSAI2_Config>
 8002124:	4603      	mov	r3, r0
 8002126:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002128:	e003      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	74fb      	strb	r3, [r7, #19]
      break;
 800212e:	e000      	b.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002130:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002132:	7cfb      	ldrb	r3, [r7, #19]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10b      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002138:	4b52      	ldr	r3, [pc, #328]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002146:	494f      	ldr	r1, [pc, #316]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800214e:	e001      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002150:	7cfb      	ldrb	r3, [r7, #19]
 8002152:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 80a0 	beq.w	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002162:	2300      	movs	r3, #0
 8002164:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002166:	4b47      	ldr	r3, [pc, #284]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002176:	2300      	movs	r3, #0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00d      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217c:	4b41      	ldr	r3, [pc, #260]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	4a40      	ldr	r2, [pc, #256]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002186:	6593      	str	r3, [r2, #88]	; 0x58
 8002188:	4b3e      	ldr	r3, [pc, #248]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002194:	2301      	movs	r3, #1
 8002196:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002198:	4b3b      	ldr	r3, [pc, #236]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a3a      	ldr	r2, [pc, #232]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800219e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021a4:	f7fe fdaa 	bl	8000cfc <HAL_GetTick>
 80021a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021aa:	e009      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ac:	f7fe fda6 	bl	8000cfc <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d902      	bls.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	74fb      	strb	r3, [r7, #19]
        break;
 80021be:	e005      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021c0:	4b31      	ldr	r3, [pc, #196]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0ef      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80021cc:	7cfb      	ldrb	r3, [r7, #19]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d15c      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021d2:	4b2c      	ldr	r3, [pc, #176]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d01f      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d019      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021f0:	4b24      	ldr	r3, [pc, #144]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021fc:	4b21      	ldr	r3, [pc, #132]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002202:	4a20      	ldr	r2, [pc, #128]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800220c:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002212:	4a1c      	ldr	r2, [pc, #112]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800221c:	4a19      	ldr	r2, [pc, #100]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d016      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222e:	f7fe fd65 	bl	8000cfc <HAL_GetTick>
 8002232:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002234:	e00b      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7fe fd61 	bl	8000cfc <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f241 3288 	movw	r2, #5000	; 0x1388
 8002244:	4293      	cmp	r3, r2
 8002246:	d902      	bls.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	74fb      	strb	r3, [r7, #19]
            break;
 800224c:	e006      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800224e:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0ec      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800225c:	7cfb      	ldrb	r3, [r7, #19]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10c      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002262:	4b08      	ldr	r3, [pc, #32]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002268:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002272:	4904      	ldr	r1, [pc, #16]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800227a:	e009      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800227c:	7cfb      	ldrb	r3, [r7, #19]
 800227e:	74bb      	strb	r3, [r7, #18]
 8002280:	e006      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000
 8002288:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800228c:	7cfb      	ldrb	r3, [r7, #19]
 800228e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002290:	7c7b      	ldrb	r3, [r7, #17]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d105      	bne.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002296:	4ba6      	ldr	r3, [pc, #664]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229a:	4aa5      	ldr	r2, [pc, #660]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800229c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022ae:	4ba0      	ldr	r3, [pc, #640]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b4:	f023 0203 	bic.w	r2, r3, #3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022bc:	499c      	ldr	r1, [pc, #624]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022d0:	4b97      	ldr	r3, [pc, #604]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	f023 020c 	bic.w	r2, r3, #12
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022de:	4994      	ldr	r1, [pc, #592]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00a      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022f2:	4b8f      	ldr	r3, [pc, #572]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	498b      	ldr	r1, [pc, #556]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00a      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002314:	4b86      	ldr	r3, [pc, #536]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	4983      	ldr	r1, [pc, #524]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002336:	4b7e      	ldr	r3, [pc, #504]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002344:	497a      	ldr	r1, [pc, #488]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00a      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002358:	4b75      	ldr	r3, [pc, #468]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800235a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002366:	4972      	ldr	r1, [pc, #456]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00a      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800237a:	4b6d      	ldr	r3, [pc, #436]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002380:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002388:	4969      	ldr	r1, [pc, #420]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00a      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800239c:	4b64      	ldr	r3, [pc, #400]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023aa:	4961      	ldr	r1, [pc, #388]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023be:	4b5c      	ldr	r3, [pc, #368]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023cc:	4958      	ldr	r1, [pc, #352]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00a      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023e0:	4b53      	ldr	r3, [pc, #332]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ee:	4950      	ldr	r1, [pc, #320]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00a      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002402:	4b4b      	ldr	r3, [pc, #300]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002408:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	4947      	ldr	r1, [pc, #284]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00a      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002424:	4b42      	ldr	r3, [pc, #264]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002426:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800242a:	f023 0203 	bic.w	r2, r3, #3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002432:	493f      	ldr	r1, [pc, #252]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d028      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002446:	4b3a      	ldr	r3, [pc, #232]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002454:	4936      	ldr	r1, [pc, #216]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002464:	d106      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002466:	4b32      	ldr	r3, [pc, #200]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	4a31      	ldr	r2, [pc, #196]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800246c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002470:	60d3      	str	r3, [r2, #12]
 8002472:	e011      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002478:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800247c:	d10c      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3304      	adds	r3, #4
 8002482:	2101      	movs	r1, #1
 8002484:	4618      	mov	r0, r3
 8002486:	f000 f8c9 	bl	800261c <RCCEx_PLLSAI1_Config>
 800248a:	4603      	mov	r3, r0
 800248c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800248e:	7cfb      	ldrb	r3, [r7, #19]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d028      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024a4:	4b22      	ldr	r3, [pc, #136]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b2:	491f      	ldr	r1, [pc, #124]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024c2:	d106      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024c4:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4a19      	ldr	r2, [pc, #100]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024ce:	60d3      	str	r3, [r2, #12]
 80024d0:	e011      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024da:	d10c      	bne.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3304      	adds	r3, #4
 80024e0:	2101      	movs	r1, #1
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 f89a 	bl	800261c <RCCEx_PLLSAI1_Config>
 80024e8:	4603      	mov	r3, r0
 80024ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80024f2:	7cfb      	ldrb	r3, [r7, #19]
 80024f4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d02a      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002502:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002508:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002510:	4907      	ldr	r1, [pc, #28]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800251c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002520:	d108      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002522:	4b03      	ldr	r3, [pc, #12]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	4a02      	ldr	r2, [pc, #8]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800252c:	60d3      	str	r3, [r2, #12]
 800252e:	e013      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002530:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002538:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800253c:	d10c      	bne.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3304      	adds	r3, #4
 8002542:	2101      	movs	r1, #1
 8002544:	4618      	mov	r0, r3
 8002546:	f000 f869 	bl	800261c <RCCEx_PLLSAI1_Config>
 800254a:	4603      	mov	r3, r0
 800254c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800254e:	7cfb      	ldrb	r3, [r7, #19]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d02f      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002564:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002572:	4929      	ldr	r1, [pc, #164]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800257e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002582:	d10d      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3304      	adds	r3, #4
 8002588:	2102      	movs	r1, #2
 800258a:	4618      	mov	r0, r3
 800258c:	f000 f846 	bl	800261c <RCCEx_PLLSAI1_Config>
 8002590:	4603      	mov	r3, r0
 8002592:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002594:	7cfb      	ldrb	r3, [r7, #19]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d014      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800259a:	7cfb      	ldrb	r3, [r7, #19]
 800259c:	74bb      	strb	r3, [r7, #18]
 800259e:	e011      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3320      	adds	r3, #32
 80025ae:	2102      	movs	r1, #2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 f925 	bl	8002800 <RCCEx_PLLSAI2_Config>
 80025b6:	4603      	mov	r3, r0
 80025b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025ba:	7cfb      	ldrb	r3, [r7, #19]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
 80025c2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00b      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025d0:	4b11      	ldr	r3, [pc, #68]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025e0:	490d      	ldr	r1, [pc, #52]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00b      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002604:	4904      	ldr	r1, [pc, #16]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800260c:	7cbb      	ldrb	r3, [r7, #18]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000

0800261c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800262a:	4b74      	ldr	r3, [pc, #464]	; (80027fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d018      	beq.n	8002668 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002636:	4b71      	ldr	r3, [pc, #452]	; (80027fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f003 0203 	and.w	r2, r3, #3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d10d      	bne.n	8002662 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
       ||
 800264a:	2b00      	cmp	r3, #0
 800264c:	d009      	beq.n	8002662 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800264e:	4b6b      	ldr	r3, [pc, #428]	; (80027fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	091b      	lsrs	r3, r3, #4
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
       ||
 800265e:	429a      	cmp	r2, r3
 8002660:	d047      	beq.n	80026f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
 8002666:	e044      	b.n	80026f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b03      	cmp	r3, #3
 800266e:	d018      	beq.n	80026a2 <RCCEx_PLLSAI1_Config+0x86>
 8002670:	2b03      	cmp	r3, #3
 8002672:	d825      	bhi.n	80026c0 <RCCEx_PLLSAI1_Config+0xa4>
 8002674:	2b01      	cmp	r3, #1
 8002676:	d002      	beq.n	800267e <RCCEx_PLLSAI1_Config+0x62>
 8002678:	2b02      	cmp	r3, #2
 800267a:	d009      	beq.n	8002690 <RCCEx_PLLSAI1_Config+0x74>
 800267c:	e020      	b.n	80026c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800267e:	4b5f      	ldr	r3, [pc, #380]	; (80027fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d11d      	bne.n	80026c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800268e:	e01a      	b.n	80026c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002690:	4b5a      	ldr	r3, [pc, #360]	; (80027fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002698:	2b00      	cmp	r3, #0
 800269a:	d116      	bne.n	80026ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a0:	e013      	b.n	80026ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026a2:	4b56      	ldr	r3, [pc, #344]	; (80027fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10f      	bne.n	80026ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026ae:	4b53      	ldr	r3, [pc, #332]	; (80027fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026be:	e006      	b.n	80026ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
      break;
 80026c4:	e004      	b.n	80026d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026c6:	bf00      	nop
 80026c8:	e002      	b.n	80026d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026ca:	bf00      	nop
 80026cc:	e000      	b.n	80026d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10d      	bne.n	80026f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026d6:	4b49      	ldr	r3, [pc, #292]	; (80027fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6819      	ldr	r1, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	430b      	orrs	r3, r1
 80026ec:	4943      	ldr	r1, [pc, #268]	; (80027fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d17c      	bne.n	80027f2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026f8:	4b40      	ldr	r3, [pc, #256]	; (80027fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a3f      	ldr	r2, [pc, #252]	; (80027fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80026fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002702:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002704:	f7fe fafa 	bl	8000cfc <HAL_GetTick>
 8002708:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800270a:	e009      	b.n	8002720 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800270c:	f7fe faf6 	bl	8000cfc <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d902      	bls.n	8002720 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	73fb      	strb	r3, [r7, #15]
        break;
 800271e:	e005      	b.n	800272c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002720:	4b36      	ldr	r3, [pc, #216]	; (80027fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1ef      	bne.n	800270c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d15f      	bne.n	80027f2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d110      	bne.n	800275a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002738:	4b30      	ldr	r3, [pc, #192]	; (80027fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002740:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6892      	ldr	r2, [r2, #8]
 8002748:	0211      	lsls	r1, r2, #8
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68d2      	ldr	r2, [r2, #12]
 800274e:	06d2      	lsls	r2, r2, #27
 8002750:	430a      	orrs	r2, r1
 8002752:	492a      	ldr	r1, [pc, #168]	; (80027fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002754:	4313      	orrs	r3, r2
 8002756:	610b      	str	r3, [r1, #16]
 8002758:	e027      	b.n	80027aa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d112      	bne.n	8002786 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002760:	4b26      	ldr	r3, [pc, #152]	; (80027fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002768:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6892      	ldr	r2, [r2, #8]
 8002770:	0211      	lsls	r1, r2, #8
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6912      	ldr	r2, [r2, #16]
 8002776:	0852      	lsrs	r2, r2, #1
 8002778:	3a01      	subs	r2, #1
 800277a:	0552      	lsls	r2, r2, #21
 800277c:	430a      	orrs	r2, r1
 800277e:	491f      	ldr	r1, [pc, #124]	; (80027fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002780:	4313      	orrs	r3, r2
 8002782:	610b      	str	r3, [r1, #16]
 8002784:	e011      	b.n	80027aa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002786:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800278e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6892      	ldr	r2, [r2, #8]
 8002796:	0211      	lsls	r1, r2, #8
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6952      	ldr	r2, [r2, #20]
 800279c:	0852      	lsrs	r2, r2, #1
 800279e:	3a01      	subs	r2, #1
 80027a0:	0652      	lsls	r2, r2, #25
 80027a2:	430a      	orrs	r2, r1
 80027a4:	4915      	ldr	r1, [pc, #84]	; (80027fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027aa:	4b14      	ldr	r3, [pc, #80]	; (80027fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a13      	ldr	r2, [pc, #76]	; (80027fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b6:	f7fe faa1 	bl	8000cfc <HAL_GetTick>
 80027ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027bc:	e009      	b.n	80027d2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027be:	f7fe fa9d 	bl	8000cfc <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d902      	bls.n	80027d2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	73fb      	strb	r3, [r7, #15]
          break;
 80027d0:	e005      	b.n	80027de <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0ef      	beq.n	80027be <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d106      	bne.n	80027f2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	4903      	ldr	r1, [pc, #12]	; (80027fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40021000 	.word	0x40021000

08002800 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800280e:	4b69      	ldr	r3, [pc, #420]	; (80029b4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d018      	beq.n	800284c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800281a:	4b66      	ldr	r3, [pc, #408]	; (80029b4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f003 0203 	and.w	r2, r3, #3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d10d      	bne.n	8002846 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
       ||
 800282e:	2b00      	cmp	r3, #0
 8002830:	d009      	beq.n	8002846 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002832:	4b60      	ldr	r3, [pc, #384]	; (80029b4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
       ||
 8002842:	429a      	cmp	r2, r3
 8002844:	d047      	beq.n	80028d6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	73fb      	strb	r3, [r7, #15]
 800284a:	e044      	b.n	80028d6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b03      	cmp	r3, #3
 8002852:	d018      	beq.n	8002886 <RCCEx_PLLSAI2_Config+0x86>
 8002854:	2b03      	cmp	r3, #3
 8002856:	d825      	bhi.n	80028a4 <RCCEx_PLLSAI2_Config+0xa4>
 8002858:	2b01      	cmp	r3, #1
 800285a:	d002      	beq.n	8002862 <RCCEx_PLLSAI2_Config+0x62>
 800285c:	2b02      	cmp	r3, #2
 800285e:	d009      	beq.n	8002874 <RCCEx_PLLSAI2_Config+0x74>
 8002860:	e020      	b.n	80028a4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002862:	4b54      	ldr	r3, [pc, #336]	; (80029b4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d11d      	bne.n	80028aa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002872:	e01a      	b.n	80028aa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002874:	4b4f      	ldr	r3, [pc, #316]	; (80029b4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287c:	2b00      	cmp	r3, #0
 800287e:	d116      	bne.n	80028ae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002884:	e013      	b.n	80028ae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002886:	4b4b      	ldr	r3, [pc, #300]	; (80029b4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10f      	bne.n	80028b2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002892:	4b48      	ldr	r3, [pc, #288]	; (80029b4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028a2:	e006      	b.n	80028b2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
      break;
 80028a8:	e004      	b.n	80028b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028aa:	bf00      	nop
 80028ac:	e002      	b.n	80028b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028ae:	bf00      	nop
 80028b0:	e000      	b.n	80028b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10d      	bne.n	80028d6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028ba:	4b3e      	ldr	r3, [pc, #248]	; (80029b4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6819      	ldr	r1, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	430b      	orrs	r3, r1
 80028d0:	4938      	ldr	r1, [pc, #224]	; (80029b4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d166      	bne.n	80029aa <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80028dc:	4b35      	ldr	r3, [pc, #212]	; (80029b4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a34      	ldr	r2, [pc, #208]	; (80029b4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e8:	f7fe fa08 	bl	8000cfc <HAL_GetTick>
 80028ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028ee:	e009      	b.n	8002904 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028f0:	f7fe fa04 	bl	8000cfc <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d902      	bls.n	8002904 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	73fb      	strb	r3, [r7, #15]
        break;
 8002902:	e005      	b.n	8002910 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002904:	4b2b      	ldr	r3, [pc, #172]	; (80029b4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1ef      	bne.n	80028f0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d149      	bne.n	80029aa <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d110      	bne.n	800293e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800291c:	4b25      	ldr	r3, [pc, #148]	; (80029b4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002924:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6892      	ldr	r2, [r2, #8]
 800292c:	0211      	lsls	r1, r2, #8
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68d2      	ldr	r2, [r2, #12]
 8002932:	06d2      	lsls	r2, r2, #27
 8002934:	430a      	orrs	r2, r1
 8002936:	491f      	ldr	r1, [pc, #124]	; (80029b4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002938:	4313      	orrs	r3, r2
 800293a:	614b      	str	r3, [r1, #20]
 800293c:	e011      	b.n	8002962 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800293e:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002946:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6892      	ldr	r2, [r2, #8]
 800294e:	0211      	lsls	r1, r2, #8
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6912      	ldr	r2, [r2, #16]
 8002954:	0852      	lsrs	r2, r2, #1
 8002956:	3a01      	subs	r2, #1
 8002958:	0652      	lsls	r2, r2, #25
 800295a:	430a      	orrs	r2, r1
 800295c:	4915      	ldr	r1, [pc, #84]	; (80029b4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800295e:	4313      	orrs	r3, r2
 8002960:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002962:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a13      	ldr	r2, [pc, #76]	; (80029b4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296e:	f7fe f9c5 	bl	8000cfc <HAL_GetTick>
 8002972:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002974:	e009      	b.n	800298a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002976:	f7fe f9c1 	bl	8000cfc <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d902      	bls.n	800298a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	73fb      	strb	r3, [r7, #15]
          break;
 8002988:	e005      	b.n	8002996 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0ef      	beq.n	8002976 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d106      	bne.n	80029aa <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800299e:	695a      	ldr	r2, [r3, #20]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	4903      	ldr	r1, [pc, #12]	; (80029b4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40021000 	.word	0x40021000

080029b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e049      	b.n	8002a5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d106      	bne.n	80029e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f841 	bl	8002a66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3304      	adds	r3, #4
 80029f4:	4619      	mov	r1, r3
 80029f6:	4610      	mov	r0, r2
 80029f8:	f000 f9da 	bl	8002db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d001      	beq.n	8002a94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e04f      	b.n	8002b34 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0201 	orr.w	r2, r2, #1
 8002aaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a23      	ldr	r2, [pc, #140]	; (8002b40 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d01d      	beq.n	8002af2 <HAL_TIM_Base_Start_IT+0x76>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002abe:	d018      	beq.n	8002af2 <HAL_TIM_Base_Start_IT+0x76>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a1f      	ldr	r2, [pc, #124]	; (8002b44 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d013      	beq.n	8002af2 <HAL_TIM_Base_Start_IT+0x76>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a1e      	ldr	r2, [pc, #120]	; (8002b48 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d00e      	beq.n	8002af2 <HAL_TIM_Base_Start_IT+0x76>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a1c      	ldr	r2, [pc, #112]	; (8002b4c <HAL_TIM_Base_Start_IT+0xd0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d009      	beq.n	8002af2 <HAL_TIM_Base_Start_IT+0x76>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a1b      	ldr	r2, [pc, #108]	; (8002b50 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d004      	beq.n	8002af2 <HAL_TIM_Base_Start_IT+0x76>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a19      	ldr	r2, [pc, #100]	; (8002b54 <HAL_TIM_Base_Start_IT+0xd8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d115      	bne.n	8002b1e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <HAL_TIM_Base_Start_IT+0xdc>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b06      	cmp	r3, #6
 8002b02:	d015      	beq.n	8002b30 <HAL_TIM_Base_Start_IT+0xb4>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b0a:	d011      	beq.n	8002b30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1c:	e008      	b.n	8002b30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0201 	orr.w	r2, r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	e000      	b.n	8002b32 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	40012c00 	.word	0x40012c00
 8002b44:	40000400 	.word	0x40000400
 8002b48:	40000800 	.word	0x40000800
 8002b4c:	40000c00 	.word	0x40000c00
 8002b50:	40013400 	.word	0x40013400
 8002b54:	40014000 	.word	0x40014000
 8002b58:	00010007 	.word	0x00010007

08002b5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d020      	beq.n	8002bc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01b      	beq.n	8002bc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0202 	mvn.w	r2, #2
 8002b90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f8e4 	bl	8002d74 <HAL_TIM_IC_CaptureCallback>
 8002bac:	e005      	b.n	8002bba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f8d6 	bl	8002d60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f8e7 	bl	8002d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d020      	beq.n	8002c0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01b      	beq.n	8002c0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0204 	mvn.w	r2, #4
 8002bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2202      	movs	r2, #2
 8002be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f8be 	bl	8002d74 <HAL_TIM_IC_CaptureCallback>
 8002bf8:	e005      	b.n	8002c06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f8b0 	bl	8002d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f8c1 	bl	8002d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d020      	beq.n	8002c58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d01b      	beq.n	8002c58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0208 	mvn.w	r2, #8
 8002c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f898 	bl	8002d74 <HAL_TIM_IC_CaptureCallback>
 8002c44:	e005      	b.n	8002c52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f88a 	bl	8002d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f89b 	bl	8002d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d020      	beq.n	8002ca4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f003 0310 	and.w	r3, r3, #16
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01b      	beq.n	8002ca4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0210 	mvn.w	r2, #16
 8002c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2208      	movs	r2, #8
 8002c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f872 	bl	8002d74 <HAL_TIM_IC_CaptureCallback>
 8002c90:	e005      	b.n	8002c9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f864 	bl	8002d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f875 	bl	8002d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00c      	beq.n	8002cc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d007      	beq.n	8002cc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0201 	mvn.w	r2, #1
 8002cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fd fdd2 	bl	800086c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00c      	beq.n	8002cec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d007      	beq.n	8002cec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f906 	bl	8002ef8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00c      	beq.n	8002d10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d007      	beq.n	8002d10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f8fe 	bl	8002f0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00c      	beq.n	8002d34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d007      	beq.n	8002d34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f834 	bl	8002d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00c      	beq.n	8002d58 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d007      	beq.n	8002d58 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0220 	mvn.w	r2, #32
 8002d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f8c6 	bl	8002ee4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a40      	ldr	r2, [pc, #256]	; (8002ec4 <TIM_Base_SetConfig+0x114>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d013      	beq.n	8002df0 <TIM_Base_SetConfig+0x40>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dce:	d00f      	beq.n	8002df0 <TIM_Base_SetConfig+0x40>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a3d      	ldr	r2, [pc, #244]	; (8002ec8 <TIM_Base_SetConfig+0x118>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d00b      	beq.n	8002df0 <TIM_Base_SetConfig+0x40>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a3c      	ldr	r2, [pc, #240]	; (8002ecc <TIM_Base_SetConfig+0x11c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d007      	beq.n	8002df0 <TIM_Base_SetConfig+0x40>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a3b      	ldr	r2, [pc, #236]	; (8002ed0 <TIM_Base_SetConfig+0x120>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d003      	beq.n	8002df0 <TIM_Base_SetConfig+0x40>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a3a      	ldr	r2, [pc, #232]	; (8002ed4 <TIM_Base_SetConfig+0x124>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d108      	bne.n	8002e02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a2f      	ldr	r2, [pc, #188]	; (8002ec4 <TIM_Base_SetConfig+0x114>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d01f      	beq.n	8002e4a <TIM_Base_SetConfig+0x9a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e10:	d01b      	beq.n	8002e4a <TIM_Base_SetConfig+0x9a>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a2c      	ldr	r2, [pc, #176]	; (8002ec8 <TIM_Base_SetConfig+0x118>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d017      	beq.n	8002e4a <TIM_Base_SetConfig+0x9a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a2b      	ldr	r2, [pc, #172]	; (8002ecc <TIM_Base_SetConfig+0x11c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d013      	beq.n	8002e4a <TIM_Base_SetConfig+0x9a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a2a      	ldr	r2, [pc, #168]	; (8002ed0 <TIM_Base_SetConfig+0x120>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00f      	beq.n	8002e4a <TIM_Base_SetConfig+0x9a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a29      	ldr	r2, [pc, #164]	; (8002ed4 <TIM_Base_SetConfig+0x124>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00b      	beq.n	8002e4a <TIM_Base_SetConfig+0x9a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a28      	ldr	r2, [pc, #160]	; (8002ed8 <TIM_Base_SetConfig+0x128>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d007      	beq.n	8002e4a <TIM_Base_SetConfig+0x9a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a27      	ldr	r2, [pc, #156]	; (8002edc <TIM_Base_SetConfig+0x12c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d003      	beq.n	8002e4a <TIM_Base_SetConfig+0x9a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a26      	ldr	r2, [pc, #152]	; (8002ee0 <TIM_Base_SetConfig+0x130>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d108      	bne.n	8002e5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a10      	ldr	r2, [pc, #64]	; (8002ec4 <TIM_Base_SetConfig+0x114>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00f      	beq.n	8002ea8 <TIM_Base_SetConfig+0xf8>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a12      	ldr	r2, [pc, #72]	; (8002ed4 <TIM_Base_SetConfig+0x124>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00b      	beq.n	8002ea8 <TIM_Base_SetConfig+0xf8>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a11      	ldr	r2, [pc, #68]	; (8002ed8 <TIM_Base_SetConfig+0x128>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d007      	beq.n	8002ea8 <TIM_Base_SetConfig+0xf8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a10      	ldr	r2, [pc, #64]	; (8002edc <TIM_Base_SetConfig+0x12c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d003      	beq.n	8002ea8 <TIM_Base_SetConfig+0xf8>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a0f      	ldr	r2, [pc, #60]	; (8002ee0 <TIM_Base_SetConfig+0x130>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d103      	bne.n	8002eb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	615a      	str	r2, [r3, #20]
}
 8002eb6:	bf00      	nop
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40012c00 	.word	0x40012c00
 8002ec8:	40000400 	.word	0x40000400
 8002ecc:	40000800 	.word	0x40000800
 8002ed0:	40000c00 	.word	0x40000c00
 8002ed4:	40013400 	.word	0x40013400
 8002ed8:	40014000 	.word	0x40014000
 8002edc:	40014400 	.word	0x40014400
 8002ee0:	40014800 	.word	0x40014800

08002ee4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e040      	b.n	8002fb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fd fcd2 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2224      	movs	r2, #36	; 0x24
 8002f4c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0201 	bic.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fb6a 	bl	8003640 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f8af 	bl	80030d0 <UART_SetConfig>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e01b      	b.n	8002fb4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fbe9 	bl	8003784 <UART_CheckIdleState>
 8002fb2:	4603      	mov	r3, r0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08a      	sub	sp, #40	; 0x28
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d178      	bne.n	80030c6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <HAL_UART_Transmit+0x24>
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e071      	b.n	80030c8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2221      	movs	r2, #33	; 0x21
 8002ff0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ff2:	f7fd fe83 	bl	8000cfc <HAL_GetTick>
 8002ff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	88fa      	ldrh	r2, [r7, #6]
 8002ffc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	88fa      	ldrh	r2, [r7, #6]
 8003004:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003010:	d108      	bne.n	8003024 <HAL_UART_Transmit+0x68>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d104      	bne.n	8003024 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	e003      	b.n	800302c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003028:	2300      	movs	r3, #0
 800302a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800302c:	e030      	b.n	8003090 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2200      	movs	r2, #0
 8003036:	2180      	movs	r1, #128	; 0x80
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 fc4b 	bl	80038d4 <UART_WaitOnFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d004      	beq.n	800304e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e03c      	b.n	80030c8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10b      	bne.n	800306c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	881a      	ldrh	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003060:	b292      	uxth	r2, r2
 8003062:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	3302      	adds	r3, #2
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	e008      	b.n	800307e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	781a      	ldrb	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	b292      	uxth	r2, r2
 8003076:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	3301      	adds	r3, #1
 800307c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003084:	b29b      	uxth	r3, r3
 8003086:	3b01      	subs	r3, #1
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003096:	b29b      	uxth	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1c8      	bne.n	800302e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2200      	movs	r2, #0
 80030a4:	2140      	movs	r1, #64	; 0x40
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 fc14 	bl	80038d4 <UART_WaitOnFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d004      	beq.n	80030bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2220      	movs	r2, #32
 80030b6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e005      	b.n	80030c8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	e000      	b.n	80030c8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80030c6:	2302      	movs	r3, #2
  }
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3720      	adds	r7, #32
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d4:	b08a      	sub	sp, #40	; 0x28
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	431a      	orrs	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	4ba4      	ldr	r3, [pc, #656]	; (8003390 <UART_SetConfig+0x2c0>)
 8003100:	4013      	ands	r3, r2
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	6812      	ldr	r2, [r2, #0]
 8003106:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003108:	430b      	orrs	r3, r1
 800310a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a99      	ldr	r2, [pc, #612]	; (8003394 <UART_SetConfig+0x2c4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d004      	beq.n	800313c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003138:	4313      	orrs	r3, r2
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800314c:	430a      	orrs	r2, r1
 800314e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a90      	ldr	r2, [pc, #576]	; (8003398 <UART_SetConfig+0x2c8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d126      	bne.n	80031a8 <UART_SetConfig+0xd8>
 800315a:	4b90      	ldr	r3, [pc, #576]	; (800339c <UART_SetConfig+0x2cc>)
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	2b03      	cmp	r3, #3
 8003166:	d81b      	bhi.n	80031a0 <UART_SetConfig+0xd0>
 8003168:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <UART_SetConfig+0xa0>)
 800316a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316e:	bf00      	nop
 8003170:	08003181 	.word	0x08003181
 8003174:	08003191 	.word	0x08003191
 8003178:	08003189 	.word	0x08003189
 800317c:	08003199 	.word	0x08003199
 8003180:	2301      	movs	r3, #1
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003186:	e116      	b.n	80033b6 <UART_SetConfig+0x2e6>
 8003188:	2302      	movs	r3, #2
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800318e:	e112      	b.n	80033b6 <UART_SetConfig+0x2e6>
 8003190:	2304      	movs	r3, #4
 8003192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003196:	e10e      	b.n	80033b6 <UART_SetConfig+0x2e6>
 8003198:	2308      	movs	r3, #8
 800319a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800319e:	e10a      	b.n	80033b6 <UART_SetConfig+0x2e6>
 80031a0:	2310      	movs	r3, #16
 80031a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a6:	e106      	b.n	80033b6 <UART_SetConfig+0x2e6>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a7c      	ldr	r2, [pc, #496]	; (80033a0 <UART_SetConfig+0x2d0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d138      	bne.n	8003224 <UART_SetConfig+0x154>
 80031b2:	4b7a      	ldr	r3, [pc, #488]	; (800339c <UART_SetConfig+0x2cc>)
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b8:	f003 030c 	and.w	r3, r3, #12
 80031bc:	2b0c      	cmp	r3, #12
 80031be:	d82d      	bhi.n	800321c <UART_SetConfig+0x14c>
 80031c0:	a201      	add	r2, pc, #4	; (adr r2, 80031c8 <UART_SetConfig+0xf8>)
 80031c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c6:	bf00      	nop
 80031c8:	080031fd 	.word	0x080031fd
 80031cc:	0800321d 	.word	0x0800321d
 80031d0:	0800321d 	.word	0x0800321d
 80031d4:	0800321d 	.word	0x0800321d
 80031d8:	0800320d 	.word	0x0800320d
 80031dc:	0800321d 	.word	0x0800321d
 80031e0:	0800321d 	.word	0x0800321d
 80031e4:	0800321d 	.word	0x0800321d
 80031e8:	08003205 	.word	0x08003205
 80031ec:	0800321d 	.word	0x0800321d
 80031f0:	0800321d 	.word	0x0800321d
 80031f4:	0800321d 	.word	0x0800321d
 80031f8:	08003215 	.word	0x08003215
 80031fc:	2300      	movs	r3, #0
 80031fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003202:	e0d8      	b.n	80033b6 <UART_SetConfig+0x2e6>
 8003204:	2302      	movs	r3, #2
 8003206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320a:	e0d4      	b.n	80033b6 <UART_SetConfig+0x2e6>
 800320c:	2304      	movs	r3, #4
 800320e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003212:	e0d0      	b.n	80033b6 <UART_SetConfig+0x2e6>
 8003214:	2308      	movs	r3, #8
 8003216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800321a:	e0cc      	b.n	80033b6 <UART_SetConfig+0x2e6>
 800321c:	2310      	movs	r3, #16
 800321e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003222:	e0c8      	b.n	80033b6 <UART_SetConfig+0x2e6>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a5e      	ldr	r2, [pc, #376]	; (80033a4 <UART_SetConfig+0x2d4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d125      	bne.n	800327a <UART_SetConfig+0x1aa>
 800322e:	4b5b      	ldr	r3, [pc, #364]	; (800339c <UART_SetConfig+0x2cc>)
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003234:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003238:	2b30      	cmp	r3, #48	; 0x30
 800323a:	d016      	beq.n	800326a <UART_SetConfig+0x19a>
 800323c:	2b30      	cmp	r3, #48	; 0x30
 800323e:	d818      	bhi.n	8003272 <UART_SetConfig+0x1a2>
 8003240:	2b20      	cmp	r3, #32
 8003242:	d00a      	beq.n	800325a <UART_SetConfig+0x18a>
 8003244:	2b20      	cmp	r3, #32
 8003246:	d814      	bhi.n	8003272 <UART_SetConfig+0x1a2>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <UART_SetConfig+0x182>
 800324c:	2b10      	cmp	r3, #16
 800324e:	d008      	beq.n	8003262 <UART_SetConfig+0x192>
 8003250:	e00f      	b.n	8003272 <UART_SetConfig+0x1a2>
 8003252:	2300      	movs	r3, #0
 8003254:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003258:	e0ad      	b.n	80033b6 <UART_SetConfig+0x2e6>
 800325a:	2302      	movs	r3, #2
 800325c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003260:	e0a9      	b.n	80033b6 <UART_SetConfig+0x2e6>
 8003262:	2304      	movs	r3, #4
 8003264:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003268:	e0a5      	b.n	80033b6 <UART_SetConfig+0x2e6>
 800326a:	2308      	movs	r3, #8
 800326c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003270:	e0a1      	b.n	80033b6 <UART_SetConfig+0x2e6>
 8003272:	2310      	movs	r3, #16
 8003274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003278:	e09d      	b.n	80033b6 <UART_SetConfig+0x2e6>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a4a      	ldr	r2, [pc, #296]	; (80033a8 <UART_SetConfig+0x2d8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d125      	bne.n	80032d0 <UART_SetConfig+0x200>
 8003284:	4b45      	ldr	r3, [pc, #276]	; (800339c <UART_SetConfig+0x2cc>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800328e:	2bc0      	cmp	r3, #192	; 0xc0
 8003290:	d016      	beq.n	80032c0 <UART_SetConfig+0x1f0>
 8003292:	2bc0      	cmp	r3, #192	; 0xc0
 8003294:	d818      	bhi.n	80032c8 <UART_SetConfig+0x1f8>
 8003296:	2b80      	cmp	r3, #128	; 0x80
 8003298:	d00a      	beq.n	80032b0 <UART_SetConfig+0x1e0>
 800329a:	2b80      	cmp	r3, #128	; 0x80
 800329c:	d814      	bhi.n	80032c8 <UART_SetConfig+0x1f8>
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <UART_SetConfig+0x1d8>
 80032a2:	2b40      	cmp	r3, #64	; 0x40
 80032a4:	d008      	beq.n	80032b8 <UART_SetConfig+0x1e8>
 80032a6:	e00f      	b.n	80032c8 <UART_SetConfig+0x1f8>
 80032a8:	2300      	movs	r3, #0
 80032aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ae:	e082      	b.n	80033b6 <UART_SetConfig+0x2e6>
 80032b0:	2302      	movs	r3, #2
 80032b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032b6:	e07e      	b.n	80033b6 <UART_SetConfig+0x2e6>
 80032b8:	2304      	movs	r3, #4
 80032ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032be:	e07a      	b.n	80033b6 <UART_SetConfig+0x2e6>
 80032c0:	2308      	movs	r3, #8
 80032c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c6:	e076      	b.n	80033b6 <UART_SetConfig+0x2e6>
 80032c8:	2310      	movs	r3, #16
 80032ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ce:	e072      	b.n	80033b6 <UART_SetConfig+0x2e6>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a35      	ldr	r2, [pc, #212]	; (80033ac <UART_SetConfig+0x2dc>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d12a      	bne.n	8003330 <UART_SetConfig+0x260>
 80032da:	4b30      	ldr	r3, [pc, #192]	; (800339c <UART_SetConfig+0x2cc>)
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032e8:	d01a      	beq.n	8003320 <UART_SetConfig+0x250>
 80032ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032ee:	d81b      	bhi.n	8003328 <UART_SetConfig+0x258>
 80032f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032f4:	d00c      	beq.n	8003310 <UART_SetConfig+0x240>
 80032f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032fa:	d815      	bhi.n	8003328 <UART_SetConfig+0x258>
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <UART_SetConfig+0x238>
 8003300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003304:	d008      	beq.n	8003318 <UART_SetConfig+0x248>
 8003306:	e00f      	b.n	8003328 <UART_SetConfig+0x258>
 8003308:	2300      	movs	r3, #0
 800330a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330e:	e052      	b.n	80033b6 <UART_SetConfig+0x2e6>
 8003310:	2302      	movs	r3, #2
 8003312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003316:	e04e      	b.n	80033b6 <UART_SetConfig+0x2e6>
 8003318:	2304      	movs	r3, #4
 800331a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800331e:	e04a      	b.n	80033b6 <UART_SetConfig+0x2e6>
 8003320:	2308      	movs	r3, #8
 8003322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003326:	e046      	b.n	80033b6 <UART_SetConfig+0x2e6>
 8003328:	2310      	movs	r3, #16
 800332a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800332e:	e042      	b.n	80033b6 <UART_SetConfig+0x2e6>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a17      	ldr	r2, [pc, #92]	; (8003394 <UART_SetConfig+0x2c4>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d13a      	bne.n	80033b0 <UART_SetConfig+0x2e0>
 800333a:	4b18      	ldr	r3, [pc, #96]	; (800339c <UART_SetConfig+0x2cc>)
 800333c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003340:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003344:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003348:	d01a      	beq.n	8003380 <UART_SetConfig+0x2b0>
 800334a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800334e:	d81b      	bhi.n	8003388 <UART_SetConfig+0x2b8>
 8003350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003354:	d00c      	beq.n	8003370 <UART_SetConfig+0x2a0>
 8003356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800335a:	d815      	bhi.n	8003388 <UART_SetConfig+0x2b8>
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <UART_SetConfig+0x298>
 8003360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003364:	d008      	beq.n	8003378 <UART_SetConfig+0x2a8>
 8003366:	e00f      	b.n	8003388 <UART_SetConfig+0x2b8>
 8003368:	2300      	movs	r3, #0
 800336a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800336e:	e022      	b.n	80033b6 <UART_SetConfig+0x2e6>
 8003370:	2302      	movs	r3, #2
 8003372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003376:	e01e      	b.n	80033b6 <UART_SetConfig+0x2e6>
 8003378:	2304      	movs	r3, #4
 800337a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800337e:	e01a      	b.n	80033b6 <UART_SetConfig+0x2e6>
 8003380:	2308      	movs	r3, #8
 8003382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003386:	e016      	b.n	80033b6 <UART_SetConfig+0x2e6>
 8003388:	2310      	movs	r3, #16
 800338a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800338e:	e012      	b.n	80033b6 <UART_SetConfig+0x2e6>
 8003390:	efff69f3 	.word	0xefff69f3
 8003394:	40008000 	.word	0x40008000
 8003398:	40013800 	.word	0x40013800
 800339c:	40021000 	.word	0x40021000
 80033a0:	40004400 	.word	0x40004400
 80033a4:	40004800 	.word	0x40004800
 80033a8:	40004c00 	.word	0x40004c00
 80033ac:	40005000 	.word	0x40005000
 80033b0:	2310      	movs	r3, #16
 80033b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a9f      	ldr	r2, [pc, #636]	; (8003638 <UART_SetConfig+0x568>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d17a      	bne.n	80034b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d824      	bhi.n	8003412 <UART_SetConfig+0x342>
 80033c8:	a201      	add	r2, pc, #4	; (adr r2, 80033d0 <UART_SetConfig+0x300>)
 80033ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ce:	bf00      	nop
 80033d0:	080033f5 	.word	0x080033f5
 80033d4:	08003413 	.word	0x08003413
 80033d8:	080033fd 	.word	0x080033fd
 80033dc:	08003413 	.word	0x08003413
 80033e0:	08003403 	.word	0x08003403
 80033e4:	08003413 	.word	0x08003413
 80033e8:	08003413 	.word	0x08003413
 80033ec:	08003413 	.word	0x08003413
 80033f0:	0800340b 	.word	0x0800340b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033f4:	f7fe fd58 	bl	8001ea8 <HAL_RCC_GetPCLK1Freq>
 80033f8:	61f8      	str	r0, [r7, #28]
        break;
 80033fa:	e010      	b.n	800341e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033fc:	4b8f      	ldr	r3, [pc, #572]	; (800363c <UART_SetConfig+0x56c>)
 80033fe:	61fb      	str	r3, [r7, #28]
        break;
 8003400:	e00d      	b.n	800341e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003402:	f7fe fcb9 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 8003406:	61f8      	str	r0, [r7, #28]
        break;
 8003408:	e009      	b.n	800341e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800340a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800340e:	61fb      	str	r3, [r7, #28]
        break;
 8003410:	e005      	b.n	800341e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800341c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80fb 	beq.w	800361c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	4413      	add	r3, r2
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	429a      	cmp	r2, r3
 8003434:	d305      	bcc.n	8003442 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	429a      	cmp	r2, r3
 8003440:	d903      	bls.n	800344a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003448:	e0e8      	b.n	800361c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	2200      	movs	r2, #0
 800344e:	461c      	mov	r4, r3
 8003450:	4615      	mov	r5, r2
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	022b      	lsls	r3, r5, #8
 800345c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003460:	0222      	lsls	r2, r4, #8
 8003462:	68f9      	ldr	r1, [r7, #12]
 8003464:	6849      	ldr	r1, [r1, #4]
 8003466:	0849      	lsrs	r1, r1, #1
 8003468:	2000      	movs	r0, #0
 800346a:	4688      	mov	r8, r1
 800346c:	4681      	mov	r9, r0
 800346e:	eb12 0a08 	adds.w	sl, r2, r8
 8003472:	eb43 0b09 	adc.w	fp, r3, r9
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	603b      	str	r3, [r7, #0]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003484:	4650      	mov	r0, sl
 8003486:	4659      	mov	r1, fp
 8003488:	f7fc feb2 	bl	80001f0 <__aeabi_uldivmod>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4613      	mov	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800349a:	d308      	bcc.n	80034ae <UART_SetConfig+0x3de>
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034a2:	d204      	bcs.n	80034ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	60da      	str	r2, [r3, #12]
 80034ac:	e0b6      	b.n	800361c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034b4:	e0b2      	b.n	800361c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034be:	d15e      	bne.n	800357e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80034c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d828      	bhi.n	800351a <UART_SetConfig+0x44a>
 80034c8:	a201      	add	r2, pc, #4	; (adr r2, 80034d0 <UART_SetConfig+0x400>)
 80034ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ce:	bf00      	nop
 80034d0:	080034f5 	.word	0x080034f5
 80034d4:	080034fd 	.word	0x080034fd
 80034d8:	08003505 	.word	0x08003505
 80034dc:	0800351b 	.word	0x0800351b
 80034e0:	0800350b 	.word	0x0800350b
 80034e4:	0800351b 	.word	0x0800351b
 80034e8:	0800351b 	.word	0x0800351b
 80034ec:	0800351b 	.word	0x0800351b
 80034f0:	08003513 	.word	0x08003513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034f4:	f7fe fcd8 	bl	8001ea8 <HAL_RCC_GetPCLK1Freq>
 80034f8:	61f8      	str	r0, [r7, #28]
        break;
 80034fa:	e014      	b.n	8003526 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034fc:	f7fe fcea 	bl	8001ed4 <HAL_RCC_GetPCLK2Freq>
 8003500:	61f8      	str	r0, [r7, #28]
        break;
 8003502:	e010      	b.n	8003526 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003504:	4b4d      	ldr	r3, [pc, #308]	; (800363c <UART_SetConfig+0x56c>)
 8003506:	61fb      	str	r3, [r7, #28]
        break;
 8003508:	e00d      	b.n	8003526 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800350a:	f7fe fc35 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 800350e:	61f8      	str	r0, [r7, #28]
        break;
 8003510:	e009      	b.n	8003526 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003516:	61fb      	str	r3, [r7, #28]
        break;
 8003518:	e005      	b.n	8003526 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003524:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d077      	beq.n	800361c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	005a      	lsls	r2, r3, #1
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	085b      	lsrs	r3, r3, #1
 8003536:	441a      	add	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003540:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b0f      	cmp	r3, #15
 8003546:	d916      	bls.n	8003576 <UART_SetConfig+0x4a6>
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354e:	d212      	bcs.n	8003576 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	b29b      	uxth	r3, r3
 8003554:	f023 030f 	bic.w	r3, r3, #15
 8003558:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	085b      	lsrs	r3, r3, #1
 800355e:	b29b      	uxth	r3, r3
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	b29a      	uxth	r2, r3
 8003566:	8afb      	ldrh	r3, [r7, #22]
 8003568:	4313      	orrs	r3, r2
 800356a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	8afa      	ldrh	r2, [r7, #22]
 8003572:	60da      	str	r2, [r3, #12]
 8003574:	e052      	b.n	800361c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800357c:	e04e      	b.n	800361c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800357e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003582:	2b08      	cmp	r3, #8
 8003584:	d827      	bhi.n	80035d6 <UART_SetConfig+0x506>
 8003586:	a201      	add	r2, pc, #4	; (adr r2, 800358c <UART_SetConfig+0x4bc>)
 8003588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358c:	080035b1 	.word	0x080035b1
 8003590:	080035b9 	.word	0x080035b9
 8003594:	080035c1 	.word	0x080035c1
 8003598:	080035d7 	.word	0x080035d7
 800359c:	080035c7 	.word	0x080035c7
 80035a0:	080035d7 	.word	0x080035d7
 80035a4:	080035d7 	.word	0x080035d7
 80035a8:	080035d7 	.word	0x080035d7
 80035ac:	080035cf 	.word	0x080035cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035b0:	f7fe fc7a 	bl	8001ea8 <HAL_RCC_GetPCLK1Freq>
 80035b4:	61f8      	str	r0, [r7, #28]
        break;
 80035b6:	e014      	b.n	80035e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035b8:	f7fe fc8c 	bl	8001ed4 <HAL_RCC_GetPCLK2Freq>
 80035bc:	61f8      	str	r0, [r7, #28]
        break;
 80035be:	e010      	b.n	80035e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035c0:	4b1e      	ldr	r3, [pc, #120]	; (800363c <UART_SetConfig+0x56c>)
 80035c2:	61fb      	str	r3, [r7, #28]
        break;
 80035c4:	e00d      	b.n	80035e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035c6:	f7fe fbd7 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 80035ca:	61f8      	str	r0, [r7, #28]
        break;
 80035cc:	e009      	b.n	80035e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035d2:	61fb      	str	r3, [r7, #28]
        break;
 80035d4:	e005      	b.n	80035e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80035e0:	bf00      	nop
    }

    if (pclk != 0U)
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d019      	beq.n	800361c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	085a      	lsrs	r2, r3, #1
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	441a      	add	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2b0f      	cmp	r3, #15
 8003600:	d909      	bls.n	8003616 <UART_SetConfig+0x546>
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003608:	d205      	bcs.n	8003616 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	60da      	str	r2, [r3, #12]
 8003614:	e002      	b.n	800361c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003628:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800362c:	4618      	mov	r0, r3
 800362e:	3728      	adds	r7, #40	; 0x28
 8003630:	46bd      	mov	sp, r7
 8003632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003636:	bf00      	nop
 8003638:	40008000 	.word	0x40008000
 800363c:	00f42400 	.word	0x00f42400

08003640 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01a      	beq.n	8003756 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800373e:	d10a      	bne.n	8003756 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	605a      	str	r2, [r3, #4]
  }
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b098      	sub	sp, #96	; 0x60
 8003788:	af02      	add	r7, sp, #8
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003794:	f7fd fab2 	bl	8000cfc <HAL_GetTick>
 8003798:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d12e      	bne.n	8003806 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b0:	2200      	movs	r2, #0
 80037b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f88c 	bl	80038d4 <UART_WaitOnFlagUntilTimeout>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d021      	beq.n	8003806 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ca:	e853 3f00 	ldrex	r3, [r3]
 80037ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037d6:	653b      	str	r3, [r7, #80]	; 0x50
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	461a      	mov	r2, r3
 80037de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037e0:	647b      	str	r3, [r7, #68]	; 0x44
 80037e2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e6      	bne.n	80037c2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e062      	b.n	80038cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b04      	cmp	r3, #4
 8003812:	d149      	bne.n	80038a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003814:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800381c:	2200      	movs	r2, #0
 800381e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f856 	bl	80038d4 <UART_WaitOnFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d03c      	beq.n	80038a8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	e853 3f00 	ldrex	r3, [r3]
 800383a:	623b      	str	r3, [r7, #32]
   return(result);
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800384c:	633b      	str	r3, [r7, #48]	; 0x30
 800384e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003850:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003854:	e841 2300 	strex	r3, r2, [r1]
 8003858:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800385a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1e6      	bne.n	800382e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3308      	adds	r3, #8
 8003866:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	e853 3f00 	ldrex	r3, [r3]
 800386e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 0301 	bic.w	r3, r3, #1
 8003876:	64bb      	str	r3, [r7, #72]	; 0x48
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3308      	adds	r3, #8
 800387e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003880:	61fa      	str	r2, [r7, #28]
 8003882:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003884:	69b9      	ldr	r1, [r7, #24]
 8003886:	69fa      	ldr	r2, [r7, #28]
 8003888:	e841 2300 	strex	r3, r2, [r1]
 800388c:	617b      	str	r3, [r7, #20]
   return(result);
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e5      	bne.n	8003860 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e011      	b.n	80038cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2220      	movs	r2, #32
 80038ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3758      	adds	r7, #88	; 0x58
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	603b      	str	r3, [r7, #0]
 80038e0:	4613      	mov	r3, r2
 80038e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038e4:	e049      	b.n	800397a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038ec:	d045      	beq.n	800397a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ee:	f7fd fa05 	bl	8000cfc <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d302      	bcc.n	8003904 <UART_WaitOnFlagUntilTimeout+0x30>
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e048      	b.n	800399a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0304 	and.w	r3, r3, #4
 8003912:	2b00      	cmp	r3, #0
 8003914:	d031      	beq.n	800397a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b08      	cmp	r3, #8
 8003922:	d110      	bne.n	8003946 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2208      	movs	r2, #8
 800392a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 f838 	bl	80039a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2208      	movs	r2, #8
 8003936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e029      	b.n	800399a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003954:	d111      	bne.n	800397a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800395e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f81e 	bl	80039a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e00f      	b.n	800399a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69da      	ldr	r2, [r3, #28]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4013      	ands	r3, r2
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	429a      	cmp	r2, r3
 8003988:	bf0c      	ite	eq
 800398a:	2301      	moveq	r3, #1
 800398c:	2300      	movne	r3, #0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	429a      	cmp	r2, r3
 8003996:	d0a6      	beq.n	80038e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b095      	sub	sp, #84	; 0x54
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b2:	e853 3f00 	ldrex	r3, [r3]
 80039b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c8:	643b      	str	r3, [r7, #64]	; 0x40
 80039ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039d0:	e841 2300 	strex	r3, r2, [r1]
 80039d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1e6      	bne.n	80039aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3308      	adds	r3, #8
 80039e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	e853 3f00 	ldrex	r3, [r3]
 80039ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f023 0301 	bic.w	r3, r3, #1
 80039f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3308      	adds	r3, #8
 80039fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a04:	e841 2300 	strex	r3, r2, [r1]
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e5      	bne.n	80039dc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d118      	bne.n	8003a4a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f023 0310 	bic.w	r3, r3, #16
 8003a2c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3a:	6979      	ldr	r1, [r7, #20]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	613b      	str	r3, [r7, #16]
   return(result);
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1e6      	bne.n	8003a18 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003a5e:	bf00      	nop
 8003a60:	3754      	adds	r7, #84	; 0x54
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <__NVIC_SetPriority>:
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	6039      	str	r1, [r7, #0]
 8003a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	db0a      	blt.n	8003a96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	490c      	ldr	r1, [pc, #48]	; (8003ab8 <__NVIC_SetPriority+0x4c>)
 8003a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8a:	0112      	lsls	r2, r2, #4
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	440b      	add	r3, r1
 8003a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a94:	e00a      	b.n	8003aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	4908      	ldr	r1, [pc, #32]	; (8003abc <__NVIC_SetPriority+0x50>)
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	3b04      	subs	r3, #4
 8003aa4:	0112      	lsls	r2, r2, #4
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	761a      	strb	r2, [r3, #24]
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	e000e100 	.word	0xe000e100
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <SysTick_Handler+0x1c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003ac8:	f002 f968 	bl	8005d9c <xTaskGetSchedulerState>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d001      	beq.n	8003ad6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003ad2:	f003 f851 	bl	8006b78 <xPortSysTickHandler>
  }
}
 8003ad6:	bf00      	nop
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	e000e010 	.word	0xe000e010

08003ae0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	f06f 0004 	mvn.w	r0, #4
 8003aea:	f7ff ffbf 	bl	8003a6c <__NVIC_SetPriority>
#endif
}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003afa:	f3ef 8305 	mrs	r3, IPSR
 8003afe:	603b      	str	r3, [r7, #0]
  return(result);
 8003b00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003b06:	f06f 0305 	mvn.w	r3, #5
 8003b0a:	607b      	str	r3, [r7, #4]
 8003b0c:	e00c      	b.n	8003b28 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b0e:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <osKernelInitialize+0x44>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d105      	bne.n	8003b22 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003b16:	4b08      	ldr	r3, [pc, #32]	; (8003b38 <osKernelInitialize+0x44>)
 8003b18:	2201      	movs	r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	607b      	str	r3, [r7, #4]
 8003b20:	e002      	b.n	8003b28 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b28:	687b      	ldr	r3, [r7, #4]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	20000178 	.word	0x20000178

08003b3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b42:	f3ef 8305 	mrs	r3, IPSR
 8003b46:	603b      	str	r3, [r7, #0]
  return(result);
 8003b48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003b4e:	f06f 0305 	mvn.w	r3, #5
 8003b52:	607b      	str	r3, [r7, #4]
 8003b54:	e010      	b.n	8003b78 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <osKernelStart+0x48>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d109      	bne.n	8003b72 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003b5e:	f7ff ffbf 	bl	8003ae0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003b62:	4b08      	ldr	r3, [pc, #32]	; (8003b84 <osKernelStart+0x48>)
 8003b64:	2202      	movs	r2, #2
 8003b66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003b68:	f001 fcbc 	bl	80054e4 <vTaskStartScheduler>
      stat = osOK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	607b      	str	r3, [r7, #4]
 8003b70:	e002      	b.n	8003b78 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b78:	687b      	ldr	r3, [r7, #4]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000178 	.word	0x20000178

08003b88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08e      	sub	sp, #56	; 0x38
 8003b8c:	af04      	add	r7, sp, #16
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b94:	2300      	movs	r3, #0
 8003b96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b98:	f3ef 8305 	mrs	r3, IPSR
 8003b9c:	617b      	str	r3, [r7, #20]
  return(result);
 8003b9e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d17e      	bne.n	8003ca2 <osThreadNew+0x11a>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d07b      	beq.n	8003ca2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003baa:	2380      	movs	r3, #128	; 0x80
 8003bac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003bae:	2318      	movs	r3, #24
 8003bb0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003bb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d045      	beq.n	8003c4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <osThreadNew+0x48>
        name = attr->name;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <osThreadNew+0x6e>
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2b38      	cmp	r3, #56	; 0x38
 8003be8:	d805      	bhi.n	8003bf6 <osThreadNew+0x6e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <osThreadNew+0x72>
        return (NULL);
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e054      	b.n	8003ca4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	089b      	lsrs	r3, r3, #2
 8003c08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00e      	beq.n	8003c30 <osThreadNew+0xa8>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	2ba7      	cmp	r3, #167	; 0xa7
 8003c18:	d90a      	bls.n	8003c30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d006      	beq.n	8003c30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <osThreadNew+0xa8>
        mem = 1;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	61bb      	str	r3, [r7, #24]
 8003c2e:	e010      	b.n	8003c52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10c      	bne.n	8003c52 <osThreadNew+0xca>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d108      	bne.n	8003c52 <osThreadNew+0xca>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d104      	bne.n	8003c52 <osThreadNew+0xca>
          mem = 0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61bb      	str	r3, [r7, #24]
 8003c4c:	e001      	b.n	8003c52 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d110      	bne.n	8003c7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c60:	9202      	str	r2, [sp, #8]
 8003c62:	9301      	str	r3, [sp, #4]
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	6a3a      	ldr	r2, [r7, #32]
 8003c6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f001 fa4c 	bl	800510c <xTaskCreateStatic>
 8003c74:	4603      	mov	r3, r0
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	e013      	b.n	8003ca2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d110      	bne.n	8003ca2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	f107 0310 	add.w	r3, r7, #16
 8003c88:	9301      	str	r3, [sp, #4]
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f001 fa97 	bl	80051c6 <xTaskCreate>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d001      	beq.n	8003ca2 <osThreadNew+0x11a>
            hTask = NULL;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003ca2:	693b      	ldr	r3, [r7, #16]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3728      	adds	r7, #40	; 0x28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cb4:	f3ef 8305 	mrs	r3, IPSR
 8003cb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <osDelay+0x1c>
    stat = osErrorISR;
 8003cc0:	f06f 0305 	mvn.w	r3, #5
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	e007      	b.n	8003cd8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f001 fbd2 	bl	800547c <vTaskDelay>
    }
  }

  return (stat);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b08a      	sub	sp, #40	; 0x28
 8003ce6:	af02      	add	r7, sp, #8
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cf2:	f3ef 8305 	mrs	r3, IPSR
 8003cf6:	613b      	str	r3, [r7, #16]
  return(result);
 8003cf8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d175      	bne.n	8003dea <osSemaphoreNew+0x108>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d072      	beq.n	8003dea <osSemaphoreNew+0x108>
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d86e      	bhi.n	8003dea <osSemaphoreNew+0x108>
    mem = -1;
 8003d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d10:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d015      	beq.n	8003d44 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d006      	beq.n	8003d2e <osSemaphoreNew+0x4c>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	2b4f      	cmp	r3, #79	; 0x4f
 8003d26:	d902      	bls.n	8003d2e <osSemaphoreNew+0x4c>
        mem = 1;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	61bb      	str	r3, [r7, #24]
 8003d2c:	e00c      	b.n	8003d48 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d108      	bne.n	8003d48 <osSemaphoreNew+0x66>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d104      	bne.n	8003d48 <osSemaphoreNew+0x66>
          mem = 0;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61bb      	str	r3, [r7, #24]
 8003d42:	e001      	b.n	8003d48 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d4e:	d04c      	beq.n	8003dea <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d128      	bne.n	8003da8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d10a      	bne.n	8003d72 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2203      	movs	r2, #3
 8003d62:	9200      	str	r2, [sp, #0]
 8003d64:	2200      	movs	r2, #0
 8003d66:	2100      	movs	r1, #0
 8003d68:	2001      	movs	r0, #1
 8003d6a:	f000 fa29 	bl	80041c0 <xQueueGenericCreateStatic>
 8003d6e:	61f8      	str	r0, [r7, #28]
 8003d70:	e005      	b.n	8003d7e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003d72:	2203      	movs	r2, #3
 8003d74:	2100      	movs	r1, #0
 8003d76:	2001      	movs	r0, #1
 8003d78:	f000 fa9a 	bl	80042b0 <xQueueGenericCreate>
 8003d7c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d022      	beq.n	8003dca <osSemaphoreNew+0xe8>
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d01f      	beq.n	8003dca <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2100      	movs	r1, #0
 8003d90:	69f8      	ldr	r0, [r7, #28]
 8003d92:	f000 fb55 	bl	8004440 <xQueueGenericSend>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d016      	beq.n	8003dca <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003d9c:	69f8      	ldr	r0, [r7, #28]
 8003d9e:	f000 ffe1 	bl	8004d64 <vQueueDelete>
            hSemaphore = NULL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	61fb      	str	r3, [r7, #28]
 8003da6:	e010      	b.n	8003dca <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d108      	bne.n	8003dc0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	461a      	mov	r2, r3
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 fad7 	bl	800436a <xQueueCreateCountingSemaphoreStatic>
 8003dbc:	61f8      	str	r0, [r7, #28]
 8003dbe:	e004      	b.n	8003dca <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 fb08 	bl	80043d8 <xQueueCreateCountingSemaphore>
 8003dc8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00c      	beq.n	8003dea <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <osSemaphoreNew+0xfc>
          name = attr->name;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	e001      	b.n	8003de2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003de2:	6979      	ldr	r1, [r7, #20]
 8003de4:	69f8      	ldr	r0, [r7, #28]
 8003de6:	f001 f909 	bl	8004ffc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003dea:	69fb      	ldr	r3, [r7, #28]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3720      	adds	r7, #32
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d103      	bne.n	8003e14 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003e0c:	f06f 0303 	mvn.w	r3, #3
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	e039      	b.n	8003e88 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e14:	f3ef 8305 	mrs	r3, IPSR
 8003e18:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d022      	beq.n	8003e66 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8003e26:	f06f 0303 	mvn.w	r3, #3
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	e02c      	b.n	8003e88 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003e32:	f107 0308 	add.w	r3, r7, #8
 8003e36:	461a      	mov	r2, r3
 8003e38:	2100      	movs	r1, #0
 8003e3a:	6938      	ldr	r0, [r7, #16]
 8003e3c:	f000 ff12 	bl	8004c64 <xQueueReceiveFromISR>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d003      	beq.n	8003e4e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003e46:	f06f 0302 	mvn.w	r3, #2
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	e01c      	b.n	8003e88 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d019      	beq.n	8003e88 <osSemaphoreAcquire+0x94>
 8003e54:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <osSemaphoreAcquire+0xa0>)
 8003e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	e010      	b.n	8003e88 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003e66:	6839      	ldr	r1, [r7, #0]
 8003e68:	6938      	ldr	r0, [r7, #16]
 8003e6a:	f000 fdef 	bl	8004a4c <xQueueSemaphoreTake>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d009      	beq.n	8003e88 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8003e7a:	f06f 0301 	mvn.w	r3, #1
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	e002      	b.n	8003e88 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8003e82:	f06f 0302 	mvn.w	r3, #2
 8003e86:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003e88:	697b      	ldr	r3, [r7, #20]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	e000ed04 	.word	0xe000ed04

08003e98 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d103      	bne.n	8003eb6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003eae:	f06f 0303 	mvn.w	r3, #3
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	e02c      	b.n	8003f10 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003eb6:	f3ef 8305 	mrs	r3, IPSR
 8003eba:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d01a      	beq.n	8003ef8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003ec6:	f107 0308 	add.w	r3, r7, #8
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6938      	ldr	r0, [r7, #16]
 8003ece:	f000 fc50 	bl	8004772 <xQueueGiveFromISR>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d003      	beq.n	8003ee0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8003ed8:	f06f 0302 	mvn.w	r3, #2
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	e017      	b.n	8003f10 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d014      	beq.n	8003f10 <osSemaphoreRelease+0x78>
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <osSemaphoreRelease+0x84>)
 8003ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	f3bf 8f6f 	isb	sy
 8003ef6:	e00b      	b.n	8003f10 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003ef8:	2300      	movs	r3, #0
 8003efa:	2200      	movs	r2, #0
 8003efc:	2100      	movs	r1, #0
 8003efe:	6938      	ldr	r0, [r7, #16]
 8003f00:	f000 fa9e 	bl	8004440 <xQueueGenericSend>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d002      	beq.n	8003f10 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8003f0a:	f06f 0302 	mvn.w	r3, #2
 8003f0e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003f10:	697b      	ldr	r3, [r7, #20]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	e000ed04 	.word	0xe000ed04

08003f20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4a07      	ldr	r2, [pc, #28]	; (8003f4c <vApplicationGetIdleTaskMemory+0x2c>)
 8003f30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	4a06      	ldr	r2, [pc, #24]	; (8003f50 <vApplicationGetIdleTaskMemory+0x30>)
 8003f36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2280      	movs	r2, #128	; 0x80
 8003f3c:	601a      	str	r2, [r3, #0]
}
 8003f3e:	bf00      	nop
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	2000017c 	.word	0x2000017c
 8003f50:	20000224 	.word	0x20000224

08003f54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4a07      	ldr	r2, [pc, #28]	; (8003f80 <vApplicationGetTimerTaskMemory+0x2c>)
 8003f64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	4a06      	ldr	r2, [pc, #24]	; (8003f84 <vApplicationGetTimerTaskMemory+0x30>)
 8003f6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f72:	601a      	str	r2, [r3, #0]
}
 8003f74:	bf00      	nop
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	20000424 	.word	0x20000424
 8003f84:	200004cc 	.word	0x200004cc

08003f88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f103 0208 	add.w	r2, r3, #8
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fa0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f103 0208 	add.w	r2, r3, #8
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f103 0208 	add.w	r2, r3, #8
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b085      	sub	sp, #20
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	601a      	str	r2, [r3, #0]
}
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800402a:	b480      	push	{r7}
 800402c:	b085      	sub	sp, #20
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004040:	d103      	bne.n	800404a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	e00c      	b.n	8004064 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3308      	adds	r3, #8
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	e002      	b.n	8004058 <vListInsert+0x2e>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	429a      	cmp	r2, r3
 8004062:	d2f6      	bcs.n	8004052 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	601a      	str	r2, [r3, #0]
}
 8004090:	bf00      	nop
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6892      	ldr	r2, [r2, #8]
 80040b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6852      	ldr	r2, [r2, #4]
 80040bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d103      	bne.n	80040d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	1e5a      	subs	r2, r3, #1
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10a      	bne.n	800411a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004116:	bf00      	nop
 8004118:	e7fe      	b.n	8004118 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800411a:	f002 fc9b 	bl	8006a54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004126:	68f9      	ldr	r1, [r7, #12]
 8004128:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800412a:	fb01 f303 	mul.w	r3, r1, r3
 800412e:	441a      	add	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414a:	3b01      	subs	r3, #1
 800414c:	68f9      	ldr	r1, [r7, #12]
 800414e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004150:	fb01 f303 	mul.w	r3, r1, r3
 8004154:	441a      	add	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	22ff      	movs	r2, #255	; 0xff
 800415e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	22ff      	movs	r2, #255	; 0xff
 8004166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d114      	bne.n	800419a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d01a      	beq.n	80041ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3310      	adds	r3, #16
 800417c:	4618      	mov	r0, r3
 800417e:	f001 fc4b 	bl	8005a18 <xTaskRemoveFromEventList>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d012      	beq.n	80041ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004188:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <xQueueGenericReset+0xcc>)
 800418a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	e009      	b.n	80041ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3310      	adds	r3, #16
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff fef2 	bl	8003f88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	3324      	adds	r3, #36	; 0x24
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff feed 	bl	8003f88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041ae:	f002 fc81 	bl	8006ab4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041b2:	2301      	movs	r3, #1
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	e000ed04 	.word	0xe000ed04

080041c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08e      	sub	sp, #56	; 0x38
 80041c4:	af02      	add	r7, sp, #8
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10a      	bne.n	80041ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041e6:	bf00      	nop
 80041e8:	e7fe      	b.n	80041e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10a      	bne.n	8004206 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004202:	bf00      	nop
 8004204:	e7fe      	b.n	8004204 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <xQueueGenericCreateStatic+0x52>
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <xQueueGenericCreateStatic+0x56>
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <xQueueGenericCreateStatic+0x58>
 8004216:	2300      	movs	r3, #0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10a      	bne.n	8004232 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800421c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	623b      	str	r3, [r7, #32]
}
 800422e:	bf00      	nop
 8004230:	e7fe      	b.n	8004230 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d102      	bne.n	800423e <xQueueGenericCreateStatic+0x7e>
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <xQueueGenericCreateStatic+0x82>
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <xQueueGenericCreateStatic+0x84>
 8004242:	2300      	movs	r3, #0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10a      	bne.n	800425e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	61fb      	str	r3, [r7, #28]
}
 800425a:	bf00      	nop
 800425c:	e7fe      	b.n	800425c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800425e:	2350      	movs	r3, #80	; 0x50
 8004260:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b50      	cmp	r3, #80	; 0x50
 8004266:	d00a      	beq.n	800427e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	61bb      	str	r3, [r7, #24]
}
 800427a:	bf00      	nop
 800427c:	e7fe      	b.n	800427c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800427e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00d      	beq.n	80042a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800428a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004292:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	4613      	mov	r3, r2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f83f 	bl	8004324 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80042a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3730      	adds	r7, #48	; 0x30
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08a      	sub	sp, #40	; 0x28
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	4613      	mov	r3, r2
 80042bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10a      	bne.n	80042da <xQueueGenericCreate+0x2a>
	__asm volatile
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	613b      	str	r3, [r7, #16]
}
 80042d6:	bf00      	nop
 80042d8:	e7fe      	b.n	80042d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	fb02 f303 	mul.w	r3, r2, r3
 80042e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	3350      	adds	r3, #80	; 0x50
 80042e8:	4618      	mov	r0, r3
 80042ea:	f002 fcd5 	bl	8006c98 <pvPortMalloc>
 80042ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d011      	beq.n	800431a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	3350      	adds	r3, #80	; 0x50
 80042fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004308:	79fa      	ldrb	r2, [r7, #7]
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	4613      	mov	r3, r2
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f805 	bl	8004324 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800431a:	69bb      	ldr	r3, [r7, #24]
	}
 800431c:	4618      	mov	r0, r3
 800431e:	3720      	adds	r7, #32
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d103      	bne.n	8004340 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	e002      	b.n	8004346 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004352:	2101      	movs	r1, #1
 8004354:	69b8      	ldr	r0, [r7, #24]
 8004356:	f7ff fecb 	bl	80040f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	78fa      	ldrb	r2, [r7, #3]
 800435e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004362:	bf00      	nop
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800436a:	b580      	push	{r7, lr}
 800436c:	b08a      	sub	sp, #40	; 0x28
 800436e:	af02      	add	r7, sp, #8
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10a      	bne.n	8004392 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	61bb      	str	r3, [r7, #24]
}
 800438e:	bf00      	nop
 8004390:	e7fe      	b.n	8004390 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	429a      	cmp	r2, r3
 8004398:	d90a      	bls.n	80043b0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	617b      	str	r3, [r7, #20]
}
 80043ac:	bf00      	nop
 80043ae:	e7fe      	b.n	80043ae <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80043b0:	2302      	movs	r3, #2
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	2100      	movs	r1, #0
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f7ff ff00 	bl	80041c0 <xQueueGenericCreateStatic>
 80043c0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80043ce:	69fb      	ldr	r3, [r7, #28]
	}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3720      	adds	r7, #32
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	613b      	str	r3, [r7, #16]
}
 80043fa:	bf00      	nop
 80043fc:	e7fe      	b.n	80043fc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	429a      	cmp	r2, r3
 8004404:	d90a      	bls.n	800441c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	60fb      	str	r3, [r7, #12]
}
 8004418:	bf00      	nop
 800441a:	e7fe      	b.n	800441a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800441c:	2202      	movs	r2, #2
 800441e:	2100      	movs	r1, #0
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7ff ff45 	bl	80042b0 <xQueueGenericCreate>
 8004426:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004434:	697b      	ldr	r3, [r7, #20]
	}
 8004436:	4618      	mov	r0, r3
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08e      	sub	sp, #56	; 0x38
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800444e:	2300      	movs	r3, #0
 8004450:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10a      	bne.n	8004472 <xQueueGenericSend+0x32>
	__asm volatile
 800445c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004460:	f383 8811 	msr	BASEPRI, r3
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800446e:	bf00      	nop
 8004470:	e7fe      	b.n	8004470 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d103      	bne.n	8004480 <xQueueGenericSend+0x40>
 8004478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <xQueueGenericSend+0x44>
 8004480:	2301      	movs	r3, #1
 8004482:	e000      	b.n	8004486 <xQueueGenericSend+0x46>
 8004484:	2300      	movs	r3, #0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10a      	bne.n	80044a0 <xQueueGenericSend+0x60>
	__asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800449c:	bf00      	nop
 800449e:	e7fe      	b.n	800449e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d103      	bne.n	80044ae <xQueueGenericSend+0x6e>
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <xQueueGenericSend+0x72>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <xQueueGenericSend+0x74>
 80044b2:	2300      	movs	r3, #0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10a      	bne.n	80044ce <xQueueGenericSend+0x8e>
	__asm volatile
 80044b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044bc:	f383 8811 	msr	BASEPRI, r3
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	623b      	str	r3, [r7, #32]
}
 80044ca:	bf00      	nop
 80044cc:	e7fe      	b.n	80044cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044ce:	f001 fc65 	bl	8005d9c <xTaskGetSchedulerState>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d102      	bne.n	80044de <xQueueGenericSend+0x9e>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <xQueueGenericSend+0xa2>
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <xQueueGenericSend+0xa4>
 80044e2:	2300      	movs	r3, #0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10a      	bne.n	80044fe <xQueueGenericSend+0xbe>
	__asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	61fb      	str	r3, [r7, #28]
}
 80044fa:	bf00      	nop
 80044fc:	e7fe      	b.n	80044fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044fe:	f002 faa9 	bl	8006a54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450a:	429a      	cmp	r2, r3
 800450c:	d302      	bcc.n	8004514 <xQueueGenericSend+0xd4>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b02      	cmp	r3, #2
 8004512:	d129      	bne.n	8004568 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	68b9      	ldr	r1, [r7, #8]
 8004518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800451a:	f000 fc5e 	bl	8004dda <prvCopyDataToQueue>
 800451e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	2b00      	cmp	r3, #0
 8004526:	d010      	beq.n	800454a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452a:	3324      	adds	r3, #36	; 0x24
 800452c:	4618      	mov	r0, r3
 800452e:	f001 fa73 	bl	8005a18 <xTaskRemoveFromEventList>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d013      	beq.n	8004560 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004538:	4b3f      	ldr	r3, [pc, #252]	; (8004638 <xQueueGenericSend+0x1f8>)
 800453a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	e00a      	b.n	8004560 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800454a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454c:	2b00      	cmp	r3, #0
 800454e:	d007      	beq.n	8004560 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004550:	4b39      	ldr	r3, [pc, #228]	; (8004638 <xQueueGenericSend+0x1f8>)
 8004552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004560:	f002 faa8 	bl	8006ab4 <vPortExitCritical>
				return pdPASS;
 8004564:	2301      	movs	r3, #1
 8004566:	e063      	b.n	8004630 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d103      	bne.n	8004576 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800456e:	f002 faa1 	bl	8006ab4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004572:	2300      	movs	r3, #0
 8004574:	e05c      	b.n	8004630 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004578:	2b00      	cmp	r3, #0
 800457a:	d106      	bne.n	800458a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800457c:	f107 0314 	add.w	r3, r7, #20
 8004580:	4618      	mov	r0, r3
 8004582:	f001 faad 	bl	8005ae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004586:	2301      	movs	r3, #1
 8004588:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800458a:	f002 fa93 	bl	8006ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800458e:	f001 f819 	bl	80055c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004592:	f002 fa5f 	bl	8006a54 <vPortEnterCritical>
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800459c:	b25b      	sxtb	r3, r3
 800459e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045a2:	d103      	bne.n	80045ac <xQueueGenericSend+0x16c>
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045b2:	b25b      	sxtb	r3, r3
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045b8:	d103      	bne.n	80045c2 <xQueueGenericSend+0x182>
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045c2:	f002 fa77 	bl	8006ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045c6:	1d3a      	adds	r2, r7, #4
 80045c8:	f107 0314 	add.w	r3, r7, #20
 80045cc:	4611      	mov	r1, r2
 80045ce:	4618      	mov	r0, r3
 80045d0:	f001 fa9c 	bl	8005b0c <xTaskCheckForTimeOut>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d124      	bne.n	8004624 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80045da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045dc:	f000 fcf5 	bl	8004fca <prvIsQueueFull>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d018      	beq.n	8004618 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80045e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e8:	3310      	adds	r3, #16
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	4611      	mov	r1, r2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f001 f9c2 	bl	8005978 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80045f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045f6:	f000 fc80 	bl	8004efa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80045fa:	f000 fff1 	bl	80055e0 <xTaskResumeAll>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	f47f af7c 	bne.w	80044fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004606:	4b0c      	ldr	r3, [pc, #48]	; (8004638 <xQueueGenericSend+0x1f8>)
 8004608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	e772      	b.n	80044fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800461a:	f000 fc6e 	bl	8004efa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800461e:	f000 ffdf 	bl	80055e0 <xTaskResumeAll>
 8004622:	e76c      	b.n	80044fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004626:	f000 fc68 	bl	8004efa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800462a:	f000 ffd9 	bl	80055e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800462e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004630:	4618      	mov	r0, r3
 8004632:	3738      	adds	r7, #56	; 0x38
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	e000ed04 	.word	0xe000ed04

0800463c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b090      	sub	sp, #64	; 0x40
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800464e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10a      	bne.n	800466a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004666:	bf00      	nop
 8004668:	e7fe      	b.n	8004668 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d103      	bne.n	8004678 <xQueueGenericSendFromISR+0x3c>
 8004670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <xQueueGenericSendFromISR+0x40>
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <xQueueGenericSendFromISR+0x42>
 800467c:	2300      	movs	r3, #0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10a      	bne.n	8004698 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004694:	bf00      	nop
 8004696:	e7fe      	b.n	8004696 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b02      	cmp	r3, #2
 800469c:	d103      	bne.n	80046a6 <xQueueGenericSendFromISR+0x6a>
 800469e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <xQueueGenericSendFromISR+0x6e>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <xQueueGenericSendFromISR+0x70>
 80046aa:	2300      	movs	r3, #0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	623b      	str	r3, [r7, #32]
}
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046c6:	f002 faa7 	bl	8006c18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80046ca:	f3ef 8211 	mrs	r2, BASEPRI
 80046ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	61fa      	str	r2, [r7, #28]
 80046e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80046e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d302      	bcc.n	80046f8 <xQueueGenericSendFromISR+0xbc>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d12f      	bne.n	8004758 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80046f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004706:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	68b9      	ldr	r1, [r7, #8]
 800470c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800470e:	f000 fb64 	bl	8004dda <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004712:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800471a:	d112      	bne.n	8004742 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800471c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	2b00      	cmp	r3, #0
 8004722:	d016      	beq.n	8004752 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004726:	3324      	adds	r3, #36	; 0x24
 8004728:	4618      	mov	r0, r3
 800472a:	f001 f975 	bl	8005a18 <xTaskRemoveFromEventList>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00e      	beq.n	8004752 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00b      	beq.n	8004752 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	e007      	b.n	8004752 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004742:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004746:	3301      	adds	r3, #1
 8004748:	b2db      	uxtb	r3, r3
 800474a:	b25a      	sxtb	r2, r3
 800474c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004752:	2301      	movs	r3, #1
 8004754:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004756:	e001      	b.n	800475c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004758:	2300      	movs	r3, #0
 800475a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800475c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004766:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800476a:	4618      	mov	r0, r3
 800476c:	3740      	adds	r7, #64	; 0x40
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b08e      	sub	sp, #56	; 0x38
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10a      	bne.n	800479c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	623b      	str	r3, [r7, #32]
}
 8004798:	bf00      	nop
 800479a:	e7fe      	b.n	800479a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800479c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <xQueueGiveFromISR+0x48>
	__asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	61fb      	str	r3, [r7, #28]
}
 80047b6:	bf00      	nop
 80047b8:	e7fe      	b.n	80047b8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80047ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d103      	bne.n	80047ca <xQueueGiveFromISR+0x58>
 80047c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <xQueueGiveFromISR+0x5c>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <xQueueGiveFromISR+0x5e>
 80047ce:	2300      	movs	r3, #0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10a      	bne.n	80047ea <xQueueGiveFromISR+0x78>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	61bb      	str	r3, [r7, #24]
}
 80047e6:	bf00      	nop
 80047e8:	e7fe      	b.n	80047e8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047ea:	f002 fa15 	bl	8006c18 <vPortValidateInterruptPriority>
	__asm volatile
 80047ee:	f3ef 8211 	mrs	r2, BASEPRI
 80047f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	617a      	str	r2, [r7, #20]
 8004804:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004806:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004808:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004814:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004816:	429a      	cmp	r2, r3
 8004818:	d22b      	bcs.n	8004872 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800482c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004834:	d112      	bne.n	800485c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	2b00      	cmp	r3, #0
 800483c:	d016      	beq.n	800486c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	3324      	adds	r3, #36	; 0x24
 8004842:	4618      	mov	r0, r3
 8004844:	f001 f8e8 	bl	8005a18 <xTaskRemoveFromEventList>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00e      	beq.n	800486c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00b      	beq.n	800486c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2201      	movs	r2, #1
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	e007      	b.n	800486c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800485c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004860:	3301      	adds	r3, #1
 8004862:	b2db      	uxtb	r3, r3
 8004864:	b25a      	sxtb	r2, r3
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800486c:	2301      	movs	r3, #1
 800486e:	637b      	str	r3, [r7, #52]	; 0x34
 8004870:	e001      	b.n	8004876 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004872:	2300      	movs	r3, #0
 8004874:	637b      	str	r3, [r7, #52]	; 0x34
 8004876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004878:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f383 8811 	msr	BASEPRI, r3
}
 8004880:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004884:	4618      	mov	r0, r3
 8004886:	3738      	adds	r7, #56	; 0x38
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08c      	sub	sp, #48	; 0x30
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004898:	2300      	movs	r3, #0
 800489a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80048a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10a      	bne.n	80048bc <xQueueReceive+0x30>
	__asm volatile
 80048a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	623b      	str	r3, [r7, #32]
}
 80048b8:	bf00      	nop
 80048ba:	e7fe      	b.n	80048ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d103      	bne.n	80048ca <xQueueReceive+0x3e>
 80048c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <xQueueReceive+0x42>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <xQueueReceive+0x44>
 80048ce:	2300      	movs	r3, #0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10a      	bne.n	80048ea <xQueueReceive+0x5e>
	__asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	61fb      	str	r3, [r7, #28]
}
 80048e6:	bf00      	nop
 80048e8:	e7fe      	b.n	80048e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048ea:	f001 fa57 	bl	8005d9c <xTaskGetSchedulerState>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d102      	bne.n	80048fa <xQueueReceive+0x6e>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <xQueueReceive+0x72>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <xQueueReceive+0x74>
 80048fe:	2300      	movs	r3, #0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10a      	bne.n	800491a <xQueueReceive+0x8e>
	__asm volatile
 8004904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	61bb      	str	r3, [r7, #24]
}
 8004916:	bf00      	nop
 8004918:	e7fe      	b.n	8004918 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800491a:	f002 f89b 	bl	8006a54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004922:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	2b00      	cmp	r3, #0
 8004928:	d01f      	beq.n	800496a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800492a:	68b9      	ldr	r1, [r7, #8]
 800492c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800492e:	f000 fabe 	bl	8004eae <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	1e5a      	subs	r2, r3, #1
 8004936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004938:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800493a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00f      	beq.n	8004962 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004944:	3310      	adds	r3, #16
 8004946:	4618      	mov	r0, r3
 8004948:	f001 f866 	bl	8005a18 <xTaskRemoveFromEventList>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d007      	beq.n	8004962 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004952:	4b3d      	ldr	r3, [pc, #244]	; (8004a48 <xQueueReceive+0x1bc>)
 8004954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004962:	f002 f8a7 	bl	8006ab4 <vPortExitCritical>
				return pdPASS;
 8004966:	2301      	movs	r3, #1
 8004968:	e069      	b.n	8004a3e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d103      	bne.n	8004978 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004970:	f002 f8a0 	bl	8006ab4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004974:	2300      	movs	r3, #0
 8004976:	e062      	b.n	8004a3e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800497e:	f107 0310 	add.w	r3, r7, #16
 8004982:	4618      	mov	r0, r3
 8004984:	f001 f8ac 	bl	8005ae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004988:	2301      	movs	r3, #1
 800498a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800498c:	f002 f892 	bl	8006ab4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004990:	f000 fe18 	bl	80055c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004994:	f002 f85e 	bl	8006a54 <vPortEnterCritical>
 8004998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800499e:	b25b      	sxtb	r3, r3
 80049a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049a4:	d103      	bne.n	80049ae <xQueueReceive+0x122>
 80049a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049b4:	b25b      	sxtb	r3, r3
 80049b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ba:	d103      	bne.n	80049c4 <xQueueReceive+0x138>
 80049bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049c4:	f002 f876 	bl	8006ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049c8:	1d3a      	adds	r2, r7, #4
 80049ca:	f107 0310 	add.w	r3, r7, #16
 80049ce:	4611      	mov	r1, r2
 80049d0:	4618      	mov	r0, r3
 80049d2:	f001 f89b 	bl	8005b0c <xTaskCheckForTimeOut>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d123      	bne.n	8004a24 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049de:	f000 fade 	bl	8004f9e <prvIsQueueEmpty>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d017      	beq.n	8004a18 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ea:	3324      	adds	r3, #36	; 0x24
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	4611      	mov	r1, r2
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 ffc1 	bl	8005978 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049f8:	f000 fa7f 	bl	8004efa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049fc:	f000 fdf0 	bl	80055e0 <xTaskResumeAll>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d189      	bne.n	800491a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004a06:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <xQueueReceive+0x1bc>)
 8004a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	e780      	b.n	800491a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a1a:	f000 fa6e 	bl	8004efa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a1e:	f000 fddf 	bl	80055e0 <xTaskResumeAll>
 8004a22:	e77a      	b.n	800491a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a26:	f000 fa68 	bl	8004efa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a2a:	f000 fdd9 	bl	80055e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a30:	f000 fab5 	bl	8004f9e <prvIsQueueEmpty>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f43f af6f 	beq.w	800491a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3730      	adds	r7, #48	; 0x30
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	e000ed04 	.word	0xe000ed04

08004a4c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08e      	sub	sp, #56	; 0x38
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10a      	bne.n	8004a7e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	623b      	str	r3, [r7, #32]
}
 8004a7a:	bf00      	nop
 8004a7c:	e7fe      	b.n	8004a7c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8a:	f383 8811 	msr	BASEPRI, r3
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f3bf 8f4f 	dsb	sy
 8004a96:	61fb      	str	r3, [r7, #28]
}
 8004a98:	bf00      	nop
 8004a9a:	e7fe      	b.n	8004a9a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a9c:	f001 f97e 	bl	8005d9c <xTaskGetSchedulerState>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d102      	bne.n	8004aac <xQueueSemaphoreTake+0x60>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <xQueueSemaphoreTake+0x64>
 8004aac:	2301      	movs	r3, #1
 8004aae:	e000      	b.n	8004ab2 <xQueueSemaphoreTake+0x66>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10a      	bne.n	8004acc <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	61bb      	str	r3, [r7, #24]
}
 8004ac8:	bf00      	nop
 8004aca:	e7fe      	b.n	8004aca <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004acc:	f001 ffc2 	bl	8006a54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d024      	beq.n	8004b26 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	1e5a      	subs	r2, r3, #1
 8004ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d104      	bne.n	8004af6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004aec:	f001 facc 	bl	8006088 <pvTaskIncrementMutexHeldCount>
 8004af0:	4602      	mov	r2, r0
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00f      	beq.n	8004b1e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b00:	3310      	adds	r3, #16
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 ff88 	bl	8005a18 <xTaskRemoveFromEventList>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d007      	beq.n	8004b1e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b0e:	4b54      	ldr	r3, [pc, #336]	; (8004c60 <xQueueSemaphoreTake+0x214>)
 8004b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b1e:	f001 ffc9 	bl	8006ab4 <vPortExitCritical>
				return pdPASS;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e097      	b.n	8004c56 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d111      	bne.n	8004b50 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	617b      	str	r3, [r7, #20]
}
 8004b44:	bf00      	nop
 8004b46:	e7fe      	b.n	8004b46 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004b48:	f001 ffb4 	bl	8006ab4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	e082      	b.n	8004c56 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d106      	bne.n	8004b64 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b56:	f107 030c 	add.w	r3, r7, #12
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 ffc0 	bl	8005ae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b60:	2301      	movs	r3, #1
 8004b62:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b64:	f001 ffa6 	bl	8006ab4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b68:	f000 fd2c 	bl	80055c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b6c:	f001 ff72 	bl	8006a54 <vPortEnterCritical>
 8004b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b76:	b25b      	sxtb	r3, r3
 8004b78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b7c:	d103      	bne.n	8004b86 <xQueueSemaphoreTake+0x13a>
 8004b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b8c:	b25b      	sxtb	r3, r3
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b92:	d103      	bne.n	8004b9c <xQueueSemaphoreTake+0x150>
 8004b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b9c:	f001 ff8a 	bl	8006ab4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ba0:	463a      	mov	r2, r7
 8004ba2:	f107 030c 	add.w	r3, r7, #12
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 ffaf 	bl	8005b0c <xTaskCheckForTimeOut>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d132      	bne.n	8004c1a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bb6:	f000 f9f2 	bl	8004f9e <prvIsQueueEmpty>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d026      	beq.n	8004c0e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d109      	bne.n	8004bdc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004bc8:	f001 ff44 	bl	8006a54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f001 f901 	bl	8005dd8 <xTaskPriorityInherit>
 8004bd6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004bd8:	f001 ff6c 	bl	8006ab4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bde:	3324      	adds	r3, #36	; 0x24
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	4611      	mov	r1, r2
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fec7 	bl	8005978 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bec:	f000 f985 	bl	8004efa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bf0:	f000 fcf6 	bl	80055e0 <xTaskResumeAll>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f47f af68 	bne.w	8004acc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004bfc:	4b18      	ldr	r3, [pc, #96]	; (8004c60 <xQueueSemaphoreTake+0x214>)
 8004bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	e75e      	b.n	8004acc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004c0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c10:	f000 f973 	bl	8004efa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c14:	f000 fce4 	bl	80055e0 <xTaskResumeAll>
 8004c18:	e758      	b.n	8004acc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004c1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c1c:	f000 f96d 	bl	8004efa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c20:	f000 fcde 	bl	80055e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c26:	f000 f9ba 	bl	8004f9e <prvIsQueueEmpty>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f43f af4d 	beq.w	8004acc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00d      	beq.n	8004c54 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004c38:	f001 ff0c 	bl	8006a54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004c3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c3e:	f000 f8b4 	bl	8004daa <prvGetDisinheritPriorityAfterTimeout>
 8004c42:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f001 f99a 	bl	8005f84 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004c50:	f001 ff30 	bl	8006ab4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3738      	adds	r7, #56	; 0x38
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	e000ed04 	.word	0xe000ed04

08004c64 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08e      	sub	sp, #56	; 0x38
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10a      	bne.n	8004c90 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	623b      	str	r3, [r7, #32]
}
 8004c8c:	bf00      	nop
 8004c8e:	e7fe      	b.n	8004c8e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d103      	bne.n	8004c9e <xQueueReceiveFromISR+0x3a>
 8004c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <xQueueReceiveFromISR+0x3e>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e000      	b.n	8004ca4 <xQueueReceiveFromISR+0x40>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10a      	bne.n	8004cbe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	61fb      	str	r3, [r7, #28]
}
 8004cba:	bf00      	nop
 8004cbc:	e7fe      	b.n	8004cbc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cbe:	f001 ffab 	bl	8006c18 <vPortValidateInterruptPriority>
	__asm volatile
 8004cc2:	f3ef 8211 	mrs	r2, BASEPRI
 8004cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	61ba      	str	r2, [r7, #24]
 8004cd8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004cda:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d02f      	beq.n	8004d4a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cf8:	f000 f8d9 	bl	8004eae <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	1e5a      	subs	r2, r3, #1
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004d04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004d08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d0c:	d112      	bne.n	8004d34 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d016      	beq.n	8004d44 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d18:	3310      	adds	r3, #16
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fe7c 	bl	8005a18 <xTaskRemoveFromEventList>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00e      	beq.n	8004d44 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00b      	beq.n	8004d44 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	e007      	b.n	8004d44 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004d34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d38:	3301      	adds	r3, #1
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	b25a      	sxtb	r2, r3
 8004d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004d44:	2301      	movs	r3, #1
 8004d46:	637b      	str	r3, [r7, #52]	; 0x34
 8004d48:	e001      	b.n	8004d4e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d50:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f383 8811 	msr	BASEPRI, r3
}
 8004d58:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3738      	adds	r7, #56	; 0x38
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10a      	bne.n	8004d8c <vQueueDelete+0x28>
	__asm volatile
 8004d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	60bb      	str	r3, [r7, #8]
}
 8004d88:	bf00      	nop
 8004d8a:	e7fe      	b.n	8004d8a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 f95f 	bl	8005050 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f002 f847 	bl	8006e30 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004da2:	bf00      	nop
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004daa:	b480      	push	{r7}
 8004dac:	b085      	sub	sp, #20
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d006      	beq.n	8004dc8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	e001      	b.n	8004dcc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
	}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b086      	sub	sp, #24
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	60f8      	str	r0, [r7, #12]
 8004de2:	60b9      	str	r1, [r7, #8]
 8004de4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10d      	bne.n	8004e14 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d14d      	bne.n	8004e9c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f001 f84f 	bl	8005ea8 <xTaskPriorityDisinherit>
 8004e0a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	609a      	str	r2, [r3, #8]
 8004e12:	e043      	b.n	8004e9c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d119      	bne.n	8004e4e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6858      	ldr	r0, [r3, #4]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	461a      	mov	r2, r3
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	f002 fbe8 	bl	80075fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	441a      	add	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d32b      	bcc.n	8004e9c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	605a      	str	r2, [r3, #4]
 8004e4c:	e026      	b.n	8004e9c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	68d8      	ldr	r0, [r3, #12]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	461a      	mov	r2, r3
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	f002 fbce 	bl	80075fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	425b      	negs	r3, r3
 8004e68:	441a      	add	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d207      	bcs.n	8004e8a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	425b      	negs	r3, r3
 8004e84:	441a      	add	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d105      	bne.n	8004e9c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ea4:	697b      	ldr	r3, [r7, #20]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b082      	sub	sp, #8
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d018      	beq.n	8004ef2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec8:	441a      	add	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d303      	bcc.n	8004ee2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68d9      	ldr	r1, [r3, #12]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	461a      	mov	r2, r3
 8004eec:	6838      	ldr	r0, [r7, #0]
 8004eee:	f002 fb84 	bl	80075fa <memcpy>
	}
}
 8004ef2:	bf00      	nop
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f02:	f001 fda7 	bl	8006a54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f0c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f0e:	e011      	b.n	8004f34 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d012      	beq.n	8004f3e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3324      	adds	r3, #36	; 0x24
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 fd7b 	bl	8005a18 <xTaskRemoveFromEventList>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f28:	f000 fe52 	bl	8005bd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	dce9      	bgt.n	8004f10 <prvUnlockQueue+0x16>
 8004f3c:	e000      	b.n	8004f40 <prvUnlockQueue+0x46>
					break;
 8004f3e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	22ff      	movs	r2, #255	; 0xff
 8004f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f48:	f001 fdb4 	bl	8006ab4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f4c:	f001 fd82 	bl	8006a54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f56:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f58:	e011      	b.n	8004f7e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d012      	beq.n	8004f88 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3310      	adds	r3, #16
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fd56 	bl	8005a18 <xTaskRemoveFromEventList>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f72:	f000 fe2d 	bl	8005bd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f76:	7bbb      	ldrb	r3, [r7, #14]
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	dce9      	bgt.n	8004f5a <prvUnlockQueue+0x60>
 8004f86:	e000      	b.n	8004f8a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f88:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	22ff      	movs	r2, #255	; 0xff
 8004f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f92:	f001 fd8f 	bl	8006ab4 <vPortExitCritical>
}
 8004f96:	bf00      	nop
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fa6:	f001 fd55 	bl	8006a54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d102      	bne.n	8004fb8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	e001      	b.n	8004fbc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fbc:	f001 fd7a 	bl	8006ab4 <vPortExitCritical>

	return xReturn;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b084      	sub	sp, #16
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fd2:	f001 fd3f 	bl	8006a54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d102      	bne.n	8004fe8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	e001      	b.n	8004fec <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fec:	f001 fd62 	bl	8006ab4 <vPortExitCritical>

	return xReturn;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	e014      	b.n	8005036 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800500c:	4a0f      	ldr	r2, [pc, #60]	; (800504c <vQueueAddToRegistry+0x50>)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10b      	bne.n	8005030 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005018:	490c      	ldr	r1, [pc, #48]	; (800504c <vQueueAddToRegistry+0x50>)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005022:	4a0a      	ldr	r2, [pc, #40]	; (800504c <vQueueAddToRegistry+0x50>)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	4413      	add	r3, r2
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800502e:	e006      	b.n	800503e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3301      	adds	r3, #1
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2b07      	cmp	r3, #7
 800503a:	d9e7      	bls.n	800500c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	200008cc 	.word	0x200008cc

08005050 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005058:	2300      	movs	r3, #0
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	e016      	b.n	800508c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800505e:	4a10      	ldr	r2, [pc, #64]	; (80050a0 <vQueueUnregisterQueue+0x50>)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	4413      	add	r3, r2
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	429a      	cmp	r2, r3
 800506c:	d10b      	bne.n	8005086 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800506e:	4a0c      	ldr	r2, [pc, #48]	; (80050a0 <vQueueUnregisterQueue+0x50>)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2100      	movs	r1, #0
 8005074:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005078:	4a09      	ldr	r2, [pc, #36]	; (80050a0 <vQueueUnregisterQueue+0x50>)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	4413      	add	r3, r2
 8005080:	2200      	movs	r2, #0
 8005082:	605a      	str	r2, [r3, #4]
				break;
 8005084:	e006      	b.n	8005094 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	3301      	adds	r3, #1
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b07      	cmp	r3, #7
 8005090:	d9e5      	bls.n	800505e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	200008cc 	.word	0x200008cc

080050a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80050b4:	f001 fcce 	bl	8006a54 <vPortEnterCritical>
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050be:	b25b      	sxtb	r3, r3
 80050c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050c4:	d103      	bne.n	80050ce <vQueueWaitForMessageRestricted+0x2a>
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050d4:	b25b      	sxtb	r3, r3
 80050d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050da:	d103      	bne.n	80050e4 <vQueueWaitForMessageRestricted+0x40>
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050e4:	f001 fce6 	bl	8006ab4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d106      	bne.n	80050fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	3324      	adds	r3, #36	; 0x24
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	68b9      	ldr	r1, [r7, #8]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fc61 	bl	80059c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80050fe:	6978      	ldr	r0, [r7, #20]
 8005100:	f7ff fefb 	bl	8004efa <prvUnlockQueue>
	}
 8005104:	bf00      	nop
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08e      	sub	sp, #56	; 0x38
 8005110:	af04      	add	r7, sp, #16
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800511a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10a      	bne.n	8005136 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	623b      	str	r3, [r7, #32]
}
 8005132:	bf00      	nop
 8005134:	e7fe      	b.n	8005134 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10a      	bne.n	8005152 <xTaskCreateStatic+0x46>
	__asm volatile
 800513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	61fb      	str	r3, [r7, #28]
}
 800514e:	bf00      	nop
 8005150:	e7fe      	b.n	8005150 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005152:	23a8      	movs	r3, #168	; 0xa8
 8005154:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	2ba8      	cmp	r3, #168	; 0xa8
 800515a:	d00a      	beq.n	8005172 <xTaskCreateStatic+0x66>
	__asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	61bb      	str	r3, [r7, #24]
}
 800516e:	bf00      	nop
 8005170:	e7fe      	b.n	8005170 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005172:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005176:	2b00      	cmp	r3, #0
 8005178:	d01e      	beq.n	80051b8 <xTaskCreateStatic+0xac>
 800517a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01b      	beq.n	80051b8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005188:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	2202      	movs	r2, #2
 800518e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005192:	2300      	movs	r3, #0
 8005194:	9303      	str	r3, [sp, #12]
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	9302      	str	r3, [sp, #8]
 800519a:	f107 0314 	add.w	r3, r7, #20
 800519e:	9301      	str	r3, [sp, #4]
 80051a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	68b9      	ldr	r1, [r7, #8]
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 f850 	bl	8005250 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051b2:	f000 f8f3 	bl	800539c <prvAddNewTaskToReadyList>
 80051b6:	e001      	b.n	80051bc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80051b8:	2300      	movs	r3, #0
 80051ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051bc:	697b      	ldr	r3, [r7, #20]
	}
 80051be:	4618      	mov	r0, r3
 80051c0:	3728      	adds	r7, #40	; 0x28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b08c      	sub	sp, #48	; 0x30
 80051ca:	af04      	add	r7, sp, #16
 80051cc:	60f8      	str	r0, [r7, #12]
 80051ce:	60b9      	str	r1, [r7, #8]
 80051d0:	603b      	str	r3, [r7, #0]
 80051d2:	4613      	mov	r3, r2
 80051d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80051d6:	88fb      	ldrh	r3, [r7, #6]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4618      	mov	r0, r3
 80051dc:	f001 fd5c 	bl	8006c98 <pvPortMalloc>
 80051e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00e      	beq.n	8005206 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80051e8:	20a8      	movs	r0, #168	; 0xa8
 80051ea:	f001 fd55 	bl	8006c98 <pvPortMalloc>
 80051ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	631a      	str	r2, [r3, #48]	; 0x30
 80051fc:	e005      	b.n	800520a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051fe:	6978      	ldr	r0, [r7, #20]
 8005200:	f001 fe16 	bl	8006e30 <vPortFree>
 8005204:	e001      	b.n	800520a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005206:	2300      	movs	r3, #0
 8005208:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d017      	beq.n	8005240 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005218:	88fa      	ldrh	r2, [r7, #6]
 800521a:	2300      	movs	r3, #0
 800521c:	9303      	str	r3, [sp, #12]
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	9302      	str	r3, [sp, #8]
 8005222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005224:	9301      	str	r3, [sp, #4]
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 f80e 	bl	8005250 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005234:	69f8      	ldr	r0, [r7, #28]
 8005236:	f000 f8b1 	bl	800539c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800523a:	2301      	movs	r3, #1
 800523c:	61bb      	str	r3, [r7, #24]
 800523e:	e002      	b.n	8005246 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005244:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005246:	69bb      	ldr	r3, [r7, #24]
	}
 8005248:	4618      	mov	r0, r3
 800524a:	3720      	adds	r7, #32
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	461a      	mov	r2, r3
 8005268:	21a5      	movs	r1, #165	; 0xa5
 800526a:	f002 f8f5 	bl	8007458 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005278:	3b01      	subs	r3, #1
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	f023 0307 	bic.w	r3, r3, #7
 8005286:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	617b      	str	r3, [r7, #20]
}
 80052a4:	bf00      	nop
 80052a6:	e7fe      	b.n	80052a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d01f      	beq.n	80052ee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
 80052b2:	e012      	b.n	80052da <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	4413      	add	r3, r2
 80052ba:	7819      	ldrb	r1, [r3, #0]
 80052bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	4413      	add	r3, r2
 80052c2:	3334      	adds	r3, #52	; 0x34
 80052c4:	460a      	mov	r2, r1
 80052c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	4413      	add	r3, r2
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d006      	beq.n	80052e2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	3301      	adds	r3, #1
 80052d8:	61fb      	str	r3, [r7, #28]
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	2b0f      	cmp	r3, #15
 80052de:	d9e9      	bls.n	80052b4 <prvInitialiseNewTask+0x64>
 80052e0:	e000      	b.n	80052e4 <prvInitialiseNewTask+0x94>
			{
				break;
 80052e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052ec:	e003      	b.n	80052f6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f8:	2b37      	cmp	r3, #55	; 0x37
 80052fa:	d901      	bls.n	8005300 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052fc:	2337      	movs	r3, #55	; 0x37
 80052fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005304:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800530a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800530c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530e:	2200      	movs	r2, #0
 8005310:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005314:	3304      	adds	r3, #4
 8005316:	4618      	mov	r0, r3
 8005318:	f7fe fe56 	bl	8003fc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	3318      	adds	r3, #24
 8005320:	4618      	mov	r0, r3
 8005322:	f7fe fe51 	bl	8003fc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800532a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800533a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	2200      	movs	r2, #0
 8005340:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	2200      	movs	r2, #0
 8005348:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	3354      	adds	r3, #84	; 0x54
 8005350:	224c      	movs	r2, #76	; 0x4c
 8005352:	2100      	movs	r1, #0
 8005354:	4618      	mov	r0, r3
 8005356:	f002 f87f 	bl	8007458 <memset>
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	4a0c      	ldr	r2, [pc, #48]	; (8005390 <prvInitialiseNewTask+0x140>)
 800535e:	659a      	str	r2, [r3, #88]	; 0x58
 8005360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005362:	4a0c      	ldr	r2, [pc, #48]	; (8005394 <prvInitialiseNewTask+0x144>)
 8005364:	65da      	str	r2, [r3, #92]	; 0x5c
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	4a0b      	ldr	r2, [pc, #44]	; (8005398 <prvInitialiseNewTask+0x148>)
 800536a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	68f9      	ldr	r1, [r7, #12]
 8005370:	69b8      	ldr	r0, [r7, #24]
 8005372:	f001 fa3f 	bl	80067f4 <pxPortInitialiseStack>
 8005376:	4602      	mov	r2, r0
 8005378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800537c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005386:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005388:	bf00      	nop
 800538a:	3720      	adds	r7, #32
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	20001b18 	.word	0x20001b18
 8005394:	20001b80 	.word	0x20001b80
 8005398:	20001be8 	.word	0x20001be8

0800539c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80053a4:	f001 fb56 	bl	8006a54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80053a8:	4b2d      	ldr	r3, [pc, #180]	; (8005460 <prvAddNewTaskToReadyList+0xc4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3301      	adds	r3, #1
 80053ae:	4a2c      	ldr	r2, [pc, #176]	; (8005460 <prvAddNewTaskToReadyList+0xc4>)
 80053b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80053b2:	4b2c      	ldr	r3, [pc, #176]	; (8005464 <prvAddNewTaskToReadyList+0xc8>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d109      	bne.n	80053ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053ba:	4a2a      	ldr	r2, [pc, #168]	; (8005464 <prvAddNewTaskToReadyList+0xc8>)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053c0:	4b27      	ldr	r3, [pc, #156]	; (8005460 <prvAddNewTaskToReadyList+0xc4>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d110      	bne.n	80053ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053c8:	f000 fc26 	bl	8005c18 <prvInitialiseTaskLists>
 80053cc:	e00d      	b.n	80053ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053ce:	4b26      	ldr	r3, [pc, #152]	; (8005468 <prvAddNewTaskToReadyList+0xcc>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d109      	bne.n	80053ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053d6:	4b23      	ldr	r3, [pc, #140]	; (8005464 <prvAddNewTaskToReadyList+0xc8>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d802      	bhi.n	80053ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053e4:	4a1f      	ldr	r2, [pc, #124]	; (8005464 <prvAddNewTaskToReadyList+0xc8>)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053ea:	4b20      	ldr	r3, [pc, #128]	; (800546c <prvAddNewTaskToReadyList+0xd0>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3301      	adds	r3, #1
 80053f0:	4a1e      	ldr	r2, [pc, #120]	; (800546c <prvAddNewTaskToReadyList+0xd0>)
 80053f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80053f4:	4b1d      	ldr	r3, [pc, #116]	; (800546c <prvAddNewTaskToReadyList+0xd0>)
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005400:	4b1b      	ldr	r3, [pc, #108]	; (8005470 <prvAddNewTaskToReadyList+0xd4>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d903      	bls.n	8005410 <prvAddNewTaskToReadyList+0x74>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540c:	4a18      	ldr	r2, [pc, #96]	; (8005470 <prvAddNewTaskToReadyList+0xd4>)
 800540e:	6013      	str	r3, [r2, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4a15      	ldr	r2, [pc, #84]	; (8005474 <prvAddNewTaskToReadyList+0xd8>)
 800541e:	441a      	add	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3304      	adds	r3, #4
 8005424:	4619      	mov	r1, r3
 8005426:	4610      	mov	r0, r2
 8005428:	f7fe fddb 	bl	8003fe2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800542c:	f001 fb42 	bl	8006ab4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005430:	4b0d      	ldr	r3, [pc, #52]	; (8005468 <prvAddNewTaskToReadyList+0xcc>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00e      	beq.n	8005456 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005438:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <prvAddNewTaskToReadyList+0xc8>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005442:	429a      	cmp	r2, r3
 8005444:	d207      	bcs.n	8005456 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005446:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <prvAddNewTaskToReadyList+0xdc>)
 8005448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005456:	bf00      	nop
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20000de0 	.word	0x20000de0
 8005464:	2000090c 	.word	0x2000090c
 8005468:	20000dec 	.word	0x20000dec
 800546c:	20000dfc 	.word	0x20000dfc
 8005470:	20000de8 	.word	0x20000de8
 8005474:	20000910 	.word	0x20000910
 8005478:	e000ed04 	.word	0xe000ed04

0800547c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005484:	2300      	movs	r3, #0
 8005486:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d017      	beq.n	80054be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800548e:	4b13      	ldr	r3, [pc, #76]	; (80054dc <vTaskDelay+0x60>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <vTaskDelay+0x30>
	__asm volatile
 8005496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	60bb      	str	r3, [r7, #8]
}
 80054a8:	bf00      	nop
 80054aa:	e7fe      	b.n	80054aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80054ac:	f000 f88a 	bl	80055c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054b0:	2100      	movs	r1, #0
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fdfc 	bl	80060b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80054b8:	f000 f892 	bl	80055e0 <xTaskResumeAll>
 80054bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d107      	bne.n	80054d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80054c4:	4b06      	ldr	r3, [pc, #24]	; (80054e0 <vTaskDelay+0x64>)
 80054c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80054d4:	bf00      	nop
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20000e08 	.word	0x20000e08
 80054e0:	e000ed04 	.word	0xe000ed04

080054e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08a      	sub	sp, #40	; 0x28
 80054e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054f2:	463a      	mov	r2, r7
 80054f4:	1d39      	adds	r1, r7, #4
 80054f6:	f107 0308 	add.w	r3, r7, #8
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fe fd10 	bl	8003f20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005500:	6839      	ldr	r1, [r7, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	9202      	str	r2, [sp, #8]
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	2300      	movs	r3, #0
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	2300      	movs	r3, #0
 8005510:	460a      	mov	r2, r1
 8005512:	4924      	ldr	r1, [pc, #144]	; (80055a4 <vTaskStartScheduler+0xc0>)
 8005514:	4824      	ldr	r0, [pc, #144]	; (80055a8 <vTaskStartScheduler+0xc4>)
 8005516:	f7ff fdf9 	bl	800510c <xTaskCreateStatic>
 800551a:	4603      	mov	r3, r0
 800551c:	4a23      	ldr	r2, [pc, #140]	; (80055ac <vTaskStartScheduler+0xc8>)
 800551e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005520:	4b22      	ldr	r3, [pc, #136]	; (80055ac <vTaskStartScheduler+0xc8>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005528:	2301      	movs	r3, #1
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	e001      	b.n	8005532 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800552e:	2300      	movs	r3, #0
 8005530:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d102      	bne.n	800553e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005538:	f000 fe0e 	bl	8006158 <xTimerCreateTimerTask>
 800553c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d11b      	bne.n	800557c <vTaskStartScheduler+0x98>
	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	613b      	str	r3, [r7, #16]
}
 8005556:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005558:	4b15      	ldr	r3, [pc, #84]	; (80055b0 <vTaskStartScheduler+0xcc>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3354      	adds	r3, #84	; 0x54
 800555e:	4a15      	ldr	r2, [pc, #84]	; (80055b4 <vTaskStartScheduler+0xd0>)
 8005560:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005562:	4b15      	ldr	r3, [pc, #84]	; (80055b8 <vTaskStartScheduler+0xd4>)
 8005564:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005568:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800556a:	4b14      	ldr	r3, [pc, #80]	; (80055bc <vTaskStartScheduler+0xd8>)
 800556c:	2201      	movs	r2, #1
 800556e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005570:	4b13      	ldr	r3, [pc, #76]	; (80055c0 <vTaskStartScheduler+0xdc>)
 8005572:	2200      	movs	r2, #0
 8005574:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005576:	f001 f9cb 	bl	8006910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800557a:	e00e      	b.n	800559a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005582:	d10a      	bne.n	800559a <vTaskStartScheduler+0xb6>
	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	60fb      	str	r3, [r7, #12]
}
 8005596:	bf00      	nop
 8005598:	e7fe      	b.n	8005598 <vTaskStartScheduler+0xb4>
}
 800559a:	bf00      	nop
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	08007bdc 	.word	0x08007bdc
 80055a8:	08005be9 	.word	0x08005be9
 80055ac:	20000e04 	.word	0x20000e04
 80055b0:	2000090c 	.word	0x2000090c
 80055b4:	20000068 	.word	0x20000068
 80055b8:	20000e00 	.word	0x20000e00
 80055bc:	20000dec 	.word	0x20000dec
 80055c0:	20000de4 	.word	0x20000de4

080055c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80055c8:	4b04      	ldr	r3, [pc, #16]	; (80055dc <vTaskSuspendAll+0x18>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3301      	adds	r3, #1
 80055ce:	4a03      	ldr	r2, [pc, #12]	; (80055dc <vTaskSuspendAll+0x18>)
 80055d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80055d2:	bf00      	nop
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	20000e08 	.word	0x20000e08

080055e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055ee:	4b42      	ldr	r3, [pc, #264]	; (80056f8 <xTaskResumeAll+0x118>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10a      	bne.n	800560c <xTaskResumeAll+0x2c>
	__asm volatile
 80055f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	603b      	str	r3, [r7, #0]
}
 8005608:	bf00      	nop
 800560a:	e7fe      	b.n	800560a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800560c:	f001 fa22 	bl	8006a54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005610:	4b39      	ldr	r3, [pc, #228]	; (80056f8 <xTaskResumeAll+0x118>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3b01      	subs	r3, #1
 8005616:	4a38      	ldr	r2, [pc, #224]	; (80056f8 <xTaskResumeAll+0x118>)
 8005618:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800561a:	4b37      	ldr	r3, [pc, #220]	; (80056f8 <xTaskResumeAll+0x118>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d162      	bne.n	80056e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005622:	4b36      	ldr	r3, [pc, #216]	; (80056fc <xTaskResumeAll+0x11c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d05e      	beq.n	80056e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800562a:	e02f      	b.n	800568c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800562c:	4b34      	ldr	r3, [pc, #208]	; (8005700 <xTaskResumeAll+0x120>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	3318      	adds	r3, #24
 8005638:	4618      	mov	r0, r3
 800563a:	f7fe fd2f 	bl	800409c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	3304      	adds	r3, #4
 8005642:	4618      	mov	r0, r3
 8005644:	f7fe fd2a 	bl	800409c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564c:	4b2d      	ldr	r3, [pc, #180]	; (8005704 <xTaskResumeAll+0x124>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d903      	bls.n	800565c <xTaskResumeAll+0x7c>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	4a2a      	ldr	r2, [pc, #168]	; (8005704 <xTaskResumeAll+0x124>)
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005660:	4613      	mov	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4a27      	ldr	r2, [pc, #156]	; (8005708 <xTaskResumeAll+0x128>)
 800566a:	441a      	add	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3304      	adds	r3, #4
 8005670:	4619      	mov	r1, r3
 8005672:	4610      	mov	r0, r2
 8005674:	f7fe fcb5 	bl	8003fe2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567c:	4b23      	ldr	r3, [pc, #140]	; (800570c <xTaskResumeAll+0x12c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005682:	429a      	cmp	r2, r3
 8005684:	d302      	bcc.n	800568c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005686:	4b22      	ldr	r3, [pc, #136]	; (8005710 <xTaskResumeAll+0x130>)
 8005688:	2201      	movs	r2, #1
 800568a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800568c:	4b1c      	ldr	r3, [pc, #112]	; (8005700 <xTaskResumeAll+0x120>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1cb      	bne.n	800562c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800569a:	f000 fb5f 	bl	8005d5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800569e:	4b1d      	ldr	r3, [pc, #116]	; (8005714 <xTaskResumeAll+0x134>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d010      	beq.n	80056cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056aa:	f000 f847 	bl	800573c <xTaskIncrementTick>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80056b4:	4b16      	ldr	r3, [pc, #88]	; (8005710 <xTaskResumeAll+0x130>)
 80056b6:	2201      	movs	r2, #1
 80056b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3b01      	subs	r3, #1
 80056be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1f1      	bne.n	80056aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80056c6:	4b13      	ldr	r3, [pc, #76]	; (8005714 <xTaskResumeAll+0x134>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80056cc:	4b10      	ldr	r3, [pc, #64]	; (8005710 <xTaskResumeAll+0x130>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d009      	beq.n	80056e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80056d4:	2301      	movs	r3, #1
 80056d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80056d8:	4b0f      	ldr	r3, [pc, #60]	; (8005718 <xTaskResumeAll+0x138>)
 80056da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056e8:	f001 f9e4 	bl	8006ab4 <vPortExitCritical>

	return xAlreadyYielded;
 80056ec:	68bb      	ldr	r3, [r7, #8]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20000e08 	.word	0x20000e08
 80056fc:	20000de0 	.word	0x20000de0
 8005700:	20000da0 	.word	0x20000da0
 8005704:	20000de8 	.word	0x20000de8
 8005708:	20000910 	.word	0x20000910
 800570c:	2000090c 	.word	0x2000090c
 8005710:	20000df4 	.word	0x20000df4
 8005714:	20000df0 	.word	0x20000df0
 8005718:	e000ed04 	.word	0xe000ed04

0800571c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005722:	4b05      	ldr	r3, [pc, #20]	; (8005738 <xTaskGetTickCount+0x1c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005728:	687b      	ldr	r3, [r7, #4]
}
 800572a:	4618      	mov	r0, r3
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	20000de4 	.word	0x20000de4

0800573c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005742:	2300      	movs	r3, #0
 8005744:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005746:	4b4f      	ldr	r3, [pc, #316]	; (8005884 <xTaskIncrementTick+0x148>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	f040 808f 	bne.w	800586e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005750:	4b4d      	ldr	r3, [pc, #308]	; (8005888 <xTaskIncrementTick+0x14c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3301      	adds	r3, #1
 8005756:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005758:	4a4b      	ldr	r2, [pc, #300]	; (8005888 <xTaskIncrementTick+0x14c>)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d120      	bne.n	80057a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005764:	4b49      	ldr	r3, [pc, #292]	; (800588c <xTaskIncrementTick+0x150>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <xTaskIncrementTick+0x48>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	603b      	str	r3, [r7, #0]
}
 8005780:	bf00      	nop
 8005782:	e7fe      	b.n	8005782 <xTaskIncrementTick+0x46>
 8005784:	4b41      	ldr	r3, [pc, #260]	; (800588c <xTaskIncrementTick+0x150>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	60fb      	str	r3, [r7, #12]
 800578a:	4b41      	ldr	r3, [pc, #260]	; (8005890 <xTaskIncrementTick+0x154>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a3f      	ldr	r2, [pc, #252]	; (800588c <xTaskIncrementTick+0x150>)
 8005790:	6013      	str	r3, [r2, #0]
 8005792:	4a3f      	ldr	r2, [pc, #252]	; (8005890 <xTaskIncrementTick+0x154>)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	4b3e      	ldr	r3, [pc, #248]	; (8005894 <xTaskIncrementTick+0x158>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3301      	adds	r3, #1
 800579e:	4a3d      	ldr	r2, [pc, #244]	; (8005894 <xTaskIncrementTick+0x158>)
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	f000 fadb 	bl	8005d5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057a6:	4b3c      	ldr	r3, [pc, #240]	; (8005898 <xTaskIncrementTick+0x15c>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d349      	bcc.n	8005844 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057b0:	4b36      	ldr	r3, [pc, #216]	; (800588c <xTaskIncrementTick+0x150>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d104      	bne.n	80057c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ba:	4b37      	ldr	r3, [pc, #220]	; (8005898 <xTaskIncrementTick+0x15c>)
 80057bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057c0:	601a      	str	r2, [r3, #0]
					break;
 80057c2:	e03f      	b.n	8005844 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c4:	4b31      	ldr	r3, [pc, #196]	; (800588c <xTaskIncrementTick+0x150>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d203      	bcs.n	80057e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057dc:	4a2e      	ldr	r2, [pc, #184]	; (8005898 <xTaskIncrementTick+0x15c>)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057e2:	e02f      	b.n	8005844 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	3304      	adds	r3, #4
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fe fc57 	bl	800409c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d004      	beq.n	8005800 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	3318      	adds	r3, #24
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe fc4e 	bl	800409c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005804:	4b25      	ldr	r3, [pc, #148]	; (800589c <xTaskIncrementTick+0x160>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d903      	bls.n	8005814 <xTaskIncrementTick+0xd8>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005810:	4a22      	ldr	r2, [pc, #136]	; (800589c <xTaskIncrementTick+0x160>)
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4a1f      	ldr	r2, [pc, #124]	; (80058a0 <xTaskIncrementTick+0x164>)
 8005822:	441a      	add	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	3304      	adds	r3, #4
 8005828:	4619      	mov	r1, r3
 800582a:	4610      	mov	r0, r2
 800582c:	f7fe fbd9 	bl	8003fe2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005834:	4b1b      	ldr	r3, [pc, #108]	; (80058a4 <xTaskIncrementTick+0x168>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583a:	429a      	cmp	r2, r3
 800583c:	d3b8      	bcc.n	80057b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800583e:	2301      	movs	r3, #1
 8005840:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005842:	e7b5      	b.n	80057b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005844:	4b17      	ldr	r3, [pc, #92]	; (80058a4 <xTaskIncrementTick+0x168>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584a:	4915      	ldr	r1, [pc, #84]	; (80058a0 <xTaskIncrementTick+0x164>)
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	440b      	add	r3, r1
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d901      	bls.n	8005860 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800585c:	2301      	movs	r3, #1
 800585e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005860:	4b11      	ldr	r3, [pc, #68]	; (80058a8 <xTaskIncrementTick+0x16c>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d007      	beq.n	8005878 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005868:	2301      	movs	r3, #1
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	e004      	b.n	8005878 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800586e:	4b0f      	ldr	r3, [pc, #60]	; (80058ac <xTaskIncrementTick+0x170>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3301      	adds	r3, #1
 8005874:	4a0d      	ldr	r2, [pc, #52]	; (80058ac <xTaskIncrementTick+0x170>)
 8005876:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005878:	697b      	ldr	r3, [r7, #20]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	20000e08 	.word	0x20000e08
 8005888:	20000de4 	.word	0x20000de4
 800588c:	20000d98 	.word	0x20000d98
 8005890:	20000d9c 	.word	0x20000d9c
 8005894:	20000df8 	.word	0x20000df8
 8005898:	20000e00 	.word	0x20000e00
 800589c:	20000de8 	.word	0x20000de8
 80058a0:	20000910 	.word	0x20000910
 80058a4:	2000090c 	.word	0x2000090c
 80058a8:	20000df4 	.word	0x20000df4
 80058ac:	20000df0 	.word	0x20000df0

080058b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058b6:	4b2a      	ldr	r3, [pc, #168]	; (8005960 <vTaskSwitchContext+0xb0>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058be:	4b29      	ldr	r3, [pc, #164]	; (8005964 <vTaskSwitchContext+0xb4>)
 80058c0:	2201      	movs	r2, #1
 80058c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058c4:	e046      	b.n	8005954 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80058c6:	4b27      	ldr	r3, [pc, #156]	; (8005964 <vTaskSwitchContext+0xb4>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058cc:	4b26      	ldr	r3, [pc, #152]	; (8005968 <vTaskSwitchContext+0xb8>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	e010      	b.n	80058f6 <vTaskSwitchContext+0x46>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10a      	bne.n	80058f0 <vTaskSwitchContext+0x40>
	__asm volatile
 80058da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	607b      	str	r3, [r7, #4]
}
 80058ec:	bf00      	nop
 80058ee:	e7fe      	b.n	80058ee <vTaskSwitchContext+0x3e>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	491d      	ldr	r1, [pc, #116]	; (800596c <vTaskSwitchContext+0xbc>)
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4613      	mov	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	440b      	add	r3, r1
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0e4      	beq.n	80058d4 <vTaskSwitchContext+0x24>
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4613      	mov	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4a15      	ldr	r2, [pc, #84]	; (800596c <vTaskSwitchContext+0xbc>)
 8005916:	4413      	add	r3, r2
 8005918:	60bb      	str	r3, [r7, #8]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	605a      	str	r2, [r3, #4]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	3308      	adds	r3, #8
 800592c:	429a      	cmp	r2, r3
 800592e:	d104      	bne.n	800593a <vTaskSwitchContext+0x8a>
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	605a      	str	r2, [r3, #4]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	4a0b      	ldr	r2, [pc, #44]	; (8005970 <vTaskSwitchContext+0xc0>)
 8005942:	6013      	str	r3, [r2, #0]
 8005944:	4a08      	ldr	r2, [pc, #32]	; (8005968 <vTaskSwitchContext+0xb8>)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800594a:	4b09      	ldr	r3, [pc, #36]	; (8005970 <vTaskSwitchContext+0xc0>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3354      	adds	r3, #84	; 0x54
 8005950:	4a08      	ldr	r2, [pc, #32]	; (8005974 <vTaskSwitchContext+0xc4>)
 8005952:	6013      	str	r3, [r2, #0]
}
 8005954:	bf00      	nop
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	20000e08 	.word	0x20000e08
 8005964:	20000df4 	.word	0x20000df4
 8005968:	20000de8 	.word	0x20000de8
 800596c:	20000910 	.word	0x20000910
 8005970:	2000090c 	.word	0x2000090c
 8005974:	20000068 	.word	0x20000068

08005978 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	60fb      	str	r3, [r7, #12]
}
 800599a:	bf00      	nop
 800599c:	e7fe      	b.n	800599c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800599e:	4b07      	ldr	r3, [pc, #28]	; (80059bc <vTaskPlaceOnEventList+0x44>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3318      	adds	r3, #24
 80059a4:	4619      	mov	r1, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fe fb3f 	bl	800402a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059ac:	2101      	movs	r1, #1
 80059ae:	6838      	ldr	r0, [r7, #0]
 80059b0:	f000 fb7e 	bl	80060b0 <prvAddCurrentTaskToDelayedList>
}
 80059b4:	bf00      	nop
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	2000090c 	.word	0x2000090c

080059c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10a      	bne.n	80059e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	617b      	str	r3, [r7, #20]
}
 80059e4:	bf00      	nop
 80059e6:	e7fe      	b.n	80059e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059e8:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <vTaskPlaceOnEventListRestricted+0x54>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3318      	adds	r3, #24
 80059ee:	4619      	mov	r1, r3
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f7fe faf6 	bl	8003fe2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80059fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a00:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a02:	6879      	ldr	r1, [r7, #4]
 8005a04:	68b8      	ldr	r0, [r7, #8]
 8005a06:	f000 fb53 	bl	80060b0 <prvAddCurrentTaskToDelayedList>
	}
 8005a0a:	bf00      	nop
 8005a0c:	3718      	adds	r7, #24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	2000090c 	.word	0x2000090c

08005a18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10a      	bne.n	8005a44 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	60fb      	str	r3, [r7, #12]
}
 8005a40:	bf00      	nop
 8005a42:	e7fe      	b.n	8005a42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	3318      	adds	r3, #24
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fe fb27 	bl	800409c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a4e:	4b1e      	ldr	r3, [pc, #120]	; (8005ac8 <xTaskRemoveFromEventList+0xb0>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d11d      	bne.n	8005a92 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	3304      	adds	r3, #4
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe fb1e 	bl	800409c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a64:	4b19      	ldr	r3, [pc, #100]	; (8005acc <xTaskRemoveFromEventList+0xb4>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d903      	bls.n	8005a74 <xTaskRemoveFromEventList+0x5c>
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	4a16      	ldr	r2, [pc, #88]	; (8005acc <xTaskRemoveFromEventList+0xb4>)
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a78:	4613      	mov	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4a13      	ldr	r2, [pc, #76]	; (8005ad0 <xTaskRemoveFromEventList+0xb8>)
 8005a82:	441a      	add	r2, r3
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	3304      	adds	r3, #4
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	f7fe faa9 	bl	8003fe2 <vListInsertEnd>
 8005a90:	e005      	b.n	8005a9e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	3318      	adds	r3, #24
 8005a96:	4619      	mov	r1, r3
 8005a98:	480e      	ldr	r0, [pc, #56]	; (8005ad4 <xTaskRemoveFromEventList+0xbc>)
 8005a9a:	f7fe faa2 	bl	8003fe2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa2:	4b0d      	ldr	r3, [pc, #52]	; (8005ad8 <xTaskRemoveFromEventList+0xc0>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d905      	bls.n	8005ab8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005aac:	2301      	movs	r3, #1
 8005aae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ab0:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <xTaskRemoveFromEventList+0xc4>)
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	e001      	b.n	8005abc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005abc:	697b      	ldr	r3, [r7, #20]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000e08 	.word	0x20000e08
 8005acc:	20000de8 	.word	0x20000de8
 8005ad0:	20000910 	.word	0x20000910
 8005ad4:	20000da0 	.word	0x20000da0
 8005ad8:	2000090c 	.word	0x2000090c
 8005adc:	20000df4 	.word	0x20000df4

08005ae0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ae8:	4b06      	ldr	r3, [pc, #24]	; (8005b04 <vTaskInternalSetTimeOutState+0x24>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005af0:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <vTaskInternalSetTimeOutState+0x28>)
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	605a      	str	r2, [r3, #4]
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	20000df8 	.word	0x20000df8
 8005b08:	20000de4 	.word	0x20000de4

08005b0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b088      	sub	sp, #32
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10a      	bne.n	8005b32 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	613b      	str	r3, [r7, #16]
}
 8005b2e:	bf00      	nop
 8005b30:	e7fe      	b.n	8005b30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10a      	bne.n	8005b4e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	60fb      	str	r3, [r7, #12]
}
 8005b4a:	bf00      	nop
 8005b4c:	e7fe      	b.n	8005b4c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005b4e:	f000 ff81 	bl	8006a54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b52:	4b1d      	ldr	r3, [pc, #116]	; (8005bc8 <xTaskCheckForTimeOut+0xbc>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b6a:	d102      	bne.n	8005b72 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	61fb      	str	r3, [r7, #28]
 8005b70:	e023      	b.n	8005bba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	4b15      	ldr	r3, [pc, #84]	; (8005bcc <xTaskCheckForTimeOut+0xc0>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d007      	beq.n	8005b8e <xTaskCheckForTimeOut+0x82>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d302      	bcc.n	8005b8e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	61fb      	str	r3, [r7, #28]
 8005b8c:	e015      	b.n	8005bba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d20b      	bcs.n	8005bb0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	1ad2      	subs	r2, r2, r3
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff ff9b 	bl	8005ae0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005baa:	2300      	movs	r3, #0
 8005bac:	61fb      	str	r3, [r7, #28]
 8005bae:	e004      	b.n	8005bba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005bba:	f000 ff7b 	bl	8006ab4 <vPortExitCritical>

	return xReturn;
 8005bbe:	69fb      	ldr	r3, [r7, #28]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3720      	adds	r7, #32
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	20000de4 	.word	0x20000de4
 8005bcc:	20000df8 	.word	0x20000df8

08005bd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005bd4:	4b03      	ldr	r3, [pc, #12]	; (8005be4 <vTaskMissedYield+0x14>)
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]
}
 8005bda:	bf00      	nop
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	20000df4 	.word	0x20000df4

08005be8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005bf0:	f000 f852 	bl	8005c98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005bf4:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <prvIdleTask+0x28>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d9f9      	bls.n	8005bf0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005bfc:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <prvIdleTask+0x2c>)
 8005bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c0c:	e7f0      	b.n	8005bf0 <prvIdleTask+0x8>
 8005c0e:	bf00      	nop
 8005c10:	20000910 	.word	0x20000910
 8005c14:	e000ed04 	.word	0xe000ed04

08005c18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c1e:	2300      	movs	r3, #0
 8005c20:	607b      	str	r3, [r7, #4]
 8005c22:	e00c      	b.n	8005c3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	4613      	mov	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4a12      	ldr	r2, [pc, #72]	; (8005c78 <prvInitialiseTaskLists+0x60>)
 8005c30:	4413      	add	r3, r2
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fe f9a8 	bl	8003f88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	607b      	str	r3, [r7, #4]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b37      	cmp	r3, #55	; 0x37
 8005c42:	d9ef      	bls.n	8005c24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c44:	480d      	ldr	r0, [pc, #52]	; (8005c7c <prvInitialiseTaskLists+0x64>)
 8005c46:	f7fe f99f 	bl	8003f88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c4a:	480d      	ldr	r0, [pc, #52]	; (8005c80 <prvInitialiseTaskLists+0x68>)
 8005c4c:	f7fe f99c 	bl	8003f88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c50:	480c      	ldr	r0, [pc, #48]	; (8005c84 <prvInitialiseTaskLists+0x6c>)
 8005c52:	f7fe f999 	bl	8003f88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c56:	480c      	ldr	r0, [pc, #48]	; (8005c88 <prvInitialiseTaskLists+0x70>)
 8005c58:	f7fe f996 	bl	8003f88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c5c:	480b      	ldr	r0, [pc, #44]	; (8005c8c <prvInitialiseTaskLists+0x74>)
 8005c5e:	f7fe f993 	bl	8003f88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c62:	4b0b      	ldr	r3, [pc, #44]	; (8005c90 <prvInitialiseTaskLists+0x78>)
 8005c64:	4a05      	ldr	r2, [pc, #20]	; (8005c7c <prvInitialiseTaskLists+0x64>)
 8005c66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c68:	4b0a      	ldr	r3, [pc, #40]	; (8005c94 <prvInitialiseTaskLists+0x7c>)
 8005c6a:	4a05      	ldr	r2, [pc, #20]	; (8005c80 <prvInitialiseTaskLists+0x68>)
 8005c6c:	601a      	str	r2, [r3, #0]
}
 8005c6e:	bf00      	nop
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20000910 	.word	0x20000910
 8005c7c:	20000d70 	.word	0x20000d70
 8005c80:	20000d84 	.word	0x20000d84
 8005c84:	20000da0 	.word	0x20000da0
 8005c88:	20000db4 	.word	0x20000db4
 8005c8c:	20000dcc 	.word	0x20000dcc
 8005c90:	20000d98 	.word	0x20000d98
 8005c94:	20000d9c 	.word	0x20000d9c

08005c98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c9e:	e019      	b.n	8005cd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ca0:	f000 fed8 	bl	8006a54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ca4:	4b10      	ldr	r3, [pc, #64]	; (8005ce8 <prvCheckTasksWaitingTermination+0x50>)
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3304      	adds	r3, #4
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fe f9f3 	bl	800409c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005cb6:	4b0d      	ldr	r3, [pc, #52]	; (8005cec <prvCheckTasksWaitingTermination+0x54>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	4a0b      	ldr	r2, [pc, #44]	; (8005cec <prvCheckTasksWaitingTermination+0x54>)
 8005cbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005cc0:	4b0b      	ldr	r3, [pc, #44]	; (8005cf0 <prvCheckTasksWaitingTermination+0x58>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	4a0a      	ldr	r2, [pc, #40]	; (8005cf0 <prvCheckTasksWaitingTermination+0x58>)
 8005cc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005cca:	f000 fef3 	bl	8006ab4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f810 	bl	8005cf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cd4:	4b06      	ldr	r3, [pc, #24]	; (8005cf0 <prvCheckTasksWaitingTermination+0x58>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1e1      	bne.n	8005ca0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cdc:	bf00      	nop
 8005cde:	bf00      	nop
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000db4 	.word	0x20000db4
 8005cec:	20000de0 	.word	0x20000de0
 8005cf0:	20000dc8 	.word	0x20000dc8

08005cf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3354      	adds	r3, #84	; 0x54
 8005d00:	4618      	mov	r0, r3
 8005d02:	f001 fbc1 	bl	8007488 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d108      	bne.n	8005d22 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d14:	4618      	mov	r0, r3
 8005d16:	f001 f88b 	bl	8006e30 <vPortFree>
				vPortFree( pxTCB );
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f001 f888 	bl	8006e30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d20:	e018      	b.n	8005d54 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d103      	bne.n	8005d34 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f001 f87f 	bl	8006e30 <vPortFree>
	}
 8005d32:	e00f      	b.n	8005d54 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d00a      	beq.n	8005d54 <prvDeleteTCB+0x60>
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	60fb      	str	r3, [r7, #12]
}
 8005d50:	bf00      	nop
 8005d52:	e7fe      	b.n	8005d52 <prvDeleteTCB+0x5e>
	}
 8005d54:	bf00      	nop
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d62:	4b0c      	ldr	r3, [pc, #48]	; (8005d94 <prvResetNextTaskUnblockTime+0x38>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d104      	bne.n	8005d76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d6c:	4b0a      	ldr	r3, [pc, #40]	; (8005d98 <prvResetNextTaskUnblockTime+0x3c>)
 8005d6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d74:	e008      	b.n	8005d88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d76:	4b07      	ldr	r3, [pc, #28]	; (8005d94 <prvResetNextTaskUnblockTime+0x38>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	4a04      	ldr	r2, [pc, #16]	; (8005d98 <prvResetNextTaskUnblockTime+0x3c>)
 8005d86:	6013      	str	r3, [r2, #0]
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	20000d98 	.word	0x20000d98
 8005d98:	20000e00 	.word	0x20000e00

08005d9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005da2:	4b0b      	ldr	r3, [pc, #44]	; (8005dd0 <xTaskGetSchedulerState+0x34>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d102      	bne.n	8005db0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005daa:	2301      	movs	r3, #1
 8005dac:	607b      	str	r3, [r7, #4]
 8005dae:	e008      	b.n	8005dc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005db0:	4b08      	ldr	r3, [pc, #32]	; (8005dd4 <xTaskGetSchedulerState+0x38>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d102      	bne.n	8005dbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005db8:	2302      	movs	r3, #2
 8005dba:	607b      	str	r3, [r7, #4]
 8005dbc:	e001      	b.n	8005dc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005dc2:	687b      	ldr	r3, [r7, #4]
	}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	20000dec 	.word	0x20000dec
 8005dd4:	20000e08 	.word	0x20000e08

08005dd8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005de4:	2300      	movs	r3, #0
 8005de6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d051      	beq.n	8005e92 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df2:	4b2a      	ldr	r3, [pc, #168]	; (8005e9c <xTaskPriorityInherit+0xc4>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d241      	bcs.n	8005e80 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	db06      	blt.n	8005e12 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e04:	4b25      	ldr	r3, [pc, #148]	; (8005e9c <xTaskPriorityInherit+0xc4>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	6959      	ldr	r1, [r3, #20]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4a1f      	ldr	r2, [pc, #124]	; (8005ea0 <xTaskPriorityInherit+0xc8>)
 8005e24:	4413      	add	r3, r2
 8005e26:	4299      	cmp	r1, r3
 8005e28:	d122      	bne.n	8005e70 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fe f934 	bl	800409c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e34:	4b19      	ldr	r3, [pc, #100]	; (8005e9c <xTaskPriorityInherit+0xc4>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e42:	4b18      	ldr	r3, [pc, #96]	; (8005ea4 <xTaskPriorityInherit+0xcc>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d903      	bls.n	8005e52 <xTaskPriorityInherit+0x7a>
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4e:	4a15      	ldr	r2, [pc, #84]	; (8005ea4 <xTaskPriorityInherit+0xcc>)
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e56:	4613      	mov	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4a10      	ldr	r2, [pc, #64]	; (8005ea0 <xTaskPriorityInherit+0xc8>)
 8005e60:	441a      	add	r2, r3
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	3304      	adds	r3, #4
 8005e66:	4619      	mov	r1, r3
 8005e68:	4610      	mov	r0, r2
 8005e6a:	f7fe f8ba 	bl	8003fe2 <vListInsertEnd>
 8005e6e:	e004      	b.n	8005e7a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e70:	4b0a      	ldr	r3, [pc, #40]	; (8005e9c <xTaskPriorityInherit+0xc4>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	60fb      	str	r3, [r7, #12]
 8005e7e:	e008      	b.n	8005e92 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e84:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <xTaskPriorityInherit+0xc4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d201      	bcs.n	8005e92 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e92:	68fb      	ldr	r3, [r7, #12]
	}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	2000090c 	.word	0x2000090c
 8005ea0:	20000910 	.word	0x20000910
 8005ea4:	20000de8 	.word	0x20000de8

08005ea8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d056      	beq.n	8005f6c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005ebe:	4b2e      	ldr	r3, [pc, #184]	; (8005f78 <xTaskPriorityDisinherit+0xd0>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d00a      	beq.n	8005ede <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ecc:	f383 8811 	msr	BASEPRI, r3
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	60fb      	str	r3, [r7, #12]
}
 8005eda:	bf00      	nop
 8005edc:	e7fe      	b.n	8005edc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10a      	bne.n	8005efc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	60bb      	str	r3, [r7, #8]
}
 8005ef8:	bf00      	nop
 8005efa:	e7fe      	b.n	8005efa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f00:	1e5a      	subs	r2, r3, #1
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d02c      	beq.n	8005f6c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d128      	bne.n	8005f6c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fe f8bc 	bl	800409c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3c:	4b0f      	ldr	r3, [pc, #60]	; (8005f7c <xTaskPriorityDisinherit+0xd4>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d903      	bls.n	8005f4c <xTaskPriorityDisinherit+0xa4>
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f48:	4a0c      	ldr	r2, [pc, #48]	; (8005f7c <xTaskPriorityDisinherit+0xd4>)
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4a09      	ldr	r2, [pc, #36]	; (8005f80 <xTaskPriorityDisinherit+0xd8>)
 8005f5a:	441a      	add	r2, r3
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4619      	mov	r1, r3
 8005f62:	4610      	mov	r0, r2
 8005f64:	f7fe f83d 	bl	8003fe2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f6c:	697b      	ldr	r3, [r7, #20]
	}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	2000090c 	.word	0x2000090c
 8005f7c:	20000de8 	.word	0x20000de8
 8005f80:	20000910 	.word	0x20000910

08005f84 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005f92:	2301      	movs	r3, #1
 8005f94:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d06a      	beq.n	8006072 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10a      	bne.n	8005fba <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	60fb      	str	r3, [r7, #12]
}
 8005fb6:	bf00      	nop
 8005fb8:	e7fe      	b.n	8005fb8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d902      	bls.n	8005fca <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	61fb      	str	r3, [r7, #28]
 8005fc8:	e002      	b.n	8005fd0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fce:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	69fa      	ldr	r2, [r7, #28]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d04b      	beq.n	8006072 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d146      	bne.n	8006072 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005fe4:	4b25      	ldr	r3, [pc, #148]	; (800607c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d10a      	bne.n	8006004 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	60bb      	str	r3, [r7, #8]
}
 8006000:	bf00      	nop
 8006002:	e7fe      	b.n	8006002 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	69fa      	ldr	r2, [r7, #28]
 800600e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	2b00      	cmp	r3, #0
 8006016:	db04      	blt.n	8006022 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	6959      	ldr	r1, [r3, #20]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	4613      	mov	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4a13      	ldr	r2, [pc, #76]	; (8006080 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006032:	4413      	add	r3, r2
 8006034:	4299      	cmp	r1, r3
 8006036:	d11c      	bne.n	8006072 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	3304      	adds	r3, #4
 800603c:	4618      	mov	r0, r3
 800603e:	f7fe f82d 	bl	800409c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006046:	4b0f      	ldr	r3, [pc, #60]	; (8006084 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	429a      	cmp	r2, r3
 800604c:	d903      	bls.n	8006056 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006052:	4a0c      	ldr	r2, [pc, #48]	; (8006084 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605a:	4613      	mov	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4a07      	ldr	r2, [pc, #28]	; (8006080 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006064:	441a      	add	r2, r3
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	3304      	adds	r3, #4
 800606a:	4619      	mov	r1, r3
 800606c:	4610      	mov	r0, r2
 800606e:	f7fd ffb8 	bl	8003fe2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006072:	bf00      	nop
 8006074:	3720      	adds	r7, #32
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	2000090c 	.word	0x2000090c
 8006080:	20000910 	.word	0x20000910
 8006084:	20000de8 	.word	0x20000de8

08006088 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006088:	b480      	push	{r7}
 800608a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800608c:	4b07      	ldr	r3, [pc, #28]	; (80060ac <pvTaskIncrementMutexHeldCount+0x24>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d004      	beq.n	800609e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006094:	4b05      	ldr	r3, [pc, #20]	; (80060ac <pvTaskIncrementMutexHeldCount+0x24>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800609a:	3201      	adds	r2, #1
 800609c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800609e:	4b03      	ldr	r3, [pc, #12]	; (80060ac <pvTaskIncrementMutexHeldCount+0x24>)
 80060a0:	681b      	ldr	r3, [r3, #0]
	}
 80060a2:	4618      	mov	r0, r3
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	2000090c 	.word	0x2000090c

080060b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060ba:	4b21      	ldr	r3, [pc, #132]	; (8006140 <prvAddCurrentTaskToDelayedList+0x90>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060c0:	4b20      	ldr	r3, [pc, #128]	; (8006144 <prvAddCurrentTaskToDelayedList+0x94>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3304      	adds	r3, #4
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fd ffe8 	bl	800409c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060d2:	d10a      	bne.n	80060ea <prvAddCurrentTaskToDelayedList+0x3a>
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d007      	beq.n	80060ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060da:	4b1a      	ldr	r3, [pc, #104]	; (8006144 <prvAddCurrentTaskToDelayedList+0x94>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3304      	adds	r3, #4
 80060e0:	4619      	mov	r1, r3
 80060e2:	4819      	ldr	r0, [pc, #100]	; (8006148 <prvAddCurrentTaskToDelayedList+0x98>)
 80060e4:	f7fd ff7d 	bl	8003fe2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060e8:	e026      	b.n	8006138 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4413      	add	r3, r2
 80060f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060f2:	4b14      	ldr	r3, [pc, #80]	; (8006144 <prvAddCurrentTaskToDelayedList+0x94>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d209      	bcs.n	8006116 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006102:	4b12      	ldr	r3, [pc, #72]	; (800614c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	4b0f      	ldr	r3, [pc, #60]	; (8006144 <prvAddCurrentTaskToDelayedList+0x94>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3304      	adds	r3, #4
 800610c:	4619      	mov	r1, r3
 800610e:	4610      	mov	r0, r2
 8006110:	f7fd ff8b 	bl	800402a <vListInsert>
}
 8006114:	e010      	b.n	8006138 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006116:	4b0e      	ldr	r3, [pc, #56]	; (8006150 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	4b0a      	ldr	r3, [pc, #40]	; (8006144 <prvAddCurrentTaskToDelayedList+0x94>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3304      	adds	r3, #4
 8006120:	4619      	mov	r1, r3
 8006122:	4610      	mov	r0, r2
 8006124:	f7fd ff81 	bl	800402a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006128:	4b0a      	ldr	r3, [pc, #40]	; (8006154 <prvAddCurrentTaskToDelayedList+0xa4>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	429a      	cmp	r2, r3
 8006130:	d202      	bcs.n	8006138 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006132:	4a08      	ldr	r2, [pc, #32]	; (8006154 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	6013      	str	r3, [r2, #0]
}
 8006138:	bf00      	nop
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	20000de4 	.word	0x20000de4
 8006144:	2000090c 	.word	0x2000090c
 8006148:	20000dcc 	.word	0x20000dcc
 800614c:	20000d9c 	.word	0x20000d9c
 8006150:	20000d98 	.word	0x20000d98
 8006154:	20000e00 	.word	0x20000e00

08006158 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b08a      	sub	sp, #40	; 0x28
 800615c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800615e:	2300      	movs	r3, #0
 8006160:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006162:	f000 fb07 	bl	8006774 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006166:	4b1c      	ldr	r3, [pc, #112]	; (80061d8 <xTimerCreateTimerTask+0x80>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d021      	beq.n	80061b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006172:	2300      	movs	r3, #0
 8006174:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006176:	1d3a      	adds	r2, r7, #4
 8006178:	f107 0108 	add.w	r1, r7, #8
 800617c:	f107 030c 	add.w	r3, r7, #12
 8006180:	4618      	mov	r0, r3
 8006182:	f7fd fee7 	bl	8003f54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	9202      	str	r2, [sp, #8]
 800618e:	9301      	str	r3, [sp, #4]
 8006190:	2302      	movs	r3, #2
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	2300      	movs	r3, #0
 8006196:	460a      	mov	r2, r1
 8006198:	4910      	ldr	r1, [pc, #64]	; (80061dc <xTimerCreateTimerTask+0x84>)
 800619a:	4811      	ldr	r0, [pc, #68]	; (80061e0 <xTimerCreateTimerTask+0x88>)
 800619c:	f7fe ffb6 	bl	800510c <xTaskCreateStatic>
 80061a0:	4603      	mov	r3, r0
 80061a2:	4a10      	ldr	r2, [pc, #64]	; (80061e4 <xTimerCreateTimerTask+0x8c>)
 80061a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80061a6:	4b0f      	ldr	r3, [pc, #60]	; (80061e4 <xTimerCreateTimerTask+0x8c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80061ae:	2301      	movs	r3, #1
 80061b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10a      	bne.n	80061ce <xTimerCreateTimerTask+0x76>
	__asm volatile
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	613b      	str	r3, [r7, #16]
}
 80061ca:	bf00      	nop
 80061cc:	e7fe      	b.n	80061cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80061ce:	697b      	ldr	r3, [r7, #20]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	20000e3c 	.word	0x20000e3c
 80061dc:	08007be4 	.word	0x08007be4
 80061e0:	0800631d 	.word	0x0800631d
 80061e4:	20000e40 	.word	0x20000e40

080061e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08a      	sub	sp, #40	; 0x28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10a      	bne.n	8006216 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	623b      	str	r3, [r7, #32]
}
 8006212:	bf00      	nop
 8006214:	e7fe      	b.n	8006214 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006216:	4b1a      	ldr	r3, [pc, #104]	; (8006280 <xTimerGenericCommand+0x98>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d02a      	beq.n	8006274 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2b05      	cmp	r3, #5
 800622e:	dc18      	bgt.n	8006262 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006230:	f7ff fdb4 	bl	8005d9c <xTaskGetSchedulerState>
 8006234:	4603      	mov	r3, r0
 8006236:	2b02      	cmp	r3, #2
 8006238:	d109      	bne.n	800624e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800623a:	4b11      	ldr	r3, [pc, #68]	; (8006280 <xTimerGenericCommand+0x98>)
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	f107 0110 	add.w	r1, r7, #16
 8006242:	2300      	movs	r3, #0
 8006244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006246:	f7fe f8fb 	bl	8004440 <xQueueGenericSend>
 800624a:	6278      	str	r0, [r7, #36]	; 0x24
 800624c:	e012      	b.n	8006274 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800624e:	4b0c      	ldr	r3, [pc, #48]	; (8006280 <xTimerGenericCommand+0x98>)
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	f107 0110 	add.w	r1, r7, #16
 8006256:	2300      	movs	r3, #0
 8006258:	2200      	movs	r2, #0
 800625a:	f7fe f8f1 	bl	8004440 <xQueueGenericSend>
 800625e:	6278      	str	r0, [r7, #36]	; 0x24
 8006260:	e008      	b.n	8006274 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006262:	4b07      	ldr	r3, [pc, #28]	; (8006280 <xTimerGenericCommand+0x98>)
 8006264:	6818      	ldr	r0, [r3, #0]
 8006266:	f107 0110 	add.w	r1, r7, #16
 800626a:	2300      	movs	r3, #0
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	f7fe f9e5 	bl	800463c <xQueueGenericSendFromISR>
 8006272:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006276:	4618      	mov	r0, r3
 8006278:	3728      	adds	r7, #40	; 0x28
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	20000e3c 	.word	0x20000e3c

08006284 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af02      	add	r7, sp, #8
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800628e:	4b22      	ldr	r3, [pc, #136]	; (8006318 <prvProcessExpiredTimer+0x94>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	3304      	adds	r3, #4
 800629c:	4618      	mov	r0, r3
 800629e:	f7fd fefd 	bl	800409c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d022      	beq.n	80062f6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	699a      	ldr	r2, [r3, #24]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	18d1      	adds	r1, r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	6978      	ldr	r0, [r7, #20]
 80062be:	f000 f8d1 	bl	8006464 <prvInsertTimerInActiveList>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01f      	beq.n	8006308 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062c8:	2300      	movs	r3, #0
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	2300      	movs	r3, #0
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	2100      	movs	r1, #0
 80062d2:	6978      	ldr	r0, [r7, #20]
 80062d4:	f7ff ff88 	bl	80061e8 <xTimerGenericCommand>
 80062d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d113      	bne.n	8006308 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	60fb      	str	r3, [r7, #12]
}
 80062f2:	bf00      	nop
 80062f4:	e7fe      	b.n	80062f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062fc:	f023 0301 	bic.w	r3, r3, #1
 8006300:	b2da      	uxtb	r2, r3
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	6978      	ldr	r0, [r7, #20]
 800630e:	4798      	blx	r3
}
 8006310:	bf00      	nop
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	20000e34 	.word	0x20000e34

0800631c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006324:	f107 0308 	add.w	r3, r7, #8
 8006328:	4618      	mov	r0, r3
 800632a:	f000 f857 	bl	80063dc <prvGetNextExpireTime>
 800632e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	4619      	mov	r1, r3
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 f803 	bl	8006340 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800633a:	f000 f8d5 	bl	80064e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800633e:	e7f1      	b.n	8006324 <prvTimerTask+0x8>

08006340 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800634a:	f7ff f93b 	bl	80055c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800634e:	f107 0308 	add.w	r3, r7, #8
 8006352:	4618      	mov	r0, r3
 8006354:	f000 f866 	bl	8006424 <prvSampleTimeNow>
 8006358:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d130      	bne.n	80063c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10a      	bne.n	800637c <prvProcessTimerOrBlockTask+0x3c>
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	429a      	cmp	r2, r3
 800636c:	d806      	bhi.n	800637c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800636e:	f7ff f937 	bl	80055e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006372:	68f9      	ldr	r1, [r7, #12]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f7ff ff85 	bl	8006284 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800637a:	e024      	b.n	80063c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d008      	beq.n	8006394 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006382:	4b13      	ldr	r3, [pc, #76]	; (80063d0 <prvProcessTimerOrBlockTask+0x90>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d101      	bne.n	8006390 <prvProcessTimerOrBlockTask+0x50>
 800638c:	2301      	movs	r3, #1
 800638e:	e000      	b.n	8006392 <prvProcessTimerOrBlockTask+0x52>
 8006390:	2300      	movs	r3, #0
 8006392:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006394:	4b0f      	ldr	r3, [pc, #60]	; (80063d4 <prvProcessTimerOrBlockTask+0x94>)
 8006396:	6818      	ldr	r0, [r3, #0]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	4619      	mov	r1, r3
 80063a2:	f7fe fe7f 	bl	80050a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80063a6:	f7ff f91b 	bl	80055e0 <xTaskResumeAll>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10a      	bne.n	80063c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80063b0:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <prvProcessTimerOrBlockTask+0x98>)
 80063b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	f3bf 8f6f 	isb	sy
}
 80063c0:	e001      	b.n	80063c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80063c2:	f7ff f90d 	bl	80055e0 <xTaskResumeAll>
}
 80063c6:	bf00      	nop
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20000e38 	.word	0x20000e38
 80063d4:	20000e3c 	.word	0x20000e3c
 80063d8:	e000ed04 	.word	0xe000ed04

080063dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80063e4:	4b0e      	ldr	r3, [pc, #56]	; (8006420 <prvGetNextExpireTime+0x44>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <prvGetNextExpireTime+0x16>
 80063ee:	2201      	movs	r2, #1
 80063f0:	e000      	b.n	80063f4 <prvGetNextExpireTime+0x18>
 80063f2:	2200      	movs	r2, #0
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d105      	bne.n	800640c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006400:	4b07      	ldr	r3, [pc, #28]	; (8006420 <prvGetNextExpireTime+0x44>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	e001      	b.n	8006410 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006410:	68fb      	ldr	r3, [r7, #12]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	20000e34 	.word	0x20000e34

08006424 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800642c:	f7ff f976 	bl	800571c <xTaskGetTickCount>
 8006430:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006432:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <prvSampleTimeNow+0x3c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	429a      	cmp	r2, r3
 800643a:	d205      	bcs.n	8006448 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800643c:	f000 f936 	bl	80066ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	e002      	b.n	800644e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800644e:	4a04      	ldr	r2, [pc, #16]	; (8006460 <prvSampleTimeNow+0x3c>)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006454:	68fb      	ldr	r3, [r7, #12]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20000e44 	.word	0x20000e44

08006464 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
 8006470:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006472:	2300      	movs	r3, #0
 8006474:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	429a      	cmp	r2, r3
 8006488:	d812      	bhi.n	80064b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	1ad2      	subs	r2, r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	429a      	cmp	r2, r3
 8006496:	d302      	bcc.n	800649e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006498:	2301      	movs	r3, #1
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	e01b      	b.n	80064d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800649e:	4b10      	ldr	r3, [pc, #64]	; (80064e0 <prvInsertTimerInActiveList+0x7c>)
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3304      	adds	r3, #4
 80064a6:	4619      	mov	r1, r3
 80064a8:	4610      	mov	r0, r2
 80064aa:	f7fd fdbe 	bl	800402a <vListInsert>
 80064ae:	e012      	b.n	80064d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d206      	bcs.n	80064c6 <prvInsertTimerInActiveList+0x62>
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d302      	bcc.n	80064c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80064c0:	2301      	movs	r3, #1
 80064c2:	617b      	str	r3, [r7, #20]
 80064c4:	e007      	b.n	80064d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064c6:	4b07      	ldr	r3, [pc, #28]	; (80064e4 <prvInsertTimerInActiveList+0x80>)
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3304      	adds	r3, #4
 80064ce:	4619      	mov	r1, r3
 80064d0:	4610      	mov	r0, r2
 80064d2:	f7fd fdaa 	bl	800402a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80064d6:	697b      	ldr	r3, [r7, #20]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	20000e38 	.word	0x20000e38
 80064e4:	20000e34 	.word	0x20000e34

080064e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08e      	sub	sp, #56	; 0x38
 80064ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064ee:	e0ca      	b.n	8006686 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	da18      	bge.n	8006528 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80064f6:	1d3b      	adds	r3, r7, #4
 80064f8:	3304      	adds	r3, #4
 80064fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80064fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10a      	bne.n	8006518 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	61fb      	str	r3, [r7, #28]
}
 8006514:	bf00      	nop
 8006516:	e7fe      	b.n	8006516 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800651e:	6850      	ldr	r0, [r2, #4]
 8006520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006522:	6892      	ldr	r2, [r2, #8]
 8006524:	4611      	mov	r1, r2
 8006526:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	f2c0 80ab 	blt.w	8006686 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d004      	beq.n	8006546 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	3304      	adds	r3, #4
 8006540:	4618      	mov	r0, r3
 8006542:	f7fd fdab 	bl	800409c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006546:	463b      	mov	r3, r7
 8006548:	4618      	mov	r0, r3
 800654a:	f7ff ff6b 	bl	8006424 <prvSampleTimeNow>
 800654e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b09      	cmp	r3, #9
 8006554:	f200 8096 	bhi.w	8006684 <prvProcessReceivedCommands+0x19c>
 8006558:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <prvProcessReceivedCommands+0x78>)
 800655a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655e:	bf00      	nop
 8006560:	08006589 	.word	0x08006589
 8006564:	08006589 	.word	0x08006589
 8006568:	08006589 	.word	0x08006589
 800656c:	080065fd 	.word	0x080065fd
 8006570:	08006611 	.word	0x08006611
 8006574:	0800665b 	.word	0x0800665b
 8006578:	08006589 	.word	0x08006589
 800657c:	08006589 	.word	0x08006589
 8006580:	080065fd 	.word	0x080065fd
 8006584:	08006611 	.word	0x08006611
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800658e:	f043 0301 	orr.w	r3, r3, #1
 8006592:	b2da      	uxtb	r2, r3
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	18d1      	adds	r1, r2, r3
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065a8:	f7ff ff5c 	bl	8006464 <prvInsertTimerInActiveList>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d069      	beq.n	8006686 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d05e      	beq.n	8006686 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	441a      	add	r2, r3
 80065d0:	2300      	movs	r3, #0
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	2300      	movs	r3, #0
 80065d6:	2100      	movs	r1, #0
 80065d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065da:	f7ff fe05 	bl	80061e8 <xTimerGenericCommand>
 80065de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d14f      	bne.n	8006686 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80065e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	61bb      	str	r3, [r7, #24]
}
 80065f8:	bf00      	nop
 80065fa:	e7fe      	b.n	80065fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006602:	f023 0301 	bic.w	r3, r3, #1
 8006606:	b2da      	uxtb	r2, r3
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800660e:	e03a      	b.n	8006686 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006616:	f043 0301 	orr.w	r3, r3, #1
 800661a:	b2da      	uxtb	r2, r3
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006626:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10a      	bne.n	8006646 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	617b      	str	r3, [r7, #20]
}
 8006642:	bf00      	nop
 8006644:	e7fe      	b.n	8006644 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	699a      	ldr	r2, [r3, #24]
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	18d1      	adds	r1, r2, r3
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006654:	f7ff ff06 	bl	8006464 <prvInsertTimerInActiveList>
					break;
 8006658:	e015      	b.n	8006686 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006660:	f003 0302 	and.w	r3, r3, #2
 8006664:	2b00      	cmp	r3, #0
 8006666:	d103      	bne.n	8006670 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800666a:	f000 fbe1 	bl	8006e30 <vPortFree>
 800666e:	e00a      	b.n	8006686 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006672:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006676:	f023 0301 	bic.w	r3, r3, #1
 800667a:	b2da      	uxtb	r2, r3
 800667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006682:	e000      	b.n	8006686 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006684:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006686:	4b08      	ldr	r3, [pc, #32]	; (80066a8 <prvProcessReceivedCommands+0x1c0>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	1d39      	adds	r1, r7, #4
 800668c:	2200      	movs	r2, #0
 800668e:	4618      	mov	r0, r3
 8006690:	f7fe f8fc 	bl	800488c <xQueueReceive>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	f47f af2a 	bne.w	80064f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800669c:	bf00      	nop
 800669e:	bf00      	nop
 80066a0:	3730      	adds	r7, #48	; 0x30
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20000e3c 	.word	0x20000e3c

080066ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b088      	sub	sp, #32
 80066b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066b2:	e048      	b.n	8006746 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066b4:	4b2d      	ldr	r3, [pc, #180]	; (800676c <prvSwitchTimerLists+0xc0>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066be:	4b2b      	ldr	r3, [pc, #172]	; (800676c <prvSwitchTimerLists+0xc0>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	3304      	adds	r3, #4
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fd fce5 	bl	800409c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066e0:	f003 0304 	and.w	r3, r3, #4
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d02e      	beq.n	8006746 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	4413      	add	r3, r2
 80066f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d90e      	bls.n	8006718 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006706:	4b19      	ldr	r3, [pc, #100]	; (800676c <prvSwitchTimerLists+0xc0>)
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	3304      	adds	r3, #4
 800670e:	4619      	mov	r1, r3
 8006710:	4610      	mov	r0, r2
 8006712:	f7fd fc8a 	bl	800402a <vListInsert>
 8006716:	e016      	b.n	8006746 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006718:	2300      	movs	r3, #0
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	2300      	movs	r3, #0
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	2100      	movs	r1, #0
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f7ff fd60 	bl	80061e8 <xTimerGenericCommand>
 8006728:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10a      	bne.n	8006746 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	603b      	str	r3, [r7, #0]
}
 8006742:	bf00      	nop
 8006744:	e7fe      	b.n	8006744 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006746:	4b09      	ldr	r3, [pc, #36]	; (800676c <prvSwitchTimerLists+0xc0>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1b1      	bne.n	80066b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006750:	4b06      	ldr	r3, [pc, #24]	; (800676c <prvSwitchTimerLists+0xc0>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006756:	4b06      	ldr	r3, [pc, #24]	; (8006770 <prvSwitchTimerLists+0xc4>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a04      	ldr	r2, [pc, #16]	; (800676c <prvSwitchTimerLists+0xc0>)
 800675c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800675e:	4a04      	ldr	r2, [pc, #16]	; (8006770 <prvSwitchTimerLists+0xc4>)
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	6013      	str	r3, [r2, #0]
}
 8006764:	bf00      	nop
 8006766:	3718      	adds	r7, #24
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	20000e34 	.word	0x20000e34
 8006770:	20000e38 	.word	0x20000e38

08006774 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800677a:	f000 f96b 	bl	8006a54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800677e:	4b15      	ldr	r3, [pc, #84]	; (80067d4 <prvCheckForValidListAndQueue+0x60>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d120      	bne.n	80067c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006786:	4814      	ldr	r0, [pc, #80]	; (80067d8 <prvCheckForValidListAndQueue+0x64>)
 8006788:	f7fd fbfe 	bl	8003f88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800678c:	4813      	ldr	r0, [pc, #76]	; (80067dc <prvCheckForValidListAndQueue+0x68>)
 800678e:	f7fd fbfb 	bl	8003f88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006792:	4b13      	ldr	r3, [pc, #76]	; (80067e0 <prvCheckForValidListAndQueue+0x6c>)
 8006794:	4a10      	ldr	r2, [pc, #64]	; (80067d8 <prvCheckForValidListAndQueue+0x64>)
 8006796:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006798:	4b12      	ldr	r3, [pc, #72]	; (80067e4 <prvCheckForValidListAndQueue+0x70>)
 800679a:	4a10      	ldr	r2, [pc, #64]	; (80067dc <prvCheckForValidListAndQueue+0x68>)
 800679c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800679e:	2300      	movs	r3, #0
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	4b11      	ldr	r3, [pc, #68]	; (80067e8 <prvCheckForValidListAndQueue+0x74>)
 80067a4:	4a11      	ldr	r2, [pc, #68]	; (80067ec <prvCheckForValidListAndQueue+0x78>)
 80067a6:	2110      	movs	r1, #16
 80067a8:	200a      	movs	r0, #10
 80067aa:	f7fd fd09 	bl	80041c0 <xQueueGenericCreateStatic>
 80067ae:	4603      	mov	r3, r0
 80067b0:	4a08      	ldr	r2, [pc, #32]	; (80067d4 <prvCheckForValidListAndQueue+0x60>)
 80067b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80067b4:	4b07      	ldr	r3, [pc, #28]	; (80067d4 <prvCheckForValidListAndQueue+0x60>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80067bc:	4b05      	ldr	r3, [pc, #20]	; (80067d4 <prvCheckForValidListAndQueue+0x60>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	490b      	ldr	r1, [pc, #44]	; (80067f0 <prvCheckForValidListAndQueue+0x7c>)
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fe fc1a 	bl	8004ffc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067c8:	f000 f974 	bl	8006ab4 <vPortExitCritical>
}
 80067cc:	bf00      	nop
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	20000e3c 	.word	0x20000e3c
 80067d8:	20000e0c 	.word	0x20000e0c
 80067dc:	20000e20 	.word	0x20000e20
 80067e0:	20000e34 	.word	0x20000e34
 80067e4:	20000e38 	.word	0x20000e38
 80067e8:	20000ee8 	.word	0x20000ee8
 80067ec:	20000e48 	.word	0x20000e48
 80067f0:	08007bec 	.word	0x08007bec

080067f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	3b04      	subs	r3, #4
 8006804:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800680c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3b04      	subs	r3, #4
 8006812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f023 0201 	bic.w	r2, r3, #1
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	3b04      	subs	r3, #4
 8006822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006824:	4a0c      	ldr	r2, [pc, #48]	; (8006858 <pxPortInitialiseStack+0x64>)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	3b14      	subs	r3, #20
 800682e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	3b04      	subs	r3, #4
 800683a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f06f 0202 	mvn.w	r2, #2
 8006842:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	3b20      	subs	r3, #32
 8006848:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800684a:	68fb      	ldr	r3, [r7, #12]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	0800685d 	.word	0x0800685d

0800685c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006862:	2300      	movs	r3, #0
 8006864:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006866:	4b12      	ldr	r3, [pc, #72]	; (80068b0 <prvTaskExitError+0x54>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800686e:	d00a      	beq.n	8006886 <prvTaskExitError+0x2a>
	__asm volatile
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	60fb      	str	r3, [r7, #12]
}
 8006882:	bf00      	nop
 8006884:	e7fe      	b.n	8006884 <prvTaskExitError+0x28>
	__asm volatile
 8006886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	60bb      	str	r3, [r7, #8]
}
 8006898:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800689a:	bf00      	nop
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d0fc      	beq.n	800689c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068a2:	bf00      	nop
 80068a4:	bf00      	nop
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	2000000c 	.word	0x2000000c
	...

080068c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068c0:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <pxCurrentTCBConst2>)
 80068c2:	6819      	ldr	r1, [r3, #0]
 80068c4:	6808      	ldr	r0, [r1, #0]
 80068c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ca:	f380 8809 	msr	PSP, r0
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f04f 0000 	mov.w	r0, #0
 80068d6:	f380 8811 	msr	BASEPRI, r0
 80068da:	4770      	bx	lr
 80068dc:	f3af 8000 	nop.w

080068e0 <pxCurrentTCBConst2>:
 80068e0:	2000090c 	.word	0x2000090c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop

080068e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80068e8:	4808      	ldr	r0, [pc, #32]	; (800690c <prvPortStartFirstTask+0x24>)
 80068ea:	6800      	ldr	r0, [r0, #0]
 80068ec:	6800      	ldr	r0, [r0, #0]
 80068ee:	f380 8808 	msr	MSP, r0
 80068f2:	f04f 0000 	mov.w	r0, #0
 80068f6:	f380 8814 	msr	CONTROL, r0
 80068fa:	b662      	cpsie	i
 80068fc:	b661      	cpsie	f
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	df00      	svc	0
 8006908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800690a:	bf00      	nop
 800690c:	e000ed08 	.word	0xe000ed08

08006910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006916:	4b46      	ldr	r3, [pc, #280]	; (8006a30 <xPortStartScheduler+0x120>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a46      	ldr	r2, [pc, #280]	; (8006a34 <xPortStartScheduler+0x124>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d10a      	bne.n	8006936 <xPortStartScheduler+0x26>
	__asm volatile
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	613b      	str	r3, [r7, #16]
}
 8006932:	bf00      	nop
 8006934:	e7fe      	b.n	8006934 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006936:	4b3e      	ldr	r3, [pc, #248]	; (8006a30 <xPortStartScheduler+0x120>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a3f      	ldr	r2, [pc, #252]	; (8006a38 <xPortStartScheduler+0x128>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d10a      	bne.n	8006956 <xPortStartScheduler+0x46>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	60fb      	str	r3, [r7, #12]
}
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006956:	4b39      	ldr	r3, [pc, #228]	; (8006a3c <xPortStartScheduler+0x12c>)
 8006958:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	b2db      	uxtb	r3, r3
 8006960:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	22ff      	movs	r2, #255	; 0xff
 8006966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	b2db      	uxtb	r3, r3
 800696e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006970:	78fb      	ldrb	r3, [r7, #3]
 8006972:	b2db      	uxtb	r3, r3
 8006974:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006978:	b2da      	uxtb	r2, r3
 800697a:	4b31      	ldr	r3, [pc, #196]	; (8006a40 <xPortStartScheduler+0x130>)
 800697c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800697e:	4b31      	ldr	r3, [pc, #196]	; (8006a44 <xPortStartScheduler+0x134>)
 8006980:	2207      	movs	r2, #7
 8006982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006984:	e009      	b.n	800699a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006986:	4b2f      	ldr	r3, [pc, #188]	; (8006a44 <xPortStartScheduler+0x134>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3b01      	subs	r3, #1
 800698c:	4a2d      	ldr	r2, [pc, #180]	; (8006a44 <xPortStartScheduler+0x134>)
 800698e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006990:	78fb      	ldrb	r3, [r7, #3]
 8006992:	b2db      	uxtb	r3, r3
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	b2db      	uxtb	r3, r3
 8006998:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800699a:	78fb      	ldrb	r3, [r7, #3]
 800699c:	b2db      	uxtb	r3, r3
 800699e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a2:	2b80      	cmp	r3, #128	; 0x80
 80069a4:	d0ef      	beq.n	8006986 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069a6:	4b27      	ldr	r3, [pc, #156]	; (8006a44 <xPortStartScheduler+0x134>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f1c3 0307 	rsb	r3, r3, #7
 80069ae:	2b04      	cmp	r3, #4
 80069b0:	d00a      	beq.n	80069c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80069b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	60bb      	str	r3, [r7, #8]
}
 80069c4:	bf00      	nop
 80069c6:	e7fe      	b.n	80069c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069c8:	4b1e      	ldr	r3, [pc, #120]	; (8006a44 <xPortStartScheduler+0x134>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	021b      	lsls	r3, r3, #8
 80069ce:	4a1d      	ldr	r2, [pc, #116]	; (8006a44 <xPortStartScheduler+0x134>)
 80069d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069d2:	4b1c      	ldr	r3, [pc, #112]	; (8006a44 <xPortStartScheduler+0x134>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069da:	4a1a      	ldr	r2, [pc, #104]	; (8006a44 <xPortStartScheduler+0x134>)
 80069dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069e6:	4b18      	ldr	r3, [pc, #96]	; (8006a48 <xPortStartScheduler+0x138>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a17      	ldr	r2, [pc, #92]	; (8006a48 <xPortStartScheduler+0x138>)
 80069ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069f2:	4b15      	ldr	r3, [pc, #84]	; (8006a48 <xPortStartScheduler+0x138>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a14      	ldr	r2, [pc, #80]	; (8006a48 <xPortStartScheduler+0x138>)
 80069f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80069fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069fe:	f000 f8dd 	bl	8006bbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a02:	4b12      	ldr	r3, [pc, #72]	; (8006a4c <xPortStartScheduler+0x13c>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a08:	f000 f8fc 	bl	8006c04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a0c:	4b10      	ldr	r3, [pc, #64]	; (8006a50 <xPortStartScheduler+0x140>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a0f      	ldr	r2, [pc, #60]	; (8006a50 <xPortStartScheduler+0x140>)
 8006a12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a18:	f7ff ff66 	bl	80068e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a1c:	f7fe ff48 	bl	80058b0 <vTaskSwitchContext>
	prvTaskExitError();
 8006a20:	f7ff ff1c 	bl	800685c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	e000ed00 	.word	0xe000ed00
 8006a34:	410fc271 	.word	0x410fc271
 8006a38:	410fc270 	.word	0x410fc270
 8006a3c:	e000e400 	.word	0xe000e400
 8006a40:	20000f38 	.word	0x20000f38
 8006a44:	20000f3c 	.word	0x20000f3c
 8006a48:	e000ed20 	.word	0xe000ed20
 8006a4c:	2000000c 	.word	0x2000000c
 8006a50:	e000ef34 	.word	0xe000ef34

08006a54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
	__asm volatile
 8006a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	607b      	str	r3, [r7, #4]
}
 8006a6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a6e:	4b0f      	ldr	r3, [pc, #60]	; (8006aac <vPortEnterCritical+0x58>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3301      	adds	r3, #1
 8006a74:	4a0d      	ldr	r2, [pc, #52]	; (8006aac <vPortEnterCritical+0x58>)
 8006a76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a78:	4b0c      	ldr	r3, [pc, #48]	; (8006aac <vPortEnterCritical+0x58>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d10f      	bne.n	8006aa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a80:	4b0b      	ldr	r3, [pc, #44]	; (8006ab0 <vPortEnterCritical+0x5c>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00a      	beq.n	8006aa0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	603b      	str	r3, [r7, #0]
}
 8006a9c:	bf00      	nop
 8006a9e:	e7fe      	b.n	8006a9e <vPortEnterCritical+0x4a>
	}
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	2000000c 	.word	0x2000000c
 8006ab0:	e000ed04 	.word	0xe000ed04

08006ab4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006aba:	4b12      	ldr	r3, [pc, #72]	; (8006b04 <vPortExitCritical+0x50>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10a      	bne.n	8006ad8 <vPortExitCritical+0x24>
	__asm volatile
 8006ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac6:	f383 8811 	msr	BASEPRI, r3
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	607b      	str	r3, [r7, #4]
}
 8006ad4:	bf00      	nop
 8006ad6:	e7fe      	b.n	8006ad6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ad8:	4b0a      	ldr	r3, [pc, #40]	; (8006b04 <vPortExitCritical+0x50>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3b01      	subs	r3, #1
 8006ade:	4a09      	ldr	r2, [pc, #36]	; (8006b04 <vPortExitCritical+0x50>)
 8006ae0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ae2:	4b08      	ldr	r3, [pc, #32]	; (8006b04 <vPortExitCritical+0x50>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d105      	bne.n	8006af6 <vPortExitCritical+0x42>
 8006aea:	2300      	movs	r3, #0
 8006aec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	f383 8811 	msr	BASEPRI, r3
}
 8006af4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006af6:	bf00      	nop
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	2000000c 	.word	0x2000000c
	...

08006b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b10:	f3ef 8009 	mrs	r0, PSP
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	4b15      	ldr	r3, [pc, #84]	; (8006b70 <pxCurrentTCBConst>)
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	f01e 0f10 	tst.w	lr, #16
 8006b20:	bf08      	it	eq
 8006b22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2a:	6010      	str	r0, [r2, #0]
 8006b2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b34:	f380 8811 	msr	BASEPRI, r0
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f7fe feb6 	bl	80058b0 <vTaskSwitchContext>
 8006b44:	f04f 0000 	mov.w	r0, #0
 8006b48:	f380 8811 	msr	BASEPRI, r0
 8006b4c:	bc09      	pop	{r0, r3}
 8006b4e:	6819      	ldr	r1, [r3, #0]
 8006b50:	6808      	ldr	r0, [r1, #0]
 8006b52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b56:	f01e 0f10 	tst.w	lr, #16
 8006b5a:	bf08      	it	eq
 8006b5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b60:	f380 8809 	msr	PSP, r0
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	f3af 8000 	nop.w

08006b70 <pxCurrentTCBConst>:
 8006b70:	2000090c 	.word	0x2000090c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b74:	bf00      	nop
 8006b76:	bf00      	nop

08006b78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	607b      	str	r3, [r7, #4]
}
 8006b90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b92:	f7fe fdd3 	bl	800573c <xTaskIncrementTick>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d003      	beq.n	8006ba4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b9c:	4b06      	ldr	r3, [pc, #24]	; (8006bb8 <xPortSysTickHandler+0x40>)
 8006b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	f383 8811 	msr	BASEPRI, r3
}
 8006bae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006bb0:	bf00      	nop
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	e000ed04 	.word	0xe000ed04

08006bbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006bc0:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <vPortSetupTimerInterrupt+0x34>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006bc6:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <vPortSetupTimerInterrupt+0x38>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bcc:	4b0a      	ldr	r3, [pc, #40]	; (8006bf8 <vPortSetupTimerInterrupt+0x3c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a0a      	ldr	r2, [pc, #40]	; (8006bfc <vPortSetupTimerInterrupt+0x40>)
 8006bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd6:	099b      	lsrs	r3, r3, #6
 8006bd8:	4a09      	ldr	r2, [pc, #36]	; (8006c00 <vPortSetupTimerInterrupt+0x44>)
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bde:	4b04      	ldr	r3, [pc, #16]	; (8006bf0 <vPortSetupTimerInterrupt+0x34>)
 8006be0:	2207      	movs	r2, #7
 8006be2:	601a      	str	r2, [r3, #0]
}
 8006be4:	bf00      	nop
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	e000e010 	.word	0xe000e010
 8006bf4:	e000e018 	.word	0xe000e018
 8006bf8:	20000000 	.word	0x20000000
 8006bfc:	10624dd3 	.word	0x10624dd3
 8006c00:	e000e014 	.word	0xe000e014

08006c04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c14 <vPortEnableVFP+0x10>
 8006c08:	6801      	ldr	r1, [r0, #0]
 8006c0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c0e:	6001      	str	r1, [r0, #0]
 8006c10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c12:	bf00      	nop
 8006c14:	e000ed88 	.word	0xe000ed88

08006c18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c1e:	f3ef 8305 	mrs	r3, IPSR
 8006c22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2b0f      	cmp	r3, #15
 8006c28:	d914      	bls.n	8006c54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c2a:	4a17      	ldr	r2, [pc, #92]	; (8006c88 <vPortValidateInterruptPriority+0x70>)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4413      	add	r3, r2
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c34:	4b15      	ldr	r3, [pc, #84]	; (8006c8c <vPortValidateInterruptPriority+0x74>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	7afa      	ldrb	r2, [r7, #11]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d20a      	bcs.n	8006c54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	607b      	str	r3, [r7, #4]
}
 8006c50:	bf00      	nop
 8006c52:	e7fe      	b.n	8006c52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c54:	4b0e      	ldr	r3, [pc, #56]	; (8006c90 <vPortValidateInterruptPriority+0x78>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c5c:	4b0d      	ldr	r3, [pc, #52]	; (8006c94 <vPortValidateInterruptPriority+0x7c>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d90a      	bls.n	8006c7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	603b      	str	r3, [r7, #0]
}
 8006c76:	bf00      	nop
 8006c78:	e7fe      	b.n	8006c78 <vPortValidateInterruptPriority+0x60>
	}
 8006c7a:	bf00      	nop
 8006c7c:	3714      	adds	r7, #20
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	e000e3f0 	.word	0xe000e3f0
 8006c8c:	20000f38 	.word	0x20000f38
 8006c90:	e000ed0c 	.word	0xe000ed0c
 8006c94:	20000f3c 	.word	0x20000f3c

08006c98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08a      	sub	sp, #40	; 0x28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ca4:	f7fe fc8e 	bl	80055c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ca8:	4b5b      	ldr	r3, [pc, #364]	; (8006e18 <pvPortMalloc+0x180>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d101      	bne.n	8006cb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006cb0:	f000 f920 	bl	8006ef4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006cb4:	4b59      	ldr	r3, [pc, #356]	; (8006e1c <pvPortMalloc+0x184>)
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4013      	ands	r3, r2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f040 8093 	bne.w	8006de8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d01d      	beq.n	8006d04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006cc8:	2208      	movs	r2, #8
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4413      	add	r3, r2
 8006cce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f003 0307 	and.w	r3, r3, #7
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d014      	beq.n	8006d04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f023 0307 	bic.w	r3, r3, #7
 8006ce0:	3308      	adds	r3, #8
 8006ce2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f003 0307 	and.w	r3, r3, #7
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00a      	beq.n	8006d04 <pvPortMalloc+0x6c>
	__asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	617b      	str	r3, [r7, #20]
}
 8006d00:	bf00      	nop
 8006d02:	e7fe      	b.n	8006d02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d06e      	beq.n	8006de8 <pvPortMalloc+0x150>
 8006d0a:	4b45      	ldr	r3, [pc, #276]	; (8006e20 <pvPortMalloc+0x188>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d869      	bhi.n	8006de8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d14:	4b43      	ldr	r3, [pc, #268]	; (8006e24 <pvPortMalloc+0x18c>)
 8006d16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d18:	4b42      	ldr	r3, [pc, #264]	; (8006e24 <pvPortMalloc+0x18c>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d1e:	e004      	b.n	8006d2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d903      	bls.n	8006d3c <pvPortMalloc+0xa4>
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1f1      	bne.n	8006d20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d3c:	4b36      	ldr	r3, [pc, #216]	; (8006e18 <pvPortMalloc+0x180>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d050      	beq.n	8006de8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2208      	movs	r2, #8
 8006d4c:	4413      	add	r3, r2
 8006d4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	6a3b      	ldr	r3, [r7, #32]
 8006d56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	1ad2      	subs	r2, r2, r3
 8006d60:	2308      	movs	r3, #8
 8006d62:	005b      	lsls	r3, r3, #1
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d91f      	bls.n	8006da8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	f003 0307 	and.w	r3, r3, #7
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00a      	beq.n	8006d90 <pvPortMalloc+0xf8>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	613b      	str	r3, [r7, #16]
}
 8006d8c:	bf00      	nop
 8006d8e:	e7fe      	b.n	8006d8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	1ad2      	subs	r2, r2, r3
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006da2:	69b8      	ldr	r0, [r7, #24]
 8006da4:	f000 f908 	bl	8006fb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006da8:	4b1d      	ldr	r3, [pc, #116]	; (8006e20 <pvPortMalloc+0x188>)
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	4a1b      	ldr	r2, [pc, #108]	; (8006e20 <pvPortMalloc+0x188>)
 8006db4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006db6:	4b1a      	ldr	r3, [pc, #104]	; (8006e20 <pvPortMalloc+0x188>)
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	4b1b      	ldr	r3, [pc, #108]	; (8006e28 <pvPortMalloc+0x190>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d203      	bcs.n	8006dca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006dc2:	4b17      	ldr	r3, [pc, #92]	; (8006e20 <pvPortMalloc+0x188>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a18      	ldr	r2, [pc, #96]	; (8006e28 <pvPortMalloc+0x190>)
 8006dc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	4b13      	ldr	r3, [pc, #76]	; (8006e1c <pvPortMalloc+0x184>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	2200      	movs	r2, #0
 8006ddc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006dde:	4b13      	ldr	r3, [pc, #76]	; (8006e2c <pvPortMalloc+0x194>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	3301      	adds	r3, #1
 8006de4:	4a11      	ldr	r2, [pc, #68]	; (8006e2c <pvPortMalloc+0x194>)
 8006de6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006de8:	f7fe fbfa 	bl	80055e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	f003 0307 	and.w	r3, r3, #7
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00a      	beq.n	8006e0c <pvPortMalloc+0x174>
	__asm volatile
 8006df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	60fb      	str	r3, [r7, #12]
}
 8006e08:	bf00      	nop
 8006e0a:	e7fe      	b.n	8006e0a <pvPortMalloc+0x172>
	return pvReturn;
 8006e0c:	69fb      	ldr	r3, [r7, #28]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3728      	adds	r7, #40	; 0x28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	20001b00 	.word	0x20001b00
 8006e1c:	20001b14 	.word	0x20001b14
 8006e20:	20001b04 	.word	0x20001b04
 8006e24:	20001af8 	.word	0x20001af8
 8006e28:	20001b08 	.word	0x20001b08
 8006e2c:	20001b0c 	.word	0x20001b0c

08006e30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d04d      	beq.n	8006ede <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e42:	2308      	movs	r3, #8
 8006e44:	425b      	negs	r3, r3
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	4413      	add	r3, r2
 8006e4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	4b24      	ldr	r3, [pc, #144]	; (8006ee8 <vPortFree+0xb8>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4013      	ands	r3, r2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10a      	bne.n	8006e74 <vPortFree+0x44>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	60fb      	str	r3, [r7, #12]
}
 8006e70:	bf00      	nop
 8006e72:	e7fe      	b.n	8006e72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00a      	beq.n	8006e92 <vPortFree+0x62>
	__asm volatile
 8006e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	60bb      	str	r3, [r7, #8]
}
 8006e8e:	bf00      	nop
 8006e90:	e7fe      	b.n	8006e90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	4b14      	ldr	r3, [pc, #80]	; (8006ee8 <vPortFree+0xb8>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d01e      	beq.n	8006ede <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d11a      	bne.n	8006ede <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	4b0e      	ldr	r3, [pc, #56]	; (8006ee8 <vPortFree+0xb8>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	43db      	mvns	r3, r3
 8006eb2:	401a      	ands	r2, r3
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006eb8:	f7fe fb84 	bl	80055c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	4b0a      	ldr	r3, [pc, #40]	; (8006eec <vPortFree+0xbc>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	4a09      	ldr	r2, [pc, #36]	; (8006eec <vPortFree+0xbc>)
 8006ec8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006eca:	6938      	ldr	r0, [r7, #16]
 8006ecc:	f000 f874 	bl	8006fb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006ed0:	4b07      	ldr	r3, [pc, #28]	; (8006ef0 <vPortFree+0xc0>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	4a06      	ldr	r2, [pc, #24]	; (8006ef0 <vPortFree+0xc0>)
 8006ed8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006eda:	f7fe fb81 	bl	80055e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ede:	bf00      	nop
 8006ee0:	3718      	adds	r7, #24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	20001b14 	.word	0x20001b14
 8006eec:	20001b04 	.word	0x20001b04
 8006ef0:	20001b10 	.word	0x20001b10

08006ef4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006efa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006efe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f00:	4b27      	ldr	r3, [pc, #156]	; (8006fa0 <prvHeapInit+0xac>)
 8006f02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f003 0307 	and.w	r3, r3, #7
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00c      	beq.n	8006f28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3307      	adds	r3, #7
 8006f12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0307 	bic.w	r3, r3, #7
 8006f1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	4a1f      	ldr	r2, [pc, #124]	; (8006fa0 <prvHeapInit+0xac>)
 8006f24:	4413      	add	r3, r2
 8006f26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f2c:	4a1d      	ldr	r2, [pc, #116]	; (8006fa4 <prvHeapInit+0xb0>)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f32:	4b1c      	ldr	r3, [pc, #112]	; (8006fa4 <prvHeapInit+0xb0>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f40:	2208      	movs	r2, #8
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	1a9b      	subs	r3, r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0307 	bic.w	r3, r3, #7
 8006f4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4a15      	ldr	r2, [pc, #84]	; (8006fa8 <prvHeapInit+0xb4>)
 8006f54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f56:	4b14      	ldr	r3, [pc, #80]	; (8006fa8 <prvHeapInit+0xb4>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f5e:	4b12      	ldr	r3, [pc, #72]	; (8006fa8 <prvHeapInit+0xb4>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2200      	movs	r2, #0
 8006f64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	1ad2      	subs	r2, r2, r3
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f74:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <prvHeapInit+0xb4>)
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	4a0a      	ldr	r2, [pc, #40]	; (8006fac <prvHeapInit+0xb8>)
 8006f82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	4a09      	ldr	r2, [pc, #36]	; (8006fb0 <prvHeapInit+0xbc>)
 8006f8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f8c:	4b09      	ldr	r3, [pc, #36]	; (8006fb4 <prvHeapInit+0xc0>)
 8006f8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f92:	601a      	str	r2, [r3, #0]
}
 8006f94:	bf00      	nop
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	20000f40 	.word	0x20000f40
 8006fa4:	20001af8 	.word	0x20001af8
 8006fa8:	20001b00 	.word	0x20001b00
 8006fac:	20001b08 	.word	0x20001b08
 8006fb0:	20001b04 	.word	0x20001b04
 8006fb4:	20001b14 	.word	0x20001b14

08006fb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fc0:	4b28      	ldr	r3, [pc, #160]	; (8007064 <prvInsertBlockIntoFreeList+0xac>)
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	e002      	b.n	8006fcc <prvInsertBlockIntoFreeList+0x14>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	60fb      	str	r3, [r7, #12]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d8f7      	bhi.n	8006fc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d108      	bne.n	8006ffa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	441a      	add	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	441a      	add	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d118      	bne.n	8007040 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	4b15      	ldr	r3, [pc, #84]	; (8007068 <prvInsertBlockIntoFreeList+0xb0>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	429a      	cmp	r2, r3
 8007018:	d00d      	beq.n	8007036 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	441a      	add	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	601a      	str	r2, [r3, #0]
 8007034:	e008      	b.n	8007048 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007036:	4b0c      	ldr	r3, [pc, #48]	; (8007068 <prvInsertBlockIntoFreeList+0xb0>)
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	e003      	b.n	8007048 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	429a      	cmp	r2, r3
 800704e:	d002      	beq.n	8007056 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007056:	bf00      	nop
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	20001af8 	.word	0x20001af8
 8007068:	20001b00 	.word	0x20001b00

0800706c <std>:
 800706c:	2300      	movs	r3, #0
 800706e:	b510      	push	{r4, lr}
 8007070:	4604      	mov	r4, r0
 8007072:	e9c0 3300 	strd	r3, r3, [r0]
 8007076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800707a:	6083      	str	r3, [r0, #8]
 800707c:	8181      	strh	r1, [r0, #12]
 800707e:	6643      	str	r3, [r0, #100]	; 0x64
 8007080:	81c2      	strh	r2, [r0, #14]
 8007082:	6183      	str	r3, [r0, #24]
 8007084:	4619      	mov	r1, r3
 8007086:	2208      	movs	r2, #8
 8007088:	305c      	adds	r0, #92	; 0x5c
 800708a:	f000 f9e5 	bl	8007458 <memset>
 800708e:	4b0d      	ldr	r3, [pc, #52]	; (80070c4 <std+0x58>)
 8007090:	6263      	str	r3, [r4, #36]	; 0x24
 8007092:	4b0d      	ldr	r3, [pc, #52]	; (80070c8 <std+0x5c>)
 8007094:	62a3      	str	r3, [r4, #40]	; 0x28
 8007096:	4b0d      	ldr	r3, [pc, #52]	; (80070cc <std+0x60>)
 8007098:	62e3      	str	r3, [r4, #44]	; 0x2c
 800709a:	4b0d      	ldr	r3, [pc, #52]	; (80070d0 <std+0x64>)
 800709c:	6323      	str	r3, [r4, #48]	; 0x30
 800709e:	4b0d      	ldr	r3, [pc, #52]	; (80070d4 <std+0x68>)
 80070a0:	6224      	str	r4, [r4, #32]
 80070a2:	429c      	cmp	r4, r3
 80070a4:	d006      	beq.n	80070b4 <std+0x48>
 80070a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80070aa:	4294      	cmp	r4, r2
 80070ac:	d002      	beq.n	80070b4 <std+0x48>
 80070ae:	33d0      	adds	r3, #208	; 0xd0
 80070b0:	429c      	cmp	r4, r3
 80070b2:	d105      	bne.n	80070c0 <std+0x54>
 80070b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070bc:	f000 ba9a 	b.w	80075f4 <__retarget_lock_init_recursive>
 80070c0:	bd10      	pop	{r4, pc}
 80070c2:	bf00      	nop
 80070c4:	080072a9 	.word	0x080072a9
 80070c8:	080072cb 	.word	0x080072cb
 80070cc:	08007303 	.word	0x08007303
 80070d0:	08007327 	.word	0x08007327
 80070d4:	20001b18 	.word	0x20001b18

080070d8 <stdio_exit_handler>:
 80070d8:	4a02      	ldr	r2, [pc, #8]	; (80070e4 <stdio_exit_handler+0xc>)
 80070da:	4903      	ldr	r1, [pc, #12]	; (80070e8 <stdio_exit_handler+0x10>)
 80070dc:	4803      	ldr	r0, [pc, #12]	; (80070ec <stdio_exit_handler+0x14>)
 80070de:	f000 b869 	b.w	80071b4 <_fwalk_sglue>
 80070e2:	bf00      	nop
 80070e4:	20000010 	.word	0x20000010
 80070e8:	08007915 	.word	0x08007915
 80070ec:	2000001c 	.word	0x2000001c

080070f0 <cleanup_stdio>:
 80070f0:	6841      	ldr	r1, [r0, #4]
 80070f2:	4b0c      	ldr	r3, [pc, #48]	; (8007124 <cleanup_stdio+0x34>)
 80070f4:	4299      	cmp	r1, r3
 80070f6:	b510      	push	{r4, lr}
 80070f8:	4604      	mov	r4, r0
 80070fa:	d001      	beq.n	8007100 <cleanup_stdio+0x10>
 80070fc:	f000 fc0a 	bl	8007914 <_fflush_r>
 8007100:	68a1      	ldr	r1, [r4, #8]
 8007102:	4b09      	ldr	r3, [pc, #36]	; (8007128 <cleanup_stdio+0x38>)
 8007104:	4299      	cmp	r1, r3
 8007106:	d002      	beq.n	800710e <cleanup_stdio+0x1e>
 8007108:	4620      	mov	r0, r4
 800710a:	f000 fc03 	bl	8007914 <_fflush_r>
 800710e:	68e1      	ldr	r1, [r4, #12]
 8007110:	4b06      	ldr	r3, [pc, #24]	; (800712c <cleanup_stdio+0x3c>)
 8007112:	4299      	cmp	r1, r3
 8007114:	d004      	beq.n	8007120 <cleanup_stdio+0x30>
 8007116:	4620      	mov	r0, r4
 8007118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800711c:	f000 bbfa 	b.w	8007914 <_fflush_r>
 8007120:	bd10      	pop	{r4, pc}
 8007122:	bf00      	nop
 8007124:	20001b18 	.word	0x20001b18
 8007128:	20001b80 	.word	0x20001b80
 800712c:	20001be8 	.word	0x20001be8

08007130 <global_stdio_init.part.0>:
 8007130:	b510      	push	{r4, lr}
 8007132:	4b0b      	ldr	r3, [pc, #44]	; (8007160 <global_stdio_init.part.0+0x30>)
 8007134:	4c0b      	ldr	r4, [pc, #44]	; (8007164 <global_stdio_init.part.0+0x34>)
 8007136:	4a0c      	ldr	r2, [pc, #48]	; (8007168 <global_stdio_init.part.0+0x38>)
 8007138:	601a      	str	r2, [r3, #0]
 800713a:	4620      	mov	r0, r4
 800713c:	2200      	movs	r2, #0
 800713e:	2104      	movs	r1, #4
 8007140:	f7ff ff94 	bl	800706c <std>
 8007144:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007148:	2201      	movs	r2, #1
 800714a:	2109      	movs	r1, #9
 800714c:	f7ff ff8e 	bl	800706c <std>
 8007150:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007154:	2202      	movs	r2, #2
 8007156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800715a:	2112      	movs	r1, #18
 800715c:	f7ff bf86 	b.w	800706c <std>
 8007160:	20001c50 	.word	0x20001c50
 8007164:	20001b18 	.word	0x20001b18
 8007168:	080070d9 	.word	0x080070d9

0800716c <__sfp_lock_acquire>:
 800716c:	4801      	ldr	r0, [pc, #4]	; (8007174 <__sfp_lock_acquire+0x8>)
 800716e:	f000 ba42 	b.w	80075f6 <__retarget_lock_acquire_recursive>
 8007172:	bf00      	nop
 8007174:	20001c59 	.word	0x20001c59

08007178 <__sfp_lock_release>:
 8007178:	4801      	ldr	r0, [pc, #4]	; (8007180 <__sfp_lock_release+0x8>)
 800717a:	f000 ba3d 	b.w	80075f8 <__retarget_lock_release_recursive>
 800717e:	bf00      	nop
 8007180:	20001c59 	.word	0x20001c59

08007184 <__sinit>:
 8007184:	b510      	push	{r4, lr}
 8007186:	4604      	mov	r4, r0
 8007188:	f7ff fff0 	bl	800716c <__sfp_lock_acquire>
 800718c:	6a23      	ldr	r3, [r4, #32]
 800718e:	b11b      	cbz	r3, 8007198 <__sinit+0x14>
 8007190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007194:	f7ff bff0 	b.w	8007178 <__sfp_lock_release>
 8007198:	4b04      	ldr	r3, [pc, #16]	; (80071ac <__sinit+0x28>)
 800719a:	6223      	str	r3, [r4, #32]
 800719c:	4b04      	ldr	r3, [pc, #16]	; (80071b0 <__sinit+0x2c>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1f5      	bne.n	8007190 <__sinit+0xc>
 80071a4:	f7ff ffc4 	bl	8007130 <global_stdio_init.part.0>
 80071a8:	e7f2      	b.n	8007190 <__sinit+0xc>
 80071aa:	bf00      	nop
 80071ac:	080070f1 	.word	0x080070f1
 80071b0:	20001c50 	.word	0x20001c50

080071b4 <_fwalk_sglue>:
 80071b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071b8:	4607      	mov	r7, r0
 80071ba:	4688      	mov	r8, r1
 80071bc:	4614      	mov	r4, r2
 80071be:	2600      	movs	r6, #0
 80071c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071c4:	f1b9 0901 	subs.w	r9, r9, #1
 80071c8:	d505      	bpl.n	80071d6 <_fwalk_sglue+0x22>
 80071ca:	6824      	ldr	r4, [r4, #0]
 80071cc:	2c00      	cmp	r4, #0
 80071ce:	d1f7      	bne.n	80071c0 <_fwalk_sglue+0xc>
 80071d0:	4630      	mov	r0, r6
 80071d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071d6:	89ab      	ldrh	r3, [r5, #12]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d907      	bls.n	80071ec <_fwalk_sglue+0x38>
 80071dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071e0:	3301      	adds	r3, #1
 80071e2:	d003      	beq.n	80071ec <_fwalk_sglue+0x38>
 80071e4:	4629      	mov	r1, r5
 80071e6:	4638      	mov	r0, r7
 80071e8:	47c0      	blx	r8
 80071ea:	4306      	orrs	r6, r0
 80071ec:	3568      	adds	r5, #104	; 0x68
 80071ee:	e7e9      	b.n	80071c4 <_fwalk_sglue+0x10>

080071f0 <_puts_r>:
 80071f0:	6a03      	ldr	r3, [r0, #32]
 80071f2:	b570      	push	{r4, r5, r6, lr}
 80071f4:	6884      	ldr	r4, [r0, #8]
 80071f6:	4605      	mov	r5, r0
 80071f8:	460e      	mov	r6, r1
 80071fa:	b90b      	cbnz	r3, 8007200 <_puts_r+0x10>
 80071fc:	f7ff ffc2 	bl	8007184 <__sinit>
 8007200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007202:	07db      	lsls	r3, r3, #31
 8007204:	d405      	bmi.n	8007212 <_puts_r+0x22>
 8007206:	89a3      	ldrh	r3, [r4, #12]
 8007208:	0598      	lsls	r0, r3, #22
 800720a:	d402      	bmi.n	8007212 <_puts_r+0x22>
 800720c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800720e:	f000 f9f2 	bl	80075f6 <__retarget_lock_acquire_recursive>
 8007212:	89a3      	ldrh	r3, [r4, #12]
 8007214:	0719      	lsls	r1, r3, #28
 8007216:	d513      	bpl.n	8007240 <_puts_r+0x50>
 8007218:	6923      	ldr	r3, [r4, #16]
 800721a:	b18b      	cbz	r3, 8007240 <_puts_r+0x50>
 800721c:	3e01      	subs	r6, #1
 800721e:	68a3      	ldr	r3, [r4, #8]
 8007220:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007224:	3b01      	subs	r3, #1
 8007226:	60a3      	str	r3, [r4, #8]
 8007228:	b9e9      	cbnz	r1, 8007266 <_puts_r+0x76>
 800722a:	2b00      	cmp	r3, #0
 800722c:	da2e      	bge.n	800728c <_puts_r+0x9c>
 800722e:	4622      	mov	r2, r4
 8007230:	210a      	movs	r1, #10
 8007232:	4628      	mov	r0, r5
 8007234:	f000 f87b 	bl	800732e <__swbuf_r>
 8007238:	3001      	adds	r0, #1
 800723a:	d007      	beq.n	800724c <_puts_r+0x5c>
 800723c:	250a      	movs	r5, #10
 800723e:	e007      	b.n	8007250 <_puts_r+0x60>
 8007240:	4621      	mov	r1, r4
 8007242:	4628      	mov	r0, r5
 8007244:	f000 f8b0 	bl	80073a8 <__swsetup_r>
 8007248:	2800      	cmp	r0, #0
 800724a:	d0e7      	beq.n	800721c <_puts_r+0x2c>
 800724c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007250:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007252:	07da      	lsls	r2, r3, #31
 8007254:	d405      	bmi.n	8007262 <_puts_r+0x72>
 8007256:	89a3      	ldrh	r3, [r4, #12]
 8007258:	059b      	lsls	r3, r3, #22
 800725a:	d402      	bmi.n	8007262 <_puts_r+0x72>
 800725c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800725e:	f000 f9cb 	bl	80075f8 <__retarget_lock_release_recursive>
 8007262:	4628      	mov	r0, r5
 8007264:	bd70      	pop	{r4, r5, r6, pc}
 8007266:	2b00      	cmp	r3, #0
 8007268:	da04      	bge.n	8007274 <_puts_r+0x84>
 800726a:	69a2      	ldr	r2, [r4, #24]
 800726c:	429a      	cmp	r2, r3
 800726e:	dc06      	bgt.n	800727e <_puts_r+0x8e>
 8007270:	290a      	cmp	r1, #10
 8007272:	d004      	beq.n	800727e <_puts_r+0x8e>
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	1c5a      	adds	r2, r3, #1
 8007278:	6022      	str	r2, [r4, #0]
 800727a:	7019      	strb	r1, [r3, #0]
 800727c:	e7cf      	b.n	800721e <_puts_r+0x2e>
 800727e:	4622      	mov	r2, r4
 8007280:	4628      	mov	r0, r5
 8007282:	f000 f854 	bl	800732e <__swbuf_r>
 8007286:	3001      	adds	r0, #1
 8007288:	d1c9      	bne.n	800721e <_puts_r+0x2e>
 800728a:	e7df      	b.n	800724c <_puts_r+0x5c>
 800728c:	6823      	ldr	r3, [r4, #0]
 800728e:	250a      	movs	r5, #10
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	6022      	str	r2, [r4, #0]
 8007294:	701d      	strb	r5, [r3, #0]
 8007296:	e7db      	b.n	8007250 <_puts_r+0x60>

08007298 <puts>:
 8007298:	4b02      	ldr	r3, [pc, #8]	; (80072a4 <puts+0xc>)
 800729a:	4601      	mov	r1, r0
 800729c:	6818      	ldr	r0, [r3, #0]
 800729e:	f7ff bfa7 	b.w	80071f0 <_puts_r>
 80072a2:	bf00      	nop
 80072a4:	20000068 	.word	0x20000068

080072a8 <__sread>:
 80072a8:	b510      	push	{r4, lr}
 80072aa:	460c      	mov	r4, r1
 80072ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072b0:	f000 f952 	bl	8007558 <_read_r>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	bfab      	itete	ge
 80072b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072ba:	89a3      	ldrhlt	r3, [r4, #12]
 80072bc:	181b      	addge	r3, r3, r0
 80072be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072c2:	bfac      	ite	ge
 80072c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80072c6:	81a3      	strhlt	r3, [r4, #12]
 80072c8:	bd10      	pop	{r4, pc}

080072ca <__swrite>:
 80072ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ce:	461f      	mov	r7, r3
 80072d0:	898b      	ldrh	r3, [r1, #12]
 80072d2:	05db      	lsls	r3, r3, #23
 80072d4:	4605      	mov	r5, r0
 80072d6:	460c      	mov	r4, r1
 80072d8:	4616      	mov	r6, r2
 80072da:	d505      	bpl.n	80072e8 <__swrite+0x1e>
 80072dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072e0:	2302      	movs	r3, #2
 80072e2:	2200      	movs	r2, #0
 80072e4:	f000 f926 	bl	8007534 <_lseek_r>
 80072e8:	89a3      	ldrh	r3, [r4, #12]
 80072ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072f2:	81a3      	strh	r3, [r4, #12]
 80072f4:	4632      	mov	r2, r6
 80072f6:	463b      	mov	r3, r7
 80072f8:	4628      	mov	r0, r5
 80072fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072fe:	f000 b93d 	b.w	800757c <_write_r>

08007302 <__sseek>:
 8007302:	b510      	push	{r4, lr}
 8007304:	460c      	mov	r4, r1
 8007306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800730a:	f000 f913 	bl	8007534 <_lseek_r>
 800730e:	1c43      	adds	r3, r0, #1
 8007310:	89a3      	ldrh	r3, [r4, #12]
 8007312:	bf15      	itete	ne
 8007314:	6560      	strne	r0, [r4, #84]	; 0x54
 8007316:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800731a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800731e:	81a3      	strheq	r3, [r4, #12]
 8007320:	bf18      	it	ne
 8007322:	81a3      	strhne	r3, [r4, #12]
 8007324:	bd10      	pop	{r4, pc}

08007326 <__sclose>:
 8007326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800732a:	f000 b89d 	b.w	8007468 <_close_r>

0800732e <__swbuf_r>:
 800732e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007330:	460e      	mov	r6, r1
 8007332:	4614      	mov	r4, r2
 8007334:	4605      	mov	r5, r0
 8007336:	b118      	cbz	r0, 8007340 <__swbuf_r+0x12>
 8007338:	6a03      	ldr	r3, [r0, #32]
 800733a:	b90b      	cbnz	r3, 8007340 <__swbuf_r+0x12>
 800733c:	f7ff ff22 	bl	8007184 <__sinit>
 8007340:	69a3      	ldr	r3, [r4, #24]
 8007342:	60a3      	str	r3, [r4, #8]
 8007344:	89a3      	ldrh	r3, [r4, #12]
 8007346:	071a      	lsls	r2, r3, #28
 8007348:	d525      	bpl.n	8007396 <__swbuf_r+0x68>
 800734a:	6923      	ldr	r3, [r4, #16]
 800734c:	b31b      	cbz	r3, 8007396 <__swbuf_r+0x68>
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	6922      	ldr	r2, [r4, #16]
 8007352:	1a98      	subs	r0, r3, r2
 8007354:	6963      	ldr	r3, [r4, #20]
 8007356:	b2f6      	uxtb	r6, r6
 8007358:	4283      	cmp	r3, r0
 800735a:	4637      	mov	r7, r6
 800735c:	dc04      	bgt.n	8007368 <__swbuf_r+0x3a>
 800735e:	4621      	mov	r1, r4
 8007360:	4628      	mov	r0, r5
 8007362:	f000 fad7 	bl	8007914 <_fflush_r>
 8007366:	b9e0      	cbnz	r0, 80073a2 <__swbuf_r+0x74>
 8007368:	68a3      	ldr	r3, [r4, #8]
 800736a:	3b01      	subs	r3, #1
 800736c:	60a3      	str	r3, [r4, #8]
 800736e:	6823      	ldr	r3, [r4, #0]
 8007370:	1c5a      	adds	r2, r3, #1
 8007372:	6022      	str	r2, [r4, #0]
 8007374:	701e      	strb	r6, [r3, #0]
 8007376:	6962      	ldr	r2, [r4, #20]
 8007378:	1c43      	adds	r3, r0, #1
 800737a:	429a      	cmp	r2, r3
 800737c:	d004      	beq.n	8007388 <__swbuf_r+0x5a>
 800737e:	89a3      	ldrh	r3, [r4, #12]
 8007380:	07db      	lsls	r3, r3, #31
 8007382:	d506      	bpl.n	8007392 <__swbuf_r+0x64>
 8007384:	2e0a      	cmp	r6, #10
 8007386:	d104      	bne.n	8007392 <__swbuf_r+0x64>
 8007388:	4621      	mov	r1, r4
 800738a:	4628      	mov	r0, r5
 800738c:	f000 fac2 	bl	8007914 <_fflush_r>
 8007390:	b938      	cbnz	r0, 80073a2 <__swbuf_r+0x74>
 8007392:	4638      	mov	r0, r7
 8007394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007396:	4621      	mov	r1, r4
 8007398:	4628      	mov	r0, r5
 800739a:	f000 f805 	bl	80073a8 <__swsetup_r>
 800739e:	2800      	cmp	r0, #0
 80073a0:	d0d5      	beq.n	800734e <__swbuf_r+0x20>
 80073a2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80073a6:	e7f4      	b.n	8007392 <__swbuf_r+0x64>

080073a8 <__swsetup_r>:
 80073a8:	b538      	push	{r3, r4, r5, lr}
 80073aa:	4b2a      	ldr	r3, [pc, #168]	; (8007454 <__swsetup_r+0xac>)
 80073ac:	4605      	mov	r5, r0
 80073ae:	6818      	ldr	r0, [r3, #0]
 80073b0:	460c      	mov	r4, r1
 80073b2:	b118      	cbz	r0, 80073bc <__swsetup_r+0x14>
 80073b4:	6a03      	ldr	r3, [r0, #32]
 80073b6:	b90b      	cbnz	r3, 80073bc <__swsetup_r+0x14>
 80073b8:	f7ff fee4 	bl	8007184 <__sinit>
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073c2:	0718      	lsls	r0, r3, #28
 80073c4:	d422      	bmi.n	800740c <__swsetup_r+0x64>
 80073c6:	06d9      	lsls	r1, r3, #27
 80073c8:	d407      	bmi.n	80073da <__swsetup_r+0x32>
 80073ca:	2309      	movs	r3, #9
 80073cc:	602b      	str	r3, [r5, #0]
 80073ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073d2:	81a3      	strh	r3, [r4, #12]
 80073d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073d8:	e034      	b.n	8007444 <__swsetup_r+0x9c>
 80073da:	0758      	lsls	r0, r3, #29
 80073dc:	d512      	bpl.n	8007404 <__swsetup_r+0x5c>
 80073de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073e0:	b141      	cbz	r1, 80073f4 <__swsetup_r+0x4c>
 80073e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073e6:	4299      	cmp	r1, r3
 80073e8:	d002      	beq.n	80073f0 <__swsetup_r+0x48>
 80073ea:	4628      	mov	r0, r5
 80073ec:	f000 f914 	bl	8007618 <_free_r>
 80073f0:	2300      	movs	r3, #0
 80073f2:	6363      	str	r3, [r4, #52]	; 0x34
 80073f4:	89a3      	ldrh	r3, [r4, #12]
 80073f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073fa:	81a3      	strh	r3, [r4, #12]
 80073fc:	2300      	movs	r3, #0
 80073fe:	6063      	str	r3, [r4, #4]
 8007400:	6923      	ldr	r3, [r4, #16]
 8007402:	6023      	str	r3, [r4, #0]
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	f043 0308 	orr.w	r3, r3, #8
 800740a:	81a3      	strh	r3, [r4, #12]
 800740c:	6923      	ldr	r3, [r4, #16]
 800740e:	b94b      	cbnz	r3, 8007424 <__swsetup_r+0x7c>
 8007410:	89a3      	ldrh	r3, [r4, #12]
 8007412:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800741a:	d003      	beq.n	8007424 <__swsetup_r+0x7c>
 800741c:	4621      	mov	r1, r4
 800741e:	4628      	mov	r0, r5
 8007420:	f000 fac6 	bl	80079b0 <__smakebuf_r>
 8007424:	89a0      	ldrh	r0, [r4, #12]
 8007426:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800742a:	f010 0301 	ands.w	r3, r0, #1
 800742e:	d00a      	beq.n	8007446 <__swsetup_r+0x9e>
 8007430:	2300      	movs	r3, #0
 8007432:	60a3      	str	r3, [r4, #8]
 8007434:	6963      	ldr	r3, [r4, #20]
 8007436:	425b      	negs	r3, r3
 8007438:	61a3      	str	r3, [r4, #24]
 800743a:	6923      	ldr	r3, [r4, #16]
 800743c:	b943      	cbnz	r3, 8007450 <__swsetup_r+0xa8>
 800743e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007442:	d1c4      	bne.n	80073ce <__swsetup_r+0x26>
 8007444:	bd38      	pop	{r3, r4, r5, pc}
 8007446:	0781      	lsls	r1, r0, #30
 8007448:	bf58      	it	pl
 800744a:	6963      	ldrpl	r3, [r4, #20]
 800744c:	60a3      	str	r3, [r4, #8]
 800744e:	e7f4      	b.n	800743a <__swsetup_r+0x92>
 8007450:	2000      	movs	r0, #0
 8007452:	e7f7      	b.n	8007444 <__swsetup_r+0x9c>
 8007454:	20000068 	.word	0x20000068

08007458 <memset>:
 8007458:	4402      	add	r2, r0
 800745a:	4603      	mov	r3, r0
 800745c:	4293      	cmp	r3, r2
 800745e:	d100      	bne.n	8007462 <memset+0xa>
 8007460:	4770      	bx	lr
 8007462:	f803 1b01 	strb.w	r1, [r3], #1
 8007466:	e7f9      	b.n	800745c <memset+0x4>

08007468 <_close_r>:
 8007468:	b538      	push	{r3, r4, r5, lr}
 800746a:	4d06      	ldr	r5, [pc, #24]	; (8007484 <_close_r+0x1c>)
 800746c:	2300      	movs	r3, #0
 800746e:	4604      	mov	r4, r0
 8007470:	4608      	mov	r0, r1
 8007472:	602b      	str	r3, [r5, #0]
 8007474:	f7f9 fb70 	bl	8000b58 <_close>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	d102      	bne.n	8007482 <_close_r+0x1a>
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	b103      	cbz	r3, 8007482 <_close_r+0x1a>
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	bd38      	pop	{r3, r4, r5, pc}
 8007484:	20001c54 	.word	0x20001c54

08007488 <_reclaim_reent>:
 8007488:	4b29      	ldr	r3, [pc, #164]	; (8007530 <_reclaim_reent+0xa8>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4283      	cmp	r3, r0
 800748e:	b570      	push	{r4, r5, r6, lr}
 8007490:	4604      	mov	r4, r0
 8007492:	d04b      	beq.n	800752c <_reclaim_reent+0xa4>
 8007494:	69c3      	ldr	r3, [r0, #28]
 8007496:	b143      	cbz	r3, 80074aa <_reclaim_reent+0x22>
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d144      	bne.n	8007528 <_reclaim_reent+0xa0>
 800749e:	69e3      	ldr	r3, [r4, #28]
 80074a0:	6819      	ldr	r1, [r3, #0]
 80074a2:	b111      	cbz	r1, 80074aa <_reclaim_reent+0x22>
 80074a4:	4620      	mov	r0, r4
 80074a6:	f000 f8b7 	bl	8007618 <_free_r>
 80074aa:	6961      	ldr	r1, [r4, #20]
 80074ac:	b111      	cbz	r1, 80074b4 <_reclaim_reent+0x2c>
 80074ae:	4620      	mov	r0, r4
 80074b0:	f000 f8b2 	bl	8007618 <_free_r>
 80074b4:	69e1      	ldr	r1, [r4, #28]
 80074b6:	b111      	cbz	r1, 80074be <_reclaim_reent+0x36>
 80074b8:	4620      	mov	r0, r4
 80074ba:	f000 f8ad 	bl	8007618 <_free_r>
 80074be:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80074c0:	b111      	cbz	r1, 80074c8 <_reclaim_reent+0x40>
 80074c2:	4620      	mov	r0, r4
 80074c4:	f000 f8a8 	bl	8007618 <_free_r>
 80074c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074ca:	b111      	cbz	r1, 80074d2 <_reclaim_reent+0x4a>
 80074cc:	4620      	mov	r0, r4
 80074ce:	f000 f8a3 	bl	8007618 <_free_r>
 80074d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80074d4:	b111      	cbz	r1, 80074dc <_reclaim_reent+0x54>
 80074d6:	4620      	mov	r0, r4
 80074d8:	f000 f89e 	bl	8007618 <_free_r>
 80074dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80074de:	b111      	cbz	r1, 80074e6 <_reclaim_reent+0x5e>
 80074e0:	4620      	mov	r0, r4
 80074e2:	f000 f899 	bl	8007618 <_free_r>
 80074e6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80074e8:	b111      	cbz	r1, 80074f0 <_reclaim_reent+0x68>
 80074ea:	4620      	mov	r0, r4
 80074ec:	f000 f894 	bl	8007618 <_free_r>
 80074f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80074f2:	b111      	cbz	r1, 80074fa <_reclaim_reent+0x72>
 80074f4:	4620      	mov	r0, r4
 80074f6:	f000 f88f 	bl	8007618 <_free_r>
 80074fa:	6a23      	ldr	r3, [r4, #32]
 80074fc:	b1b3      	cbz	r3, 800752c <_reclaim_reent+0xa4>
 80074fe:	4620      	mov	r0, r4
 8007500:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007504:	4718      	bx	r3
 8007506:	5949      	ldr	r1, [r1, r5]
 8007508:	b941      	cbnz	r1, 800751c <_reclaim_reent+0x94>
 800750a:	3504      	adds	r5, #4
 800750c:	69e3      	ldr	r3, [r4, #28]
 800750e:	2d80      	cmp	r5, #128	; 0x80
 8007510:	68d9      	ldr	r1, [r3, #12]
 8007512:	d1f8      	bne.n	8007506 <_reclaim_reent+0x7e>
 8007514:	4620      	mov	r0, r4
 8007516:	f000 f87f 	bl	8007618 <_free_r>
 800751a:	e7c0      	b.n	800749e <_reclaim_reent+0x16>
 800751c:	680e      	ldr	r6, [r1, #0]
 800751e:	4620      	mov	r0, r4
 8007520:	f000 f87a 	bl	8007618 <_free_r>
 8007524:	4631      	mov	r1, r6
 8007526:	e7ef      	b.n	8007508 <_reclaim_reent+0x80>
 8007528:	2500      	movs	r5, #0
 800752a:	e7ef      	b.n	800750c <_reclaim_reent+0x84>
 800752c:	bd70      	pop	{r4, r5, r6, pc}
 800752e:	bf00      	nop
 8007530:	20000068 	.word	0x20000068

08007534 <_lseek_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4d07      	ldr	r5, [pc, #28]	; (8007554 <_lseek_r+0x20>)
 8007538:	4604      	mov	r4, r0
 800753a:	4608      	mov	r0, r1
 800753c:	4611      	mov	r1, r2
 800753e:	2200      	movs	r2, #0
 8007540:	602a      	str	r2, [r5, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	f7f9 fb2f 	bl	8000ba6 <_lseek>
 8007548:	1c43      	adds	r3, r0, #1
 800754a:	d102      	bne.n	8007552 <_lseek_r+0x1e>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	b103      	cbz	r3, 8007552 <_lseek_r+0x1e>
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	bd38      	pop	{r3, r4, r5, pc}
 8007554:	20001c54 	.word	0x20001c54

08007558 <_read_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4d07      	ldr	r5, [pc, #28]	; (8007578 <_read_r+0x20>)
 800755c:	4604      	mov	r4, r0
 800755e:	4608      	mov	r0, r1
 8007560:	4611      	mov	r1, r2
 8007562:	2200      	movs	r2, #0
 8007564:	602a      	str	r2, [r5, #0]
 8007566:	461a      	mov	r2, r3
 8007568:	f7f9 fac2 	bl	8000af0 <_read>
 800756c:	1c43      	adds	r3, r0, #1
 800756e:	d102      	bne.n	8007576 <_read_r+0x1e>
 8007570:	682b      	ldr	r3, [r5, #0]
 8007572:	b103      	cbz	r3, 8007576 <_read_r+0x1e>
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	bd38      	pop	{r3, r4, r5, pc}
 8007578:	20001c54 	.word	0x20001c54

0800757c <_write_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	4d07      	ldr	r5, [pc, #28]	; (800759c <_write_r+0x20>)
 8007580:	4604      	mov	r4, r0
 8007582:	4608      	mov	r0, r1
 8007584:	4611      	mov	r1, r2
 8007586:	2200      	movs	r2, #0
 8007588:	602a      	str	r2, [r5, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	f7f9 face 	bl	8000b2c <_write>
 8007590:	1c43      	adds	r3, r0, #1
 8007592:	d102      	bne.n	800759a <_write_r+0x1e>
 8007594:	682b      	ldr	r3, [r5, #0]
 8007596:	b103      	cbz	r3, 800759a <_write_r+0x1e>
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	bd38      	pop	{r3, r4, r5, pc}
 800759c:	20001c54 	.word	0x20001c54

080075a0 <__errno>:
 80075a0:	4b01      	ldr	r3, [pc, #4]	; (80075a8 <__errno+0x8>)
 80075a2:	6818      	ldr	r0, [r3, #0]
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	20000068 	.word	0x20000068

080075ac <__libc_init_array>:
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	4d0d      	ldr	r5, [pc, #52]	; (80075e4 <__libc_init_array+0x38>)
 80075b0:	4c0d      	ldr	r4, [pc, #52]	; (80075e8 <__libc_init_array+0x3c>)
 80075b2:	1b64      	subs	r4, r4, r5
 80075b4:	10a4      	asrs	r4, r4, #2
 80075b6:	2600      	movs	r6, #0
 80075b8:	42a6      	cmp	r6, r4
 80075ba:	d109      	bne.n	80075d0 <__libc_init_array+0x24>
 80075bc:	4d0b      	ldr	r5, [pc, #44]	; (80075ec <__libc_init_array+0x40>)
 80075be:	4c0c      	ldr	r4, [pc, #48]	; (80075f0 <__libc_init_array+0x44>)
 80075c0:	f000 fa64 	bl	8007a8c <_init>
 80075c4:	1b64      	subs	r4, r4, r5
 80075c6:	10a4      	asrs	r4, r4, #2
 80075c8:	2600      	movs	r6, #0
 80075ca:	42a6      	cmp	r6, r4
 80075cc:	d105      	bne.n	80075da <__libc_init_array+0x2e>
 80075ce:	bd70      	pop	{r4, r5, r6, pc}
 80075d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075d4:	4798      	blx	r3
 80075d6:	3601      	adds	r6, #1
 80075d8:	e7ee      	b.n	80075b8 <__libc_init_array+0xc>
 80075da:	f855 3b04 	ldr.w	r3, [r5], #4
 80075de:	4798      	blx	r3
 80075e0:	3601      	adds	r6, #1
 80075e2:	e7f2      	b.n	80075ca <__libc_init_array+0x1e>
 80075e4:	08007cc0 	.word	0x08007cc0
 80075e8:	08007cc0 	.word	0x08007cc0
 80075ec:	08007cc0 	.word	0x08007cc0
 80075f0:	08007cc4 	.word	0x08007cc4

080075f4 <__retarget_lock_init_recursive>:
 80075f4:	4770      	bx	lr

080075f6 <__retarget_lock_acquire_recursive>:
 80075f6:	4770      	bx	lr

080075f8 <__retarget_lock_release_recursive>:
 80075f8:	4770      	bx	lr

080075fa <memcpy>:
 80075fa:	440a      	add	r2, r1
 80075fc:	4291      	cmp	r1, r2
 80075fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007602:	d100      	bne.n	8007606 <memcpy+0xc>
 8007604:	4770      	bx	lr
 8007606:	b510      	push	{r4, lr}
 8007608:	f811 4b01 	ldrb.w	r4, [r1], #1
 800760c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007610:	4291      	cmp	r1, r2
 8007612:	d1f9      	bne.n	8007608 <memcpy+0xe>
 8007614:	bd10      	pop	{r4, pc}
	...

08007618 <_free_r>:
 8007618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800761a:	2900      	cmp	r1, #0
 800761c:	d044      	beq.n	80076a8 <_free_r+0x90>
 800761e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007622:	9001      	str	r0, [sp, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	f1a1 0404 	sub.w	r4, r1, #4
 800762a:	bfb8      	it	lt
 800762c:	18e4      	addlt	r4, r4, r3
 800762e:	f000 f8df 	bl	80077f0 <__malloc_lock>
 8007632:	4a1e      	ldr	r2, [pc, #120]	; (80076ac <_free_r+0x94>)
 8007634:	9801      	ldr	r0, [sp, #4]
 8007636:	6813      	ldr	r3, [r2, #0]
 8007638:	b933      	cbnz	r3, 8007648 <_free_r+0x30>
 800763a:	6063      	str	r3, [r4, #4]
 800763c:	6014      	str	r4, [r2, #0]
 800763e:	b003      	add	sp, #12
 8007640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007644:	f000 b8da 	b.w	80077fc <__malloc_unlock>
 8007648:	42a3      	cmp	r3, r4
 800764a:	d908      	bls.n	800765e <_free_r+0x46>
 800764c:	6825      	ldr	r5, [r4, #0]
 800764e:	1961      	adds	r1, r4, r5
 8007650:	428b      	cmp	r3, r1
 8007652:	bf01      	itttt	eq
 8007654:	6819      	ldreq	r1, [r3, #0]
 8007656:	685b      	ldreq	r3, [r3, #4]
 8007658:	1949      	addeq	r1, r1, r5
 800765a:	6021      	streq	r1, [r4, #0]
 800765c:	e7ed      	b.n	800763a <_free_r+0x22>
 800765e:	461a      	mov	r2, r3
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	b10b      	cbz	r3, 8007668 <_free_r+0x50>
 8007664:	42a3      	cmp	r3, r4
 8007666:	d9fa      	bls.n	800765e <_free_r+0x46>
 8007668:	6811      	ldr	r1, [r2, #0]
 800766a:	1855      	adds	r5, r2, r1
 800766c:	42a5      	cmp	r5, r4
 800766e:	d10b      	bne.n	8007688 <_free_r+0x70>
 8007670:	6824      	ldr	r4, [r4, #0]
 8007672:	4421      	add	r1, r4
 8007674:	1854      	adds	r4, r2, r1
 8007676:	42a3      	cmp	r3, r4
 8007678:	6011      	str	r1, [r2, #0]
 800767a:	d1e0      	bne.n	800763e <_free_r+0x26>
 800767c:	681c      	ldr	r4, [r3, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	6053      	str	r3, [r2, #4]
 8007682:	440c      	add	r4, r1
 8007684:	6014      	str	r4, [r2, #0]
 8007686:	e7da      	b.n	800763e <_free_r+0x26>
 8007688:	d902      	bls.n	8007690 <_free_r+0x78>
 800768a:	230c      	movs	r3, #12
 800768c:	6003      	str	r3, [r0, #0]
 800768e:	e7d6      	b.n	800763e <_free_r+0x26>
 8007690:	6825      	ldr	r5, [r4, #0]
 8007692:	1961      	adds	r1, r4, r5
 8007694:	428b      	cmp	r3, r1
 8007696:	bf04      	itt	eq
 8007698:	6819      	ldreq	r1, [r3, #0]
 800769a:	685b      	ldreq	r3, [r3, #4]
 800769c:	6063      	str	r3, [r4, #4]
 800769e:	bf04      	itt	eq
 80076a0:	1949      	addeq	r1, r1, r5
 80076a2:	6021      	streq	r1, [r4, #0]
 80076a4:	6054      	str	r4, [r2, #4]
 80076a6:	e7ca      	b.n	800763e <_free_r+0x26>
 80076a8:	b003      	add	sp, #12
 80076aa:	bd30      	pop	{r4, r5, pc}
 80076ac:	20001c5c 	.word	0x20001c5c

080076b0 <sbrk_aligned>:
 80076b0:	b570      	push	{r4, r5, r6, lr}
 80076b2:	4e0e      	ldr	r6, [pc, #56]	; (80076ec <sbrk_aligned+0x3c>)
 80076b4:	460c      	mov	r4, r1
 80076b6:	6831      	ldr	r1, [r6, #0]
 80076b8:	4605      	mov	r5, r0
 80076ba:	b911      	cbnz	r1, 80076c2 <sbrk_aligned+0x12>
 80076bc:	f000 f9d6 	bl	8007a6c <_sbrk_r>
 80076c0:	6030      	str	r0, [r6, #0]
 80076c2:	4621      	mov	r1, r4
 80076c4:	4628      	mov	r0, r5
 80076c6:	f000 f9d1 	bl	8007a6c <_sbrk_r>
 80076ca:	1c43      	adds	r3, r0, #1
 80076cc:	d00a      	beq.n	80076e4 <sbrk_aligned+0x34>
 80076ce:	1cc4      	adds	r4, r0, #3
 80076d0:	f024 0403 	bic.w	r4, r4, #3
 80076d4:	42a0      	cmp	r0, r4
 80076d6:	d007      	beq.n	80076e8 <sbrk_aligned+0x38>
 80076d8:	1a21      	subs	r1, r4, r0
 80076da:	4628      	mov	r0, r5
 80076dc:	f000 f9c6 	bl	8007a6c <_sbrk_r>
 80076e0:	3001      	adds	r0, #1
 80076e2:	d101      	bne.n	80076e8 <sbrk_aligned+0x38>
 80076e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80076e8:	4620      	mov	r0, r4
 80076ea:	bd70      	pop	{r4, r5, r6, pc}
 80076ec:	20001c60 	.word	0x20001c60

080076f0 <_malloc_r>:
 80076f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076f4:	1ccd      	adds	r5, r1, #3
 80076f6:	f025 0503 	bic.w	r5, r5, #3
 80076fa:	3508      	adds	r5, #8
 80076fc:	2d0c      	cmp	r5, #12
 80076fe:	bf38      	it	cc
 8007700:	250c      	movcc	r5, #12
 8007702:	2d00      	cmp	r5, #0
 8007704:	4607      	mov	r7, r0
 8007706:	db01      	blt.n	800770c <_malloc_r+0x1c>
 8007708:	42a9      	cmp	r1, r5
 800770a:	d905      	bls.n	8007718 <_malloc_r+0x28>
 800770c:	230c      	movs	r3, #12
 800770e:	603b      	str	r3, [r7, #0]
 8007710:	2600      	movs	r6, #0
 8007712:	4630      	mov	r0, r6
 8007714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007718:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80077ec <_malloc_r+0xfc>
 800771c:	f000 f868 	bl	80077f0 <__malloc_lock>
 8007720:	f8d8 3000 	ldr.w	r3, [r8]
 8007724:	461c      	mov	r4, r3
 8007726:	bb5c      	cbnz	r4, 8007780 <_malloc_r+0x90>
 8007728:	4629      	mov	r1, r5
 800772a:	4638      	mov	r0, r7
 800772c:	f7ff ffc0 	bl	80076b0 <sbrk_aligned>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	4604      	mov	r4, r0
 8007734:	d155      	bne.n	80077e2 <_malloc_r+0xf2>
 8007736:	f8d8 4000 	ldr.w	r4, [r8]
 800773a:	4626      	mov	r6, r4
 800773c:	2e00      	cmp	r6, #0
 800773e:	d145      	bne.n	80077cc <_malloc_r+0xdc>
 8007740:	2c00      	cmp	r4, #0
 8007742:	d048      	beq.n	80077d6 <_malloc_r+0xe6>
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	4631      	mov	r1, r6
 8007748:	4638      	mov	r0, r7
 800774a:	eb04 0903 	add.w	r9, r4, r3
 800774e:	f000 f98d 	bl	8007a6c <_sbrk_r>
 8007752:	4581      	cmp	r9, r0
 8007754:	d13f      	bne.n	80077d6 <_malloc_r+0xe6>
 8007756:	6821      	ldr	r1, [r4, #0]
 8007758:	1a6d      	subs	r5, r5, r1
 800775a:	4629      	mov	r1, r5
 800775c:	4638      	mov	r0, r7
 800775e:	f7ff ffa7 	bl	80076b0 <sbrk_aligned>
 8007762:	3001      	adds	r0, #1
 8007764:	d037      	beq.n	80077d6 <_malloc_r+0xe6>
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	442b      	add	r3, r5
 800776a:	6023      	str	r3, [r4, #0]
 800776c:	f8d8 3000 	ldr.w	r3, [r8]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d038      	beq.n	80077e6 <_malloc_r+0xf6>
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	42a2      	cmp	r2, r4
 8007778:	d12b      	bne.n	80077d2 <_malloc_r+0xe2>
 800777a:	2200      	movs	r2, #0
 800777c:	605a      	str	r2, [r3, #4]
 800777e:	e00f      	b.n	80077a0 <_malloc_r+0xb0>
 8007780:	6822      	ldr	r2, [r4, #0]
 8007782:	1b52      	subs	r2, r2, r5
 8007784:	d41f      	bmi.n	80077c6 <_malloc_r+0xd6>
 8007786:	2a0b      	cmp	r2, #11
 8007788:	d917      	bls.n	80077ba <_malloc_r+0xca>
 800778a:	1961      	adds	r1, r4, r5
 800778c:	42a3      	cmp	r3, r4
 800778e:	6025      	str	r5, [r4, #0]
 8007790:	bf18      	it	ne
 8007792:	6059      	strne	r1, [r3, #4]
 8007794:	6863      	ldr	r3, [r4, #4]
 8007796:	bf08      	it	eq
 8007798:	f8c8 1000 	streq.w	r1, [r8]
 800779c:	5162      	str	r2, [r4, r5]
 800779e:	604b      	str	r3, [r1, #4]
 80077a0:	4638      	mov	r0, r7
 80077a2:	f104 060b 	add.w	r6, r4, #11
 80077a6:	f000 f829 	bl	80077fc <__malloc_unlock>
 80077aa:	f026 0607 	bic.w	r6, r6, #7
 80077ae:	1d23      	adds	r3, r4, #4
 80077b0:	1af2      	subs	r2, r6, r3
 80077b2:	d0ae      	beq.n	8007712 <_malloc_r+0x22>
 80077b4:	1b9b      	subs	r3, r3, r6
 80077b6:	50a3      	str	r3, [r4, r2]
 80077b8:	e7ab      	b.n	8007712 <_malloc_r+0x22>
 80077ba:	42a3      	cmp	r3, r4
 80077bc:	6862      	ldr	r2, [r4, #4]
 80077be:	d1dd      	bne.n	800777c <_malloc_r+0x8c>
 80077c0:	f8c8 2000 	str.w	r2, [r8]
 80077c4:	e7ec      	b.n	80077a0 <_malloc_r+0xb0>
 80077c6:	4623      	mov	r3, r4
 80077c8:	6864      	ldr	r4, [r4, #4]
 80077ca:	e7ac      	b.n	8007726 <_malloc_r+0x36>
 80077cc:	4634      	mov	r4, r6
 80077ce:	6876      	ldr	r6, [r6, #4]
 80077d0:	e7b4      	b.n	800773c <_malloc_r+0x4c>
 80077d2:	4613      	mov	r3, r2
 80077d4:	e7cc      	b.n	8007770 <_malloc_r+0x80>
 80077d6:	230c      	movs	r3, #12
 80077d8:	603b      	str	r3, [r7, #0]
 80077da:	4638      	mov	r0, r7
 80077dc:	f000 f80e 	bl	80077fc <__malloc_unlock>
 80077e0:	e797      	b.n	8007712 <_malloc_r+0x22>
 80077e2:	6025      	str	r5, [r4, #0]
 80077e4:	e7dc      	b.n	80077a0 <_malloc_r+0xb0>
 80077e6:	605b      	str	r3, [r3, #4]
 80077e8:	deff      	udf	#255	; 0xff
 80077ea:	bf00      	nop
 80077ec:	20001c5c 	.word	0x20001c5c

080077f0 <__malloc_lock>:
 80077f0:	4801      	ldr	r0, [pc, #4]	; (80077f8 <__malloc_lock+0x8>)
 80077f2:	f7ff bf00 	b.w	80075f6 <__retarget_lock_acquire_recursive>
 80077f6:	bf00      	nop
 80077f8:	20001c58 	.word	0x20001c58

080077fc <__malloc_unlock>:
 80077fc:	4801      	ldr	r0, [pc, #4]	; (8007804 <__malloc_unlock+0x8>)
 80077fe:	f7ff befb 	b.w	80075f8 <__retarget_lock_release_recursive>
 8007802:	bf00      	nop
 8007804:	20001c58 	.word	0x20001c58

08007808 <__sflush_r>:
 8007808:	898a      	ldrh	r2, [r1, #12]
 800780a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800780e:	4605      	mov	r5, r0
 8007810:	0710      	lsls	r0, r2, #28
 8007812:	460c      	mov	r4, r1
 8007814:	d458      	bmi.n	80078c8 <__sflush_r+0xc0>
 8007816:	684b      	ldr	r3, [r1, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	dc05      	bgt.n	8007828 <__sflush_r+0x20>
 800781c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800781e:	2b00      	cmp	r3, #0
 8007820:	dc02      	bgt.n	8007828 <__sflush_r+0x20>
 8007822:	2000      	movs	r0, #0
 8007824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007828:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800782a:	2e00      	cmp	r6, #0
 800782c:	d0f9      	beq.n	8007822 <__sflush_r+0x1a>
 800782e:	2300      	movs	r3, #0
 8007830:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007834:	682f      	ldr	r7, [r5, #0]
 8007836:	6a21      	ldr	r1, [r4, #32]
 8007838:	602b      	str	r3, [r5, #0]
 800783a:	d032      	beq.n	80078a2 <__sflush_r+0x9a>
 800783c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800783e:	89a3      	ldrh	r3, [r4, #12]
 8007840:	075a      	lsls	r2, r3, #29
 8007842:	d505      	bpl.n	8007850 <__sflush_r+0x48>
 8007844:	6863      	ldr	r3, [r4, #4]
 8007846:	1ac0      	subs	r0, r0, r3
 8007848:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800784a:	b10b      	cbz	r3, 8007850 <__sflush_r+0x48>
 800784c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800784e:	1ac0      	subs	r0, r0, r3
 8007850:	2300      	movs	r3, #0
 8007852:	4602      	mov	r2, r0
 8007854:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007856:	6a21      	ldr	r1, [r4, #32]
 8007858:	4628      	mov	r0, r5
 800785a:	47b0      	blx	r6
 800785c:	1c43      	adds	r3, r0, #1
 800785e:	89a3      	ldrh	r3, [r4, #12]
 8007860:	d106      	bne.n	8007870 <__sflush_r+0x68>
 8007862:	6829      	ldr	r1, [r5, #0]
 8007864:	291d      	cmp	r1, #29
 8007866:	d82b      	bhi.n	80078c0 <__sflush_r+0xb8>
 8007868:	4a29      	ldr	r2, [pc, #164]	; (8007910 <__sflush_r+0x108>)
 800786a:	410a      	asrs	r2, r1
 800786c:	07d6      	lsls	r6, r2, #31
 800786e:	d427      	bmi.n	80078c0 <__sflush_r+0xb8>
 8007870:	2200      	movs	r2, #0
 8007872:	6062      	str	r2, [r4, #4]
 8007874:	04d9      	lsls	r1, r3, #19
 8007876:	6922      	ldr	r2, [r4, #16]
 8007878:	6022      	str	r2, [r4, #0]
 800787a:	d504      	bpl.n	8007886 <__sflush_r+0x7e>
 800787c:	1c42      	adds	r2, r0, #1
 800787e:	d101      	bne.n	8007884 <__sflush_r+0x7c>
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	b903      	cbnz	r3, 8007886 <__sflush_r+0x7e>
 8007884:	6560      	str	r0, [r4, #84]	; 0x54
 8007886:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007888:	602f      	str	r7, [r5, #0]
 800788a:	2900      	cmp	r1, #0
 800788c:	d0c9      	beq.n	8007822 <__sflush_r+0x1a>
 800788e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007892:	4299      	cmp	r1, r3
 8007894:	d002      	beq.n	800789c <__sflush_r+0x94>
 8007896:	4628      	mov	r0, r5
 8007898:	f7ff febe 	bl	8007618 <_free_r>
 800789c:	2000      	movs	r0, #0
 800789e:	6360      	str	r0, [r4, #52]	; 0x34
 80078a0:	e7c0      	b.n	8007824 <__sflush_r+0x1c>
 80078a2:	2301      	movs	r3, #1
 80078a4:	4628      	mov	r0, r5
 80078a6:	47b0      	blx	r6
 80078a8:	1c41      	adds	r1, r0, #1
 80078aa:	d1c8      	bne.n	800783e <__sflush_r+0x36>
 80078ac:	682b      	ldr	r3, [r5, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d0c5      	beq.n	800783e <__sflush_r+0x36>
 80078b2:	2b1d      	cmp	r3, #29
 80078b4:	d001      	beq.n	80078ba <__sflush_r+0xb2>
 80078b6:	2b16      	cmp	r3, #22
 80078b8:	d101      	bne.n	80078be <__sflush_r+0xb6>
 80078ba:	602f      	str	r7, [r5, #0]
 80078bc:	e7b1      	b.n	8007822 <__sflush_r+0x1a>
 80078be:	89a3      	ldrh	r3, [r4, #12]
 80078c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078c4:	81a3      	strh	r3, [r4, #12]
 80078c6:	e7ad      	b.n	8007824 <__sflush_r+0x1c>
 80078c8:	690f      	ldr	r7, [r1, #16]
 80078ca:	2f00      	cmp	r7, #0
 80078cc:	d0a9      	beq.n	8007822 <__sflush_r+0x1a>
 80078ce:	0793      	lsls	r3, r2, #30
 80078d0:	680e      	ldr	r6, [r1, #0]
 80078d2:	bf08      	it	eq
 80078d4:	694b      	ldreq	r3, [r1, #20]
 80078d6:	600f      	str	r7, [r1, #0]
 80078d8:	bf18      	it	ne
 80078da:	2300      	movne	r3, #0
 80078dc:	eba6 0807 	sub.w	r8, r6, r7
 80078e0:	608b      	str	r3, [r1, #8]
 80078e2:	f1b8 0f00 	cmp.w	r8, #0
 80078e6:	dd9c      	ble.n	8007822 <__sflush_r+0x1a>
 80078e8:	6a21      	ldr	r1, [r4, #32]
 80078ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80078ec:	4643      	mov	r3, r8
 80078ee:	463a      	mov	r2, r7
 80078f0:	4628      	mov	r0, r5
 80078f2:	47b0      	blx	r6
 80078f4:	2800      	cmp	r0, #0
 80078f6:	dc06      	bgt.n	8007906 <__sflush_r+0xfe>
 80078f8:	89a3      	ldrh	r3, [r4, #12]
 80078fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078fe:	81a3      	strh	r3, [r4, #12]
 8007900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007904:	e78e      	b.n	8007824 <__sflush_r+0x1c>
 8007906:	4407      	add	r7, r0
 8007908:	eba8 0800 	sub.w	r8, r8, r0
 800790c:	e7e9      	b.n	80078e2 <__sflush_r+0xda>
 800790e:	bf00      	nop
 8007910:	dfbffffe 	.word	0xdfbffffe

08007914 <_fflush_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	690b      	ldr	r3, [r1, #16]
 8007918:	4605      	mov	r5, r0
 800791a:	460c      	mov	r4, r1
 800791c:	b913      	cbnz	r3, 8007924 <_fflush_r+0x10>
 800791e:	2500      	movs	r5, #0
 8007920:	4628      	mov	r0, r5
 8007922:	bd38      	pop	{r3, r4, r5, pc}
 8007924:	b118      	cbz	r0, 800792e <_fflush_r+0x1a>
 8007926:	6a03      	ldr	r3, [r0, #32]
 8007928:	b90b      	cbnz	r3, 800792e <_fflush_r+0x1a>
 800792a:	f7ff fc2b 	bl	8007184 <__sinit>
 800792e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d0f3      	beq.n	800791e <_fflush_r+0xa>
 8007936:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007938:	07d0      	lsls	r0, r2, #31
 800793a:	d404      	bmi.n	8007946 <_fflush_r+0x32>
 800793c:	0599      	lsls	r1, r3, #22
 800793e:	d402      	bmi.n	8007946 <_fflush_r+0x32>
 8007940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007942:	f7ff fe58 	bl	80075f6 <__retarget_lock_acquire_recursive>
 8007946:	4628      	mov	r0, r5
 8007948:	4621      	mov	r1, r4
 800794a:	f7ff ff5d 	bl	8007808 <__sflush_r>
 800794e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007950:	07da      	lsls	r2, r3, #31
 8007952:	4605      	mov	r5, r0
 8007954:	d4e4      	bmi.n	8007920 <_fflush_r+0xc>
 8007956:	89a3      	ldrh	r3, [r4, #12]
 8007958:	059b      	lsls	r3, r3, #22
 800795a:	d4e1      	bmi.n	8007920 <_fflush_r+0xc>
 800795c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800795e:	f7ff fe4b 	bl	80075f8 <__retarget_lock_release_recursive>
 8007962:	e7dd      	b.n	8007920 <_fflush_r+0xc>

08007964 <__swhatbuf_r>:
 8007964:	b570      	push	{r4, r5, r6, lr}
 8007966:	460c      	mov	r4, r1
 8007968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800796c:	2900      	cmp	r1, #0
 800796e:	b096      	sub	sp, #88	; 0x58
 8007970:	4615      	mov	r5, r2
 8007972:	461e      	mov	r6, r3
 8007974:	da0d      	bge.n	8007992 <__swhatbuf_r+0x2e>
 8007976:	89a3      	ldrh	r3, [r4, #12]
 8007978:	f013 0f80 	tst.w	r3, #128	; 0x80
 800797c:	f04f 0100 	mov.w	r1, #0
 8007980:	bf0c      	ite	eq
 8007982:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007986:	2340      	movne	r3, #64	; 0x40
 8007988:	2000      	movs	r0, #0
 800798a:	6031      	str	r1, [r6, #0]
 800798c:	602b      	str	r3, [r5, #0]
 800798e:	b016      	add	sp, #88	; 0x58
 8007990:	bd70      	pop	{r4, r5, r6, pc}
 8007992:	466a      	mov	r2, sp
 8007994:	f000 f848 	bl	8007a28 <_fstat_r>
 8007998:	2800      	cmp	r0, #0
 800799a:	dbec      	blt.n	8007976 <__swhatbuf_r+0x12>
 800799c:	9901      	ldr	r1, [sp, #4]
 800799e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80079a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80079a6:	4259      	negs	r1, r3
 80079a8:	4159      	adcs	r1, r3
 80079aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079ae:	e7eb      	b.n	8007988 <__swhatbuf_r+0x24>

080079b0 <__smakebuf_r>:
 80079b0:	898b      	ldrh	r3, [r1, #12]
 80079b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079b4:	079d      	lsls	r5, r3, #30
 80079b6:	4606      	mov	r6, r0
 80079b8:	460c      	mov	r4, r1
 80079ba:	d507      	bpl.n	80079cc <__smakebuf_r+0x1c>
 80079bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	6123      	str	r3, [r4, #16]
 80079c4:	2301      	movs	r3, #1
 80079c6:	6163      	str	r3, [r4, #20]
 80079c8:	b002      	add	sp, #8
 80079ca:	bd70      	pop	{r4, r5, r6, pc}
 80079cc:	ab01      	add	r3, sp, #4
 80079ce:	466a      	mov	r2, sp
 80079d0:	f7ff ffc8 	bl	8007964 <__swhatbuf_r>
 80079d4:	9900      	ldr	r1, [sp, #0]
 80079d6:	4605      	mov	r5, r0
 80079d8:	4630      	mov	r0, r6
 80079da:	f7ff fe89 	bl	80076f0 <_malloc_r>
 80079de:	b948      	cbnz	r0, 80079f4 <__smakebuf_r+0x44>
 80079e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079e4:	059a      	lsls	r2, r3, #22
 80079e6:	d4ef      	bmi.n	80079c8 <__smakebuf_r+0x18>
 80079e8:	f023 0303 	bic.w	r3, r3, #3
 80079ec:	f043 0302 	orr.w	r3, r3, #2
 80079f0:	81a3      	strh	r3, [r4, #12]
 80079f2:	e7e3      	b.n	80079bc <__smakebuf_r+0xc>
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	6020      	str	r0, [r4, #0]
 80079f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079fc:	81a3      	strh	r3, [r4, #12]
 80079fe:	9b00      	ldr	r3, [sp, #0]
 8007a00:	6163      	str	r3, [r4, #20]
 8007a02:	9b01      	ldr	r3, [sp, #4]
 8007a04:	6120      	str	r0, [r4, #16]
 8007a06:	b15b      	cbz	r3, 8007a20 <__smakebuf_r+0x70>
 8007a08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	f000 f81d 	bl	8007a4c <_isatty_r>
 8007a12:	b128      	cbz	r0, 8007a20 <__smakebuf_r+0x70>
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	f023 0303 	bic.w	r3, r3, #3
 8007a1a:	f043 0301 	orr.w	r3, r3, #1
 8007a1e:	81a3      	strh	r3, [r4, #12]
 8007a20:	89a3      	ldrh	r3, [r4, #12]
 8007a22:	431d      	orrs	r5, r3
 8007a24:	81a5      	strh	r5, [r4, #12]
 8007a26:	e7cf      	b.n	80079c8 <__smakebuf_r+0x18>

08007a28 <_fstat_r>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	4d07      	ldr	r5, [pc, #28]	; (8007a48 <_fstat_r+0x20>)
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	4604      	mov	r4, r0
 8007a30:	4608      	mov	r0, r1
 8007a32:	4611      	mov	r1, r2
 8007a34:	602b      	str	r3, [r5, #0]
 8007a36:	f7f9 f89b 	bl	8000b70 <_fstat>
 8007a3a:	1c43      	adds	r3, r0, #1
 8007a3c:	d102      	bne.n	8007a44 <_fstat_r+0x1c>
 8007a3e:	682b      	ldr	r3, [r5, #0]
 8007a40:	b103      	cbz	r3, 8007a44 <_fstat_r+0x1c>
 8007a42:	6023      	str	r3, [r4, #0]
 8007a44:	bd38      	pop	{r3, r4, r5, pc}
 8007a46:	bf00      	nop
 8007a48:	20001c54 	.word	0x20001c54

08007a4c <_isatty_r>:
 8007a4c:	b538      	push	{r3, r4, r5, lr}
 8007a4e:	4d06      	ldr	r5, [pc, #24]	; (8007a68 <_isatty_r+0x1c>)
 8007a50:	2300      	movs	r3, #0
 8007a52:	4604      	mov	r4, r0
 8007a54:	4608      	mov	r0, r1
 8007a56:	602b      	str	r3, [r5, #0]
 8007a58:	f7f9 f89a 	bl	8000b90 <_isatty>
 8007a5c:	1c43      	adds	r3, r0, #1
 8007a5e:	d102      	bne.n	8007a66 <_isatty_r+0x1a>
 8007a60:	682b      	ldr	r3, [r5, #0]
 8007a62:	b103      	cbz	r3, 8007a66 <_isatty_r+0x1a>
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	bd38      	pop	{r3, r4, r5, pc}
 8007a68:	20001c54 	.word	0x20001c54

08007a6c <_sbrk_r>:
 8007a6c:	b538      	push	{r3, r4, r5, lr}
 8007a6e:	4d06      	ldr	r5, [pc, #24]	; (8007a88 <_sbrk_r+0x1c>)
 8007a70:	2300      	movs	r3, #0
 8007a72:	4604      	mov	r4, r0
 8007a74:	4608      	mov	r0, r1
 8007a76:	602b      	str	r3, [r5, #0]
 8007a78:	f7f9 f8a2 	bl	8000bc0 <_sbrk>
 8007a7c:	1c43      	adds	r3, r0, #1
 8007a7e:	d102      	bne.n	8007a86 <_sbrk_r+0x1a>
 8007a80:	682b      	ldr	r3, [r5, #0]
 8007a82:	b103      	cbz	r3, 8007a86 <_sbrk_r+0x1a>
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	bd38      	pop	{r3, r4, r5, pc}
 8007a88:	20001c54 	.word	0x20001c54

08007a8c <_init>:
 8007a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8e:	bf00      	nop
 8007a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a92:	bc08      	pop	{r3}
 8007a94:	469e      	mov	lr, r3
 8007a96:	4770      	bx	lr

08007a98 <_fini>:
 8007a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9a:	bf00      	nop
 8007a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a9e:	bc08      	pop	{r3}
 8007aa0:	469e      	mov	lr, r3
 8007aa2:	4770      	bx	lr
