
FreeRTOS_Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075a4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08007754  08007754  00017754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078e0  080078e0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080078e0  080078e0  000178e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078e8  080078e8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078e8  080078e8  000178e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078ec  080078ec  000178ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080078f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf0  20000068  08007958  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c58  08007958  00021c58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b9df  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003891  00000000  00000000  0003baba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001740  00000000  00000000  0003f350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000120b  00000000  00000000  00040a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004979  00000000  00000000  00041c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000192a3  00000000  00000000  00046614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f219  00000000  00000000  0005f8b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000683c  00000000  00000000  0016ead0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0017530c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800773c 	.word	0x0800773c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	0800773c 	.word	0x0800773c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fb65 	bl	8000bbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f838 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f8b4 	bl	8000664 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004fc:	f000 f886 	bl	800060c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000500:	f003 fa64 	bl	80039cc <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex_1 */
  Mutex_1Handle = osMutexNew(&Mutex_1_attributes);
 8000504:	480f      	ldr	r0, [pc, #60]	; (8000544 <main+0x58>)
 8000506:	f003 fb58 	bl	8003bba <osMutexNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <main+0x5c>)
 800050e:	6013      	str	r3, [r2, #0]

  if(Mutex_1Handle == NULL)
 8000510:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <main+0x5c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d102      	bne.n	800051e <main+0x32>
  {
	  printf("\r\nFailed to create Mutex\r\n");
 8000518:	480c      	ldr	r0, [pc, #48]	; (800054c <main+0x60>)
 800051a:	f006 fd15 	bl	8006f48 <puts>
  }

  /* Create the thread(s) */
  /* creation of High_Task */
  High_TaskHandle = osThreadNew(Start_High_Task, NULL, &High_Task_attributes);
 800051e:	4a0c      	ldr	r2, [pc, #48]	; (8000550 <main+0x64>)
 8000520:	2100      	movs	r1, #0
 8000522:	480c      	ldr	r0, [pc, #48]	; (8000554 <main+0x68>)
 8000524:	f003 fa9c 	bl	8003a60 <osThreadNew>
 8000528:	4603      	mov	r3, r0
 800052a:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <main+0x6c>)
 800052c:	6013      	str	r3, [r2, #0]

  /* creation of Low_Task */
  Low_TaskHandle = osThreadNew(Start_Low_Task, NULL, &Low_Task_attributes);
 800052e:	4a0b      	ldr	r2, [pc, #44]	; (800055c <main+0x70>)
 8000530:	2100      	movs	r1, #0
 8000532:	480b      	ldr	r0, [pc, #44]	; (8000560 <main+0x74>)
 8000534:	f003 fa94 	bl	8003a60 <osThreadNew>
 8000538:	4603      	mov	r3, r0
 800053a:	4a0a      	ldr	r2, [pc, #40]	; (8000564 <main+0x78>)
 800053c:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 800053e:	f003 fa69 	bl	8003a14 <osKernelStart>

  /* Infinite loop */
  while (1)
 8000542:	e7fe      	b.n	8000542 <main+0x56>
 8000544:	08007888 	.word	0x08007888
 8000548:	20000114 	.word	0x20000114
 800054c:	08007774 	.word	0x08007774
 8000550:	08007840 	.word	0x08007840
 8000554:	080006fd 	.word	0x080006fd
 8000558:	2000010c 	.word	0x2000010c
 800055c:	08007864 	.word	0x08007864
 8000560:	0800075d 	.word	0x0800075d
 8000564:	20000110 	.word	0x20000110

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b096      	sub	sp, #88	; 0x58
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2244      	movs	r2, #68	; 0x44
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f006 fdc6 	bl	8007108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	463b      	mov	r3, r7
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800058a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800058e:	f000 fdd5 	bl	800113c <HAL_PWREx_ControlVoltageScaling>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000598:	f000 f910 	bl	80007bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a6:	2340      	movs	r3, #64	; 0x40
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	2302      	movs	r3, #2
 80005ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ae:	2302      	movs	r3, #2
 80005b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005b2:	2301      	movs	r3, #1
 80005b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005b6:	230a      	movs	r3, #10
 80005b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 fe1c 	bl	8001208 <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005d6:	f000 f8f1 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2303      	movs	r3, #3
 80005e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f0:	463b      	mov	r3, r7
 80005f2:	2104      	movs	r1, #4
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 fa21 	bl	8001a3c <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000600:	f000 f8dc 	bl	80007bc <Error_Handler>
  }
}
 8000604:	bf00      	nop
 8000606:	3758      	adds	r7, #88	; 0x58
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  hlpuart1.Instance = LPUART1;
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_LPUART1_UART_Init+0x50>)
 8000612:	4a13      	ldr	r2, [pc, #76]	; (8000660 <MX_LPUART1_UART_Init+0x54>)
 8000614:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_LPUART1_UART_Init+0x50>)
 8000618:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800061c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_LPUART1_UART_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <MX_LPUART1_UART_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_LPUART1_UART_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <MX_LPUART1_UART_Init+0x50>)
 8000632:	220c      	movs	r2, #12
 8000634:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_LPUART1_UART_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <MX_LPUART1_UART_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_LPUART1_UART_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <MX_LPUART1_UART_Init+0x50>)
 800064a:	f002 fbd5 	bl	8002df8 <HAL_UART_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000654:	f000 f8b2 	bl	80007bc <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000084 	.word	0x20000084
 8000660:	40008000 	.word	0x40008000

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800067a:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <MX_GPIO_Init+0x90>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	4a1d      	ldr	r2, [pc, #116]	; (80006f4 <MX_GPIO_Init+0x90>)
 8000680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_GPIO_Init+0x90>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000692:	f000 fda9 	bl	80011e8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_GPIO_Init+0x90>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	4a16      	ldr	r2, [pc, #88]	; (80006f4 <MX_GPIO_Init+0x90>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_GPIO_Init+0x90>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_GPIO_Init+0x90>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <MX_GPIO_Init+0x90>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_GPIO_Init+0x90>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2180      	movs	r1, #128	; 0x80
 80006ca:	480b      	ldr	r0, [pc, #44]	; (80006f8 <MX_GPIO_Init+0x94>)
 80006cc:	f000 fd10 	bl	80010f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BSP_LED_Pin */
  GPIO_InitStruct.Pin = BSP_LED_Pin;
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	4619      	mov	r1, r3
 80006e6:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_GPIO_Init+0x94>)
 80006e8:	f000 fb70 	bl	8000dcc <HAL_GPIO_Init>
}
 80006ec:	bf00      	nop
 80006ee:	3720      	adds	r7, #32
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40021000 	.word	0x40021000
 80006f8:	48000400 	.word	0x48000400

080006fc <Start_High_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_High_Task */
void Start_High_Task(void *argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    if(osMutexAcquire(Mutex_1Handle, osWaitForever) == osOK)
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <Start_High_Task+0x50>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800070c:	4618      	mov	r0, r3
 800070e:	f003 fada 	bl	8003cc6 <osMutexAcquire>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d113      	bne.n	8000740 <Start_High_Task+0x44>
    {
      printf("\r\nHigh Priority Task: Mutex acquired\r\n");
 8000718:	480d      	ldr	r0, [pc, #52]	; (8000750 <Start_High_Task+0x54>)
 800071a:	f006 fc15 	bl	8006f48 <puts>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); // Turn on the LED
 800071e:	2201      	movs	r2, #1
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	480c      	ldr	r0, [pc, #48]	; (8000754 <Start_High_Task+0x58>)
 8000724:	f000 fce4 	bl	80010f0 <HAL_GPIO_WritePin>

      osDelay(1000);  // Simulate some work
 8000728:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800072c:	f003 fa2a 	bl	8003b84 <osDelay>

      printf("High Priority Task: Mutex released\r\n");
 8000730:	4809      	ldr	r0, [pc, #36]	; (8000758 <Start_High_Task+0x5c>)
 8000732:	f006 fc09 	bl	8006f48 <puts>
      osMutexRelease(Mutex_1Handle);
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <Start_High_Task+0x50>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4618      	mov	r0, r3
 800073c:	f003 fb0e 	bl	8003d5c <osMutexRelease>
    }
    osDelay(1000);  // Wait before next attempt to acquire the mutex
 8000740:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000744:	f003 fa1e 	bl	8003b84 <osDelay>
    if(osMutexAcquire(Mutex_1Handle, osWaitForever) == osOK)
 8000748:	e7dc      	b.n	8000704 <Start_High_Task+0x8>
 800074a:	bf00      	nop
 800074c:	20000114 	.word	0x20000114
 8000750:	08007790 	.word	0x08007790
 8000754:	48000400 	.word	0x48000400
 8000758:	080077b8 	.word	0x080077b8

0800075c <Start_Low_Task>:
  * @param argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Low_Task */
void Start_Low_Task(void *argument)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Low_Task */
  /* Infinite loop */
  for(;;)
  {
    if(osMutexAcquire(Mutex_1Handle, osWaitForever) == osOK)
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <Start_Low_Task+0x50>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800076c:	4618      	mov	r0, r3
 800076e:	f003 faaa 	bl	8003cc6 <osMutexAcquire>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d113      	bne.n	80007a0 <Start_Low_Task+0x44>
    {
      printf("\r\nLow Priority Task: Mutex acquired\r\n");
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <Start_Low_Task+0x54>)
 800077a:	f006 fbe5 	bl	8006f48 <puts>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // Turn off the LED
 800077e:	2200      	movs	r2, #0
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	480c      	ldr	r0, [pc, #48]	; (80007b4 <Start_Low_Task+0x58>)
 8000784:	f000 fcb4 	bl	80010f0 <HAL_GPIO_WritePin>

      osDelay(1000);  // Simulate some work
 8000788:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800078c:	f003 f9fa 	bl	8003b84 <osDelay>

      printf("Low Priority Task: Mutex released\r\n");
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <Start_Low_Task+0x5c>)
 8000792:	f006 fbd9 	bl	8006f48 <puts>
      osMutexRelease(Mutex_1Handle);
 8000796:	4b05      	ldr	r3, [pc, #20]	; (80007ac <Start_Low_Task+0x50>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f003 fade 	bl	8003d5c <osMutexRelease>
    }
    osDelay(1000);  // Wait before next attempt to acquire the mutex
 80007a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a4:	f003 f9ee 	bl	8003b84 <osDelay>
    if(osMutexAcquire(Mutex_1Handle, osWaitForever) == osOK)
 80007a8:	e7dc      	b.n	8000764 <Start_Low_Task+0x8>
 80007aa:	bf00      	nop
 80007ac:	20000114 	.word	0x20000114
 80007b0:	080077dc 	.word	0x080077dc
 80007b4:	48000400 	.word	0x48000400
 80007b8:	08007804 	.word	0x08007804

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add their own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <HAL_MspInit+0x4c>)
 80007d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d2:	4a10      	ldr	r2, [pc, #64]	; (8000814 <HAL_MspInit+0x4c>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6613      	str	r3, [r2, #96]	; 0x60
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <HAL_MspInit+0x4c>)
 80007dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <HAL_MspInit+0x4c>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <HAL_MspInit+0x4c>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f0:	6593      	str	r3, [r2, #88]	; 0x58
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_MspInit+0x4c>)
 80007f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	210f      	movs	r1, #15
 8000802:	f06f 0001 	mvn.w	r0, #1
 8000806:	f000 fab7 	bl	8000d78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000

08000818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b0ac      	sub	sp, #176	; 0xb0
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	228c      	movs	r2, #140	; 0x8c
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f006 fc65 	bl	8007108 <memset>
  if(huart->Instance==LPUART1)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a22      	ldr	r2, [pc, #136]	; (80008cc <HAL_UART_MspInit+0xb4>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d13d      	bne.n	80008c4 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000848:	2320      	movs	r3, #32
 800084a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800084c:	2300      	movs	r3, #0
 800084e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	4618      	mov	r0, r3
 8000856:	f001 fb47 	bl	8001ee8 <HAL_RCCEx_PeriphCLKConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000860:	f7ff ffac 	bl	80007bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <HAL_UART_MspInit+0xb8>)
 8000866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000868:	4a19      	ldr	r2, [pc, #100]	; (80008d0 <HAL_UART_MspInit+0xb8>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <HAL_UART_MspInit+0xb8>)
 8000872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <HAL_UART_MspInit+0xb8>)
 800087e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000880:	4a13      	ldr	r2, [pc, #76]	; (80008d0 <HAL_UART_MspInit+0xb8>)
 8000882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000886:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_UART_MspInit+0xb8>)
 800088a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000894:	f000 fca8 	bl	80011e8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000898:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800089c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80008b2:	2308      	movs	r3, #8
 80008b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008bc:	4619      	mov	r1, r3
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <HAL_UART_MspInit+0xbc>)
 80008c0:	f000 fa84 	bl	8000dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80008c4:	bf00      	nop
 80008c6:	37b0      	adds	r7, #176	; 0xb0
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40008000 	.word	0x40008000
 80008d0:	40021000 	.word	0x40021000
 80008d4:	48001800 	.word	0x48001800

080008d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08e      	sub	sp, #56	; 0x38
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008e6:	4b34      	ldr	r3, [pc, #208]	; (80009b8 <HAL_InitTick+0xe0>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ea:	4a33      	ldr	r2, [pc, #204]	; (80009b8 <HAL_InitTick+0xe0>)
 80008ec:	f043 0310 	orr.w	r3, r3, #16
 80008f0:	6593      	str	r3, [r2, #88]	; 0x58
 80008f2:	4b31      	ldr	r3, [pc, #196]	; (80009b8 <HAL_InitTick+0xe0>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f6:	f003 0310 	and.w	r3, r3, #16
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008fe:	f107 0210 	add.w	r2, r7, #16
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4611      	mov	r1, r2
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fa5b 	bl	8001dc4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800090e:	6a3b      	ldr	r3, [r7, #32]
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000914:	2b00      	cmp	r3, #0
 8000916:	d103      	bne.n	8000920 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000918:	f001 fa28 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 800091c:	6378      	str	r0, [r7, #52]	; 0x34
 800091e:	e004      	b.n	800092a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000920:	f001 fa24 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 8000924:	4603      	mov	r3, r0
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800092a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800092c:	4a23      	ldr	r2, [pc, #140]	; (80009bc <HAL_InitTick+0xe4>)
 800092e:	fba2 2303 	umull	r2, r3, r2, r3
 8000932:	0c9b      	lsrs	r3, r3, #18
 8000934:	3b01      	subs	r3, #1
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000938:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <HAL_InitTick+0xe8>)
 800093a:	4a22      	ldr	r2, [pc, #136]	; (80009c4 <HAL_InitTick+0xec>)
 800093c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800093e:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <HAL_InitTick+0xe8>)
 8000940:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000944:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000946:	4a1e      	ldr	r2, [pc, #120]	; (80009c0 <HAL_InitTick+0xe8>)
 8000948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800094a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800094c:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <HAL_InitTick+0xe8>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000952:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <HAL_InitTick+0xe8>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <HAL_InitTick+0xe8>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800095e:	4818      	ldr	r0, [pc, #96]	; (80009c0 <HAL_InitTick+0xe8>)
 8000960:	f001 ff8c 	bl	800287c <HAL_TIM_Base_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800096a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800096e:	2b00      	cmp	r3, #0
 8000970:	d11b      	bne.n	80009aa <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000972:	4813      	ldr	r0, [pc, #76]	; (80009c0 <HAL_InitTick+0xe8>)
 8000974:	f001 ffe4 	bl	8002940 <HAL_TIM_Base_Start_IT>
 8000978:	4603      	mov	r3, r0
 800097a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800097e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000982:	2b00      	cmp	r3, #0
 8000984:	d111      	bne.n	80009aa <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000986:	2036      	movs	r0, #54	; 0x36
 8000988:	f000 fa12 	bl	8000db0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b0f      	cmp	r3, #15
 8000990:	d808      	bhi.n	80009a4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000992:	2200      	movs	r2, #0
 8000994:	6879      	ldr	r1, [r7, #4]
 8000996:	2036      	movs	r0, #54	; 0x36
 8000998:	f000 f9ee 	bl	8000d78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800099c:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <HAL_InitTick+0xf0>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6013      	str	r3, [r2, #0]
 80009a2:	e002      	b.n	80009aa <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80009a4:	2301      	movs	r3, #1
 80009a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3738      	adds	r7, #56	; 0x38
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000
 80009bc:	431bde83 	.word	0x431bde83
 80009c0:	20000118 	.word	0x20000118
 80009c4:	40001000 	.word	0x40001000
 80009c8:	20000004 	.word	0x20000004

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <NMI_Handler+0x4>

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <MemManage_Handler+0x4>

080009de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <TIM6_DAC_IRQHandler+0x10>)
 80009fe:	f002 f80f 	bl	8002a20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000118 	.word	0x20000118

08000a0c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	e00a      	b.n	8000a34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a1e:	f3af 8000 	nop.w
 8000a22:	4601      	mov	r1, r0
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	60ba      	str	r2, [r7, #8]
 8000a2a:	b2ca      	uxtb	r2, r1
 8000a2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	3301      	adds	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	dbf0      	blt.n	8000a1e <_read+0x12>
  }

  return len;
 8000a3c:	687b      	ldr	r3, [r7, #4]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (unsigned char const *) ptr, len, 2000);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	4804      	ldr	r0, [pc, #16]	; (8000a70 <_write+0x28>)
 8000a60:	f002 fa18 	bl	8002e94 <HAL_UART_Transmit>
  return len;
 8000a64:	687b      	ldr	r3, [r7, #4]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000084 	.word	0x20000084

08000a74 <_close>:

int _close(int file)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a9c:	605a      	str	r2, [r3, #4]
  return 0;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <_isatty>:

int _isatty(int file)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ab4:	2301      	movs	r3, #1
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b085      	sub	sp, #20
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	60f8      	str	r0, [r7, #12]
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae4:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <_sbrk+0x5c>)
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <_sbrk+0x60>)
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d102      	bne.n	8000afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <_sbrk+0x64>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <_sbrk+0x68>)
 8000afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d207      	bcs.n	8000b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b0c:	f006 fba0 	bl	8007250 <__errno>
 8000b10:	4603      	mov	r3, r0
 8000b12:	220c      	movs	r2, #12
 8000b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b1a:	e009      	b.n	8000b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <_sbrk+0x64>)
 8000b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20050000 	.word	0x20050000
 8000b3c:	00000400 	.word	0x00000400
 8000b40:	20000164 	.word	0x20000164
 8000b44:	20001c58 	.word	0x20001c58

08000b48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <SystemInit+0x20>)
 8000b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <SystemInit+0x20>)
 8000b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b70:	f7ff ffea 	bl	8000b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b74:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b76:	490d      	ldr	r1, [pc, #52]	; (8000bac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <LoopForever+0xe>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b8c:	4c0a      	ldr	r4, [pc, #40]	; (8000bb8 <LoopForever+0x16>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f006 fb5f 	bl	800725c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b9e:	f7ff fca5 	bl	80004ec <main>

08000ba2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ba2:	e7fe      	b.n	8000ba2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ba4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000bb0:	080078f0 	.word	0x080078f0
  ldr r2, =_sbss
 8000bb4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000bb8:	20001c58 	.word	0x20001c58

08000bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC1_2_IRQHandler>

08000bbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f000 f8ca 	bl	8000d62 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bce:	200f      	movs	r0, #15
 8000bd0:	f7ff fe82 	bl	80008d8 <HAL_InitTick>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d002      	beq.n	8000be0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	71fb      	strb	r3, [r7, #7]
 8000bde:	e001      	b.n	8000be4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be0:	f7ff fdf2 	bl	80007c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000be4:	79fb      	ldrb	r3, [r7, #7]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <HAL_GetTick+0x14>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000168 	.word	0x20000168

08000c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c24:	4013      	ands	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3a:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	60d3      	str	r3, [r2, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <__NVIC_GetPriorityGrouping+0x18>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	f003 0307 	and.w	r3, r3, #7
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db0b      	blt.n	8000c96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	f003 021f 	and.w	r2, r3, #31
 8000c84:	4907      	ldr	r1, [pc, #28]	; (8000ca4 <__NVIC_EnableIRQ+0x38>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	095b      	lsrs	r3, r3, #5
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e100 	.word	0xe000e100

08000ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	db0a      	blt.n	8000cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	490c      	ldr	r1, [pc, #48]	; (8000cf4 <__NVIC_SetPriority+0x4c>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd0:	e00a      	b.n	8000ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4908      	ldr	r1, [pc, #32]	; (8000cf8 <__NVIC_SetPriority+0x50>)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	3b04      	subs	r3, #4
 8000ce0:	0112      	lsls	r2, r2, #4
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	761a      	strb	r2, [r3, #24]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e100 	.word	0xe000e100
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	; 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	bf28      	it	cs
 8000d1a:	2304      	movcs	r3, #4
 8000d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3304      	adds	r3, #4
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d902      	bls.n	8000d2c <NVIC_EncodePriority+0x30>
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	e000      	b.n	8000d2e <NVIC_EncodePriority+0x32>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43d9      	mvns	r1, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	4313      	orrs	r3, r2
         );
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3724      	adds	r7, #36	; 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ff4c 	bl	8000c08 <__NVIC_SetPriorityGrouping>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
 8000d84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d8a:	f7ff ff61 	bl	8000c50 <__NVIC_GetPriorityGrouping>
 8000d8e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	68b9      	ldr	r1, [r7, #8]
 8000d94:	6978      	ldr	r0, [r7, #20]
 8000d96:	f7ff ffb1 	bl	8000cfc <NVIC_EncodePriority>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff80 	bl	8000ca8 <__NVIC_SetPriority>
}
 8000da8:	bf00      	nop
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff54 	bl	8000c6c <__NVIC_EnableIRQ>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b087      	sub	sp, #28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dda:	e166      	b.n	80010aa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	2101      	movs	r1, #1
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	fa01 f303 	lsl.w	r3, r1, r3
 8000de8:	4013      	ands	r3, r2
 8000dea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f000 8158 	beq.w	80010a4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d005      	beq.n	8000e0c <HAL_GPIO_Init+0x40>
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d130      	bne.n	8000e6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	2203      	movs	r2, #3
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	68da      	ldr	r2, [r3, #12]
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e42:	2201      	movs	r2, #1
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	091b      	lsrs	r3, r3, #4
 8000e58:	f003 0201 	and.w	r2, r3, #1
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	d017      	beq.n	8000eaa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	2203      	movs	r2, #3
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d123      	bne.n	8000efe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	08da      	lsrs	r2, r3, #3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3208      	adds	r2, #8
 8000ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	220f      	movs	r2, #15
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	691a      	ldr	r2, [r3, #16]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	f003 0307 	and.w	r3, r3, #7
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	08da      	lsrs	r2, r3, #3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3208      	adds	r2, #8
 8000ef8:	6939      	ldr	r1, [r7, #16]
 8000efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2203      	movs	r2, #3
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0203 	and.w	r2, r3, #3
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 80b2 	beq.w	80010a4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f40:	4b61      	ldr	r3, [pc, #388]	; (80010c8 <HAL_GPIO_Init+0x2fc>)
 8000f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f44:	4a60      	ldr	r2, [pc, #384]	; (80010c8 <HAL_GPIO_Init+0x2fc>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6613      	str	r3, [r2, #96]	; 0x60
 8000f4c:	4b5e      	ldr	r3, [pc, #376]	; (80010c8 <HAL_GPIO_Init+0x2fc>)
 8000f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f58:	4a5c      	ldr	r2, [pc, #368]	; (80010cc <HAL_GPIO_Init+0x300>)
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	3302      	adds	r3, #2
 8000f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	220f      	movs	r2, #15
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f82:	d02b      	beq.n	8000fdc <HAL_GPIO_Init+0x210>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a52      	ldr	r2, [pc, #328]	; (80010d0 <HAL_GPIO_Init+0x304>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d025      	beq.n	8000fd8 <HAL_GPIO_Init+0x20c>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a51      	ldr	r2, [pc, #324]	; (80010d4 <HAL_GPIO_Init+0x308>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d01f      	beq.n	8000fd4 <HAL_GPIO_Init+0x208>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a50      	ldr	r2, [pc, #320]	; (80010d8 <HAL_GPIO_Init+0x30c>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d019      	beq.n	8000fd0 <HAL_GPIO_Init+0x204>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a4f      	ldr	r2, [pc, #316]	; (80010dc <HAL_GPIO_Init+0x310>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d013      	beq.n	8000fcc <HAL_GPIO_Init+0x200>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a4e      	ldr	r2, [pc, #312]	; (80010e0 <HAL_GPIO_Init+0x314>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d00d      	beq.n	8000fc8 <HAL_GPIO_Init+0x1fc>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a4d      	ldr	r2, [pc, #308]	; (80010e4 <HAL_GPIO_Init+0x318>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d007      	beq.n	8000fc4 <HAL_GPIO_Init+0x1f8>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a4c      	ldr	r2, [pc, #304]	; (80010e8 <HAL_GPIO_Init+0x31c>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d101      	bne.n	8000fc0 <HAL_GPIO_Init+0x1f4>
 8000fbc:	2307      	movs	r3, #7
 8000fbe:	e00e      	b.n	8000fde <HAL_GPIO_Init+0x212>
 8000fc0:	2308      	movs	r3, #8
 8000fc2:	e00c      	b.n	8000fde <HAL_GPIO_Init+0x212>
 8000fc4:	2306      	movs	r3, #6
 8000fc6:	e00a      	b.n	8000fde <HAL_GPIO_Init+0x212>
 8000fc8:	2305      	movs	r3, #5
 8000fca:	e008      	b.n	8000fde <HAL_GPIO_Init+0x212>
 8000fcc:	2304      	movs	r3, #4
 8000fce:	e006      	b.n	8000fde <HAL_GPIO_Init+0x212>
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e004      	b.n	8000fde <HAL_GPIO_Init+0x212>
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	e002      	b.n	8000fde <HAL_GPIO_Init+0x212>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e000      	b.n	8000fde <HAL_GPIO_Init+0x212>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	f002 0203 	and.w	r2, r2, #3
 8000fe4:	0092      	lsls	r2, r2, #2
 8000fe6:	4093      	lsls	r3, r2
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fee:	4937      	ldr	r1, [pc, #220]	; (80010cc <HAL_GPIO_Init+0x300>)
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	089b      	lsrs	r3, r3, #2
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ffc:	4b3b      	ldr	r3, [pc, #236]	; (80010ec <HAL_GPIO_Init+0x320>)
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001020:	4a32      	ldr	r2, [pc, #200]	; (80010ec <HAL_GPIO_Init+0x320>)
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001026:	4b31      	ldr	r3, [pc, #196]	; (80010ec <HAL_GPIO_Init+0x320>)
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800104a:	4a28      	ldr	r2, [pc, #160]	; (80010ec <HAL_GPIO_Init+0x320>)
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001050:	4b26      	ldr	r3, [pc, #152]	; (80010ec <HAL_GPIO_Init+0x320>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	43db      	mvns	r3, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001074:	4a1d      	ldr	r2, [pc, #116]	; (80010ec <HAL_GPIO_Init+0x320>)
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800107a:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <HAL_GPIO_Init+0x320>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800109e:	4a13      	ldr	r2, [pc, #76]	; (80010ec <HAL_GPIO_Init+0x320>)
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	3301      	adds	r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	fa22 f303 	lsr.w	r3, r2, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f47f ae91 	bne.w	8000ddc <HAL_GPIO_Init+0x10>
  }
}
 80010ba:	bf00      	nop
 80010bc:	bf00      	nop
 80010be:	371c      	adds	r7, #28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40010000 	.word	0x40010000
 80010d0:	48000400 	.word	0x48000400
 80010d4:	48000800 	.word	0x48000800
 80010d8:	48000c00 	.word	0x48000c00
 80010dc:	48001000 	.word	0x48001000
 80010e0:	48001400 	.word	0x48001400
 80010e4:	48001800 	.word	0x48001800
 80010e8:	48001c00 	.word	0x48001c00
 80010ec:	40010400 	.word	0x40010400

080010f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
 80010fc:	4613      	mov	r3, r2
 80010fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001100:	787b      	ldrb	r3, [r7, #1]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800110c:	e002      	b.n	8001114 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800110e:	887a      	ldrh	r2, [r7, #2]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <HAL_PWREx_GetVoltageRange+0x18>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40007000 	.word	0x40007000

0800113c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800114a:	d130      	bne.n	80011ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800114c:	4b23      	ldr	r3, [pc, #140]	; (80011dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001158:	d038      	beq.n	80011cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800115a:	4b20      	ldr	r3, [pc, #128]	; (80011dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001162:	4a1e      	ldr	r2, [pc, #120]	; (80011dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001164:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001168:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2232      	movs	r2, #50	; 0x32
 8001170:	fb02 f303 	mul.w	r3, r2, r3
 8001174:	4a1b      	ldr	r2, [pc, #108]	; (80011e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001176:	fba2 2303 	umull	r2, r3, r2, r3
 800117a:	0c9b      	lsrs	r3, r3, #18
 800117c:	3301      	adds	r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001180:	e002      	b.n	8001188 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	3b01      	subs	r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001194:	d102      	bne.n	800119c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1f2      	bne.n	8001182 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011a8:	d110      	bne.n	80011cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e00f      	b.n	80011ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ba:	d007      	beq.n	80011cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011c4:	4a05      	ldr	r2, [pc, #20]	; (80011dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40007000 	.word	0x40007000
 80011e0:	20000000 	.word	0x20000000
 80011e4:	431bde83 	.word	0x431bde83

080011e8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <HAL_PWREx_EnableVddIO2+0x1c>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <HAL_PWREx_EnableVddIO2+0x1c>)
 80011f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f6:	6053      	str	r3, [r2, #4]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40007000 	.word	0x40007000

08001208 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d102      	bne.n	800121c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	f000 bc08 	b.w	8001a2c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800121c:	4b96      	ldr	r3, [pc, #600]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001226:	4b94      	ldr	r3, [pc, #592]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0310 	and.w	r3, r3, #16
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 80e4 	beq.w	8001406 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d007      	beq.n	8001254 <HAL_RCC_OscConfig+0x4c>
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	2b0c      	cmp	r3, #12
 8001248:	f040 808b 	bne.w	8001362 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	2b01      	cmp	r3, #1
 8001250:	f040 8087 	bne.w	8001362 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001254:	4b88      	ldr	r3, [pc, #544]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <HAL_RCC_OscConfig+0x64>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e3df      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a1a      	ldr	r2, [r3, #32]
 8001270:	4b81      	ldr	r3, [pc, #516]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0308 	and.w	r3, r3, #8
 8001278:	2b00      	cmp	r3, #0
 800127a:	d004      	beq.n	8001286 <HAL_RCC_OscConfig+0x7e>
 800127c:	4b7e      	ldr	r3, [pc, #504]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001284:	e005      	b.n	8001292 <HAL_RCC_OscConfig+0x8a>
 8001286:	4b7c      	ldr	r3, [pc, #496]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800128c:	091b      	lsrs	r3, r3, #4
 800128e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001292:	4293      	cmp	r3, r2
 8001294:	d223      	bcs.n	80012de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	4618      	mov	r0, r3
 800129c:	f000 fdc4 	bl	8001e28 <RCC_SetFlashLatencyFromMSIRange>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e3c0      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012aa:	4b73      	ldr	r3, [pc, #460]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a72      	ldr	r2, [pc, #456]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	4b70      	ldr	r3, [pc, #448]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	496d      	ldr	r1, [pc, #436]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012c4:	4313      	orrs	r3, r2
 80012c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c8:	4b6b      	ldr	r3, [pc, #428]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	4968      	ldr	r1, [pc, #416]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]
 80012dc:	e025      	b.n	800132a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012de:	4b66      	ldr	r3, [pc, #408]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a65      	ldr	r2, [pc, #404]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012e4:	f043 0308 	orr.w	r3, r3, #8
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	4b63      	ldr	r3, [pc, #396]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	4960      	ldr	r1, [pc, #384]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012fc:	4b5e      	ldr	r3, [pc, #376]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69db      	ldr	r3, [r3, #28]
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	495b      	ldr	r1, [pc, #364]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800130c:	4313      	orrs	r3, r2
 800130e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d109      	bne.n	800132a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	4618      	mov	r0, r3
 800131c:	f000 fd84 	bl	8001e28 <RCC_SetFlashLatencyFromMSIRange>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e380      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800132a:	f000 fc87 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 800132e:	4602      	mov	r2, r0
 8001330:	4b51      	ldr	r3, [pc, #324]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	091b      	lsrs	r3, r3, #4
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	4950      	ldr	r1, [pc, #320]	; (800147c <HAL_RCC_OscConfig+0x274>)
 800133c:	5ccb      	ldrb	r3, [r1, r3]
 800133e:	f003 031f 	and.w	r3, r3, #31
 8001342:	fa22 f303 	lsr.w	r3, r2, r3
 8001346:	4a4e      	ldr	r2, [pc, #312]	; (8001480 <HAL_RCC_OscConfig+0x278>)
 8001348:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800134a:	4b4e      	ldr	r3, [pc, #312]	; (8001484 <HAL_RCC_OscConfig+0x27c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fac2 	bl	80008d8 <HAL_InitTick>
 8001354:	4603      	mov	r3, r0
 8001356:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d052      	beq.n	8001404 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	e364      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d032      	beq.n	80013d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800136a:	4b43      	ldr	r3, [pc, #268]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a42      	ldr	r2, [pc, #264]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001376:	f7ff fc3b 	bl	8000bf0 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800137e:	f7ff fc37 	bl	8000bf0 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e34d      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001390:	4b39      	ldr	r3, [pc, #228]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800139c:	4b36      	ldr	r3, [pc, #216]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a35      	ldr	r2, [pc, #212]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013a2:	f043 0308 	orr.w	r3, r3, #8
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b33      	ldr	r3, [pc, #204]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	4930      	ldr	r1, [pc, #192]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ba:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	492b      	ldr	r1, [pc, #172]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013ca:	4313      	orrs	r3, r2
 80013cc:	604b      	str	r3, [r1, #4]
 80013ce:	e01a      	b.n	8001406 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013d0:	4b29      	ldr	r3, [pc, #164]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a28      	ldr	r2, [pc, #160]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013d6:	f023 0301 	bic.w	r3, r3, #1
 80013da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013dc:	f7ff fc08 	bl	8000bf0 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013e4:	f7ff fc04 	bl	8000bf0 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e31a      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0x1dc>
 8001402:	e000      	b.n	8001406 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001404:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d073      	beq.n	80014fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	2b08      	cmp	r3, #8
 8001416:	d005      	beq.n	8001424 <HAL_RCC_OscConfig+0x21c>
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	2b0c      	cmp	r3, #12
 800141c:	d10e      	bne.n	800143c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	2b03      	cmp	r3, #3
 8001422:	d10b      	bne.n	800143c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d063      	beq.n	80014f8 <HAL_RCC_OscConfig+0x2f0>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d15f      	bne.n	80014f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e2f7      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001444:	d106      	bne.n	8001454 <HAL_RCC_OscConfig+0x24c>
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800144c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	e025      	b.n	80014a0 <HAL_RCC_OscConfig+0x298>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800145c:	d114      	bne.n	8001488 <HAL_RCC_OscConfig+0x280>
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a05      	ldr	r2, [pc, #20]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b03      	ldr	r3, [pc, #12]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a02      	ldr	r2, [pc, #8]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 8001470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e013      	b.n	80014a0 <HAL_RCC_OscConfig+0x298>
 8001478:	40021000 	.word	0x40021000
 800147c:	08007898 	.word	0x08007898
 8001480:	20000000 	.word	0x20000000
 8001484:	20000004 	.word	0x20000004
 8001488:	4ba0      	ldr	r3, [pc, #640]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a9f      	ldr	r2, [pc, #636]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800148e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	4b9d      	ldr	r3, [pc, #628]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a9c      	ldr	r2, [pc, #624]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800149a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800149e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d013      	beq.n	80014d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff fba2 	bl	8000bf0 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b0:	f7ff fb9e 	bl	8000bf0 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b64      	cmp	r3, #100	; 0x64
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e2b4      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014c2:	4b92      	ldr	r3, [pc, #584]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f0      	beq.n	80014b0 <HAL_RCC_OscConfig+0x2a8>
 80014ce:	e014      	b.n	80014fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d0:	f7ff fb8e 	bl	8000bf0 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff fb8a 	bl	8000bf0 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	; 0x64
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e2a0      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ea:	4b88      	ldr	r3, [pc, #544]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x2d0>
 80014f6:	e000      	b.n	80014fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d060      	beq.n	80015c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	2b04      	cmp	r3, #4
 800150a:	d005      	beq.n	8001518 <HAL_RCC_OscConfig+0x310>
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2b0c      	cmp	r3, #12
 8001510:	d119      	bne.n	8001546 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d116      	bne.n	8001546 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001518:	4b7c      	ldr	r3, [pc, #496]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_OscConfig+0x328>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e27d      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001530:	4b76      	ldr	r3, [pc, #472]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	061b      	lsls	r3, r3, #24
 800153e:	4973      	ldr	r1, [pc, #460]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001540:	4313      	orrs	r3, r2
 8001542:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001544:	e040      	b.n	80015c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d023      	beq.n	8001596 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800154e:	4b6f      	ldr	r3, [pc, #444]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a6e      	ldr	r2, [pc, #440]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155a:	f7ff fb49 	bl	8000bf0 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001562:	f7ff fb45 	bl	8000bf0 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e25b      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001574:	4b65      	ldr	r3, [pc, #404]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001580:	4b62      	ldr	r3, [pc, #392]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	061b      	lsls	r3, r3, #24
 800158e:	495f      	ldr	r1, [pc, #380]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
 8001594:	e018      	b.n	80015c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001596:	4b5d      	ldr	r3, [pc, #372]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a5c      	ldr	r2, [pc, #368]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800159c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a2:	f7ff fb25 	bl	8000bf0 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015aa:	f7ff fb21 	bl	8000bf0 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e237      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015bc:	4b53      	ldr	r3, [pc, #332]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f0      	bne.n	80015aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d03c      	beq.n	800164e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d01c      	beq.n	8001616 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015dc:	4b4b      	ldr	r3, [pc, #300]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80015de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015e2:	4a4a      	ldr	r2, [pc, #296]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ec:	f7ff fb00 	bl	8000bf0 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f4:	f7ff fafc 	bl	8000bf0 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e212      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001606:	4b41      	ldr	r3, [pc, #260]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0ef      	beq.n	80015f4 <HAL_RCC_OscConfig+0x3ec>
 8001614:	e01b      	b.n	800164e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001616:	4b3d      	ldr	r3, [pc, #244]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800161c:	4a3b      	ldr	r2, [pc, #236]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800161e:	f023 0301 	bic.w	r3, r3, #1
 8001622:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001626:	f7ff fae3 	bl	8000bf0 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162e:	f7ff fadf 	bl	8000bf0 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e1f5      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001640:	4b32      	ldr	r3, [pc, #200]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1ef      	bne.n	800162e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 80a6 	beq.w	80017a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165c:	2300      	movs	r3, #0
 800165e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001660:	4b2a      	ldr	r3, [pc, #168]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10d      	bne.n	8001688 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166c:	4b27      	ldr	r3, [pc, #156]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800166e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001670:	4a26      	ldr	r2, [pc, #152]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001676:	6593      	str	r3, [r2, #88]	; 0x58
 8001678:	4b24      	ldr	r3, [pc, #144]	; (800170c <HAL_RCC_OscConfig+0x504>)
 800167a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001684:	2301      	movs	r3, #1
 8001686:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001688:	4b21      	ldr	r3, [pc, #132]	; (8001710 <HAL_RCC_OscConfig+0x508>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001690:	2b00      	cmp	r3, #0
 8001692:	d118      	bne.n	80016c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001694:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <HAL_RCC_OscConfig+0x508>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a1d      	ldr	r2, [pc, #116]	; (8001710 <HAL_RCC_OscConfig+0x508>)
 800169a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a0:	f7ff faa6 	bl	8000bf0 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a8:	f7ff faa2 	bl	8000bf0 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e1b8      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_RCC_OscConfig+0x508>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d108      	bne.n	80016e0 <HAL_RCC_OscConfig+0x4d8>
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80016d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d4:	4a0d      	ldr	r2, [pc, #52]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016de:	e029      	b.n	8001734 <HAL_RCC_OscConfig+0x52c>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	d115      	bne.n	8001714 <HAL_RCC_OscConfig+0x50c>
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80016ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ee:	4a07      	ldr	r2, [pc, #28]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <HAL_RCC_OscConfig+0x504>)
 80016fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fe:	4a03      	ldr	r2, [pc, #12]	; (800170c <HAL_RCC_OscConfig+0x504>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001708:	e014      	b.n	8001734 <HAL_RCC_OscConfig+0x52c>
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000
 8001710:	40007000 	.word	0x40007000
 8001714:	4b9d      	ldr	r3, [pc, #628]	; (800198c <HAL_RCC_OscConfig+0x784>)
 8001716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171a:	4a9c      	ldr	r2, [pc, #624]	; (800198c <HAL_RCC_OscConfig+0x784>)
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001724:	4b99      	ldr	r3, [pc, #612]	; (800198c <HAL_RCC_OscConfig+0x784>)
 8001726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172a:	4a98      	ldr	r2, [pc, #608]	; (800198c <HAL_RCC_OscConfig+0x784>)
 800172c:	f023 0304 	bic.w	r3, r3, #4
 8001730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d016      	beq.n	800176a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173c:	f7ff fa58 	bl	8000bf0 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001742:	e00a      	b.n	800175a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001744:	f7ff fa54 	bl	8000bf0 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001752:	4293      	cmp	r3, r2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e168      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800175a:	4b8c      	ldr	r3, [pc, #560]	; (800198c <HAL_RCC_OscConfig+0x784>)
 800175c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0ed      	beq.n	8001744 <HAL_RCC_OscConfig+0x53c>
 8001768:	e015      	b.n	8001796 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176a:	f7ff fa41 	bl	8000bf0 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001770:	e00a      	b.n	8001788 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001772:	f7ff fa3d 	bl	8000bf0 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001780:	4293      	cmp	r3, r2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e151      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001788:	4b80      	ldr	r3, [pc, #512]	; (800198c <HAL_RCC_OscConfig+0x784>)
 800178a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1ed      	bne.n	8001772 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001796:	7ffb      	ldrb	r3, [r7, #31]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d105      	bne.n	80017a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800179c:	4b7b      	ldr	r3, [pc, #492]	; (800198c <HAL_RCC_OscConfig+0x784>)
 800179e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a0:	4a7a      	ldr	r2, [pc, #488]	; (800198c <HAL_RCC_OscConfig+0x784>)
 80017a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0320 	and.w	r3, r3, #32
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d03c      	beq.n	800182e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d01c      	beq.n	80017f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017bc:	4b73      	ldr	r3, [pc, #460]	; (800198c <HAL_RCC_OscConfig+0x784>)
 80017be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017c2:	4a72      	ldr	r2, [pc, #456]	; (800198c <HAL_RCC_OscConfig+0x784>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7ff fa10 	bl	8000bf0 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017d4:	f7ff fa0c 	bl	8000bf0 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e122      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017e6:	4b69      	ldr	r3, [pc, #420]	; (800198c <HAL_RCC_OscConfig+0x784>)
 80017e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0ef      	beq.n	80017d4 <HAL_RCC_OscConfig+0x5cc>
 80017f4:	e01b      	b.n	800182e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017f6:	4b65      	ldr	r3, [pc, #404]	; (800198c <HAL_RCC_OscConfig+0x784>)
 80017f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017fc:	4a63      	ldr	r2, [pc, #396]	; (800198c <HAL_RCC_OscConfig+0x784>)
 80017fe:	f023 0301 	bic.w	r3, r3, #1
 8001802:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001806:	f7ff f9f3 	bl	8000bf0 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800180e:	f7ff f9ef 	bl	8000bf0 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e105      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001820:	4b5a      	ldr	r3, [pc, #360]	; (800198c <HAL_RCC_OscConfig+0x784>)
 8001822:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1ef      	bne.n	800180e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 80f9 	beq.w	8001a2a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	2b02      	cmp	r3, #2
 800183e:	f040 80cf 	bne.w	80019e0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001842:	4b52      	ldr	r3, [pc, #328]	; (800198c <HAL_RCC_OscConfig+0x784>)
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f003 0203 	and.w	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001852:	429a      	cmp	r2, r3
 8001854:	d12c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001860:	3b01      	subs	r3, #1
 8001862:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d123      	bne.n	80018b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001872:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d11b      	bne.n	80018b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001882:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d113      	bne.n	80018b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001892:	085b      	lsrs	r3, r3, #1
 8001894:	3b01      	subs	r3, #1
 8001896:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001898:	429a      	cmp	r2, r3
 800189a:	d109      	bne.n	80018b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	085b      	lsrs	r3, r3, #1
 80018a8:	3b01      	subs	r3, #1
 80018aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d071      	beq.n	8001994 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2b0c      	cmp	r3, #12
 80018b4:	d068      	beq.n	8001988 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018b6:	4b35      	ldr	r3, [pc, #212]	; (800198c <HAL_RCC_OscConfig+0x784>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d105      	bne.n	80018ce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018c2:	4b32      	ldr	r3, [pc, #200]	; (800198c <HAL_RCC_OscConfig+0x784>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e0ac      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018d2:	4b2e      	ldr	r3, [pc, #184]	; (800198c <HAL_RCC_OscConfig+0x784>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a2d      	ldr	r2, [pc, #180]	; (800198c <HAL_RCC_OscConfig+0x784>)
 80018d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018de:	f7ff f987 	bl	8000bf0 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e6:	f7ff f983 	bl	8000bf0 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e099      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f8:	4b24      	ldr	r3, [pc, #144]	; (800198c <HAL_RCC_OscConfig+0x784>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1f0      	bne.n	80018e6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001904:	4b21      	ldr	r3, [pc, #132]	; (800198c <HAL_RCC_OscConfig+0x784>)
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <HAL_RCC_OscConfig+0x788>)
 800190a:	4013      	ands	r3, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001914:	3a01      	subs	r2, #1
 8001916:	0112      	lsls	r2, r2, #4
 8001918:	4311      	orrs	r1, r2
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800191e:	0212      	lsls	r2, r2, #8
 8001920:	4311      	orrs	r1, r2
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001926:	0852      	lsrs	r2, r2, #1
 8001928:	3a01      	subs	r2, #1
 800192a:	0552      	lsls	r2, r2, #21
 800192c:	4311      	orrs	r1, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001932:	0852      	lsrs	r2, r2, #1
 8001934:	3a01      	subs	r2, #1
 8001936:	0652      	lsls	r2, r2, #25
 8001938:	4311      	orrs	r1, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800193e:	06d2      	lsls	r2, r2, #27
 8001940:	430a      	orrs	r2, r1
 8001942:	4912      	ldr	r1, [pc, #72]	; (800198c <HAL_RCC_OscConfig+0x784>)
 8001944:	4313      	orrs	r3, r2
 8001946:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001948:	4b10      	ldr	r3, [pc, #64]	; (800198c <HAL_RCC_OscConfig+0x784>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0f      	ldr	r2, [pc, #60]	; (800198c <HAL_RCC_OscConfig+0x784>)
 800194e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001952:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001954:	4b0d      	ldr	r3, [pc, #52]	; (800198c <HAL_RCC_OscConfig+0x784>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	4a0c      	ldr	r2, [pc, #48]	; (800198c <HAL_RCC_OscConfig+0x784>)
 800195a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800195e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001960:	f7ff f946 	bl	8000bf0 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff f942 	bl	8000bf0 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e058      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197a:	4b04      	ldr	r3, [pc, #16]	; (800198c <HAL_RCC_OscConfig+0x784>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001986:	e050      	b.n	8001a2a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e04f      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
 800198c:	40021000 	.word	0x40021000
 8001990:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001994:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <HAL_RCC_OscConfig+0x82c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d144      	bne.n	8001a2a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019a0:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <HAL_RCC_OscConfig+0x82c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a23      	ldr	r2, [pc, #140]	; (8001a34 <HAL_RCC_OscConfig+0x82c>)
 80019a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019ac:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <HAL_RCC_OscConfig+0x82c>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4a20      	ldr	r2, [pc, #128]	; (8001a34 <HAL_RCC_OscConfig+0x82c>)
 80019b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019b8:	f7ff f91a 	bl	8000bf0 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c0:	f7ff f916 	bl	8000bf0 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e02c      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d2:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <HAL_RCC_OscConfig+0x82c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0x7b8>
 80019de:	e024      	b.n	8001a2a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	2b0c      	cmp	r3, #12
 80019e4:	d01f      	beq.n	8001a26 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <HAL_RCC_OscConfig+0x82c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <HAL_RCC_OscConfig+0x82c>)
 80019ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f2:	f7ff f8fd 	bl	8000bf0 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fa:	f7ff f8f9 	bl	8000bf0 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e00f      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_RCC_OscConfig+0x82c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1f0      	bne.n	80019fa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_RCC_OscConfig+0x82c>)
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	4905      	ldr	r1, [pc, #20]	; (8001a34 <HAL_RCC_OscConfig+0x82c>)
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_RCC_OscConfig+0x830>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	60cb      	str	r3, [r1, #12]
 8001a24:	e001      	b.n	8001a2a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3720      	adds	r7, #32
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40021000 	.word	0x40021000
 8001a38:	feeefffc 	.word	0xfeeefffc

08001a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0e7      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a50:	4b75      	ldr	r3, [pc, #468]	; (8001c28 <HAL_RCC_ClockConfig+0x1ec>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d910      	bls.n	8001a80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	4b72      	ldr	r3, [pc, #456]	; (8001c28 <HAL_RCC_ClockConfig+0x1ec>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f023 0207 	bic.w	r2, r3, #7
 8001a66:	4970      	ldr	r1, [pc, #448]	; (8001c28 <HAL_RCC_ClockConfig+0x1ec>)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6e:	4b6e      	ldr	r3, [pc, #440]	; (8001c28 <HAL_RCC_ClockConfig+0x1ec>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0cf      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d010      	beq.n	8001aae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	4b66      	ldr	r3, [pc, #408]	; (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d908      	bls.n	8001aae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a9c:	4b63      	ldr	r3, [pc, #396]	; (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	4960      	ldr	r1, [pc, #384]	; (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d04c      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d107      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac2:	4b5a      	ldr	r3, [pc, #360]	; (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d121      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e0a6      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d107      	bne.n	8001aea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ada:	4b54      	ldr	r3, [pc, #336]	; (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d115      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e09a      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d107      	bne.n	8001b02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001af2:	4b4e      	ldr	r3, [pc, #312]	; (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d109      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e08e      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b02:	4b4a      	ldr	r3, [pc, #296]	; (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e086      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b12:	4b46      	ldr	r3, [pc, #280]	; (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f023 0203 	bic.w	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4943      	ldr	r1, [pc, #268]	; (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b24:	f7ff f864 	bl	8000bf0 <HAL_GetTick>
 8001b28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2a:	e00a      	b.n	8001b42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b2c:	f7ff f860 	bl	8000bf0 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e06e      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b42:	4b3a      	ldr	r3, [pc, #232]	; (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 020c 	and.w	r2, r3, #12
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d1eb      	bne.n	8001b2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d010      	beq.n	8001b82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	4b31      	ldr	r3, [pc, #196]	; (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d208      	bcs.n	8001b82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b70:	4b2e      	ldr	r3, [pc, #184]	; (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	492b      	ldr	r1, [pc, #172]	; (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b82:	4b29      	ldr	r3, [pc, #164]	; (8001c28 <HAL_RCC_ClockConfig+0x1ec>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d210      	bcs.n	8001bb2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b90:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <HAL_RCC_ClockConfig+0x1ec>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f023 0207 	bic.w	r2, r3, #7
 8001b98:	4923      	ldr	r1, [pc, #140]	; (8001c28 <HAL_RCC_ClockConfig+0x1ec>)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba0:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <HAL_RCC_ClockConfig+0x1ec>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d001      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e036      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d008      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	4918      	ldr	r1, [pc, #96]	; (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d009      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	4910      	ldr	r1, [pc, #64]	; (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bf0:	f000 f824 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <HAL_RCC_ClockConfig+0x1f0>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	f003 030f 	and.w	r3, r3, #15
 8001c00:	490b      	ldr	r1, [pc, #44]	; (8001c30 <HAL_RCC_ClockConfig+0x1f4>)
 8001c02:	5ccb      	ldrb	r3, [r1, r3]
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0c:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <HAL_RCC_ClockConfig+0x1f8>)
 8001c0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_RCC_ClockConfig+0x1fc>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fe5f 	bl	80008d8 <HAL_InitTick>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c1e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40022000 	.word	0x40022000
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	08007898 	.word	0x08007898
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000004 	.word	0x20000004

08001c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	; 0x24
 8001c40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c4a:	4b3e      	ldr	r3, [pc, #248]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c54:	4b3b      	ldr	r3, [pc, #236]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_GetSysClockFreq+0x34>
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	2b0c      	cmp	r3, #12
 8001c68:	d121      	bne.n	8001cae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d11e      	bne.n	8001cae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c70:	4b34      	ldr	r3, [pc, #208]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d107      	bne.n	8001c8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c7c:	4b31      	ldr	r3, [pc, #196]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	e005      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c8c:	4b2d      	ldr	r3, [pc, #180]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c98:	4a2b      	ldr	r2, [pc, #172]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10d      	bne.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cac:	e00a      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d102      	bne.n	8001cba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cb4:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x110>)
 8001cb6:	61bb      	str	r3, [r7, #24]
 8001cb8:	e004      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cc0:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	2b0c      	cmp	r3, #12
 8001cc8:	d134      	bne.n	8001d34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cca:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d003      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d003      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0xac>
 8001ce0:	e005      	b.n	8001cee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ce4:	617b      	str	r3, [r7, #20]
      break;
 8001ce6:	e005      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cea:	617b      	str	r3, [r7, #20]
      break;
 8001cec:	e002      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	617b      	str	r3, [r7, #20]
      break;
 8001cf2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	3301      	adds	r3, #1
 8001d00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	0a1b      	lsrs	r3, r3, #8
 8001d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	fb03 f202 	mul.w	r2, r3, r2
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	0e5b      	lsrs	r3, r3, #25
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	3301      	adds	r3, #1
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d34:	69bb      	ldr	r3, [r7, #24]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3724      	adds	r7, #36	; 0x24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000
 8001d48:	080078b0 	.word	0x080078b0
 8001d4c:	00f42400 	.word	0x00f42400
 8001d50:	007a1200 	.word	0x007a1200

08001d54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000000 	.word	0x20000000

08001d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d70:	f7ff fff0 	bl	8001d54 <HAL_RCC_GetHCLKFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	0a1b      	lsrs	r3, r3, #8
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	4904      	ldr	r1, [pc, #16]	; (8001d94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000
 8001d94:	080078a8 	.word	0x080078a8

08001d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d9c:	f7ff ffda 	bl	8001d54 <HAL_RCC_GetHCLKFreq>
 8001da0:	4602      	mov	r2, r0
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	0adb      	lsrs	r3, r3, #11
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	4904      	ldr	r1, [pc, #16]	; (8001dc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dae:	5ccb      	ldrb	r3, [r1, r3]
 8001db0:	f003 031f 	and.w	r3, r3, #31
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	080078a8 	.word	0x080078a8

08001dc4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	220f      	movs	r2, #15
 8001dd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_RCC_GetClockConfig+0x5c>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 0203 	and.w	r2, r3, #3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <HAL_RCC_GetClockConfig+0x5c>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <HAL_RCC_GetClockConfig+0x5c>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_RCC_GetClockConfig+0x5c>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	08db      	lsrs	r3, r3, #3
 8001dfe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <HAL_RCC_GetClockConfig+0x60>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0207 	and.w	r2, r3, #7
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	601a      	str	r2, [r3, #0]
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40022000 	.word	0x40022000

08001e28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e30:	2300      	movs	r3, #0
 8001e32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e34:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e40:	f7ff f96e 	bl	8001120 <HAL_PWREx_GetVoltageRange>
 8001e44:	6178      	str	r0, [r7, #20]
 8001e46:	e014      	b.n	8001e72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e48:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4c:	4a24      	ldr	r2, [pc, #144]	; (8001ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e52:	6593      	str	r3, [r2, #88]	; 0x58
 8001e54:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e60:	f7ff f95e 	bl	8001120 <HAL_PWREx_GetVoltageRange>
 8001e64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e66:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ee0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e78:	d10b      	bne.n	8001e92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b80      	cmp	r3, #128	; 0x80
 8001e7e:	d919      	bls.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2ba0      	cmp	r3, #160	; 0xa0
 8001e84:	d902      	bls.n	8001e8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e86:	2302      	movs	r3, #2
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	e013      	b.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	e010      	b.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b80      	cmp	r3, #128	; 0x80
 8001e96:	d902      	bls.n	8001e9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e98:	2303      	movs	r3, #3
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	e00a      	b.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b80      	cmp	r3, #128	; 0x80
 8001ea2:	d102      	bne.n	8001eaa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	e004      	b.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b70      	cmp	r3, #112	; 0x70
 8001eae:	d101      	bne.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f023 0207 	bic.w	r2, r3, #7
 8001ebc:	4909      	ldr	r1, [pc, #36]	; (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ec4:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d001      	beq.n	8001ed6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40022000 	.word	0x40022000

08001ee8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d041      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f0c:	d02a      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f12:	d824      	bhi.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f18:	d008      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f1e:	d81e      	bhi.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00a      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f28:	d010      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f2a:	e018      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f2c:	4b86      	ldr	r3, [pc, #536]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	4a85      	ldr	r2, [pc, #532]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f36:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f38:	e015      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 facd 	bl	80024e0 <RCCEx_PLLSAI1_Config>
 8001f46:	4603      	mov	r3, r0
 8001f48:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f4a:	e00c      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3320      	adds	r3, #32
 8001f50:	2100      	movs	r1, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 fbb6 	bl	80026c4 <RCCEx_PLLSAI2_Config>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f5c:	e003      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	74fb      	strb	r3, [r7, #19]
      break;
 8001f62:	e000      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f66:	7cfb      	ldrb	r3, [r7, #19]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10b      	bne.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f6c:	4b76      	ldr	r3, [pc, #472]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f7a:	4973      	ldr	r1, [pc, #460]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f82:	e001      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f84:	7cfb      	ldrb	r3, [r7, #19]
 8001f86:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d041      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f98:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f9c:	d02a      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001fa2:	d824      	bhi.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fa8:	d008      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001faa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fae:	d81e      	bhi.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00a      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fb8:	d010      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fba:	e018      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fbc:	4b62      	ldr	r3, [pc, #392]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4a61      	ldr	r2, [pc, #388]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fc8:	e015      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	2100      	movs	r1, #0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fa85 	bl	80024e0 <RCCEx_PLLSAI1_Config>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fda:	e00c      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3320      	adds	r3, #32
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 fb6e 	bl	80026c4 <RCCEx_PLLSAI2_Config>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fec:	e003      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	74fb      	strb	r3, [r7, #19]
      break;
 8001ff2:	e000      	b.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001ff4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ff6:	7cfb      	ldrb	r3, [r7, #19]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10b      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ffc:	4b52      	ldr	r3, [pc, #328]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002002:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800200a:	494f      	ldr	r1, [pc, #316]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002012:	e001      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002014:	7cfb      	ldrb	r3, [r7, #19]
 8002016:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80a0 	beq.w	8002166 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800202a:	4b47      	ldr	r3, [pc, #284]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800203a:	2300      	movs	r3, #0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00d      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002040:	4b41      	ldr	r3, [pc, #260]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002044:	4a40      	ldr	r2, [pc, #256]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204a:	6593      	str	r3, [r2, #88]	; 0x58
 800204c:	4b3e      	ldr	r3, [pc, #248]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002058:	2301      	movs	r3, #1
 800205a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800205c:	4b3b      	ldr	r3, [pc, #236]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a3a      	ldr	r2, [pc, #232]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002066:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002068:	f7fe fdc2 	bl	8000bf0 <HAL_GetTick>
 800206c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800206e:	e009      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002070:	f7fe fdbe 	bl	8000bf0 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d902      	bls.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	74fb      	strb	r3, [r7, #19]
        break;
 8002082:	e005      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002084:	4b31      	ldr	r3, [pc, #196]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0ef      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002090:	7cfb      	ldrb	r3, [r7, #19]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d15c      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002096:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01f      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d019      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020b4:	4b24      	ldr	r3, [pc, #144]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020c0:	4b21      	ldr	r3, [pc, #132]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c6:	4a20      	ldr	r2, [pc, #128]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020d0:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d6:	4a1c      	ldr	r2, [pc, #112]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020e0:	4a19      	ldr	r2, [pc, #100]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d016      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f2:	f7fe fd7d 	bl	8000bf0 <HAL_GetTick>
 80020f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020f8:	e00b      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7fe fd79 	bl	8000bf0 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	; 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d902      	bls.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	74fb      	strb	r3, [r7, #19]
            break;
 8002110:	e006      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0ec      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002120:	7cfb      	ldrb	r3, [r7, #19]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10c      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002136:	4904      	ldr	r1, [pc, #16]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800213e:	e009      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002140:	7cfb      	ldrb	r3, [r7, #19]
 8002142:	74bb      	strb	r3, [r7, #18]
 8002144:	e006      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002150:	7cfb      	ldrb	r3, [r7, #19]
 8002152:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002154:	7c7b      	ldrb	r3, [r7, #17]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d105      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215a:	4ba6      	ldr	r3, [pc, #664]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215e:	4aa5      	ldr	r2, [pc, #660]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002164:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002172:	4ba0      	ldr	r3, [pc, #640]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002178:	f023 0203 	bic.w	r2, r3, #3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002180:	499c      	ldr	r1, [pc, #624]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002194:	4b97      	ldr	r3, [pc, #604]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219a:	f023 020c 	bic.w	r2, r3, #12
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a2:	4994      	ldr	r1, [pc, #592]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021b6:	4b8f      	ldr	r3, [pc, #572]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	498b      	ldr	r1, [pc, #556]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021d8:	4b86      	ldr	r3, [pc, #536]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	4983      	ldr	r1, [pc, #524]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0310 	and.w	r3, r3, #16
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021fa:	4b7e      	ldr	r3, [pc, #504]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002200:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002208:	497a      	ldr	r1, [pc, #488]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800221c:	4b75      	ldr	r3, [pc, #468]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222a:	4972      	ldr	r1, [pc, #456]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800223e:	4b6d      	ldr	r3, [pc, #436]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002244:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224c:	4969      	ldr	r1, [pc, #420]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002260:	4b64      	ldr	r3, [pc, #400]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002266:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800226e:	4961      	ldr	r1, [pc, #388]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002282:	4b5c      	ldr	r3, [pc, #368]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002288:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002290:	4958      	ldr	r1, [pc, #352]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00a      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022a4:	4b53      	ldr	r3, [pc, #332]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b2:	4950      	ldr	r1, [pc, #320]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022c6:	4b4b      	ldr	r3, [pc, #300]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d4:	4947      	ldr	r1, [pc, #284]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00a      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022e8:	4b42      	ldr	r3, [pc, #264]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022ee:	f023 0203 	bic.w	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f6:	493f      	ldr	r1, [pc, #252]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d028      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800230a:	4b3a      	ldr	r3, [pc, #232]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002310:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002318:	4936      	ldr	r1, [pc, #216]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002324:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002328:	d106      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800232a:	4b32      	ldr	r3, [pc, #200]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	4a31      	ldr	r2, [pc, #196]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002330:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002334:	60d3      	str	r3, [r2, #12]
 8002336:	e011      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002340:	d10c      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3304      	adds	r3, #4
 8002346:	2101      	movs	r1, #1
 8002348:	4618      	mov	r0, r3
 800234a:	f000 f8c9 	bl	80024e0 <RCCEx_PLLSAI1_Config>
 800234e:	4603      	mov	r3, r0
 8002350:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002352:	7cfb      	ldrb	r3, [r7, #19]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d028      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002368:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002376:	491f      	ldr	r1, [pc, #124]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002382:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002386:	d106      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002388:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4a19      	ldr	r2, [pc, #100]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800238e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002392:	60d3      	str	r3, [r2, #12]
 8002394:	e011      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800239e:	d10c      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3304      	adds	r3, #4
 80023a4:	2101      	movs	r1, #1
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f89a 	bl	80024e0 <RCCEx_PLLSAI1_Config>
 80023ac:	4603      	mov	r3, r0
 80023ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80023b6:	7cfb      	ldrb	r3, [r7, #19]
 80023b8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d02a      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023d4:	4907      	ldr	r1, [pc, #28]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023e4:	d108      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e6:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	4a02      	ldr	r2, [pc, #8]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023f0:	60d3      	str	r3, [r2, #12]
 80023f2:	e013      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x534>
 80023f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002400:	d10c      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3304      	adds	r3, #4
 8002406:	2101      	movs	r1, #1
 8002408:	4618      	mov	r0, r3
 800240a:	f000 f869 	bl	80024e0 <RCCEx_PLLSAI1_Config>
 800240e:	4603      	mov	r3, r0
 8002410:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002412:	7cfb      	ldrb	r3, [r7, #19]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002418:	7cfb      	ldrb	r3, [r7, #19]
 800241a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d02f      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002428:	4b2c      	ldr	r3, [pc, #176]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002436:	4929      	ldr	r1, [pc, #164]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002442:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002446:	d10d      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3304      	adds	r3, #4
 800244c:	2102      	movs	r1, #2
 800244e:	4618      	mov	r0, r3
 8002450:	f000 f846 	bl	80024e0 <RCCEx_PLLSAI1_Config>
 8002454:	4603      	mov	r3, r0
 8002456:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002458:	7cfb      	ldrb	r3, [r7, #19]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d014      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800245e:	7cfb      	ldrb	r3, [r7, #19]
 8002460:	74bb      	strb	r3, [r7, #18]
 8002462:	e011      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800246c:	d10c      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3320      	adds	r3, #32
 8002472:	2102      	movs	r1, #2
 8002474:	4618      	mov	r0, r3
 8002476:	f000 f925 	bl	80026c4 <RCCEx_PLLSAI2_Config>
 800247a:	4603      	mov	r3, r0
 800247c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800247e:	7cfb      	ldrb	r3, [r7, #19]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002484:	7cfb      	ldrb	r3, [r7, #19]
 8002486:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00b      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024a4:	490d      	ldr	r1, [pc, #52]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00b      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024c8:	4904      	ldr	r1, [pc, #16]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40021000 	.word	0x40021000

080024e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024ee:	4b74      	ldr	r3, [pc, #464]	; (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d018      	beq.n	800252c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024fa:	4b71      	ldr	r3, [pc, #452]	; (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f003 0203 	and.w	r2, r3, #3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d10d      	bne.n	8002526 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
       ||
 800250e:	2b00      	cmp	r3, #0
 8002510:	d009      	beq.n	8002526 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002512:	4b6b      	ldr	r3, [pc, #428]	; (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
       ||
 8002522:	429a      	cmp	r2, r3
 8002524:	d047      	beq.n	80025b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	73fb      	strb	r3, [r7, #15]
 800252a:	e044      	b.n	80025b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b03      	cmp	r3, #3
 8002532:	d018      	beq.n	8002566 <RCCEx_PLLSAI1_Config+0x86>
 8002534:	2b03      	cmp	r3, #3
 8002536:	d825      	bhi.n	8002584 <RCCEx_PLLSAI1_Config+0xa4>
 8002538:	2b01      	cmp	r3, #1
 800253a:	d002      	beq.n	8002542 <RCCEx_PLLSAI1_Config+0x62>
 800253c:	2b02      	cmp	r3, #2
 800253e:	d009      	beq.n	8002554 <RCCEx_PLLSAI1_Config+0x74>
 8002540:	e020      	b.n	8002584 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002542:	4b5f      	ldr	r3, [pc, #380]	; (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d11d      	bne.n	800258a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002552:	e01a      	b.n	800258a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002554:	4b5a      	ldr	r3, [pc, #360]	; (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255c:	2b00      	cmp	r3, #0
 800255e:	d116      	bne.n	800258e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002564:	e013      	b.n	800258e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002566:	4b56      	ldr	r3, [pc, #344]	; (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10f      	bne.n	8002592 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002572:	4b53      	ldr	r3, [pc, #332]	; (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002582:	e006      	b.n	8002592 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
      break;
 8002588:	e004      	b.n	8002594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800258a:	bf00      	nop
 800258c:	e002      	b.n	8002594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800258e:	bf00      	nop
 8002590:	e000      	b.n	8002594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002592:	bf00      	nop
    }

    if(status == HAL_OK)
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10d      	bne.n	80025b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800259a:	4b49      	ldr	r3, [pc, #292]	; (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6819      	ldr	r1, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	430b      	orrs	r3, r1
 80025b0:	4943      	ldr	r1, [pc, #268]	; (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d17c      	bne.n	80026b6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025bc:	4b40      	ldr	r3, [pc, #256]	; (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a3f      	ldr	r2, [pc, #252]	; (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c8:	f7fe fb12 	bl	8000bf0 <HAL_GetTick>
 80025cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025ce:	e009      	b.n	80025e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025d0:	f7fe fb0e 	bl	8000bf0 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d902      	bls.n	80025e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	73fb      	strb	r3, [r7, #15]
        break;
 80025e2:	e005      	b.n	80025f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025e4:	4b36      	ldr	r3, [pc, #216]	; (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1ef      	bne.n	80025d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d15f      	bne.n	80026b6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d110      	bne.n	800261e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025fc:	4b30      	ldr	r3, [pc, #192]	; (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002604:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6892      	ldr	r2, [r2, #8]
 800260c:	0211      	lsls	r1, r2, #8
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68d2      	ldr	r2, [r2, #12]
 8002612:	06d2      	lsls	r2, r2, #27
 8002614:	430a      	orrs	r2, r1
 8002616:	492a      	ldr	r1, [pc, #168]	; (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002618:	4313      	orrs	r3, r2
 800261a:	610b      	str	r3, [r1, #16]
 800261c:	e027      	b.n	800266e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d112      	bne.n	800264a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002624:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800262c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6892      	ldr	r2, [r2, #8]
 8002634:	0211      	lsls	r1, r2, #8
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6912      	ldr	r2, [r2, #16]
 800263a:	0852      	lsrs	r2, r2, #1
 800263c:	3a01      	subs	r2, #1
 800263e:	0552      	lsls	r2, r2, #21
 8002640:	430a      	orrs	r2, r1
 8002642:	491f      	ldr	r1, [pc, #124]	; (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002644:	4313      	orrs	r3, r2
 8002646:	610b      	str	r3, [r1, #16]
 8002648:	e011      	b.n	800266e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800264a:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002652:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6892      	ldr	r2, [r2, #8]
 800265a:	0211      	lsls	r1, r2, #8
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6952      	ldr	r2, [r2, #20]
 8002660:	0852      	lsrs	r2, r2, #1
 8002662:	3a01      	subs	r2, #1
 8002664:	0652      	lsls	r2, r2, #25
 8002666:	430a      	orrs	r2, r1
 8002668:	4915      	ldr	r1, [pc, #84]	; (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800266a:	4313      	orrs	r3, r2
 800266c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800266e:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a13      	ldr	r2, [pc, #76]	; (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002674:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002678:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267a:	f7fe fab9 	bl	8000bf0 <HAL_GetTick>
 800267e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002680:	e009      	b.n	8002696 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002682:	f7fe fab5 	bl	8000bf0 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d902      	bls.n	8002696 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	73fb      	strb	r3, [r7, #15]
          break;
 8002694:	e005      	b.n	80026a2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0ef      	beq.n	8002682 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d106      	bne.n	80026b6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	4903      	ldr	r1, [pc, #12]	; (80026c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40021000 	.word	0x40021000

080026c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026d2:	4b69      	ldr	r3, [pc, #420]	; (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d018      	beq.n	8002710 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026de:	4b66      	ldr	r3, [pc, #408]	; (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f003 0203 	and.w	r2, r3, #3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d10d      	bne.n	800270a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
       ||
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d009      	beq.n	800270a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026f6:	4b60      	ldr	r3, [pc, #384]	; (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	091b      	lsrs	r3, r3, #4
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
       ||
 8002706:	429a      	cmp	r2, r3
 8002708:	d047      	beq.n	800279a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	73fb      	strb	r3, [r7, #15]
 800270e:	e044      	b.n	800279a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d018      	beq.n	800274a <RCCEx_PLLSAI2_Config+0x86>
 8002718:	2b03      	cmp	r3, #3
 800271a:	d825      	bhi.n	8002768 <RCCEx_PLLSAI2_Config+0xa4>
 800271c:	2b01      	cmp	r3, #1
 800271e:	d002      	beq.n	8002726 <RCCEx_PLLSAI2_Config+0x62>
 8002720:	2b02      	cmp	r3, #2
 8002722:	d009      	beq.n	8002738 <RCCEx_PLLSAI2_Config+0x74>
 8002724:	e020      	b.n	8002768 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002726:	4b54      	ldr	r3, [pc, #336]	; (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d11d      	bne.n	800276e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002736:	e01a      	b.n	800276e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002738:	4b4f      	ldr	r3, [pc, #316]	; (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002740:	2b00      	cmp	r3, #0
 8002742:	d116      	bne.n	8002772 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002748:	e013      	b.n	8002772 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800274a:	4b4b      	ldr	r3, [pc, #300]	; (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10f      	bne.n	8002776 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002756:	4b48      	ldr	r3, [pc, #288]	; (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d109      	bne.n	8002776 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002766:	e006      	b.n	8002776 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
      break;
 800276c:	e004      	b.n	8002778 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800276e:	bf00      	nop
 8002770:	e002      	b.n	8002778 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002772:	bf00      	nop
 8002774:	e000      	b.n	8002778 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002776:	bf00      	nop
    }

    if(status == HAL_OK)
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10d      	bne.n	800279a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800277e:	4b3e      	ldr	r3, [pc, #248]	; (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6819      	ldr	r1, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	3b01      	subs	r3, #1
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	430b      	orrs	r3, r1
 8002794:	4938      	ldr	r1, [pc, #224]	; (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002796:	4313      	orrs	r3, r2
 8002798:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d166      	bne.n	800286e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027a0:	4b35      	ldr	r3, [pc, #212]	; (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a34      	ldr	r2, [pc, #208]	; (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ac:	f7fe fa20 	bl	8000bf0 <HAL_GetTick>
 80027b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027b2:	e009      	b.n	80027c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027b4:	f7fe fa1c 	bl	8000bf0 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d902      	bls.n	80027c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	73fb      	strb	r3, [r7, #15]
        break;
 80027c6:	e005      	b.n	80027d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027c8:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1ef      	bne.n	80027b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d149      	bne.n	800286e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d110      	bne.n	8002802 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027e0:	4b25      	ldr	r3, [pc, #148]	; (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80027e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6892      	ldr	r2, [r2, #8]
 80027f0:	0211      	lsls	r1, r2, #8
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68d2      	ldr	r2, [r2, #12]
 80027f6:	06d2      	lsls	r2, r2, #27
 80027f8:	430a      	orrs	r2, r1
 80027fa:	491f      	ldr	r1, [pc, #124]	; (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	614b      	str	r3, [r1, #20]
 8002800:	e011      	b.n	8002826 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002802:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800280a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6892      	ldr	r2, [r2, #8]
 8002812:	0211      	lsls	r1, r2, #8
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6912      	ldr	r2, [r2, #16]
 8002818:	0852      	lsrs	r2, r2, #1
 800281a:	3a01      	subs	r2, #1
 800281c:	0652      	lsls	r2, r2, #25
 800281e:	430a      	orrs	r2, r1
 8002820:	4915      	ldr	r1, [pc, #84]	; (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002822:	4313      	orrs	r3, r2
 8002824:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002826:	4b14      	ldr	r3, [pc, #80]	; (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a13      	ldr	r2, [pc, #76]	; (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 800282c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002830:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002832:	f7fe f9dd 	bl	8000bf0 <HAL_GetTick>
 8002836:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002838:	e009      	b.n	800284e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800283a:	f7fe f9d9 	bl	8000bf0 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d902      	bls.n	800284e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	73fb      	strb	r3, [r7, #15]
          break;
 800284c:	e005      	b.n	800285a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800284e:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0ef      	beq.n	800283a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d106      	bne.n	800286e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	4903      	ldr	r1, [pc, #12]	; (8002878 <RCCEx_PLLSAI2_Config+0x1b4>)
 800286a:	4313      	orrs	r3, r2
 800286c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800286e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021000 	.word	0x40021000

0800287c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e049      	b.n	8002922 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f841 	bl	800292a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3304      	adds	r3, #4
 80028b8:	4619      	mov	r1, r3
 80028ba:	4610      	mov	r0, r2
 80028bc:	f000 f9e4 	bl	8002c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d001      	beq.n	8002958 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e04f      	b.n	80029f8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a23      	ldr	r2, [pc, #140]	; (8002a04 <HAL_TIM_Base_Start_IT+0xc4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d01d      	beq.n	80029b6 <HAL_TIM_Base_Start_IT+0x76>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002982:	d018      	beq.n	80029b6 <HAL_TIM_Base_Start_IT+0x76>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a1f      	ldr	r2, [pc, #124]	; (8002a08 <HAL_TIM_Base_Start_IT+0xc8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d013      	beq.n	80029b6 <HAL_TIM_Base_Start_IT+0x76>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1e      	ldr	r2, [pc, #120]	; (8002a0c <HAL_TIM_Base_Start_IT+0xcc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d00e      	beq.n	80029b6 <HAL_TIM_Base_Start_IT+0x76>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1c      	ldr	r2, [pc, #112]	; (8002a10 <HAL_TIM_Base_Start_IT+0xd0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d009      	beq.n	80029b6 <HAL_TIM_Base_Start_IT+0x76>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1b      	ldr	r2, [pc, #108]	; (8002a14 <HAL_TIM_Base_Start_IT+0xd4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d004      	beq.n	80029b6 <HAL_TIM_Base_Start_IT+0x76>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a19      	ldr	r2, [pc, #100]	; (8002a18 <HAL_TIM_Base_Start_IT+0xd8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d115      	bne.n	80029e2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	4b17      	ldr	r3, [pc, #92]	; (8002a1c <HAL_TIM_Base_Start_IT+0xdc>)
 80029be:	4013      	ands	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2b06      	cmp	r3, #6
 80029c6:	d015      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0xb4>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ce:	d011      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e0:	e008      	b.n	80029f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0201 	orr.w	r2, r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	e000      	b.n	80029f6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	40012c00 	.word	0x40012c00
 8002a08:	40000400 	.word	0x40000400
 8002a0c:	40000800 	.word	0x40000800
 8002a10:	40000c00 	.word	0x40000c00
 8002a14:	40013400 	.word	0x40013400
 8002a18:	40014000 	.word	0x40014000
 8002a1c:	00010007 	.word	0x00010007

08002a20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d020      	beq.n	8002a84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d01b      	beq.n	8002a84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f06f 0202 	mvn.w	r2, #2
 8002a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f8ee 	bl	8002c4c <HAL_TIM_IC_CaptureCallback>
 8002a70:	e005      	b.n	8002a7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f8e0 	bl	8002c38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f8f1 	bl	8002c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d020      	beq.n	8002ad0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01b      	beq.n	8002ad0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0204 	mvn.w	r2, #4
 8002aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f8c8 	bl	8002c4c <HAL_TIM_IC_CaptureCallback>
 8002abc:	e005      	b.n	8002aca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f8ba 	bl	8002c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f8cb 	bl	8002c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d020      	beq.n	8002b1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01b      	beq.n	8002b1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f06f 0208 	mvn.w	r2, #8
 8002aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2204      	movs	r2, #4
 8002af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f8a2 	bl	8002c4c <HAL_TIM_IC_CaptureCallback>
 8002b08:	e005      	b.n	8002b16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f894 	bl	8002c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f8a5 	bl	8002c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f003 0310 	and.w	r3, r3, #16
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d020      	beq.n	8002b68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d01b      	beq.n	8002b68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0210 	mvn.w	r2, #16
 8002b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f87c 	bl	8002c4c <HAL_TIM_IC_CaptureCallback>
 8002b54:	e005      	b.n	8002b62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f86e 	bl	8002c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f87f 	bl	8002c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00c      	beq.n	8002b8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d007      	beq.n	8002b8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0201 	mvn.w	r2, #1
 8002b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f84c 	bl	8002c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00c      	beq.n	8002bb0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d007      	beq.n	8002bb0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f910 	bl	8002dd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00c      	beq.n	8002bd4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d007      	beq.n	8002bd4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f908 	bl	8002de4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00c      	beq.n	8002bf8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d007      	beq.n	8002bf8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f83e 	bl	8002c74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00c      	beq.n	8002c1c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0220 	mvn.w	r2, #32
 8002c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f8d0 	bl	8002dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a40      	ldr	r2, [pc, #256]	; (8002d9c <TIM_Base_SetConfig+0x114>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d013      	beq.n	8002cc8 <TIM_Base_SetConfig+0x40>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca6:	d00f      	beq.n	8002cc8 <TIM_Base_SetConfig+0x40>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a3d      	ldr	r2, [pc, #244]	; (8002da0 <TIM_Base_SetConfig+0x118>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00b      	beq.n	8002cc8 <TIM_Base_SetConfig+0x40>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a3c      	ldr	r2, [pc, #240]	; (8002da4 <TIM_Base_SetConfig+0x11c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d007      	beq.n	8002cc8 <TIM_Base_SetConfig+0x40>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a3b      	ldr	r2, [pc, #236]	; (8002da8 <TIM_Base_SetConfig+0x120>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d003      	beq.n	8002cc8 <TIM_Base_SetConfig+0x40>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a3a      	ldr	r2, [pc, #232]	; (8002dac <TIM_Base_SetConfig+0x124>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d108      	bne.n	8002cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a2f      	ldr	r2, [pc, #188]	; (8002d9c <TIM_Base_SetConfig+0x114>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d01f      	beq.n	8002d22 <TIM_Base_SetConfig+0x9a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce8:	d01b      	beq.n	8002d22 <TIM_Base_SetConfig+0x9a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a2c      	ldr	r2, [pc, #176]	; (8002da0 <TIM_Base_SetConfig+0x118>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d017      	beq.n	8002d22 <TIM_Base_SetConfig+0x9a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a2b      	ldr	r2, [pc, #172]	; (8002da4 <TIM_Base_SetConfig+0x11c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <TIM_Base_SetConfig+0x9a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a2a      	ldr	r2, [pc, #168]	; (8002da8 <TIM_Base_SetConfig+0x120>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00f      	beq.n	8002d22 <TIM_Base_SetConfig+0x9a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a29      	ldr	r2, [pc, #164]	; (8002dac <TIM_Base_SetConfig+0x124>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00b      	beq.n	8002d22 <TIM_Base_SetConfig+0x9a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a28      	ldr	r2, [pc, #160]	; (8002db0 <TIM_Base_SetConfig+0x128>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d007      	beq.n	8002d22 <TIM_Base_SetConfig+0x9a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a27      	ldr	r2, [pc, #156]	; (8002db4 <TIM_Base_SetConfig+0x12c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d003      	beq.n	8002d22 <TIM_Base_SetConfig+0x9a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a26      	ldr	r2, [pc, #152]	; (8002db8 <TIM_Base_SetConfig+0x130>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d108      	bne.n	8002d34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a10      	ldr	r2, [pc, #64]	; (8002d9c <TIM_Base_SetConfig+0x114>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00f      	beq.n	8002d80 <TIM_Base_SetConfig+0xf8>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a12      	ldr	r2, [pc, #72]	; (8002dac <TIM_Base_SetConfig+0x124>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d00b      	beq.n	8002d80 <TIM_Base_SetConfig+0xf8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a11      	ldr	r2, [pc, #68]	; (8002db0 <TIM_Base_SetConfig+0x128>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d007      	beq.n	8002d80 <TIM_Base_SetConfig+0xf8>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a10      	ldr	r2, [pc, #64]	; (8002db4 <TIM_Base_SetConfig+0x12c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d003      	beq.n	8002d80 <TIM_Base_SetConfig+0xf8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a0f      	ldr	r2, [pc, #60]	; (8002db8 <TIM_Base_SetConfig+0x130>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d103      	bne.n	8002d88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	615a      	str	r2, [r3, #20]
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40012c00 	.word	0x40012c00
 8002da0:	40000400 	.word	0x40000400
 8002da4:	40000800 	.word	0x40000800
 8002da8:	40000c00 	.word	0x40000c00
 8002dac:	40013400 	.word	0x40013400
 8002db0:	40014000 	.word	0x40014000
 8002db4:	40014400 	.word	0x40014400
 8002db8:	40014800 	.word	0x40014800

08002dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e040      	b.n	8002e8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fd fcfc 	bl	8000818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2224      	movs	r2, #36	; 0x24
 8002e24:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0201 	bic.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fb6a 	bl	8003518 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f8af 	bl	8002fa8 <UART_SetConfig>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e01b      	b.n	8002e8c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 fbe9 	bl	800365c <UART_CheckIdleState>
 8002e8a:	4603      	mov	r3, r0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08a      	sub	sp, #40	; 0x28
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d178      	bne.n	8002f9e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <HAL_UART_Transmit+0x24>
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e071      	b.n	8002fa0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2221      	movs	r2, #33	; 0x21
 8002ec8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eca:	f7fd fe91 	bl	8000bf0 <HAL_GetTick>
 8002ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	88fa      	ldrh	r2, [r7, #6]
 8002ed4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	88fa      	ldrh	r2, [r7, #6]
 8002edc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee8:	d108      	bne.n	8002efc <HAL_UART_Transmit+0x68>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d104      	bne.n	8002efc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	61bb      	str	r3, [r7, #24]
 8002efa:	e003      	b.n	8002f04 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f04:	e030      	b.n	8002f68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2180      	movs	r1, #128	; 0x80
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 fc4b 	bl	80037ac <UART_WaitOnFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d004      	beq.n	8002f26 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e03c      	b.n	8002fa0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10b      	bne.n	8002f44 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	881a      	ldrh	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f38:	b292      	uxth	r2, r2
 8002f3a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	3302      	adds	r3, #2
 8002f40:	61bb      	str	r3, [r7, #24]
 8002f42:	e008      	b.n	8002f56 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	781a      	ldrb	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	b292      	uxth	r2, r2
 8002f4e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	3301      	adds	r3, #1
 8002f54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1c8      	bne.n	8002f06 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2140      	movs	r1, #64	; 0x40
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 fc14 	bl	80037ac <UART_WaitOnFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d004      	beq.n	8002f94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e005      	b.n	8002fa0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e000      	b.n	8002fa0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002f9e:	2302      	movs	r3, #2
  }
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3720      	adds	r7, #32
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fac:	b08a      	sub	sp, #40	; 0x28
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	4ba4      	ldr	r3, [pc, #656]	; (8003268 <UART_SetConfig+0x2c0>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a99      	ldr	r2, [pc, #612]	; (800326c <UART_SetConfig+0x2c4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d004      	beq.n	8003014 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003010:	4313      	orrs	r3, r2
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003024:	430a      	orrs	r2, r1
 8003026:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a90      	ldr	r2, [pc, #576]	; (8003270 <UART_SetConfig+0x2c8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d126      	bne.n	8003080 <UART_SetConfig+0xd8>
 8003032:	4b90      	ldr	r3, [pc, #576]	; (8003274 <UART_SetConfig+0x2cc>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	2b03      	cmp	r3, #3
 800303e:	d81b      	bhi.n	8003078 <UART_SetConfig+0xd0>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0xa0>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	08003059 	.word	0x08003059
 800304c:	08003069 	.word	0x08003069
 8003050:	08003061 	.word	0x08003061
 8003054:	08003071 	.word	0x08003071
 8003058:	2301      	movs	r3, #1
 800305a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800305e:	e116      	b.n	800328e <UART_SetConfig+0x2e6>
 8003060:	2302      	movs	r3, #2
 8003062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003066:	e112      	b.n	800328e <UART_SetConfig+0x2e6>
 8003068:	2304      	movs	r3, #4
 800306a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306e:	e10e      	b.n	800328e <UART_SetConfig+0x2e6>
 8003070:	2308      	movs	r3, #8
 8003072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003076:	e10a      	b.n	800328e <UART_SetConfig+0x2e6>
 8003078:	2310      	movs	r3, #16
 800307a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800307e:	e106      	b.n	800328e <UART_SetConfig+0x2e6>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a7c      	ldr	r2, [pc, #496]	; (8003278 <UART_SetConfig+0x2d0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d138      	bne.n	80030fc <UART_SetConfig+0x154>
 800308a:	4b7a      	ldr	r3, [pc, #488]	; (8003274 <UART_SetConfig+0x2cc>)
 800308c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003090:	f003 030c 	and.w	r3, r3, #12
 8003094:	2b0c      	cmp	r3, #12
 8003096:	d82d      	bhi.n	80030f4 <UART_SetConfig+0x14c>
 8003098:	a201      	add	r2, pc, #4	; (adr r2, 80030a0 <UART_SetConfig+0xf8>)
 800309a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309e:	bf00      	nop
 80030a0:	080030d5 	.word	0x080030d5
 80030a4:	080030f5 	.word	0x080030f5
 80030a8:	080030f5 	.word	0x080030f5
 80030ac:	080030f5 	.word	0x080030f5
 80030b0:	080030e5 	.word	0x080030e5
 80030b4:	080030f5 	.word	0x080030f5
 80030b8:	080030f5 	.word	0x080030f5
 80030bc:	080030f5 	.word	0x080030f5
 80030c0:	080030dd 	.word	0x080030dd
 80030c4:	080030f5 	.word	0x080030f5
 80030c8:	080030f5 	.word	0x080030f5
 80030cc:	080030f5 	.word	0x080030f5
 80030d0:	080030ed 	.word	0x080030ed
 80030d4:	2300      	movs	r3, #0
 80030d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030da:	e0d8      	b.n	800328e <UART_SetConfig+0x2e6>
 80030dc:	2302      	movs	r3, #2
 80030de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e2:	e0d4      	b.n	800328e <UART_SetConfig+0x2e6>
 80030e4:	2304      	movs	r3, #4
 80030e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ea:	e0d0      	b.n	800328e <UART_SetConfig+0x2e6>
 80030ec:	2308      	movs	r3, #8
 80030ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030f2:	e0cc      	b.n	800328e <UART_SetConfig+0x2e6>
 80030f4:	2310      	movs	r3, #16
 80030f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030fa:	e0c8      	b.n	800328e <UART_SetConfig+0x2e6>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a5e      	ldr	r2, [pc, #376]	; (800327c <UART_SetConfig+0x2d4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d125      	bne.n	8003152 <UART_SetConfig+0x1aa>
 8003106:	4b5b      	ldr	r3, [pc, #364]	; (8003274 <UART_SetConfig+0x2cc>)
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003110:	2b30      	cmp	r3, #48	; 0x30
 8003112:	d016      	beq.n	8003142 <UART_SetConfig+0x19a>
 8003114:	2b30      	cmp	r3, #48	; 0x30
 8003116:	d818      	bhi.n	800314a <UART_SetConfig+0x1a2>
 8003118:	2b20      	cmp	r3, #32
 800311a:	d00a      	beq.n	8003132 <UART_SetConfig+0x18a>
 800311c:	2b20      	cmp	r3, #32
 800311e:	d814      	bhi.n	800314a <UART_SetConfig+0x1a2>
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <UART_SetConfig+0x182>
 8003124:	2b10      	cmp	r3, #16
 8003126:	d008      	beq.n	800313a <UART_SetConfig+0x192>
 8003128:	e00f      	b.n	800314a <UART_SetConfig+0x1a2>
 800312a:	2300      	movs	r3, #0
 800312c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003130:	e0ad      	b.n	800328e <UART_SetConfig+0x2e6>
 8003132:	2302      	movs	r3, #2
 8003134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003138:	e0a9      	b.n	800328e <UART_SetConfig+0x2e6>
 800313a:	2304      	movs	r3, #4
 800313c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003140:	e0a5      	b.n	800328e <UART_SetConfig+0x2e6>
 8003142:	2308      	movs	r3, #8
 8003144:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003148:	e0a1      	b.n	800328e <UART_SetConfig+0x2e6>
 800314a:	2310      	movs	r3, #16
 800314c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003150:	e09d      	b.n	800328e <UART_SetConfig+0x2e6>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a4a      	ldr	r2, [pc, #296]	; (8003280 <UART_SetConfig+0x2d8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d125      	bne.n	80031a8 <UART_SetConfig+0x200>
 800315c:	4b45      	ldr	r3, [pc, #276]	; (8003274 <UART_SetConfig+0x2cc>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003166:	2bc0      	cmp	r3, #192	; 0xc0
 8003168:	d016      	beq.n	8003198 <UART_SetConfig+0x1f0>
 800316a:	2bc0      	cmp	r3, #192	; 0xc0
 800316c:	d818      	bhi.n	80031a0 <UART_SetConfig+0x1f8>
 800316e:	2b80      	cmp	r3, #128	; 0x80
 8003170:	d00a      	beq.n	8003188 <UART_SetConfig+0x1e0>
 8003172:	2b80      	cmp	r3, #128	; 0x80
 8003174:	d814      	bhi.n	80031a0 <UART_SetConfig+0x1f8>
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <UART_SetConfig+0x1d8>
 800317a:	2b40      	cmp	r3, #64	; 0x40
 800317c:	d008      	beq.n	8003190 <UART_SetConfig+0x1e8>
 800317e:	e00f      	b.n	80031a0 <UART_SetConfig+0x1f8>
 8003180:	2300      	movs	r3, #0
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003186:	e082      	b.n	800328e <UART_SetConfig+0x2e6>
 8003188:	2302      	movs	r3, #2
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800318e:	e07e      	b.n	800328e <UART_SetConfig+0x2e6>
 8003190:	2304      	movs	r3, #4
 8003192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003196:	e07a      	b.n	800328e <UART_SetConfig+0x2e6>
 8003198:	2308      	movs	r3, #8
 800319a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800319e:	e076      	b.n	800328e <UART_SetConfig+0x2e6>
 80031a0:	2310      	movs	r3, #16
 80031a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a6:	e072      	b.n	800328e <UART_SetConfig+0x2e6>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a35      	ldr	r2, [pc, #212]	; (8003284 <UART_SetConfig+0x2dc>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d12a      	bne.n	8003208 <UART_SetConfig+0x260>
 80031b2:	4b30      	ldr	r3, [pc, #192]	; (8003274 <UART_SetConfig+0x2cc>)
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031c0:	d01a      	beq.n	80031f8 <UART_SetConfig+0x250>
 80031c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031c6:	d81b      	bhi.n	8003200 <UART_SetConfig+0x258>
 80031c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031cc:	d00c      	beq.n	80031e8 <UART_SetConfig+0x240>
 80031ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031d2:	d815      	bhi.n	8003200 <UART_SetConfig+0x258>
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <UART_SetConfig+0x238>
 80031d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031dc:	d008      	beq.n	80031f0 <UART_SetConfig+0x248>
 80031de:	e00f      	b.n	8003200 <UART_SetConfig+0x258>
 80031e0:	2300      	movs	r3, #0
 80031e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031e6:	e052      	b.n	800328e <UART_SetConfig+0x2e6>
 80031e8:	2302      	movs	r3, #2
 80031ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ee:	e04e      	b.n	800328e <UART_SetConfig+0x2e6>
 80031f0:	2304      	movs	r3, #4
 80031f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f6:	e04a      	b.n	800328e <UART_SetConfig+0x2e6>
 80031f8:	2308      	movs	r3, #8
 80031fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fe:	e046      	b.n	800328e <UART_SetConfig+0x2e6>
 8003200:	2310      	movs	r3, #16
 8003202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003206:	e042      	b.n	800328e <UART_SetConfig+0x2e6>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a17      	ldr	r2, [pc, #92]	; (800326c <UART_SetConfig+0x2c4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d13a      	bne.n	8003288 <UART_SetConfig+0x2e0>
 8003212:	4b18      	ldr	r3, [pc, #96]	; (8003274 <UART_SetConfig+0x2cc>)
 8003214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003218:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800321c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003220:	d01a      	beq.n	8003258 <UART_SetConfig+0x2b0>
 8003222:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003226:	d81b      	bhi.n	8003260 <UART_SetConfig+0x2b8>
 8003228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800322c:	d00c      	beq.n	8003248 <UART_SetConfig+0x2a0>
 800322e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003232:	d815      	bhi.n	8003260 <UART_SetConfig+0x2b8>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <UART_SetConfig+0x298>
 8003238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323c:	d008      	beq.n	8003250 <UART_SetConfig+0x2a8>
 800323e:	e00f      	b.n	8003260 <UART_SetConfig+0x2b8>
 8003240:	2300      	movs	r3, #0
 8003242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003246:	e022      	b.n	800328e <UART_SetConfig+0x2e6>
 8003248:	2302      	movs	r3, #2
 800324a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800324e:	e01e      	b.n	800328e <UART_SetConfig+0x2e6>
 8003250:	2304      	movs	r3, #4
 8003252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003256:	e01a      	b.n	800328e <UART_SetConfig+0x2e6>
 8003258:	2308      	movs	r3, #8
 800325a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800325e:	e016      	b.n	800328e <UART_SetConfig+0x2e6>
 8003260:	2310      	movs	r3, #16
 8003262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003266:	e012      	b.n	800328e <UART_SetConfig+0x2e6>
 8003268:	efff69f3 	.word	0xefff69f3
 800326c:	40008000 	.word	0x40008000
 8003270:	40013800 	.word	0x40013800
 8003274:	40021000 	.word	0x40021000
 8003278:	40004400 	.word	0x40004400
 800327c:	40004800 	.word	0x40004800
 8003280:	40004c00 	.word	0x40004c00
 8003284:	40005000 	.word	0x40005000
 8003288:	2310      	movs	r3, #16
 800328a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a9f      	ldr	r2, [pc, #636]	; (8003510 <UART_SetConfig+0x568>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d17a      	bne.n	800338e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003298:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800329c:	2b08      	cmp	r3, #8
 800329e:	d824      	bhi.n	80032ea <UART_SetConfig+0x342>
 80032a0:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <UART_SetConfig+0x300>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	080032cd 	.word	0x080032cd
 80032ac:	080032eb 	.word	0x080032eb
 80032b0:	080032d5 	.word	0x080032d5
 80032b4:	080032eb 	.word	0x080032eb
 80032b8:	080032db 	.word	0x080032db
 80032bc:	080032eb 	.word	0x080032eb
 80032c0:	080032eb 	.word	0x080032eb
 80032c4:	080032eb 	.word	0x080032eb
 80032c8:	080032e3 	.word	0x080032e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032cc:	f7fe fd4e 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 80032d0:	61f8      	str	r0, [r7, #28]
        break;
 80032d2:	e010      	b.n	80032f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032d4:	4b8f      	ldr	r3, [pc, #572]	; (8003514 <UART_SetConfig+0x56c>)
 80032d6:	61fb      	str	r3, [r7, #28]
        break;
 80032d8:	e00d      	b.n	80032f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032da:	f7fe fcaf 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 80032de:	61f8      	str	r0, [r7, #28]
        break;
 80032e0:	e009      	b.n	80032f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032e6:	61fb      	str	r3, [r7, #28]
        break;
 80032e8:	e005      	b.n	80032f6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 80fb 	beq.w	80034f4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	4413      	add	r3, r2
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	429a      	cmp	r2, r3
 800330c:	d305      	bcc.n	800331a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	429a      	cmp	r2, r3
 8003318:	d903      	bls.n	8003322 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003320:	e0e8      	b.n	80034f4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	2200      	movs	r2, #0
 8003326:	461c      	mov	r4, r3
 8003328:	4615      	mov	r5, r2
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	022b      	lsls	r3, r5, #8
 8003334:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003338:	0222      	lsls	r2, r4, #8
 800333a:	68f9      	ldr	r1, [r7, #12]
 800333c:	6849      	ldr	r1, [r1, #4]
 800333e:	0849      	lsrs	r1, r1, #1
 8003340:	2000      	movs	r0, #0
 8003342:	4688      	mov	r8, r1
 8003344:	4681      	mov	r9, r0
 8003346:	eb12 0a08 	adds.w	sl, r2, r8
 800334a:	eb43 0b09 	adc.w	fp, r3, r9
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	603b      	str	r3, [r7, #0]
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	e9d7 2300 	ldrd	r2, r3, [r7]
 800335c:	4650      	mov	r0, sl
 800335e:	4659      	mov	r1, fp
 8003360:	f7fc ff46 	bl	80001f0 <__aeabi_uldivmod>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4613      	mov	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003372:	d308      	bcc.n	8003386 <UART_SetConfig+0x3de>
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800337a:	d204      	bcs.n	8003386 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	60da      	str	r2, [r3, #12]
 8003384:	e0b6      	b.n	80034f4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800338c:	e0b2      	b.n	80034f4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003396:	d15e      	bne.n	8003456 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003398:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800339c:	2b08      	cmp	r3, #8
 800339e:	d828      	bhi.n	80033f2 <UART_SetConfig+0x44a>
 80033a0:	a201      	add	r2, pc, #4	; (adr r2, 80033a8 <UART_SetConfig+0x400>)
 80033a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a6:	bf00      	nop
 80033a8:	080033cd 	.word	0x080033cd
 80033ac:	080033d5 	.word	0x080033d5
 80033b0:	080033dd 	.word	0x080033dd
 80033b4:	080033f3 	.word	0x080033f3
 80033b8:	080033e3 	.word	0x080033e3
 80033bc:	080033f3 	.word	0x080033f3
 80033c0:	080033f3 	.word	0x080033f3
 80033c4:	080033f3 	.word	0x080033f3
 80033c8:	080033eb 	.word	0x080033eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033cc:	f7fe fcce 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 80033d0:	61f8      	str	r0, [r7, #28]
        break;
 80033d2:	e014      	b.n	80033fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033d4:	f7fe fce0 	bl	8001d98 <HAL_RCC_GetPCLK2Freq>
 80033d8:	61f8      	str	r0, [r7, #28]
        break;
 80033da:	e010      	b.n	80033fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033dc:	4b4d      	ldr	r3, [pc, #308]	; (8003514 <UART_SetConfig+0x56c>)
 80033de:	61fb      	str	r3, [r7, #28]
        break;
 80033e0:	e00d      	b.n	80033fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e2:	f7fe fc2b 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 80033e6:	61f8      	str	r0, [r7, #28]
        break;
 80033e8:	e009      	b.n	80033fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ee:	61fb      	str	r3, [r7, #28]
        break;
 80033f0:	e005      	b.n	80033fe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80033fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d077      	beq.n	80034f4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	005a      	lsls	r2, r3, #1
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	085b      	lsrs	r3, r3, #1
 800340e:	441a      	add	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	2b0f      	cmp	r3, #15
 800341e:	d916      	bls.n	800344e <UART_SetConfig+0x4a6>
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003426:	d212      	bcs.n	800344e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	b29b      	uxth	r3, r3
 800342c:	f023 030f 	bic.w	r3, r3, #15
 8003430:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	085b      	lsrs	r3, r3, #1
 8003436:	b29b      	uxth	r3, r3
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	b29a      	uxth	r2, r3
 800343e:	8afb      	ldrh	r3, [r7, #22]
 8003440:	4313      	orrs	r3, r2
 8003442:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	8afa      	ldrh	r2, [r7, #22]
 800344a:	60da      	str	r2, [r3, #12]
 800344c:	e052      	b.n	80034f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003454:	e04e      	b.n	80034f4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003456:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800345a:	2b08      	cmp	r3, #8
 800345c:	d827      	bhi.n	80034ae <UART_SetConfig+0x506>
 800345e:	a201      	add	r2, pc, #4	; (adr r2, 8003464 <UART_SetConfig+0x4bc>)
 8003460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003464:	08003489 	.word	0x08003489
 8003468:	08003491 	.word	0x08003491
 800346c:	08003499 	.word	0x08003499
 8003470:	080034af 	.word	0x080034af
 8003474:	0800349f 	.word	0x0800349f
 8003478:	080034af 	.word	0x080034af
 800347c:	080034af 	.word	0x080034af
 8003480:	080034af 	.word	0x080034af
 8003484:	080034a7 	.word	0x080034a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003488:	f7fe fc70 	bl	8001d6c <HAL_RCC_GetPCLK1Freq>
 800348c:	61f8      	str	r0, [r7, #28]
        break;
 800348e:	e014      	b.n	80034ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003490:	f7fe fc82 	bl	8001d98 <HAL_RCC_GetPCLK2Freq>
 8003494:	61f8      	str	r0, [r7, #28]
        break;
 8003496:	e010      	b.n	80034ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003498:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <UART_SetConfig+0x56c>)
 800349a:	61fb      	str	r3, [r7, #28]
        break;
 800349c:	e00d      	b.n	80034ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800349e:	f7fe fbcd 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 80034a2:	61f8      	str	r0, [r7, #28]
        break;
 80034a4:	e009      	b.n	80034ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034aa:	61fb      	str	r3, [r7, #28]
        break;
 80034ac:	e005      	b.n	80034ba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034b8:	bf00      	nop
    }

    if (pclk != 0U)
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d019      	beq.n	80034f4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	085a      	lsrs	r2, r3, #1
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	441a      	add	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	2b0f      	cmp	r3, #15
 80034d8:	d909      	bls.n	80034ee <UART_SetConfig+0x546>
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e0:	d205      	bcs.n	80034ee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60da      	str	r2, [r3, #12]
 80034ec:	e002      	b.n	80034f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003500:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003504:	4618      	mov	r0, r3
 8003506:	3728      	adds	r7, #40	; 0x28
 8003508:	46bd      	mov	sp, r7
 800350a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800350e:	bf00      	nop
 8003510:	40008000 	.word	0x40008000
 8003514:	00f42400 	.word	0x00f42400

08003518 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d01a      	beq.n	800362e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003616:	d10a      	bne.n	800362e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	605a      	str	r2, [r3, #4]
  }
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b098      	sub	sp, #96	; 0x60
 8003660:	af02      	add	r7, sp, #8
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800366c:	f7fd fac0 	bl	8000bf0 <HAL_GetTick>
 8003670:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0308 	and.w	r3, r3, #8
 800367c:	2b08      	cmp	r3, #8
 800367e:	d12e      	bne.n	80036de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003680:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003688:	2200      	movs	r2, #0
 800368a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f88c 	bl	80037ac <UART_WaitOnFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d021      	beq.n	80036de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a2:	e853 3f00 	ldrex	r3, [r3]
 80036a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80036a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ae:	653b      	str	r3, [r7, #80]	; 0x50
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036b8:	647b      	str	r3, [r7, #68]	; 0x44
 80036ba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036c0:	e841 2300 	strex	r3, r2, [r1]
 80036c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80036c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1e6      	bne.n	800369a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e062      	b.n	80037a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d149      	bne.n	8003780 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f4:	2200      	movs	r2, #0
 80036f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f856 	bl	80037ac <UART_WaitOnFlagUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d03c      	beq.n	8003780 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	e853 3f00 	ldrex	r3, [r3]
 8003712:	623b      	str	r3, [r7, #32]
   return(result);
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800371a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003724:	633b      	str	r3, [r7, #48]	; 0x30
 8003726:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003728:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800372a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800372c:	e841 2300 	strex	r3, r2, [r1]
 8003730:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1e6      	bne.n	8003706 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3308      	adds	r3, #8
 800373e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	e853 3f00 	ldrex	r3, [r3]
 8003746:	60fb      	str	r3, [r7, #12]
   return(result);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0301 	bic.w	r3, r3, #1
 800374e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	3308      	adds	r3, #8
 8003756:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003758:	61fa      	str	r2, [r7, #28]
 800375a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375c:	69b9      	ldr	r1, [r7, #24]
 800375e:	69fa      	ldr	r2, [r7, #28]
 8003760:	e841 2300 	strex	r3, r2, [r1]
 8003764:	617b      	str	r3, [r7, #20]
   return(result);
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1e5      	bne.n	8003738 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e011      	b.n	80037a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2220      	movs	r2, #32
 800378a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3758      	adds	r7, #88	; 0x58
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	603b      	str	r3, [r7, #0]
 80037b8:	4613      	mov	r3, r2
 80037ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037bc:	e049      	b.n	8003852 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037c4:	d045      	beq.n	8003852 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c6:	f7fd fa13 	bl	8000bf0 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d302      	bcc.n	80037dc <UART_WaitOnFlagUntilTimeout+0x30>
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e048      	b.n	8003872 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d031      	beq.n	8003852 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d110      	bne.n	800381e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2208      	movs	r2, #8
 8003802:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f838 	bl	800387a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2208      	movs	r2, #8
 800380e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e029      	b.n	8003872 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800382c:	d111      	bne.n	8003852 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003836:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f81e 	bl	800387a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e00f      	b.n	8003872 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69da      	ldr	r2, [r3, #28]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4013      	ands	r3, r2
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	429a      	cmp	r2, r3
 8003860:	bf0c      	ite	eq
 8003862:	2301      	moveq	r3, #1
 8003864:	2300      	movne	r3, #0
 8003866:	b2db      	uxtb	r3, r3
 8003868:	461a      	mov	r2, r3
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	429a      	cmp	r2, r3
 800386e:	d0a6      	beq.n	80037be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800387a:	b480      	push	{r7}
 800387c:	b095      	sub	sp, #84	; 0x54
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388a:	e853 3f00 	ldrex	r3, [r3]
 800388e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003892:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	461a      	mov	r2, r3
 800389e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038a0:	643b      	str	r3, [r7, #64]	; 0x40
 80038a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038a8:	e841 2300 	strex	r3, r2, [r1]
 80038ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1e6      	bne.n	8003882 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3308      	adds	r3, #8
 80038ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	e853 3f00 	ldrex	r3, [r3]
 80038c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f023 0301 	bic.w	r3, r3, #1
 80038ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3308      	adds	r3, #8
 80038d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038dc:	e841 2300 	strex	r3, r2, [r1]
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1e5      	bne.n	80038b4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d118      	bne.n	8003922 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f023 0310 	bic.w	r3, r3, #16
 8003904:	647b      	str	r3, [r7, #68]	; 0x44
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800390e:	61bb      	str	r3, [r7, #24]
 8003910:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003912:	6979      	ldr	r1, [r7, #20]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	e841 2300 	strex	r3, r2, [r1]
 800391a:	613b      	str	r3, [r7, #16]
   return(result);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1e6      	bne.n	80038f0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2220      	movs	r2, #32
 8003926:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003936:	bf00      	nop
 8003938:	3754      	adds	r7, #84	; 0x54
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
	...

08003944 <__NVIC_SetPriority>:
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	6039      	str	r1, [r7, #0]
 800394e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003954:	2b00      	cmp	r3, #0
 8003956:	db0a      	blt.n	800396e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	b2da      	uxtb	r2, r3
 800395c:	490c      	ldr	r1, [pc, #48]	; (8003990 <__NVIC_SetPriority+0x4c>)
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	0112      	lsls	r2, r2, #4
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	440b      	add	r3, r1
 8003968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800396c:	e00a      	b.n	8003984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	b2da      	uxtb	r2, r3
 8003972:	4908      	ldr	r1, [pc, #32]	; (8003994 <__NVIC_SetPriority+0x50>)
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	3b04      	subs	r3, #4
 800397c:	0112      	lsls	r2, r2, #4
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	440b      	add	r3, r1
 8003982:	761a      	strb	r2, [r3, #24]
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	e000e100 	.word	0xe000e100
 8003994:	e000ed00 	.word	0xe000ed00

08003998 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800399c:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <SysTick_Handler+0x1c>)
 800399e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80039a0:	f002 f85a 	bl	8005a58 <xTaskGetSchedulerState>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d001      	beq.n	80039ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80039aa:	f002 ff3d 	bl	8006828 <xPortSysTickHandler>
  }
}
 80039ae:	bf00      	nop
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	e000e010 	.word	0xe000e010

080039b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80039bc:	2100      	movs	r1, #0
 80039be:	f06f 0004 	mvn.w	r0, #4
 80039c2:	f7ff ffbf 	bl	8003944 <__NVIC_SetPriority>
#endif
}
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039d2:	f3ef 8305 	mrs	r3, IPSR
 80039d6:	603b      	str	r3, [r7, #0]
  return(result);
 80039d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80039de:	f06f 0305 	mvn.w	r3, #5
 80039e2:	607b      	str	r3, [r7, #4]
 80039e4:	e00c      	b.n	8003a00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80039e6:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <osKernelInitialize+0x44>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d105      	bne.n	80039fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80039ee:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <osKernelInitialize+0x44>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	607b      	str	r3, [r7, #4]
 80039f8:	e002      	b.n	8003a00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80039fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a00:	687b      	ldr	r3, [r7, #4]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	2000016c 	.word	0x2000016c

08003a14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a1a:	f3ef 8305 	mrs	r3, IPSR
 8003a1e:	603b      	str	r3, [r7, #0]
  return(result);
 8003a20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003a26:	f06f 0305 	mvn.w	r3, #5
 8003a2a:	607b      	str	r3, [r7, #4]
 8003a2c:	e010      	b.n	8003a50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003a2e:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <osKernelStart+0x48>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d109      	bne.n	8003a4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003a36:	f7ff ffbf 	bl	80039b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003a3a:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <osKernelStart+0x48>)
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003a40:	f001 fb9e 	bl	8005180 <vTaskStartScheduler>
      stat = osOK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	607b      	str	r3, [r7, #4]
 8003a48:	e002      	b.n	8003a50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a50:	687b      	ldr	r3, [r7, #4]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	2000016c 	.word	0x2000016c

08003a60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08e      	sub	sp, #56	; 0x38
 8003a64:	af04      	add	r7, sp, #16
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a70:	f3ef 8305 	mrs	r3, IPSR
 8003a74:	617b      	str	r3, [r7, #20]
  return(result);
 8003a76:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d17e      	bne.n	8003b7a <osThreadNew+0x11a>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d07b      	beq.n	8003b7a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003a82:	2380      	movs	r3, #128	; 0x80
 8003a84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003a86:	2318      	movs	r3, #24
 8003a88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d045      	beq.n	8003b26 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <osThreadNew+0x48>
        name = attr->name;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <osThreadNew+0x6e>
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	2b38      	cmp	r3, #56	; 0x38
 8003ac0:	d805      	bhi.n	8003ace <osThreadNew+0x6e>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <osThreadNew+0x72>
        return (NULL);
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e054      	b.n	8003b7c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	089b      	lsrs	r3, r3, #2
 8003ae0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00e      	beq.n	8003b08 <osThreadNew+0xa8>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	2ba7      	cmp	r3, #167	; 0xa7
 8003af0:	d90a      	bls.n	8003b08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d006      	beq.n	8003b08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <osThreadNew+0xa8>
        mem = 1;
 8003b02:	2301      	movs	r3, #1
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	e010      	b.n	8003b2a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10c      	bne.n	8003b2a <osThreadNew+0xca>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d108      	bne.n	8003b2a <osThreadNew+0xca>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d104      	bne.n	8003b2a <osThreadNew+0xca>
          mem = 0;
 8003b20:	2300      	movs	r3, #0
 8003b22:	61bb      	str	r3, [r7, #24]
 8003b24:	e001      	b.n	8003b2a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d110      	bne.n	8003b52 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003b38:	9202      	str	r2, [sp, #8]
 8003b3a:	9301      	str	r3, [sp, #4]
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	6a3a      	ldr	r2, [r7, #32]
 8003b44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f001 f92e 	bl	8004da8 <xTaskCreateStatic>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	e013      	b.n	8003b7a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d110      	bne.n	8003b7a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	f107 0310 	add.w	r3, r7, #16
 8003b60:	9301      	str	r3, [sp, #4]
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f001 f979 	bl	8004e62 <xTaskCreate>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d001      	beq.n	8003b7a <osThreadNew+0x11a>
            hTask = NULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003b7a:	693b      	ldr	r3, [r7, #16]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3728      	adds	r7, #40	; 0x28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b8c:	f3ef 8305 	mrs	r3, IPSR
 8003b90:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b92:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <osDelay+0x1c>
    stat = osErrorISR;
 8003b98:	f06f 0305 	mvn.w	r3, #5
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	e007      	b.n	8003bb0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f001 fab4 	bl	8005118 <vTaskDelay>
    }
  }

  return (stat);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b088      	sub	sp, #32
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bc6:	f3ef 8305 	mrs	r3, IPSR
 8003bca:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bcc:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d174      	bne.n	8003cbc <osMutexNew+0x102>
    if (attr != NULL) {
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <osMutexNew+0x26>
      type = attr->attr_bits;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	e001      	b.n	8003be4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d002      	beq.n	8003bf4 <osMutexNew+0x3a>
      rmtx = 1U;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	e001      	b.n	8003bf8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d15c      	bne.n	8003cbc <osMutexNew+0x102>
      mem = -1;
 8003c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c06:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d015      	beq.n	8003c3a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d006      	beq.n	8003c24 <osMutexNew+0x6a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	2b4f      	cmp	r3, #79	; 0x4f
 8003c1c:	d902      	bls.n	8003c24 <osMutexNew+0x6a>
          mem = 1;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	e00c      	b.n	8003c3e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d108      	bne.n	8003c3e <osMutexNew+0x84>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d104      	bne.n	8003c3e <osMutexNew+0x84>
            mem = 0;
 8003c34:	2300      	movs	r3, #0
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	e001      	b.n	8003c3e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d112      	bne.n	8003c6a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	2004      	movs	r0, #4
 8003c52:	f000 fb18 	bl	8004286 <xQueueCreateMutexStatic>
 8003c56:	61f8      	str	r0, [r7, #28]
 8003c58:	e016      	b.n	8003c88 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	2001      	movs	r0, #1
 8003c62:	f000 fb10 	bl	8004286 <xQueueCreateMutexStatic>
 8003c66:	61f8      	str	r0, [r7, #28]
 8003c68:	e00e      	b.n	8003c88 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10b      	bne.n	8003c88 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d004      	beq.n	8003c80 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003c76:	2004      	movs	r0, #4
 8003c78:	f000 faed 	bl	8004256 <xQueueCreateMutex>
 8003c7c:	61f8      	str	r0, [r7, #28]
 8003c7e:	e003      	b.n	8003c88 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003c80:	2001      	movs	r0, #1
 8003c82:	f000 fae8 	bl	8004256 <xQueueCreateMutex>
 8003c86:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00c      	beq.n	8003ca8 <osMutexNew+0xee>
        if (attr != NULL) {
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <osMutexNew+0xe2>
          name = attr->name;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	e001      	b.n	8003ca0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003ca0:	68f9      	ldr	r1, [r7, #12]
 8003ca2:	69f8      	ldr	r0, [r7, #28]
 8003ca4:	f001 f822 	bl	8004cec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d006      	beq.n	8003cbc <osMutexNew+0x102>
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003cbc:	69fb      	ldr	r3, [r7, #28]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3720      	adds	r7, #32
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b086      	sub	sp, #24
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f023 0301 	bic.w	r3, r3, #1
 8003cd6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ce4:	f3ef 8305 	mrs	r3, IPSR
 8003ce8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cea:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8003cf0:	f06f 0305 	mvn.w	r3, #5
 8003cf4:	617b      	str	r3, [r7, #20]
 8003cf6:	e02c      	b.n	8003d52 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d103      	bne.n	8003d06 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8003cfe:	f06f 0303 	mvn.w	r3, #3
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	e025      	b.n	8003d52 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d011      	beq.n	8003d30 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003d0c:	6839      	ldr	r1, [r7, #0]
 8003d0e:	6938      	ldr	r0, [r7, #16]
 8003d10:	f000 fb08 	bl	8004324 <xQueueTakeMutexRecursive>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d01b      	beq.n	8003d52 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8003d20:	f06f 0301 	mvn.w	r3, #1
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	e014      	b.n	8003d52 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003d28:	f06f 0302 	mvn.w	r3, #2
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	e010      	b.n	8003d52 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003d30:	6839      	ldr	r1, [r7, #0]
 8003d32:	6938      	ldr	r0, [r7, #16]
 8003d34:	f000 fda6 	bl	8004884 <xQueueSemaphoreTake>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d009      	beq.n	8003d52 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8003d44:	f06f 0301 	mvn.w	r3, #1
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	e002      	b.n	8003d52 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003d4c:	f06f 0302 	mvn.w	r3, #2
 8003d50:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8003d52:	697b      	ldr	r3, [r7, #20]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f023 0301 	bic.w	r3, r3, #1
 8003d6a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d78:	f3ef 8305 	mrs	r3, IPSR
 8003d7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d7e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <osMutexRelease+0x30>
    stat = osErrorISR;
 8003d84:	f06f 0305 	mvn.w	r3, #5
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	e01f      	b.n	8003dcc <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d103      	bne.n	8003d9a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8003d92:	f06f 0303 	mvn.w	r3, #3
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	e018      	b.n	8003dcc <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d009      	beq.n	8003db4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003da0:	6938      	ldr	r0, [r7, #16]
 8003da2:	f000 fa8b 	bl	80042bc <xQueueGiveMutexRecursive>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d00f      	beq.n	8003dcc <osMutexRelease+0x70>
        stat = osErrorResource;
 8003dac:	f06f 0302 	mvn.w	r3, #2
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	e00b      	b.n	8003dcc <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003db4:	2300      	movs	r3, #0
 8003db6:	2200      	movs	r2, #0
 8003db8:	2100      	movs	r1, #0
 8003dba:	6938      	ldr	r0, [r7, #16]
 8003dbc:	f000 fae8 	bl	8004390 <xQueueGenericSend>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d002      	beq.n	8003dcc <osMutexRelease+0x70>
        stat = osErrorResource;
 8003dc6:	f06f 0302 	mvn.w	r3, #2
 8003dca:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003dcc:	697b      	ldr	r3, [r7, #20]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4a07      	ldr	r2, [pc, #28]	; (8003e04 <vApplicationGetIdleTaskMemory+0x2c>)
 8003de8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	4a06      	ldr	r2, [pc, #24]	; (8003e08 <vApplicationGetIdleTaskMemory+0x30>)
 8003dee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2280      	movs	r2, #128	; 0x80
 8003df4:	601a      	str	r2, [r3, #0]
}
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	20000170 	.word	0x20000170
 8003e08:	20000218 	.word	0x20000218

08003e0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4a07      	ldr	r2, [pc, #28]	; (8003e38 <vApplicationGetTimerTaskMemory+0x2c>)
 8003e1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	4a06      	ldr	r2, [pc, #24]	; (8003e3c <vApplicationGetTimerTaskMemory+0x30>)
 8003e22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e2a:	601a      	str	r2, [r3, #0]
}
 8003e2c:	bf00      	nop
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	20000418 	.word	0x20000418
 8003e3c:	200004c0 	.word	0x200004c0

08003e40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f103 0208 	add.w	r2, r3, #8
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f103 0208 	add.w	r2, r3, #8
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f103 0208 	add.w	r2, r3, #8
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b085      	sub	sp, #20
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	601a      	str	r2, [r3, #0]
}
 8003ed6:	bf00      	nop
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b085      	sub	sp, #20
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
 8003eea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ef8:	d103      	bne.n	8003f02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	e00c      	b.n	8003f1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3308      	adds	r3, #8
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	e002      	b.n	8003f10 <vListInsert+0x2e>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d2f6      	bcs.n	8003f0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	601a      	str	r2, [r3, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6892      	ldr	r2, [r2, #8]
 8003f6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6852      	ldr	r2, [r2, #4]
 8003f74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d103      	bne.n	8003f88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	1e5a      	subs	r2, r3, #1
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10a      	bne.n	8003fd2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003fce:	bf00      	nop
 8003fd0:	e7fe      	b.n	8003fd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003fd2:	f002 fb97 	bl	8006704 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fde:	68f9      	ldr	r1, [r7, #12]
 8003fe0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fe2:	fb01 f303 	mul.w	r3, r1, r3
 8003fe6:	441a      	add	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004002:	3b01      	subs	r3, #1
 8004004:	68f9      	ldr	r1, [r7, #12]
 8004006:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004008:	fb01 f303 	mul.w	r3, r1, r3
 800400c:	441a      	add	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	22ff      	movs	r2, #255	; 0xff
 8004016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	22ff      	movs	r2, #255	; 0xff
 800401e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d114      	bne.n	8004052 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01a      	beq.n	8004066 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	3310      	adds	r3, #16
 8004034:	4618      	mov	r0, r3
 8004036:	f001 fb3d 	bl	80056b4 <xTaskRemoveFromEventList>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d012      	beq.n	8004066 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004040:	4b0c      	ldr	r3, [pc, #48]	; (8004074 <xQueueGenericReset+0xcc>)
 8004042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	e009      	b.n	8004066 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	3310      	adds	r3, #16
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff fef2 	bl	8003e40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	3324      	adds	r3, #36	; 0x24
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff feed 	bl	8003e40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004066:	f002 fb7d 	bl	8006764 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800406a:	2301      	movs	r3, #1
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	e000ed04 	.word	0xe000ed04

08004078 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08e      	sub	sp, #56	; 0x38
 800407c:	af02      	add	r7, sp, #8
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
 8004084:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10a      	bne.n	80040a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800408c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004090:	f383 8811 	msr	BASEPRI, r3
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800409e:	bf00      	nop
 80040a0:	e7fe      	b.n	80040a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10a      	bne.n	80040be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80040a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ac:	f383 8811 	msr	BASEPRI, r3
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040ba:	bf00      	nop
 80040bc:	e7fe      	b.n	80040bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <xQueueGenericCreateStatic+0x52>
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <xQueueGenericCreateStatic+0x56>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <xQueueGenericCreateStatic+0x58>
 80040ce:	2300      	movs	r3, #0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10a      	bne.n	80040ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80040d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	623b      	str	r3, [r7, #32]
}
 80040e6:	bf00      	nop
 80040e8:	e7fe      	b.n	80040e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d102      	bne.n	80040f6 <xQueueGenericCreateStatic+0x7e>
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <xQueueGenericCreateStatic+0x82>
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <xQueueGenericCreateStatic+0x84>
 80040fa:	2300      	movs	r3, #0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10a      	bne.n	8004116 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	61fb      	str	r3, [r7, #28]
}
 8004112:	bf00      	nop
 8004114:	e7fe      	b.n	8004114 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004116:	2350      	movs	r3, #80	; 0x50
 8004118:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2b50      	cmp	r3, #80	; 0x50
 800411e:	d00a      	beq.n	8004136 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	61bb      	str	r3, [r7, #24]
}
 8004132:	bf00      	nop
 8004134:	e7fe      	b.n	8004134 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004136:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800413c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00d      	beq.n	800415e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800414a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800414e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	4613      	mov	r3, r2
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f83f 	bl	80041dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800415e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004160:	4618      	mov	r0, r3
 8004162:	3730      	adds	r7, #48	; 0x30
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08a      	sub	sp, #40	; 0x28
 800416c:	af02      	add	r7, sp, #8
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	4613      	mov	r3, r2
 8004174:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10a      	bne.n	8004192 <xQueueGenericCreate+0x2a>
	__asm volatile
 800417c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	613b      	str	r3, [r7, #16]
}
 800418e:	bf00      	nop
 8004190:	e7fe      	b.n	8004190 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	fb02 f303 	mul.w	r3, r2, r3
 800419a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	3350      	adds	r3, #80	; 0x50
 80041a0:	4618      	mov	r0, r3
 80041a2:	f002 fbd1 	bl	8006948 <pvPortMalloc>
 80041a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d011      	beq.n	80041d2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	3350      	adds	r3, #80	; 0x50
 80041b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041c0:	79fa      	ldrb	r2, [r7, #7]
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	4613      	mov	r3, r2
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	68b9      	ldr	r1, [r7, #8]
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 f805 	bl	80041dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80041d2:	69bb      	ldr	r3, [r7, #24]
	}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3720      	adds	r7, #32
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d103      	bne.n	80041f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	e002      	b.n	80041fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800420a:	2101      	movs	r1, #1
 800420c:	69b8      	ldr	r0, [r7, #24]
 800420e:	f7ff fecb 	bl	8003fa8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	78fa      	ldrb	r2, [r7, #3]
 8004216:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800421a:	bf00      	nop
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004222:	b580      	push	{r7, lr}
 8004224:	b082      	sub	sp, #8
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00e      	beq.n	800424e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004242:	2300      	movs	r3, #0
 8004244:	2200      	movs	r2, #0
 8004246:	2100      	movs	r1, #0
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f8a1 	bl	8004390 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800424e:	bf00      	nop
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004256:	b580      	push	{r7, lr}
 8004258:	b086      	sub	sp, #24
 800425a:	af00      	add	r7, sp, #0
 800425c:	4603      	mov	r3, r0
 800425e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004260:	2301      	movs	r3, #1
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	2300      	movs	r3, #0
 8004266:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	461a      	mov	r2, r3
 800426c:	6939      	ldr	r1, [r7, #16]
 800426e:	6978      	ldr	r0, [r7, #20]
 8004270:	f7ff ff7a 	bl	8004168 <xQueueGenericCreate>
 8004274:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f7ff ffd3 	bl	8004222 <prvInitialiseMutex>

		return xNewQueue;
 800427c:	68fb      	ldr	r3, [r7, #12]
	}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004286:	b580      	push	{r7, lr}
 8004288:	b088      	sub	sp, #32
 800428a:	af02      	add	r7, sp, #8
 800428c:	4603      	mov	r3, r0
 800428e:	6039      	str	r1, [r7, #0]
 8004290:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004292:	2301      	movs	r3, #1
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	2300      	movs	r3, #0
 8004298:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2200      	movs	r2, #0
 80042a2:	6939      	ldr	r1, [r7, #16]
 80042a4:	6978      	ldr	r0, [r7, #20]
 80042a6:	f7ff fee7 	bl	8004078 <xQueueGenericCreateStatic>
 80042aa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f7ff ffb8 	bl	8004222 <prvInitialiseMutex>

		return xNewQueue;
 80042b2:	68fb      	ldr	r3, [r7, #12]
	}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80042bc:	b590      	push	{r4, r7, lr}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10a      	bne.n	80042e4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	60fb      	str	r3, [r7, #12]
}
 80042e0:	bf00      	nop
 80042e2:	e7fe      	b.n	80042e2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	689c      	ldr	r4, [r3, #8]
 80042e8:	f001 fba6 	bl	8005a38 <xTaskGetCurrentTaskHandle>
 80042ec:	4603      	mov	r3, r0
 80042ee:	429c      	cmp	r4, r3
 80042f0:	d111      	bne.n	8004316 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	1e5a      	subs	r2, r3, #1
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d105      	bne.n	8004310 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004304:	2300      	movs	r3, #0
 8004306:	2200      	movs	r2, #0
 8004308:	2100      	movs	r1, #0
 800430a:	6938      	ldr	r0, [r7, #16]
 800430c:	f000 f840 	bl	8004390 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004310:	2301      	movs	r3, #1
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	e001      	b.n	800431a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800431a:	697b      	ldr	r3, [r7, #20]
	}
 800431c:	4618      	mov	r0, r3
 800431e:	371c      	adds	r7, #28
 8004320:	46bd      	mov	sp, r7
 8004322:	bd90      	pop	{r4, r7, pc}

08004324 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004324:	b590      	push	{r4, r7, lr}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8004338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	60fb      	str	r3, [r7, #12]
}
 800434a:	bf00      	nop
 800434c:	e7fe      	b.n	800434c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	689c      	ldr	r4, [r3, #8]
 8004352:	f001 fb71 	bl	8005a38 <xTaskGetCurrentTaskHandle>
 8004356:	4603      	mov	r3, r0
 8004358:	429c      	cmp	r4, r3
 800435a:	d107      	bne.n	800436c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004366:	2301      	movs	r3, #1
 8004368:	617b      	str	r3, [r7, #20]
 800436a:	e00c      	b.n	8004386 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800436c:	6839      	ldr	r1, [r7, #0]
 800436e:	6938      	ldr	r0, [r7, #16]
 8004370:	f000 fa88 	bl	8004884 <xQueueSemaphoreTake>
 8004374:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d004      	beq.n	8004386 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004386:	697b      	ldr	r3, [r7, #20]
	}
 8004388:	4618      	mov	r0, r3
 800438a:	371c      	adds	r7, #28
 800438c:	46bd      	mov	sp, r7
 800438e:	bd90      	pop	{r4, r7, pc}

08004390 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08e      	sub	sp, #56	; 0x38
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800439e:	2300      	movs	r3, #0
 80043a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10a      	bne.n	80043c2 <xQueueGenericSend+0x32>
	__asm volatile
 80043ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b0:	f383 8811 	msr	BASEPRI, r3
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80043be:	bf00      	nop
 80043c0:	e7fe      	b.n	80043c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d103      	bne.n	80043d0 <xQueueGenericSend+0x40>
 80043c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <xQueueGenericSend+0x44>
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <xQueueGenericSend+0x46>
 80043d4:	2300      	movs	r3, #0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10a      	bne.n	80043f0 <xQueueGenericSend+0x60>
	__asm volatile
 80043da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043de:	f383 8811 	msr	BASEPRI, r3
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043ec:	bf00      	nop
 80043ee:	e7fe      	b.n	80043ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d103      	bne.n	80043fe <xQueueGenericSend+0x6e>
 80043f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <xQueueGenericSend+0x72>
 80043fe:	2301      	movs	r3, #1
 8004400:	e000      	b.n	8004404 <xQueueGenericSend+0x74>
 8004402:	2300      	movs	r3, #0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10a      	bne.n	800441e <xQueueGenericSend+0x8e>
	__asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	623b      	str	r3, [r7, #32]
}
 800441a:	bf00      	nop
 800441c:	e7fe      	b.n	800441c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800441e:	f001 fb1b 	bl	8005a58 <xTaskGetSchedulerState>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d102      	bne.n	800442e <xQueueGenericSend+0x9e>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <xQueueGenericSend+0xa2>
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <xQueueGenericSend+0xa4>
 8004432:	2300      	movs	r3, #0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10a      	bne.n	800444e <xQueueGenericSend+0xbe>
	__asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	61fb      	str	r3, [r7, #28]
}
 800444a:	bf00      	nop
 800444c:	e7fe      	b.n	800444c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800444e:	f002 f959 	bl	8006704 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445a:	429a      	cmp	r2, r3
 800445c:	d302      	bcc.n	8004464 <xQueueGenericSend+0xd4>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b02      	cmp	r3, #2
 8004462:	d129      	bne.n	80044b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	68b9      	ldr	r1, [r7, #8]
 8004468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800446a:	f000 fb2f 	bl	8004acc <prvCopyDataToQueue>
 800446e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	2b00      	cmp	r3, #0
 8004476:	d010      	beq.n	800449a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447a:	3324      	adds	r3, #36	; 0x24
 800447c:	4618      	mov	r0, r3
 800447e:	f001 f919 	bl	80056b4 <xTaskRemoveFromEventList>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d013      	beq.n	80044b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004488:	4b3f      	ldr	r3, [pc, #252]	; (8004588 <xQueueGenericSend+0x1f8>)
 800448a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	e00a      	b.n	80044b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800449a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449c:	2b00      	cmp	r3, #0
 800449e:	d007      	beq.n	80044b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80044a0:	4b39      	ldr	r3, [pc, #228]	; (8004588 <xQueueGenericSend+0x1f8>)
 80044a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80044b0:	f002 f958 	bl	8006764 <vPortExitCritical>
				return pdPASS;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e063      	b.n	8004580 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d103      	bne.n	80044c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044be:	f002 f951 	bl	8006764 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	e05c      	b.n	8004580 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d106      	bne.n	80044da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044cc:	f107 0314 	add.w	r3, r7, #20
 80044d0:	4618      	mov	r0, r3
 80044d2:	f001 f953 	bl	800577c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044d6:	2301      	movs	r3, #1
 80044d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044da:	f002 f943 	bl	8006764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044de:	f000 febf 	bl	8005260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044e2:	f002 f90f 	bl	8006704 <vPortEnterCritical>
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044ec:	b25b      	sxtb	r3, r3
 80044ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044f2:	d103      	bne.n	80044fc <xQueueGenericSend+0x16c>
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004502:	b25b      	sxtb	r3, r3
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004508:	d103      	bne.n	8004512 <xQueueGenericSend+0x182>
 800450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004512:	f002 f927 	bl	8006764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004516:	1d3a      	adds	r2, r7, #4
 8004518:	f107 0314 	add.w	r3, r7, #20
 800451c:	4611      	mov	r1, r2
 800451e:	4618      	mov	r0, r3
 8004520:	f001 f942 	bl	80057a8 <xTaskCheckForTimeOut>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d124      	bne.n	8004574 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800452a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800452c:	f000 fbc6 	bl	8004cbc <prvIsQueueFull>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d018      	beq.n	8004568 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	3310      	adds	r3, #16
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	4611      	mov	r1, r2
 800453e:	4618      	mov	r0, r3
 8004540:	f001 f868 	bl	8005614 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004546:	f000 fb51 	bl	8004bec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800454a:	f000 fe97 	bl	800527c <xTaskResumeAll>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	f47f af7c 	bne.w	800444e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004556:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <xQueueGenericSend+0x1f8>)
 8004558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	e772      	b.n	800444e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800456a:	f000 fb3f 	bl	8004bec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800456e:	f000 fe85 	bl	800527c <xTaskResumeAll>
 8004572:	e76c      	b.n	800444e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004576:	f000 fb39 	bl	8004bec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800457a:	f000 fe7f 	bl	800527c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800457e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004580:	4618      	mov	r0, r3
 8004582:	3738      	adds	r7, #56	; 0x38
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	e000ed04 	.word	0xe000ed04

0800458c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b090      	sub	sp, #64	; 0x40
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045b6:	bf00      	nop
 80045b8:	e7fe      	b.n	80045b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d103      	bne.n	80045c8 <xQueueGenericSendFromISR+0x3c>
 80045c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <xQueueGenericSendFromISR+0x40>
 80045c8:	2301      	movs	r3, #1
 80045ca:	e000      	b.n	80045ce <xQueueGenericSendFromISR+0x42>
 80045cc:	2300      	movs	r3, #0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10a      	bne.n	80045e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80045d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d6:	f383 8811 	msr	BASEPRI, r3
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045e4:	bf00      	nop
 80045e6:	e7fe      	b.n	80045e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d103      	bne.n	80045f6 <xQueueGenericSendFromISR+0x6a>
 80045ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d101      	bne.n	80045fa <xQueueGenericSendFromISR+0x6e>
 80045f6:	2301      	movs	r3, #1
 80045f8:	e000      	b.n	80045fc <xQueueGenericSendFromISR+0x70>
 80045fa:	2300      	movs	r3, #0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10a      	bne.n	8004616 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	623b      	str	r3, [r7, #32]
}
 8004612:	bf00      	nop
 8004614:	e7fe      	b.n	8004614 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004616:	f002 f957 	bl	80068c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800461a:	f3ef 8211 	mrs	r2, BASEPRI
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	61fa      	str	r2, [r7, #28]
 8004630:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004632:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004634:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800463a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463e:	429a      	cmp	r2, r3
 8004640:	d302      	bcc.n	8004648 <xQueueGenericSendFromISR+0xbc>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b02      	cmp	r3, #2
 8004646:	d12f      	bne.n	80046a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800464e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004656:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	68b9      	ldr	r1, [r7, #8]
 800465c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800465e:	f000 fa35 	bl	8004acc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004662:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004666:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800466a:	d112      	bne.n	8004692 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800466c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	2b00      	cmp	r3, #0
 8004672:	d016      	beq.n	80046a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004676:	3324      	adds	r3, #36	; 0x24
 8004678:	4618      	mov	r0, r3
 800467a:	f001 f81b 	bl	80056b4 <xTaskRemoveFromEventList>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00e      	beq.n	80046a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00b      	beq.n	80046a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	e007      	b.n	80046a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004692:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004696:	3301      	adds	r3, #1
 8004698:	b2db      	uxtb	r3, r3
 800469a:	b25a      	sxtb	r2, r3
 800469c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80046a2:	2301      	movs	r3, #1
 80046a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80046a6:	e001      	b.n	80046ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80046b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3740      	adds	r7, #64	; 0x40
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08c      	sub	sp, #48	; 0x30
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80046d0:	2300      	movs	r3, #0
 80046d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10a      	bne.n	80046f4 <xQueueReceive+0x30>
	__asm volatile
 80046de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	623b      	str	r3, [r7, #32]
}
 80046f0:	bf00      	nop
 80046f2:	e7fe      	b.n	80046f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d103      	bne.n	8004702 <xQueueReceive+0x3e>
 80046fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <xQueueReceive+0x42>
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <xQueueReceive+0x44>
 8004706:	2300      	movs	r3, #0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <xQueueReceive+0x5e>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	61fb      	str	r3, [r7, #28]
}
 800471e:	bf00      	nop
 8004720:	e7fe      	b.n	8004720 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004722:	f001 f999 	bl	8005a58 <xTaskGetSchedulerState>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d102      	bne.n	8004732 <xQueueReceive+0x6e>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <xQueueReceive+0x72>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <xQueueReceive+0x74>
 8004736:	2300      	movs	r3, #0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10a      	bne.n	8004752 <xQueueReceive+0x8e>
	__asm volatile
 800473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	61bb      	str	r3, [r7, #24]
}
 800474e:	bf00      	nop
 8004750:	e7fe      	b.n	8004750 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004752:	f001 ffd7 	bl	8006704 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	2b00      	cmp	r3, #0
 8004760:	d01f      	beq.n	80047a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004766:	f000 fa1b 	bl	8004ba0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	1e5a      	subs	r2, r3, #1
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00f      	beq.n	800479a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477c:	3310      	adds	r3, #16
 800477e:	4618      	mov	r0, r3
 8004780:	f000 ff98 	bl	80056b4 <xTaskRemoveFromEventList>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d007      	beq.n	800479a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800478a:	4b3d      	ldr	r3, [pc, #244]	; (8004880 <xQueueReceive+0x1bc>)
 800478c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800479a:	f001 ffe3 	bl	8006764 <vPortExitCritical>
				return pdPASS;
 800479e:	2301      	movs	r3, #1
 80047a0:	e069      	b.n	8004876 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d103      	bne.n	80047b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047a8:	f001 ffdc 	bl	8006764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047ac:	2300      	movs	r3, #0
 80047ae:	e062      	b.n	8004876 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047b6:	f107 0310 	add.w	r3, r7, #16
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 ffde 	bl	800577c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047c0:	2301      	movs	r3, #1
 80047c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047c4:	f001 ffce 	bl	8006764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047c8:	f000 fd4a 	bl	8005260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047cc:	f001 ff9a 	bl	8006704 <vPortEnterCritical>
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047d6:	b25b      	sxtb	r3, r3
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047dc:	d103      	bne.n	80047e6 <xQueueReceive+0x122>
 80047de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047ec:	b25b      	sxtb	r3, r3
 80047ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047f2:	d103      	bne.n	80047fc <xQueueReceive+0x138>
 80047f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047fc:	f001 ffb2 	bl	8006764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004800:	1d3a      	adds	r2, r7, #4
 8004802:	f107 0310 	add.w	r3, r7, #16
 8004806:	4611      	mov	r1, r2
 8004808:	4618      	mov	r0, r3
 800480a:	f000 ffcd 	bl	80057a8 <xTaskCheckForTimeOut>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d123      	bne.n	800485c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004816:	f000 fa3b 	bl	8004c90 <prvIsQueueEmpty>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d017      	beq.n	8004850 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	3324      	adds	r3, #36	; 0x24
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	4611      	mov	r1, r2
 8004828:	4618      	mov	r0, r3
 800482a:	f000 fef3 	bl	8005614 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800482e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004830:	f000 f9dc 	bl	8004bec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004834:	f000 fd22 	bl	800527c <xTaskResumeAll>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d189      	bne.n	8004752 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800483e:	4b10      	ldr	r3, [pc, #64]	; (8004880 <xQueueReceive+0x1bc>)
 8004840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	e780      	b.n	8004752 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004852:	f000 f9cb 	bl	8004bec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004856:	f000 fd11 	bl	800527c <xTaskResumeAll>
 800485a:	e77a      	b.n	8004752 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800485c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800485e:	f000 f9c5 	bl	8004bec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004862:	f000 fd0b 	bl	800527c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004868:	f000 fa12 	bl	8004c90 <prvIsQueueEmpty>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	f43f af6f 	beq.w	8004752 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004874:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004876:	4618      	mov	r0, r3
 8004878:	3730      	adds	r7, #48	; 0x30
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	e000ed04 	.word	0xe000ed04

08004884 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08e      	sub	sp, #56	; 0x38
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800488e:	2300      	movs	r3, #0
 8004890:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004896:	2300      	movs	r3, #0
 8004898:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10a      	bne.n	80048b6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	623b      	str	r3, [r7, #32]
}
 80048b2:	bf00      	nop
 80048b4:	e7fe      	b.n	80048b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80048b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80048be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	61fb      	str	r3, [r7, #28]
}
 80048d0:	bf00      	nop
 80048d2:	e7fe      	b.n	80048d2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048d4:	f001 f8c0 	bl	8005a58 <xTaskGetSchedulerState>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d102      	bne.n	80048e4 <xQueueSemaphoreTake+0x60>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <xQueueSemaphoreTake+0x64>
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <xQueueSemaphoreTake+0x66>
 80048e8:	2300      	movs	r3, #0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10a      	bne.n	8004904 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	61bb      	str	r3, [r7, #24]
}
 8004900:	bf00      	nop
 8004902:	e7fe      	b.n	8004902 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004904:	f001 fefe 	bl	8006704 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	2b00      	cmp	r3, #0
 8004912:	d024      	beq.n	800495e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004916:	1e5a      	subs	r2, r3, #1
 8004918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800491c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d104      	bne.n	800492e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004924:	f001 fa0e 	bl	8005d44 <pvTaskIncrementMutexHeldCount>
 8004928:	4602      	mov	r2, r0
 800492a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800492e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00f      	beq.n	8004956 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004938:	3310      	adds	r3, #16
 800493a:	4618      	mov	r0, r3
 800493c:	f000 feba 	bl	80056b4 <xTaskRemoveFromEventList>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d007      	beq.n	8004956 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004946:	4b54      	ldr	r3, [pc, #336]	; (8004a98 <xQueueSemaphoreTake+0x214>)
 8004948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004956:	f001 ff05 	bl	8006764 <vPortExitCritical>
				return pdPASS;
 800495a:	2301      	movs	r3, #1
 800495c:	e097      	b.n	8004a8e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d111      	bne.n	8004988 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	617b      	str	r3, [r7, #20]
}
 800497c:	bf00      	nop
 800497e:	e7fe      	b.n	800497e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004980:	f001 fef0 	bl	8006764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004984:	2300      	movs	r3, #0
 8004986:	e082      	b.n	8004a8e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800498e:	f107 030c 	add.w	r3, r7, #12
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fef2 	bl	800577c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004998:	2301      	movs	r3, #1
 800499a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800499c:	f001 fee2 	bl	8006764 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049a0:	f000 fc5e 	bl	8005260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049a4:	f001 feae 	bl	8006704 <vPortEnterCritical>
 80049a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049ae:	b25b      	sxtb	r3, r3
 80049b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049b4:	d103      	bne.n	80049be <xQueueSemaphoreTake+0x13a>
 80049b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049c4:	b25b      	sxtb	r3, r3
 80049c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ca:	d103      	bne.n	80049d4 <xQueueSemaphoreTake+0x150>
 80049cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049d4:	f001 fec6 	bl	8006764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049d8:	463a      	mov	r2, r7
 80049da:	f107 030c 	add.w	r3, r7, #12
 80049de:	4611      	mov	r1, r2
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 fee1 	bl	80057a8 <xTaskCheckForTimeOut>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d132      	bne.n	8004a52 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049ee:	f000 f94f 	bl	8004c90 <prvIsQueueEmpty>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d026      	beq.n	8004a46 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d109      	bne.n	8004a14 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004a00:	f001 fe80 	bl	8006704 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f001 f843 	bl	8005a94 <xTaskPriorityInherit>
 8004a0e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004a10:	f001 fea8 	bl	8006764 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a16:	3324      	adds	r3, #36	; 0x24
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fdf9 	bl	8005614 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a24:	f000 f8e2 	bl	8004bec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a28:	f000 fc28 	bl	800527c <xTaskResumeAll>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f47f af68 	bne.w	8004904 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004a34:	4b18      	ldr	r3, [pc, #96]	; (8004a98 <xQueueSemaphoreTake+0x214>)
 8004a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	e75e      	b.n	8004904 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004a46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a48:	f000 f8d0 	bl	8004bec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a4c:	f000 fc16 	bl	800527c <xTaskResumeAll>
 8004a50:	e758      	b.n	8004904 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004a52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a54:	f000 f8ca 	bl	8004bec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a58:	f000 fc10 	bl	800527c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a5e:	f000 f917 	bl	8004c90 <prvIsQueueEmpty>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f43f af4d 	beq.w	8004904 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00d      	beq.n	8004a8c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004a70:	f001 fe48 	bl	8006704 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004a74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a76:	f000 f811 	bl	8004a9c <prvGetDisinheritPriorityAfterTimeout>
 8004a7a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a82:	4618      	mov	r0, r3
 8004a84:	f001 f8dc 	bl	8005c40 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004a88:	f001 fe6c 	bl	8006764 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3738      	adds	r7, #56	; 0x38
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	e000ed04 	.word	0xe000ed04

08004a9c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d006      	beq.n	8004aba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	e001      	b.n	8004abe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004abe:	68fb      	ldr	r3, [r7, #12]
	}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10d      	bne.n	8004b06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d14d      	bne.n	8004b8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 f834 	bl	8005b64 <xTaskPriorityDisinherit>
 8004afc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	609a      	str	r2, [r3, #8]
 8004b04:	e043      	b.n	8004b8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d119      	bne.n	8004b40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6858      	ldr	r0, [r3, #4]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	461a      	mov	r2, r3
 8004b16:	68b9      	ldr	r1, [r7, #8]
 8004b18:	f002 fbc7 	bl	80072aa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	441a      	add	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d32b      	bcc.n	8004b8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	605a      	str	r2, [r3, #4]
 8004b3e:	e026      	b.n	8004b8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	68d8      	ldr	r0, [r3, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b48:	461a      	mov	r2, r3
 8004b4a:	68b9      	ldr	r1, [r7, #8]
 8004b4c:	f002 fbad 	bl	80072aa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	425b      	negs	r3, r3
 8004b5a:	441a      	add	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d207      	bcs.n	8004b7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	425b      	negs	r3, r3
 8004b76:	441a      	add	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d105      	bne.n	8004b8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b96:	697b      	ldr	r3, [r7, #20]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d018      	beq.n	8004be4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	441a      	add	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d303      	bcc.n	8004bd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68d9      	ldr	r1, [r3, #12]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	461a      	mov	r2, r3
 8004bde:	6838      	ldr	r0, [r7, #0]
 8004be0:	f002 fb63 	bl	80072aa <memcpy>
	}
}
 8004be4:	bf00      	nop
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004bf4:	f001 fd86 	bl	8006704 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bfe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c00:	e011      	b.n	8004c26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d012      	beq.n	8004c30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3324      	adds	r3, #36	; 0x24
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fd50 	bl	80056b4 <xTaskRemoveFromEventList>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c1a:	f000 fe27 	bl	800586c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	dce9      	bgt.n	8004c02 <prvUnlockQueue+0x16>
 8004c2e:	e000      	b.n	8004c32 <prvUnlockQueue+0x46>
					break;
 8004c30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	22ff      	movs	r2, #255	; 0xff
 8004c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c3a:	f001 fd93 	bl	8006764 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c3e:	f001 fd61 	bl	8006704 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c4a:	e011      	b.n	8004c70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d012      	beq.n	8004c7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3310      	adds	r3, #16
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fd2b 	bl	80056b4 <xTaskRemoveFromEventList>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c64:	f000 fe02 	bl	800586c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c68:	7bbb      	ldrb	r3, [r7, #14]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	dce9      	bgt.n	8004c4c <prvUnlockQueue+0x60>
 8004c78:	e000      	b.n	8004c7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	22ff      	movs	r2, #255	; 0xff
 8004c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c84:	f001 fd6e 	bl	8006764 <vPortExitCritical>
}
 8004c88:	bf00      	nop
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c98:	f001 fd34 	bl	8006704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d102      	bne.n	8004caa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	e001      	b.n	8004cae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004caa:	2300      	movs	r3, #0
 8004cac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cae:	f001 fd59 	bl	8006764 <vPortExitCritical>

	return xReturn;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cc4:	f001 fd1e 	bl	8006704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d102      	bne.n	8004cda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	e001      	b.n	8004cde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cde:	f001 fd41 	bl	8006764 <vPortExitCritical>

	return xReturn;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	e014      	b.n	8004d26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004cfc:	4a0f      	ldr	r2, [pc, #60]	; (8004d3c <vQueueAddToRegistry+0x50>)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10b      	bne.n	8004d20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d08:	490c      	ldr	r1, [pc, #48]	; (8004d3c <vQueueAddToRegistry+0x50>)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004d12:	4a0a      	ldr	r2, [pc, #40]	; (8004d3c <vQueueAddToRegistry+0x50>)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	4413      	add	r3, r2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d1e:	e006      	b.n	8004d2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	3301      	adds	r3, #1
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b07      	cmp	r3, #7
 8004d2a:	d9e7      	bls.n	8004cfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	200008c0 	.word	0x200008c0

08004d40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d50:	f001 fcd8 	bl	8006704 <vPortEnterCritical>
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d5a:	b25b      	sxtb	r3, r3
 8004d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d60:	d103      	bne.n	8004d6a <vQueueWaitForMessageRestricted+0x2a>
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d70:	b25b      	sxtb	r3, r3
 8004d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d76:	d103      	bne.n	8004d80 <vQueueWaitForMessageRestricted+0x40>
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d80:	f001 fcf0 	bl	8006764 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d106      	bne.n	8004d9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	3324      	adds	r3, #36	; 0x24
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	68b9      	ldr	r1, [r7, #8]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 fc61 	bl	800565c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d9a:	6978      	ldr	r0, [r7, #20]
 8004d9c:	f7ff ff26 	bl	8004bec <prvUnlockQueue>
	}
 8004da0:	bf00      	nop
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08e      	sub	sp, #56	; 0x38
 8004dac:	af04      	add	r7, sp, #16
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10a      	bne.n	8004dd2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	623b      	str	r3, [r7, #32]
}
 8004dce:	bf00      	nop
 8004dd0:	e7fe      	b.n	8004dd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10a      	bne.n	8004dee <xTaskCreateStatic+0x46>
	__asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	61fb      	str	r3, [r7, #28]
}
 8004dea:	bf00      	nop
 8004dec:	e7fe      	b.n	8004dec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004dee:	23a8      	movs	r3, #168	; 0xa8
 8004df0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2ba8      	cmp	r3, #168	; 0xa8
 8004df6:	d00a      	beq.n	8004e0e <xTaskCreateStatic+0x66>
	__asm volatile
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	61bb      	str	r3, [r7, #24]
}
 8004e0a:	bf00      	nop
 8004e0c:	e7fe      	b.n	8004e0c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d01e      	beq.n	8004e54 <xTaskCreateStatic+0xac>
 8004e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01b      	beq.n	8004e54 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	2202      	movs	r2, #2
 8004e2a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e2e:	2300      	movs	r3, #0
 8004e30:	9303      	str	r3, [sp, #12]
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	9302      	str	r3, [sp, #8]
 8004e36:	f107 0314 	add.w	r3, r7, #20
 8004e3a:	9301      	str	r3, [sp, #4]
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	68b9      	ldr	r1, [r7, #8]
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 f850 	bl	8004eec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e4e:	f000 f8f3 	bl	8005038 <prvAddNewTaskToReadyList>
 8004e52:	e001      	b.n	8004e58 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004e54:	2300      	movs	r3, #0
 8004e56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e58:	697b      	ldr	r3, [r7, #20]
	}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3728      	adds	r7, #40	; 0x28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b08c      	sub	sp, #48	; 0x30
 8004e66:	af04      	add	r7, sp, #16
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	603b      	str	r3, [r7, #0]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e72:	88fb      	ldrh	r3, [r7, #6]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4618      	mov	r0, r3
 8004e78:	f001 fd66 	bl	8006948 <pvPortMalloc>
 8004e7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00e      	beq.n	8004ea2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e84:	20a8      	movs	r0, #168	; 0xa8
 8004e86:	f001 fd5f 	bl	8006948 <pvPortMalloc>
 8004e8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30
 8004e98:	e005      	b.n	8004ea6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e9a:	6978      	ldr	r0, [r7, #20]
 8004e9c:	f001 fe20 	bl	8006ae0 <vPortFree>
 8004ea0:	e001      	b.n	8004ea6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d017      	beq.n	8004edc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004eb4:	88fa      	ldrh	r2, [r7, #6]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	9303      	str	r3, [sp, #12]
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	9302      	str	r3, [sp, #8]
 8004ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec0:	9301      	str	r3, [sp, #4]
 8004ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 f80e 	bl	8004eec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ed0:	69f8      	ldr	r0, [r7, #28]
 8004ed2:	f000 f8b1 	bl	8005038 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	61bb      	str	r3, [r7, #24]
 8004eda:	e002      	b.n	8004ee2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ee0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ee2:	69bb      	ldr	r3, [r7, #24]
	}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3720      	adds	r7, #32
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b088      	sub	sp, #32
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	461a      	mov	r2, r3
 8004f04:	21a5      	movs	r1, #165	; 0xa5
 8004f06:	f002 f8ff 	bl	8007108 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f14:	3b01      	subs	r3, #1
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	f023 0307 	bic.w	r3, r3, #7
 8004f22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00a      	beq.n	8004f44 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	617b      	str	r3, [r7, #20]
}
 8004f40:	bf00      	nop
 8004f42:	e7fe      	b.n	8004f42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d01f      	beq.n	8004f8a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	e012      	b.n	8004f76 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	4413      	add	r3, r2
 8004f56:	7819      	ldrb	r1, [r3, #0]
 8004f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	3334      	adds	r3, #52	; 0x34
 8004f60:	460a      	mov	r2, r1
 8004f62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	4413      	add	r3, r2
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d006      	beq.n	8004f7e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	3301      	adds	r3, #1
 8004f74:	61fb      	str	r3, [r7, #28]
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	2b0f      	cmp	r3, #15
 8004f7a:	d9e9      	bls.n	8004f50 <prvInitialiseNewTask+0x64>
 8004f7c:	e000      	b.n	8004f80 <prvInitialiseNewTask+0x94>
			{
				break;
 8004f7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f88:	e003      	b.n	8004f92 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	2b37      	cmp	r3, #55	; 0x37
 8004f96:	d901      	bls.n	8004f9c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f98:	2337      	movs	r3, #55	; 0x37
 8004f9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004faa:	2200      	movs	r2, #0
 8004fac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fe ff64 	bl	8003e80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fba:	3318      	adds	r3, #24
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fe ff5f 	bl	8003e80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fd6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fea:	3354      	adds	r3, #84	; 0x54
 8004fec:	224c      	movs	r2, #76	; 0x4c
 8004fee:	2100      	movs	r1, #0
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f002 f889 	bl	8007108 <memset>
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff8:	4a0c      	ldr	r2, [pc, #48]	; (800502c <prvInitialiseNewTask+0x140>)
 8004ffa:	659a      	str	r2, [r3, #88]	; 0x58
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffe:	4a0c      	ldr	r2, [pc, #48]	; (8005030 <prvInitialiseNewTask+0x144>)
 8005000:	65da      	str	r2, [r3, #92]	; 0x5c
 8005002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005004:	4a0b      	ldr	r2, [pc, #44]	; (8005034 <prvInitialiseNewTask+0x148>)
 8005006:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	68f9      	ldr	r1, [r7, #12]
 800500c:	69b8      	ldr	r0, [r7, #24]
 800500e:	f001 fa4f 	bl	80064b0 <pxPortInitialiseStack>
 8005012:	4602      	mov	r2, r0
 8005014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005016:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800501e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005022:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005024:	bf00      	nop
 8005026:	3720      	adds	r7, #32
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	20001b0c 	.word	0x20001b0c
 8005030:	20001b74 	.word	0x20001b74
 8005034:	20001bdc 	.word	0x20001bdc

08005038 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005040:	f001 fb60 	bl	8006704 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005044:	4b2d      	ldr	r3, [pc, #180]	; (80050fc <prvAddNewTaskToReadyList+0xc4>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3301      	adds	r3, #1
 800504a:	4a2c      	ldr	r2, [pc, #176]	; (80050fc <prvAddNewTaskToReadyList+0xc4>)
 800504c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800504e:	4b2c      	ldr	r3, [pc, #176]	; (8005100 <prvAddNewTaskToReadyList+0xc8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d109      	bne.n	800506a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005056:	4a2a      	ldr	r2, [pc, #168]	; (8005100 <prvAddNewTaskToReadyList+0xc8>)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800505c:	4b27      	ldr	r3, [pc, #156]	; (80050fc <prvAddNewTaskToReadyList+0xc4>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d110      	bne.n	8005086 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005064:	f000 fc26 	bl	80058b4 <prvInitialiseTaskLists>
 8005068:	e00d      	b.n	8005086 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800506a:	4b26      	ldr	r3, [pc, #152]	; (8005104 <prvAddNewTaskToReadyList+0xcc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d109      	bne.n	8005086 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005072:	4b23      	ldr	r3, [pc, #140]	; (8005100 <prvAddNewTaskToReadyList+0xc8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507c:	429a      	cmp	r2, r3
 800507e:	d802      	bhi.n	8005086 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005080:	4a1f      	ldr	r2, [pc, #124]	; (8005100 <prvAddNewTaskToReadyList+0xc8>)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005086:	4b20      	ldr	r3, [pc, #128]	; (8005108 <prvAddNewTaskToReadyList+0xd0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3301      	adds	r3, #1
 800508c:	4a1e      	ldr	r2, [pc, #120]	; (8005108 <prvAddNewTaskToReadyList+0xd0>)
 800508e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005090:	4b1d      	ldr	r3, [pc, #116]	; (8005108 <prvAddNewTaskToReadyList+0xd0>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509c:	4b1b      	ldr	r3, [pc, #108]	; (800510c <prvAddNewTaskToReadyList+0xd4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d903      	bls.n	80050ac <prvAddNewTaskToReadyList+0x74>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	4a18      	ldr	r2, [pc, #96]	; (800510c <prvAddNewTaskToReadyList+0xd4>)
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b0:	4613      	mov	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4a15      	ldr	r2, [pc, #84]	; (8005110 <prvAddNewTaskToReadyList+0xd8>)
 80050ba:	441a      	add	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3304      	adds	r3, #4
 80050c0:	4619      	mov	r1, r3
 80050c2:	4610      	mov	r0, r2
 80050c4:	f7fe fee9 	bl	8003e9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80050c8:	f001 fb4c 	bl	8006764 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80050cc:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <prvAddNewTaskToReadyList+0xcc>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00e      	beq.n	80050f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050d4:	4b0a      	ldr	r3, [pc, #40]	; (8005100 <prvAddNewTaskToReadyList+0xc8>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	429a      	cmp	r2, r3
 80050e0:	d207      	bcs.n	80050f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050e2:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <prvAddNewTaskToReadyList+0xdc>)
 80050e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050f2:	bf00      	nop
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000dd4 	.word	0x20000dd4
 8005100:	20000900 	.word	0x20000900
 8005104:	20000de0 	.word	0x20000de0
 8005108:	20000df0 	.word	0x20000df0
 800510c:	20000ddc 	.word	0x20000ddc
 8005110:	20000904 	.word	0x20000904
 8005114:	e000ed04 	.word	0xe000ed04

08005118 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d017      	beq.n	800515a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800512a:	4b13      	ldr	r3, [pc, #76]	; (8005178 <vTaskDelay+0x60>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <vTaskDelay+0x30>
	__asm volatile
 8005132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	60bb      	str	r3, [r7, #8]
}
 8005144:	bf00      	nop
 8005146:	e7fe      	b.n	8005146 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005148:	f000 f88a 	bl	8005260 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800514c:	2100      	movs	r1, #0
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fe0c 	bl	8005d6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005154:	f000 f892 	bl	800527c <xTaskResumeAll>
 8005158:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d107      	bne.n	8005170 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005160:	4b06      	ldr	r3, [pc, #24]	; (800517c <vTaskDelay+0x64>)
 8005162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005170:	bf00      	nop
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20000dfc 	.word	0x20000dfc
 800517c:	e000ed04 	.word	0xe000ed04

08005180 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b08a      	sub	sp, #40	; 0x28
 8005184:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005186:	2300      	movs	r3, #0
 8005188:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800518a:	2300      	movs	r3, #0
 800518c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800518e:	463a      	mov	r2, r7
 8005190:	1d39      	adds	r1, r7, #4
 8005192:	f107 0308 	add.w	r3, r7, #8
 8005196:	4618      	mov	r0, r3
 8005198:	f7fe fe1e 	bl	8003dd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800519c:	6839      	ldr	r1, [r7, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	9202      	str	r2, [sp, #8]
 80051a4:	9301      	str	r3, [sp, #4]
 80051a6:	2300      	movs	r3, #0
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	2300      	movs	r3, #0
 80051ac:	460a      	mov	r2, r1
 80051ae:	4924      	ldr	r1, [pc, #144]	; (8005240 <vTaskStartScheduler+0xc0>)
 80051b0:	4824      	ldr	r0, [pc, #144]	; (8005244 <vTaskStartScheduler+0xc4>)
 80051b2:	f7ff fdf9 	bl	8004da8 <xTaskCreateStatic>
 80051b6:	4603      	mov	r3, r0
 80051b8:	4a23      	ldr	r2, [pc, #140]	; (8005248 <vTaskStartScheduler+0xc8>)
 80051ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051bc:	4b22      	ldr	r3, [pc, #136]	; (8005248 <vTaskStartScheduler+0xc8>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80051c4:	2301      	movs	r3, #1
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	e001      	b.n	80051ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d102      	bne.n	80051da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80051d4:	f000 fe1e 	bl	8005e14 <xTimerCreateTimerTask>
 80051d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d11b      	bne.n	8005218 <vTaskStartScheduler+0x98>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	613b      	str	r3, [r7, #16]
}
 80051f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80051f4:	4b15      	ldr	r3, [pc, #84]	; (800524c <vTaskStartScheduler+0xcc>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3354      	adds	r3, #84	; 0x54
 80051fa:	4a15      	ldr	r2, [pc, #84]	; (8005250 <vTaskStartScheduler+0xd0>)
 80051fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051fe:	4b15      	ldr	r3, [pc, #84]	; (8005254 <vTaskStartScheduler+0xd4>)
 8005200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005204:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005206:	4b14      	ldr	r3, [pc, #80]	; (8005258 <vTaskStartScheduler+0xd8>)
 8005208:	2201      	movs	r2, #1
 800520a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800520c:	4b13      	ldr	r3, [pc, #76]	; (800525c <vTaskStartScheduler+0xdc>)
 800520e:	2200      	movs	r2, #0
 8005210:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005212:	f001 f9d5 	bl	80065c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005216:	e00e      	b.n	8005236 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800521e:	d10a      	bne.n	8005236 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	60fb      	str	r3, [r7, #12]
}
 8005232:	bf00      	nop
 8005234:	e7fe      	b.n	8005234 <vTaskStartScheduler+0xb4>
}
 8005236:	bf00      	nop
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	08007828 	.word	0x08007828
 8005244:	08005885 	.word	0x08005885
 8005248:	20000df8 	.word	0x20000df8
 800524c:	20000900 	.word	0x20000900
 8005250:	20000064 	.word	0x20000064
 8005254:	20000df4 	.word	0x20000df4
 8005258:	20000de0 	.word	0x20000de0
 800525c:	20000dd8 	.word	0x20000dd8

08005260 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005264:	4b04      	ldr	r3, [pc, #16]	; (8005278 <vTaskSuspendAll+0x18>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3301      	adds	r3, #1
 800526a:	4a03      	ldr	r2, [pc, #12]	; (8005278 <vTaskSuspendAll+0x18>)
 800526c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800526e:	bf00      	nop
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	20000dfc 	.word	0x20000dfc

0800527c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005282:	2300      	movs	r3, #0
 8005284:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005286:	2300      	movs	r3, #0
 8005288:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800528a:	4b42      	ldr	r3, [pc, #264]	; (8005394 <xTaskResumeAll+0x118>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10a      	bne.n	80052a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	603b      	str	r3, [r7, #0]
}
 80052a4:	bf00      	nop
 80052a6:	e7fe      	b.n	80052a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80052a8:	f001 fa2c 	bl	8006704 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80052ac:	4b39      	ldr	r3, [pc, #228]	; (8005394 <xTaskResumeAll+0x118>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3b01      	subs	r3, #1
 80052b2:	4a38      	ldr	r2, [pc, #224]	; (8005394 <xTaskResumeAll+0x118>)
 80052b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052b6:	4b37      	ldr	r3, [pc, #220]	; (8005394 <xTaskResumeAll+0x118>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d162      	bne.n	8005384 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052be:	4b36      	ldr	r3, [pc, #216]	; (8005398 <xTaskResumeAll+0x11c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d05e      	beq.n	8005384 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052c6:	e02f      	b.n	8005328 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052c8:	4b34      	ldr	r3, [pc, #208]	; (800539c <xTaskResumeAll+0x120>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	3318      	adds	r3, #24
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fe fe3d 	bl	8003f54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3304      	adds	r3, #4
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fe fe38 	bl	8003f54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e8:	4b2d      	ldr	r3, [pc, #180]	; (80053a0 <xTaskResumeAll+0x124>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d903      	bls.n	80052f8 <xTaskResumeAll+0x7c>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	4a2a      	ldr	r2, [pc, #168]	; (80053a0 <xTaskResumeAll+0x124>)
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fc:	4613      	mov	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4a27      	ldr	r2, [pc, #156]	; (80053a4 <xTaskResumeAll+0x128>)
 8005306:	441a      	add	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3304      	adds	r3, #4
 800530c:	4619      	mov	r1, r3
 800530e:	4610      	mov	r0, r2
 8005310:	f7fe fdc3 	bl	8003e9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005318:	4b23      	ldr	r3, [pc, #140]	; (80053a8 <xTaskResumeAll+0x12c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531e:	429a      	cmp	r2, r3
 8005320:	d302      	bcc.n	8005328 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005322:	4b22      	ldr	r3, [pc, #136]	; (80053ac <xTaskResumeAll+0x130>)
 8005324:	2201      	movs	r2, #1
 8005326:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005328:	4b1c      	ldr	r3, [pc, #112]	; (800539c <xTaskResumeAll+0x120>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1cb      	bne.n	80052c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005336:	f000 fb5f 	bl	80059f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800533a:	4b1d      	ldr	r3, [pc, #116]	; (80053b0 <xTaskResumeAll+0x134>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d010      	beq.n	8005368 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005346:	f000 f847 	bl	80053d8 <xTaskIncrementTick>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005350:	4b16      	ldr	r3, [pc, #88]	; (80053ac <xTaskResumeAll+0x130>)
 8005352:	2201      	movs	r2, #1
 8005354:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	3b01      	subs	r3, #1
 800535a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f1      	bne.n	8005346 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005362:	4b13      	ldr	r3, [pc, #76]	; (80053b0 <xTaskResumeAll+0x134>)
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005368:	4b10      	ldr	r3, [pc, #64]	; (80053ac <xTaskResumeAll+0x130>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d009      	beq.n	8005384 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005370:	2301      	movs	r3, #1
 8005372:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005374:	4b0f      	ldr	r3, [pc, #60]	; (80053b4 <xTaskResumeAll+0x138>)
 8005376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005384:	f001 f9ee 	bl	8006764 <vPortExitCritical>

	return xAlreadyYielded;
 8005388:	68bb      	ldr	r3, [r7, #8]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	20000dfc 	.word	0x20000dfc
 8005398:	20000dd4 	.word	0x20000dd4
 800539c:	20000d94 	.word	0x20000d94
 80053a0:	20000ddc 	.word	0x20000ddc
 80053a4:	20000904 	.word	0x20000904
 80053a8:	20000900 	.word	0x20000900
 80053ac:	20000de8 	.word	0x20000de8
 80053b0:	20000de4 	.word	0x20000de4
 80053b4:	e000ed04 	.word	0xe000ed04

080053b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80053be:	4b05      	ldr	r3, [pc, #20]	; (80053d4 <xTaskGetTickCount+0x1c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80053c4:	687b      	ldr	r3, [r7, #4]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	20000dd8 	.word	0x20000dd8

080053d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053de:	2300      	movs	r3, #0
 80053e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053e2:	4b4f      	ldr	r3, [pc, #316]	; (8005520 <xTaskIncrementTick+0x148>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f040 808f 	bne.w	800550a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053ec:	4b4d      	ldr	r3, [pc, #308]	; (8005524 <xTaskIncrementTick+0x14c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3301      	adds	r3, #1
 80053f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053f4:	4a4b      	ldr	r2, [pc, #300]	; (8005524 <xTaskIncrementTick+0x14c>)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d120      	bne.n	8005442 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005400:	4b49      	ldr	r3, [pc, #292]	; (8005528 <xTaskIncrementTick+0x150>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <xTaskIncrementTick+0x48>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	603b      	str	r3, [r7, #0]
}
 800541c:	bf00      	nop
 800541e:	e7fe      	b.n	800541e <xTaskIncrementTick+0x46>
 8005420:	4b41      	ldr	r3, [pc, #260]	; (8005528 <xTaskIncrementTick+0x150>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	4b41      	ldr	r3, [pc, #260]	; (800552c <xTaskIncrementTick+0x154>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a3f      	ldr	r2, [pc, #252]	; (8005528 <xTaskIncrementTick+0x150>)
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	4a3f      	ldr	r2, [pc, #252]	; (800552c <xTaskIncrementTick+0x154>)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	4b3e      	ldr	r3, [pc, #248]	; (8005530 <xTaskIncrementTick+0x158>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3301      	adds	r3, #1
 800543a:	4a3d      	ldr	r2, [pc, #244]	; (8005530 <xTaskIncrementTick+0x158>)
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	f000 fadb 	bl	80059f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005442:	4b3c      	ldr	r3, [pc, #240]	; (8005534 <xTaskIncrementTick+0x15c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	429a      	cmp	r2, r3
 800544a:	d349      	bcc.n	80054e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800544c:	4b36      	ldr	r3, [pc, #216]	; (8005528 <xTaskIncrementTick+0x150>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d104      	bne.n	8005460 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005456:	4b37      	ldr	r3, [pc, #220]	; (8005534 <xTaskIncrementTick+0x15c>)
 8005458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800545c:	601a      	str	r2, [r3, #0]
					break;
 800545e:	e03f      	b.n	80054e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005460:	4b31      	ldr	r3, [pc, #196]	; (8005528 <xTaskIncrementTick+0x150>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	429a      	cmp	r2, r3
 8005476:	d203      	bcs.n	8005480 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005478:	4a2e      	ldr	r2, [pc, #184]	; (8005534 <xTaskIncrementTick+0x15c>)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800547e:	e02f      	b.n	80054e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	3304      	adds	r3, #4
 8005484:	4618      	mov	r0, r3
 8005486:	f7fe fd65 	bl	8003f54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548e:	2b00      	cmp	r3, #0
 8005490:	d004      	beq.n	800549c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	3318      	adds	r3, #24
 8005496:	4618      	mov	r0, r3
 8005498:	f7fe fd5c 	bl	8003f54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a0:	4b25      	ldr	r3, [pc, #148]	; (8005538 <xTaskIncrementTick+0x160>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d903      	bls.n	80054b0 <xTaskIncrementTick+0xd8>
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ac:	4a22      	ldr	r2, [pc, #136]	; (8005538 <xTaskIncrementTick+0x160>)
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b4:	4613      	mov	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4a1f      	ldr	r2, [pc, #124]	; (800553c <xTaskIncrementTick+0x164>)
 80054be:	441a      	add	r2, r3
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	3304      	adds	r3, #4
 80054c4:	4619      	mov	r1, r3
 80054c6:	4610      	mov	r0, r2
 80054c8:	f7fe fce7 	bl	8003e9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d0:	4b1b      	ldr	r3, [pc, #108]	; (8005540 <xTaskIncrementTick+0x168>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d3b8      	bcc.n	800544c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80054da:	2301      	movs	r3, #1
 80054dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054de:	e7b5      	b.n	800544c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054e0:	4b17      	ldr	r3, [pc, #92]	; (8005540 <xTaskIncrementTick+0x168>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e6:	4915      	ldr	r1, [pc, #84]	; (800553c <xTaskIncrementTick+0x164>)
 80054e8:	4613      	mov	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	440b      	add	r3, r1
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d901      	bls.n	80054fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80054f8:	2301      	movs	r3, #1
 80054fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80054fc:	4b11      	ldr	r3, [pc, #68]	; (8005544 <xTaskIncrementTick+0x16c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d007      	beq.n	8005514 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005504:	2301      	movs	r3, #1
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	e004      	b.n	8005514 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800550a:	4b0f      	ldr	r3, [pc, #60]	; (8005548 <xTaskIncrementTick+0x170>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3301      	adds	r3, #1
 8005510:	4a0d      	ldr	r2, [pc, #52]	; (8005548 <xTaskIncrementTick+0x170>)
 8005512:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005514:	697b      	ldr	r3, [r7, #20]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	20000dfc 	.word	0x20000dfc
 8005524:	20000dd8 	.word	0x20000dd8
 8005528:	20000d8c 	.word	0x20000d8c
 800552c:	20000d90 	.word	0x20000d90
 8005530:	20000dec 	.word	0x20000dec
 8005534:	20000df4 	.word	0x20000df4
 8005538:	20000ddc 	.word	0x20000ddc
 800553c:	20000904 	.word	0x20000904
 8005540:	20000900 	.word	0x20000900
 8005544:	20000de8 	.word	0x20000de8
 8005548:	20000de4 	.word	0x20000de4

0800554c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005552:	4b2a      	ldr	r3, [pc, #168]	; (80055fc <vTaskSwitchContext+0xb0>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800555a:	4b29      	ldr	r3, [pc, #164]	; (8005600 <vTaskSwitchContext+0xb4>)
 800555c:	2201      	movs	r2, #1
 800555e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005560:	e046      	b.n	80055f0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005562:	4b27      	ldr	r3, [pc, #156]	; (8005600 <vTaskSwitchContext+0xb4>)
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005568:	4b26      	ldr	r3, [pc, #152]	; (8005604 <vTaskSwitchContext+0xb8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	60fb      	str	r3, [r7, #12]
 800556e:	e010      	b.n	8005592 <vTaskSwitchContext+0x46>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10a      	bne.n	800558c <vTaskSwitchContext+0x40>
	__asm volatile
 8005576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	607b      	str	r3, [r7, #4]
}
 8005588:	bf00      	nop
 800558a:	e7fe      	b.n	800558a <vTaskSwitchContext+0x3e>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3b01      	subs	r3, #1
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	491d      	ldr	r1, [pc, #116]	; (8005608 <vTaskSwitchContext+0xbc>)
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4613      	mov	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	440b      	add	r3, r1
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0e4      	beq.n	8005570 <vTaskSwitchContext+0x24>
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4613      	mov	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4a15      	ldr	r2, [pc, #84]	; (8005608 <vTaskSwitchContext+0xbc>)
 80055b2:	4413      	add	r3, r2
 80055b4:	60bb      	str	r3, [r7, #8]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	605a      	str	r2, [r3, #4]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	3308      	adds	r3, #8
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d104      	bne.n	80055d6 <vTaskSwitchContext+0x8a>
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	605a      	str	r2, [r3, #4]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	4a0b      	ldr	r2, [pc, #44]	; (800560c <vTaskSwitchContext+0xc0>)
 80055de:	6013      	str	r3, [r2, #0]
 80055e0:	4a08      	ldr	r2, [pc, #32]	; (8005604 <vTaskSwitchContext+0xb8>)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80055e6:	4b09      	ldr	r3, [pc, #36]	; (800560c <vTaskSwitchContext+0xc0>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3354      	adds	r3, #84	; 0x54
 80055ec:	4a08      	ldr	r2, [pc, #32]	; (8005610 <vTaskSwitchContext+0xc4>)
 80055ee:	6013      	str	r3, [r2, #0]
}
 80055f0:	bf00      	nop
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	20000dfc 	.word	0x20000dfc
 8005600:	20000de8 	.word	0x20000de8
 8005604:	20000ddc 	.word	0x20000ddc
 8005608:	20000904 	.word	0x20000904
 800560c:	20000900 	.word	0x20000900
 8005610:	20000064 	.word	0x20000064

08005614 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10a      	bne.n	800563a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	60fb      	str	r3, [r7, #12]
}
 8005636:	bf00      	nop
 8005638:	e7fe      	b.n	8005638 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800563a:	4b07      	ldr	r3, [pc, #28]	; (8005658 <vTaskPlaceOnEventList+0x44>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3318      	adds	r3, #24
 8005640:	4619      	mov	r1, r3
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fe fc4d 	bl	8003ee2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005648:	2101      	movs	r1, #1
 800564a:	6838      	ldr	r0, [r7, #0]
 800564c:	f000 fb8e 	bl	8005d6c <prvAddCurrentTaskToDelayedList>
}
 8005650:	bf00      	nop
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	20000900 	.word	0x20000900

0800565c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10a      	bne.n	8005684 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	617b      	str	r3, [r7, #20]
}
 8005680:	bf00      	nop
 8005682:	e7fe      	b.n	8005682 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005684:	4b0a      	ldr	r3, [pc, #40]	; (80056b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3318      	adds	r3, #24
 800568a:	4619      	mov	r1, r3
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f7fe fc04 	bl	8003e9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800569c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	68b8      	ldr	r0, [r7, #8]
 80056a2:	f000 fb63 	bl	8005d6c <prvAddCurrentTaskToDelayedList>
	}
 80056a6:	bf00      	nop
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	20000900 	.word	0x20000900

080056b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10a      	bne.n	80056e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80056ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	60fb      	str	r3, [r7, #12]
}
 80056dc:	bf00      	nop
 80056de:	e7fe      	b.n	80056de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	3318      	adds	r3, #24
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7fe fc35 	bl	8003f54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ea:	4b1e      	ldr	r3, [pc, #120]	; (8005764 <xTaskRemoveFromEventList+0xb0>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d11d      	bne.n	800572e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	3304      	adds	r3, #4
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fe fc2c 	bl	8003f54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005700:	4b19      	ldr	r3, [pc, #100]	; (8005768 <xTaskRemoveFromEventList+0xb4>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	429a      	cmp	r2, r3
 8005706:	d903      	bls.n	8005710 <xTaskRemoveFromEventList+0x5c>
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570c:	4a16      	ldr	r2, [pc, #88]	; (8005768 <xTaskRemoveFromEventList+0xb4>)
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005714:	4613      	mov	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4a13      	ldr	r2, [pc, #76]	; (800576c <xTaskRemoveFromEventList+0xb8>)
 800571e:	441a      	add	r2, r3
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	3304      	adds	r3, #4
 8005724:	4619      	mov	r1, r3
 8005726:	4610      	mov	r0, r2
 8005728:	f7fe fbb7 	bl	8003e9a <vListInsertEnd>
 800572c:	e005      	b.n	800573a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	3318      	adds	r3, #24
 8005732:	4619      	mov	r1, r3
 8005734:	480e      	ldr	r0, [pc, #56]	; (8005770 <xTaskRemoveFromEventList+0xbc>)
 8005736:	f7fe fbb0 	bl	8003e9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573e:	4b0d      	ldr	r3, [pc, #52]	; (8005774 <xTaskRemoveFromEventList+0xc0>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005744:	429a      	cmp	r2, r3
 8005746:	d905      	bls.n	8005754 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005748:	2301      	movs	r3, #1
 800574a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800574c:	4b0a      	ldr	r3, [pc, #40]	; (8005778 <xTaskRemoveFromEventList+0xc4>)
 800574e:	2201      	movs	r2, #1
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	e001      	b.n	8005758 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005754:	2300      	movs	r3, #0
 8005756:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005758:	697b      	ldr	r3, [r7, #20]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20000dfc 	.word	0x20000dfc
 8005768:	20000ddc 	.word	0x20000ddc
 800576c:	20000904 	.word	0x20000904
 8005770:	20000d94 	.word	0x20000d94
 8005774:	20000900 	.word	0x20000900
 8005778:	20000de8 	.word	0x20000de8

0800577c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005784:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <vTaskInternalSetTimeOutState+0x24>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800578c:	4b05      	ldr	r3, [pc, #20]	; (80057a4 <vTaskInternalSetTimeOutState+0x28>)
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	605a      	str	r2, [r3, #4]
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	20000dec 	.word	0x20000dec
 80057a4:	20000dd8 	.word	0x20000dd8

080057a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b088      	sub	sp, #32
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10a      	bne.n	80057ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80057b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	613b      	str	r3, [r7, #16]
}
 80057ca:	bf00      	nop
 80057cc:	e7fe      	b.n	80057cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10a      	bne.n	80057ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	60fb      	str	r3, [r7, #12]
}
 80057e6:	bf00      	nop
 80057e8:	e7fe      	b.n	80057e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80057ea:	f000 ff8b 	bl	8006704 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80057ee:	4b1d      	ldr	r3, [pc, #116]	; (8005864 <xTaskCheckForTimeOut+0xbc>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005806:	d102      	bne.n	800580e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005808:	2300      	movs	r3, #0
 800580a:	61fb      	str	r3, [r7, #28]
 800580c:	e023      	b.n	8005856 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	4b15      	ldr	r3, [pc, #84]	; (8005868 <xTaskCheckForTimeOut+0xc0>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d007      	beq.n	800582a <xTaskCheckForTimeOut+0x82>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	429a      	cmp	r2, r3
 8005822:	d302      	bcc.n	800582a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005824:	2301      	movs	r3, #1
 8005826:	61fb      	str	r3, [r7, #28]
 8005828:	e015      	b.n	8005856 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	429a      	cmp	r2, r3
 8005832:	d20b      	bcs.n	800584c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	1ad2      	subs	r2, r2, r3
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff ff9b 	bl	800577c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005846:	2300      	movs	r3, #0
 8005848:	61fb      	str	r3, [r7, #28]
 800584a:	e004      	b.n	8005856 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	2200      	movs	r2, #0
 8005850:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005852:	2301      	movs	r3, #1
 8005854:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005856:	f000 ff85 	bl	8006764 <vPortExitCritical>

	return xReturn;
 800585a:	69fb      	ldr	r3, [r7, #28]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3720      	adds	r7, #32
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	20000dd8 	.word	0x20000dd8
 8005868:	20000dec 	.word	0x20000dec

0800586c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005870:	4b03      	ldr	r3, [pc, #12]	; (8005880 <vTaskMissedYield+0x14>)
 8005872:	2201      	movs	r2, #1
 8005874:	601a      	str	r2, [r3, #0]
}
 8005876:	bf00      	nop
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	20000de8 	.word	0x20000de8

08005884 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800588c:	f000 f852 	bl	8005934 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005890:	4b06      	ldr	r3, [pc, #24]	; (80058ac <prvIdleTask+0x28>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d9f9      	bls.n	800588c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005898:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <prvIdleTask+0x2c>)
 800589a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80058a8:	e7f0      	b.n	800588c <prvIdleTask+0x8>
 80058aa:	bf00      	nop
 80058ac:	20000904 	.word	0x20000904
 80058b0:	e000ed04 	.word	0xe000ed04

080058b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058ba:	2300      	movs	r3, #0
 80058bc:	607b      	str	r3, [r7, #4]
 80058be:	e00c      	b.n	80058da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	4613      	mov	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4a12      	ldr	r2, [pc, #72]	; (8005914 <prvInitialiseTaskLists+0x60>)
 80058cc:	4413      	add	r3, r2
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fe fab6 	bl	8003e40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3301      	adds	r3, #1
 80058d8:	607b      	str	r3, [r7, #4]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b37      	cmp	r3, #55	; 0x37
 80058de:	d9ef      	bls.n	80058c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058e0:	480d      	ldr	r0, [pc, #52]	; (8005918 <prvInitialiseTaskLists+0x64>)
 80058e2:	f7fe faad 	bl	8003e40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058e6:	480d      	ldr	r0, [pc, #52]	; (800591c <prvInitialiseTaskLists+0x68>)
 80058e8:	f7fe faaa 	bl	8003e40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058ec:	480c      	ldr	r0, [pc, #48]	; (8005920 <prvInitialiseTaskLists+0x6c>)
 80058ee:	f7fe faa7 	bl	8003e40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058f2:	480c      	ldr	r0, [pc, #48]	; (8005924 <prvInitialiseTaskLists+0x70>)
 80058f4:	f7fe faa4 	bl	8003e40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058f8:	480b      	ldr	r0, [pc, #44]	; (8005928 <prvInitialiseTaskLists+0x74>)
 80058fa:	f7fe faa1 	bl	8003e40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058fe:	4b0b      	ldr	r3, [pc, #44]	; (800592c <prvInitialiseTaskLists+0x78>)
 8005900:	4a05      	ldr	r2, [pc, #20]	; (8005918 <prvInitialiseTaskLists+0x64>)
 8005902:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005904:	4b0a      	ldr	r3, [pc, #40]	; (8005930 <prvInitialiseTaskLists+0x7c>)
 8005906:	4a05      	ldr	r2, [pc, #20]	; (800591c <prvInitialiseTaskLists+0x68>)
 8005908:	601a      	str	r2, [r3, #0]
}
 800590a:	bf00      	nop
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	20000904 	.word	0x20000904
 8005918:	20000d64 	.word	0x20000d64
 800591c:	20000d78 	.word	0x20000d78
 8005920:	20000d94 	.word	0x20000d94
 8005924:	20000da8 	.word	0x20000da8
 8005928:	20000dc0 	.word	0x20000dc0
 800592c:	20000d8c 	.word	0x20000d8c
 8005930:	20000d90 	.word	0x20000d90

08005934 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800593a:	e019      	b.n	8005970 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800593c:	f000 fee2 	bl	8006704 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005940:	4b10      	ldr	r3, [pc, #64]	; (8005984 <prvCheckTasksWaitingTermination+0x50>)
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3304      	adds	r3, #4
 800594c:	4618      	mov	r0, r3
 800594e:	f7fe fb01 	bl	8003f54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005952:	4b0d      	ldr	r3, [pc, #52]	; (8005988 <prvCheckTasksWaitingTermination+0x54>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3b01      	subs	r3, #1
 8005958:	4a0b      	ldr	r2, [pc, #44]	; (8005988 <prvCheckTasksWaitingTermination+0x54>)
 800595a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800595c:	4b0b      	ldr	r3, [pc, #44]	; (800598c <prvCheckTasksWaitingTermination+0x58>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3b01      	subs	r3, #1
 8005962:	4a0a      	ldr	r2, [pc, #40]	; (800598c <prvCheckTasksWaitingTermination+0x58>)
 8005964:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005966:	f000 fefd 	bl	8006764 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f810 	bl	8005990 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005970:	4b06      	ldr	r3, [pc, #24]	; (800598c <prvCheckTasksWaitingTermination+0x58>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1e1      	bne.n	800593c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005978:	bf00      	nop
 800597a:	bf00      	nop
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20000da8 	.word	0x20000da8
 8005988:	20000dd4 	.word	0x20000dd4
 800598c:	20000dbc 	.word	0x20000dbc

08005990 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3354      	adds	r3, #84	; 0x54
 800599c:	4618      	mov	r0, r3
 800599e:	f001 fbcb 	bl	8007138 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d108      	bne.n	80059be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b0:	4618      	mov	r0, r3
 80059b2:	f001 f895 	bl	8006ae0 <vPortFree>
				vPortFree( pxTCB );
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f001 f892 	bl	8006ae0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80059bc:	e018      	b.n	80059f0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d103      	bne.n	80059d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f001 f889 	bl	8006ae0 <vPortFree>
	}
 80059ce:	e00f      	b.n	80059f0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d00a      	beq.n	80059f0 <prvDeleteTCB+0x60>
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	60fb      	str	r3, [r7, #12]
}
 80059ec:	bf00      	nop
 80059ee:	e7fe      	b.n	80059ee <prvDeleteTCB+0x5e>
	}
 80059f0:	bf00      	nop
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059fe:	4b0c      	ldr	r3, [pc, #48]	; (8005a30 <prvResetNextTaskUnblockTime+0x38>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d104      	bne.n	8005a12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a08:	4b0a      	ldr	r3, [pc, #40]	; (8005a34 <prvResetNextTaskUnblockTime+0x3c>)
 8005a0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a10:	e008      	b.n	8005a24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a12:	4b07      	ldr	r3, [pc, #28]	; (8005a30 <prvResetNextTaskUnblockTime+0x38>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	4a04      	ldr	r2, [pc, #16]	; (8005a34 <prvResetNextTaskUnblockTime+0x3c>)
 8005a22:	6013      	str	r3, [r2, #0]
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	20000d8c 	.word	0x20000d8c
 8005a34:	20000df4 	.word	0x20000df4

08005a38 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005a3e:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <xTaskGetCurrentTaskHandle+0x1c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005a44:	687b      	ldr	r3, [r7, #4]
	}
 8005a46:	4618      	mov	r0, r3
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	20000900 	.word	0x20000900

08005a58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a5e:	4b0b      	ldr	r3, [pc, #44]	; (8005a8c <xTaskGetSchedulerState+0x34>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d102      	bne.n	8005a6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a66:	2301      	movs	r3, #1
 8005a68:	607b      	str	r3, [r7, #4]
 8005a6a:	e008      	b.n	8005a7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a6c:	4b08      	ldr	r3, [pc, #32]	; (8005a90 <xTaskGetSchedulerState+0x38>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d102      	bne.n	8005a7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a74:	2302      	movs	r3, #2
 8005a76:	607b      	str	r3, [r7, #4]
 8005a78:	e001      	b.n	8005a7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a7e:	687b      	ldr	r3, [r7, #4]
	}
 8005a80:	4618      	mov	r0, r3
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	20000de0 	.word	0x20000de0
 8005a90:	20000dfc 	.word	0x20000dfc

08005a94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d051      	beq.n	8005b4e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aae:	4b2a      	ldr	r3, [pc, #168]	; (8005b58 <xTaskPriorityInherit+0xc4>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d241      	bcs.n	8005b3c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	db06      	blt.n	8005ace <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ac0:	4b25      	ldr	r3, [pc, #148]	; (8005b58 <xTaskPriorityInherit+0xc4>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	6959      	ldr	r1, [r3, #20]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4a1f      	ldr	r2, [pc, #124]	; (8005b5c <xTaskPriorityInherit+0xc8>)
 8005ae0:	4413      	add	r3, r2
 8005ae2:	4299      	cmp	r1, r3
 8005ae4:	d122      	bne.n	8005b2c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	3304      	adds	r3, #4
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fe fa32 	bl	8003f54 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005af0:	4b19      	ldr	r3, [pc, #100]	; (8005b58 <xTaskPriorityInherit+0xc4>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afe:	4b18      	ldr	r3, [pc, #96]	; (8005b60 <xTaskPriorityInherit+0xcc>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d903      	bls.n	8005b0e <xTaskPriorityInherit+0x7a>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0a:	4a15      	ldr	r2, [pc, #84]	; (8005b60 <xTaskPriorityInherit+0xcc>)
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4a10      	ldr	r2, [pc, #64]	; (8005b5c <xTaskPriorityInherit+0xc8>)
 8005b1c:	441a      	add	r2, r3
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	3304      	adds	r3, #4
 8005b22:	4619      	mov	r1, r3
 8005b24:	4610      	mov	r0, r2
 8005b26:	f7fe f9b8 	bl	8003e9a <vListInsertEnd>
 8005b2a:	e004      	b.n	8005b36 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b2c:	4b0a      	ldr	r3, [pc, #40]	; (8005b58 <xTaskPriorityInherit+0xc4>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005b36:	2301      	movs	r3, #1
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	e008      	b.n	8005b4e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b40:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <xTaskPriorityInherit+0xc4>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d201      	bcs.n	8005b4e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
	}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20000900 	.word	0x20000900
 8005b5c:	20000904 	.word	0x20000904
 8005b60:	20000ddc 	.word	0x20000ddc

08005b64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005b70:	2300      	movs	r3, #0
 8005b72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d056      	beq.n	8005c28 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b7a:	4b2e      	ldr	r3, [pc, #184]	; (8005c34 <xTaskPriorityDisinherit+0xd0>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d00a      	beq.n	8005b9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	60fb      	str	r3, [r7, #12]
}
 8005b96:	bf00      	nop
 8005b98:	e7fe      	b.n	8005b98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10a      	bne.n	8005bb8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	60bb      	str	r3, [r7, #8]
}
 8005bb4:	bf00      	nop
 8005bb6:	e7fe      	b.n	8005bb6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bbc:	1e5a      	subs	r2, r3, #1
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d02c      	beq.n	8005c28 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d128      	bne.n	8005c28 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	3304      	adds	r3, #4
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fe f9ba 	bl	8003f54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf8:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <xTaskPriorityDisinherit+0xd4>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d903      	bls.n	8005c08 <xTaskPriorityDisinherit+0xa4>
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	4a0c      	ldr	r2, [pc, #48]	; (8005c38 <xTaskPriorityDisinherit+0xd4>)
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4a09      	ldr	r2, [pc, #36]	; (8005c3c <xTaskPriorityDisinherit+0xd8>)
 8005c16:	441a      	add	r2, r3
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	3304      	adds	r3, #4
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4610      	mov	r0, r2
 8005c20:	f7fe f93b 	bl	8003e9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005c24:	2301      	movs	r3, #1
 8005c26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c28:	697b      	ldr	r3, [r7, #20]
	}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	20000900 	.word	0x20000900
 8005c38:	20000ddc 	.word	0x20000ddc
 8005c3c:	20000904 	.word	0x20000904

08005c40 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b088      	sub	sp, #32
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d06a      	beq.n	8005d2e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10a      	bne.n	8005c76 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	60fb      	str	r3, [r7, #12]
}
 8005c72:	bf00      	nop
 8005c74:	e7fe      	b.n	8005c74 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d902      	bls.n	8005c86 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	61fb      	str	r3, [r7, #28]
 8005c84:	e002      	b.n	8005c8c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c8a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	69fa      	ldr	r2, [r7, #28]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d04b      	beq.n	8005d2e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d146      	bne.n	8005d2e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005ca0:	4b25      	ldr	r3, [pc, #148]	; (8005d38 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d10a      	bne.n	8005cc0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	60bb      	str	r3, [r7, #8]
}
 8005cbc:	bf00      	nop
 8005cbe:	e7fe      	b.n	8005cbe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	69fa      	ldr	r2, [r7, #28]
 8005cca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	db04      	blt.n	8005cde <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	6959      	ldr	r1, [r3, #20]
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4a13      	ldr	r2, [pc, #76]	; (8005d3c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005cee:	4413      	add	r3, r2
 8005cf0:	4299      	cmp	r1, r3
 8005cf2:	d11c      	bne.n	8005d2e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	3304      	adds	r3, #4
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fe f92b 	bl	8003f54 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d02:	4b0f      	ldr	r3, [pc, #60]	; (8005d40 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d903      	bls.n	8005d12 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0e:	4a0c      	ldr	r2, [pc, #48]	; (8005d40 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d16:	4613      	mov	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4a07      	ldr	r2, [pc, #28]	; (8005d3c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005d20:	441a      	add	r2, r3
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	3304      	adds	r3, #4
 8005d26:	4619      	mov	r1, r3
 8005d28:	4610      	mov	r0, r2
 8005d2a:	f7fe f8b6 	bl	8003e9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d2e:	bf00      	nop
 8005d30:	3720      	adds	r7, #32
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	20000900 	.word	0x20000900
 8005d3c:	20000904 	.word	0x20000904
 8005d40:	20000ddc 	.word	0x20000ddc

08005d44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005d48:	4b07      	ldr	r3, [pc, #28]	; (8005d68 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d004      	beq.n	8005d5a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005d50:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d56:	3201      	adds	r2, #1
 8005d58:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005d5a:	4b03      	ldr	r3, [pc, #12]	; (8005d68 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
	}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	20000900 	.word	0x20000900

08005d6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d76:	4b21      	ldr	r3, [pc, #132]	; (8005dfc <prvAddCurrentTaskToDelayedList+0x90>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d7c:	4b20      	ldr	r3, [pc, #128]	; (8005e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3304      	adds	r3, #4
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fe f8e6 	bl	8003f54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d8e:	d10a      	bne.n	8005da6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d007      	beq.n	8005da6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d96:	4b1a      	ldr	r3, [pc, #104]	; (8005e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3304      	adds	r3, #4
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4819      	ldr	r0, [pc, #100]	; (8005e04 <prvAddCurrentTaskToDelayedList+0x98>)
 8005da0:	f7fe f87b 	bl	8003e9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005da4:	e026      	b.n	8005df4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4413      	add	r3, r2
 8005dac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005dae:	4b14      	ldr	r3, [pc, #80]	; (8005e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d209      	bcs.n	8005dd2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dbe:	4b12      	ldr	r3, [pc, #72]	; (8005e08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4b0f      	ldr	r3, [pc, #60]	; (8005e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4610      	mov	r0, r2
 8005dcc:	f7fe f889 	bl	8003ee2 <vListInsert>
}
 8005dd0:	e010      	b.n	8005df4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dd2:	4b0e      	ldr	r3, [pc, #56]	; (8005e0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4b0a      	ldr	r3, [pc, #40]	; (8005e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	3304      	adds	r3, #4
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4610      	mov	r0, r2
 8005de0:	f7fe f87f 	bl	8003ee2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005de4:	4b0a      	ldr	r3, [pc, #40]	; (8005e10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d202      	bcs.n	8005df4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005dee:	4a08      	ldr	r2, [pc, #32]	; (8005e10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	6013      	str	r3, [r2, #0]
}
 8005df4:	bf00      	nop
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	20000dd8 	.word	0x20000dd8
 8005e00:	20000900 	.word	0x20000900
 8005e04:	20000dc0 	.word	0x20000dc0
 8005e08:	20000d90 	.word	0x20000d90
 8005e0c:	20000d8c 	.word	0x20000d8c
 8005e10:	20000df4 	.word	0x20000df4

08005e14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b08a      	sub	sp, #40	; 0x28
 8005e18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e1e:	f000 fb07 	bl	8006430 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e22:	4b1c      	ldr	r3, [pc, #112]	; (8005e94 <xTimerCreateTimerTask+0x80>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d021      	beq.n	8005e6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e32:	1d3a      	adds	r2, r7, #4
 8005e34:	f107 0108 	add.w	r1, r7, #8
 8005e38:	f107 030c 	add.w	r3, r7, #12
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fd ffe5 	bl	8003e0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	9202      	str	r2, [sp, #8]
 8005e4a:	9301      	str	r3, [sp, #4]
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	2300      	movs	r3, #0
 8005e52:	460a      	mov	r2, r1
 8005e54:	4910      	ldr	r1, [pc, #64]	; (8005e98 <xTimerCreateTimerTask+0x84>)
 8005e56:	4811      	ldr	r0, [pc, #68]	; (8005e9c <xTimerCreateTimerTask+0x88>)
 8005e58:	f7fe ffa6 	bl	8004da8 <xTaskCreateStatic>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	4a10      	ldr	r2, [pc, #64]	; (8005ea0 <xTimerCreateTimerTask+0x8c>)
 8005e60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e62:	4b0f      	ldr	r3, [pc, #60]	; (8005ea0 <xTimerCreateTimerTask+0x8c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10a      	bne.n	8005e8a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	613b      	str	r3, [r7, #16]
}
 8005e86:	bf00      	nop
 8005e88:	e7fe      	b.n	8005e88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005e8a:	697b      	ldr	r3, [r7, #20]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	20000e30 	.word	0x20000e30
 8005e98:	08007830 	.word	0x08007830
 8005e9c:	08005fd9 	.word	0x08005fd9
 8005ea0:	20000e34 	.word	0x20000e34

08005ea4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b08a      	sub	sp, #40	; 0x28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10a      	bne.n	8005ed2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec0:	f383 8811 	msr	BASEPRI, r3
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	623b      	str	r3, [r7, #32]
}
 8005ece:	bf00      	nop
 8005ed0:	e7fe      	b.n	8005ed0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005ed2:	4b1a      	ldr	r3, [pc, #104]	; (8005f3c <xTimerGenericCommand+0x98>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d02a      	beq.n	8005f30 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b05      	cmp	r3, #5
 8005eea:	dc18      	bgt.n	8005f1e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005eec:	f7ff fdb4 	bl	8005a58 <xTaskGetSchedulerState>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d109      	bne.n	8005f0a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ef6:	4b11      	ldr	r3, [pc, #68]	; (8005f3c <xTimerGenericCommand+0x98>)
 8005ef8:	6818      	ldr	r0, [r3, #0]
 8005efa:	f107 0110 	add.w	r1, r7, #16
 8005efe:	2300      	movs	r3, #0
 8005f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f02:	f7fe fa45 	bl	8004390 <xQueueGenericSend>
 8005f06:	6278      	str	r0, [r7, #36]	; 0x24
 8005f08:	e012      	b.n	8005f30 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f0a:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <xTimerGenericCommand+0x98>)
 8005f0c:	6818      	ldr	r0, [r3, #0]
 8005f0e:	f107 0110 	add.w	r1, r7, #16
 8005f12:	2300      	movs	r3, #0
 8005f14:	2200      	movs	r2, #0
 8005f16:	f7fe fa3b 	bl	8004390 <xQueueGenericSend>
 8005f1a:	6278      	str	r0, [r7, #36]	; 0x24
 8005f1c:	e008      	b.n	8005f30 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f1e:	4b07      	ldr	r3, [pc, #28]	; (8005f3c <xTimerGenericCommand+0x98>)
 8005f20:	6818      	ldr	r0, [r3, #0]
 8005f22:	f107 0110 	add.w	r1, r7, #16
 8005f26:	2300      	movs	r3, #0
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	f7fe fb2f 	bl	800458c <xQueueGenericSendFromISR>
 8005f2e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3728      	adds	r7, #40	; 0x28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20000e30 	.word	0x20000e30

08005f40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b088      	sub	sp, #32
 8005f44:	af02      	add	r7, sp, #8
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f4a:	4b22      	ldr	r3, [pc, #136]	; (8005fd4 <prvProcessExpiredTimer+0x94>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	3304      	adds	r3, #4
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7fd fffb 	bl	8003f54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d022      	beq.n	8005fb2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	699a      	ldr	r2, [r3, #24]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	18d1      	adds	r1, r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	6978      	ldr	r0, [r7, #20]
 8005f7a:	f000 f8d1 	bl	8006120 <prvInsertTimerInActiveList>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d01f      	beq.n	8005fc4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f84:	2300      	movs	r3, #0
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	2300      	movs	r3, #0
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	6978      	ldr	r0, [r7, #20]
 8005f90:	f7ff ff88 	bl	8005ea4 <xTimerGenericCommand>
 8005f94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d113      	bne.n	8005fc4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	60fb      	str	r3, [r7, #12]
}
 8005fae:	bf00      	nop
 8005fb0:	e7fe      	b.n	8005fb0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fb8:	f023 0301 	bic.w	r3, r3, #1
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	6978      	ldr	r0, [r7, #20]
 8005fca:	4798      	blx	r3
}
 8005fcc:	bf00      	nop
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	20000e28 	.word	0x20000e28

08005fd8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fe0:	f107 0308 	add.w	r3, r7, #8
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 f857 	bl	8006098 <prvGetNextExpireTime>
 8005fea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 f803 	bl	8005ffc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ff6:	f000 f8d5 	bl	80061a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ffa:	e7f1      	b.n	8005fe0 <prvTimerTask+0x8>

08005ffc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006006:	f7ff f92b 	bl	8005260 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800600a:	f107 0308 	add.w	r3, r7, #8
 800600e:	4618      	mov	r0, r3
 8006010:	f000 f866 	bl	80060e0 <prvSampleTimeNow>
 8006014:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d130      	bne.n	800607e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10a      	bne.n	8006038 <prvProcessTimerOrBlockTask+0x3c>
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	429a      	cmp	r2, r3
 8006028:	d806      	bhi.n	8006038 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800602a:	f7ff f927 	bl	800527c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800602e:	68f9      	ldr	r1, [r7, #12]
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7ff ff85 	bl	8005f40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006036:	e024      	b.n	8006082 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d008      	beq.n	8006050 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800603e:	4b13      	ldr	r3, [pc, #76]	; (800608c <prvProcessTimerOrBlockTask+0x90>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <prvProcessTimerOrBlockTask+0x50>
 8006048:	2301      	movs	r3, #1
 800604a:	e000      	b.n	800604e <prvProcessTimerOrBlockTask+0x52>
 800604c:	2300      	movs	r3, #0
 800604e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006050:	4b0f      	ldr	r3, [pc, #60]	; (8006090 <prvProcessTimerOrBlockTask+0x94>)
 8006052:	6818      	ldr	r0, [r3, #0]
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	4619      	mov	r1, r3
 800605e:	f7fe fe6f 	bl	8004d40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006062:	f7ff f90b 	bl	800527c <xTaskResumeAll>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10a      	bne.n	8006082 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800606c:	4b09      	ldr	r3, [pc, #36]	; (8006094 <prvProcessTimerOrBlockTask+0x98>)
 800606e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	f3bf 8f6f 	isb	sy
}
 800607c:	e001      	b.n	8006082 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800607e:	f7ff f8fd 	bl	800527c <xTaskResumeAll>
}
 8006082:	bf00      	nop
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	20000e2c 	.word	0x20000e2c
 8006090:	20000e30 	.word	0x20000e30
 8006094:	e000ed04 	.word	0xe000ed04

08006098 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80060a0:	4b0e      	ldr	r3, [pc, #56]	; (80060dc <prvGetNextExpireTime+0x44>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <prvGetNextExpireTime+0x16>
 80060aa:	2201      	movs	r2, #1
 80060ac:	e000      	b.n	80060b0 <prvGetNextExpireTime+0x18>
 80060ae:	2200      	movs	r2, #0
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d105      	bne.n	80060c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060bc:	4b07      	ldr	r3, [pc, #28]	; (80060dc <prvGetNextExpireTime+0x44>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	60fb      	str	r3, [r7, #12]
 80060c6:	e001      	b.n	80060cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80060cc:	68fb      	ldr	r3, [r7, #12]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	20000e28 	.word	0x20000e28

080060e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80060e8:	f7ff f966 	bl	80053b8 <xTaskGetTickCount>
 80060ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80060ee:	4b0b      	ldr	r3, [pc, #44]	; (800611c <prvSampleTimeNow+0x3c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d205      	bcs.n	8006104 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80060f8:	f000 f936 	bl	8006368 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	e002      	b.n	800610a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800610a:	4a04      	ldr	r2, [pc, #16]	; (800611c <prvSampleTimeNow+0x3c>)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006110:	68fb      	ldr	r3, [r7, #12]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	20000e38 	.word	0x20000e38

08006120 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	429a      	cmp	r2, r3
 8006144:	d812      	bhi.n	800616c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	1ad2      	subs	r2, r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	429a      	cmp	r2, r3
 8006152:	d302      	bcc.n	800615a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006154:	2301      	movs	r3, #1
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	e01b      	b.n	8006192 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800615a:	4b10      	ldr	r3, [pc, #64]	; (800619c <prvInsertTimerInActiveList+0x7c>)
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	3304      	adds	r3, #4
 8006162:	4619      	mov	r1, r3
 8006164:	4610      	mov	r0, r2
 8006166:	f7fd febc 	bl	8003ee2 <vListInsert>
 800616a:	e012      	b.n	8006192 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	429a      	cmp	r2, r3
 8006172:	d206      	bcs.n	8006182 <prvInsertTimerInActiveList+0x62>
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d302      	bcc.n	8006182 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800617c:	2301      	movs	r3, #1
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	e007      	b.n	8006192 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006182:	4b07      	ldr	r3, [pc, #28]	; (80061a0 <prvInsertTimerInActiveList+0x80>)
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3304      	adds	r3, #4
 800618a:	4619      	mov	r1, r3
 800618c:	4610      	mov	r0, r2
 800618e:	f7fd fea8 	bl	8003ee2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006192:	697b      	ldr	r3, [r7, #20]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	20000e2c 	.word	0x20000e2c
 80061a0:	20000e28 	.word	0x20000e28

080061a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b08e      	sub	sp, #56	; 0x38
 80061a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061aa:	e0ca      	b.n	8006342 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	da18      	bge.n	80061e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80061b2:	1d3b      	adds	r3, r7, #4
 80061b4:	3304      	adds	r3, #4
 80061b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80061b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10a      	bne.n	80061d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	61fb      	str	r3, [r7, #28]
}
 80061d0:	bf00      	nop
 80061d2:	e7fe      	b.n	80061d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061da:	6850      	ldr	r0, [r2, #4]
 80061dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061de:	6892      	ldr	r2, [r2, #8]
 80061e0:	4611      	mov	r1, r2
 80061e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f2c0 80ab 	blt.w	8006342 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d004      	beq.n	8006202 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	3304      	adds	r3, #4
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fd fea9 	bl	8003f54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006202:	463b      	mov	r3, r7
 8006204:	4618      	mov	r0, r3
 8006206:	f7ff ff6b 	bl	80060e0 <prvSampleTimeNow>
 800620a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b09      	cmp	r3, #9
 8006210:	f200 8096 	bhi.w	8006340 <prvProcessReceivedCommands+0x19c>
 8006214:	a201      	add	r2, pc, #4	; (adr r2, 800621c <prvProcessReceivedCommands+0x78>)
 8006216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621a:	bf00      	nop
 800621c:	08006245 	.word	0x08006245
 8006220:	08006245 	.word	0x08006245
 8006224:	08006245 	.word	0x08006245
 8006228:	080062b9 	.word	0x080062b9
 800622c:	080062cd 	.word	0x080062cd
 8006230:	08006317 	.word	0x08006317
 8006234:	08006245 	.word	0x08006245
 8006238:	08006245 	.word	0x08006245
 800623c:	080062b9 	.word	0x080062b9
 8006240:	080062cd 	.word	0x080062cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800624a:	f043 0301 	orr.w	r3, r3, #1
 800624e:	b2da      	uxtb	r2, r3
 8006250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	18d1      	adds	r1, r2, r3
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006264:	f7ff ff5c 	bl	8006120 <prvInsertTimerInActiveList>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d069      	beq.n	8006342 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006274:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b00      	cmp	r3, #0
 8006282:	d05e      	beq.n	8006342 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	441a      	add	r2, r3
 800628c:	2300      	movs	r3, #0
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	2300      	movs	r3, #0
 8006292:	2100      	movs	r1, #0
 8006294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006296:	f7ff fe05 	bl	8005ea4 <xTimerGenericCommand>
 800629a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d14f      	bne.n	8006342 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	61bb      	str	r3, [r7, #24]
}
 80062b4:	bf00      	nop
 80062b6:	e7fe      	b.n	80062b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062be:	f023 0301 	bic.w	r3, r3, #1
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80062ca:	e03a      	b.n	8006342 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062d2:	f043 0301 	orr.w	r3, r3, #1
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80062e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10a      	bne.n	8006302 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80062ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	617b      	str	r3, [r7, #20]
}
 80062fe:	bf00      	nop
 8006300:	e7fe      	b.n	8006300 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	699a      	ldr	r2, [r3, #24]
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	18d1      	adds	r1, r2, r3
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800630e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006310:	f7ff ff06 	bl	8006120 <prvInsertTimerInActiveList>
					break;
 8006314:	e015      	b.n	8006342 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d103      	bne.n	800632c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006326:	f000 fbdb 	bl	8006ae0 <vPortFree>
 800632a:	e00a      	b.n	8006342 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006332:	f023 0301 	bic.w	r3, r3, #1
 8006336:	b2da      	uxtb	r2, r3
 8006338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800633e:	e000      	b.n	8006342 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006340:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006342:	4b08      	ldr	r3, [pc, #32]	; (8006364 <prvProcessReceivedCommands+0x1c0>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	1d39      	adds	r1, r7, #4
 8006348:	2200      	movs	r2, #0
 800634a:	4618      	mov	r0, r3
 800634c:	f7fe f9ba 	bl	80046c4 <xQueueReceive>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	f47f af2a 	bne.w	80061ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006358:	bf00      	nop
 800635a:	bf00      	nop
 800635c:	3730      	adds	r7, #48	; 0x30
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20000e30 	.word	0x20000e30

08006368 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800636e:	e048      	b.n	8006402 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006370:	4b2d      	ldr	r3, [pc, #180]	; (8006428 <prvSwitchTimerLists+0xc0>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800637a:	4b2b      	ldr	r3, [pc, #172]	; (8006428 <prvSwitchTimerLists+0xc0>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3304      	adds	r3, #4
 8006388:	4618      	mov	r0, r3
 800638a:	f7fd fde3 	bl	8003f54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d02e      	beq.n	8006402 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	4413      	add	r3, r2
 80063ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d90e      	bls.n	80063d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063c2:	4b19      	ldr	r3, [pc, #100]	; (8006428 <prvSwitchTimerLists+0xc0>)
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3304      	adds	r3, #4
 80063ca:	4619      	mov	r1, r3
 80063cc:	4610      	mov	r0, r2
 80063ce:	f7fd fd88 	bl	8003ee2 <vListInsert>
 80063d2:	e016      	b.n	8006402 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063d4:	2300      	movs	r3, #0
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	2300      	movs	r3, #0
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	2100      	movs	r1, #0
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f7ff fd60 	bl	8005ea4 <xTimerGenericCommand>
 80063e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10a      	bne.n	8006402 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	603b      	str	r3, [r7, #0]
}
 80063fe:	bf00      	nop
 8006400:	e7fe      	b.n	8006400 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006402:	4b09      	ldr	r3, [pc, #36]	; (8006428 <prvSwitchTimerLists+0xc0>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1b1      	bne.n	8006370 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800640c:	4b06      	ldr	r3, [pc, #24]	; (8006428 <prvSwitchTimerLists+0xc0>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006412:	4b06      	ldr	r3, [pc, #24]	; (800642c <prvSwitchTimerLists+0xc4>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a04      	ldr	r2, [pc, #16]	; (8006428 <prvSwitchTimerLists+0xc0>)
 8006418:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800641a:	4a04      	ldr	r2, [pc, #16]	; (800642c <prvSwitchTimerLists+0xc4>)
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	6013      	str	r3, [r2, #0]
}
 8006420:	bf00      	nop
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	20000e28 	.word	0x20000e28
 800642c:	20000e2c 	.word	0x20000e2c

08006430 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006436:	f000 f965 	bl	8006704 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800643a:	4b15      	ldr	r3, [pc, #84]	; (8006490 <prvCheckForValidListAndQueue+0x60>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d120      	bne.n	8006484 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006442:	4814      	ldr	r0, [pc, #80]	; (8006494 <prvCheckForValidListAndQueue+0x64>)
 8006444:	f7fd fcfc 	bl	8003e40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006448:	4813      	ldr	r0, [pc, #76]	; (8006498 <prvCheckForValidListAndQueue+0x68>)
 800644a:	f7fd fcf9 	bl	8003e40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800644e:	4b13      	ldr	r3, [pc, #76]	; (800649c <prvCheckForValidListAndQueue+0x6c>)
 8006450:	4a10      	ldr	r2, [pc, #64]	; (8006494 <prvCheckForValidListAndQueue+0x64>)
 8006452:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006454:	4b12      	ldr	r3, [pc, #72]	; (80064a0 <prvCheckForValidListAndQueue+0x70>)
 8006456:	4a10      	ldr	r2, [pc, #64]	; (8006498 <prvCheckForValidListAndQueue+0x68>)
 8006458:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800645a:	2300      	movs	r3, #0
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	4b11      	ldr	r3, [pc, #68]	; (80064a4 <prvCheckForValidListAndQueue+0x74>)
 8006460:	4a11      	ldr	r2, [pc, #68]	; (80064a8 <prvCheckForValidListAndQueue+0x78>)
 8006462:	2110      	movs	r1, #16
 8006464:	200a      	movs	r0, #10
 8006466:	f7fd fe07 	bl	8004078 <xQueueGenericCreateStatic>
 800646a:	4603      	mov	r3, r0
 800646c:	4a08      	ldr	r2, [pc, #32]	; (8006490 <prvCheckForValidListAndQueue+0x60>)
 800646e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006470:	4b07      	ldr	r3, [pc, #28]	; (8006490 <prvCheckForValidListAndQueue+0x60>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d005      	beq.n	8006484 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006478:	4b05      	ldr	r3, [pc, #20]	; (8006490 <prvCheckForValidListAndQueue+0x60>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	490b      	ldr	r1, [pc, #44]	; (80064ac <prvCheckForValidListAndQueue+0x7c>)
 800647e:	4618      	mov	r0, r3
 8006480:	f7fe fc34 	bl	8004cec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006484:	f000 f96e 	bl	8006764 <vPortExitCritical>
}
 8006488:	bf00      	nop
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20000e30 	.word	0x20000e30
 8006494:	20000e00 	.word	0x20000e00
 8006498:	20000e14 	.word	0x20000e14
 800649c:	20000e28 	.word	0x20000e28
 80064a0:	20000e2c 	.word	0x20000e2c
 80064a4:	20000edc 	.word	0x20000edc
 80064a8:	20000e3c 	.word	0x20000e3c
 80064ac:	08007838 	.word	0x08007838

080064b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	3b04      	subs	r3, #4
 80064c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80064c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3b04      	subs	r3, #4
 80064ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f023 0201 	bic.w	r2, r3, #1
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3b04      	subs	r3, #4
 80064de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064e0:	4a0c      	ldr	r2, [pc, #48]	; (8006514 <pxPortInitialiseStack+0x64>)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3b14      	subs	r3, #20
 80064ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3b04      	subs	r3, #4
 80064f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f06f 0202 	mvn.w	r2, #2
 80064fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3b20      	subs	r3, #32
 8006504:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006506:	68fb      	ldr	r3, [r7, #12]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3714      	adds	r7, #20
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr
 8006514:	08006519 	.word	0x08006519

08006518 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800651e:	2300      	movs	r3, #0
 8006520:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006522:	4b12      	ldr	r3, [pc, #72]	; (800656c <prvTaskExitError+0x54>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800652a:	d00a      	beq.n	8006542 <prvTaskExitError+0x2a>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	60fb      	str	r3, [r7, #12]
}
 800653e:	bf00      	nop
 8006540:	e7fe      	b.n	8006540 <prvTaskExitError+0x28>
	__asm volatile
 8006542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	60bb      	str	r3, [r7, #8]
}
 8006554:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006556:	bf00      	nop
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0fc      	beq.n	8006558 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800655e:	bf00      	nop
 8006560:	bf00      	nop
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	20000008 	.word	0x20000008

08006570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006570:	4b07      	ldr	r3, [pc, #28]	; (8006590 <pxCurrentTCBConst2>)
 8006572:	6819      	ldr	r1, [r3, #0]
 8006574:	6808      	ldr	r0, [r1, #0]
 8006576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657a:	f380 8809 	msr	PSP, r0
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	f04f 0000 	mov.w	r0, #0
 8006586:	f380 8811 	msr	BASEPRI, r0
 800658a:	4770      	bx	lr
 800658c:	f3af 8000 	nop.w

08006590 <pxCurrentTCBConst2>:
 8006590:	20000900 	.word	0x20000900
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006594:	bf00      	nop
 8006596:	bf00      	nop

08006598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006598:	4808      	ldr	r0, [pc, #32]	; (80065bc <prvPortStartFirstTask+0x24>)
 800659a:	6800      	ldr	r0, [r0, #0]
 800659c:	6800      	ldr	r0, [r0, #0]
 800659e:	f380 8808 	msr	MSP, r0
 80065a2:	f04f 0000 	mov.w	r0, #0
 80065a6:	f380 8814 	msr	CONTROL, r0
 80065aa:	b662      	cpsie	i
 80065ac:	b661      	cpsie	f
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	df00      	svc	0
 80065b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80065ba:	bf00      	nop
 80065bc:	e000ed08 	.word	0xe000ed08

080065c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80065c6:	4b46      	ldr	r3, [pc, #280]	; (80066e0 <xPortStartScheduler+0x120>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a46      	ldr	r2, [pc, #280]	; (80066e4 <xPortStartScheduler+0x124>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d10a      	bne.n	80065e6 <xPortStartScheduler+0x26>
	__asm volatile
 80065d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	613b      	str	r3, [r7, #16]
}
 80065e2:	bf00      	nop
 80065e4:	e7fe      	b.n	80065e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065e6:	4b3e      	ldr	r3, [pc, #248]	; (80066e0 <xPortStartScheduler+0x120>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a3f      	ldr	r2, [pc, #252]	; (80066e8 <xPortStartScheduler+0x128>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d10a      	bne.n	8006606 <xPortStartScheduler+0x46>
	__asm volatile
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	60fb      	str	r3, [r7, #12]
}
 8006602:	bf00      	nop
 8006604:	e7fe      	b.n	8006604 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006606:	4b39      	ldr	r3, [pc, #228]	; (80066ec <xPortStartScheduler+0x12c>)
 8006608:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	b2db      	uxtb	r3, r3
 8006610:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	22ff      	movs	r2, #255	; 0xff
 8006616:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	b2db      	uxtb	r3, r3
 800661e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006620:	78fb      	ldrb	r3, [r7, #3]
 8006622:	b2db      	uxtb	r3, r3
 8006624:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006628:	b2da      	uxtb	r2, r3
 800662a:	4b31      	ldr	r3, [pc, #196]	; (80066f0 <xPortStartScheduler+0x130>)
 800662c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800662e:	4b31      	ldr	r3, [pc, #196]	; (80066f4 <xPortStartScheduler+0x134>)
 8006630:	2207      	movs	r2, #7
 8006632:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006634:	e009      	b.n	800664a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006636:	4b2f      	ldr	r3, [pc, #188]	; (80066f4 <xPortStartScheduler+0x134>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3b01      	subs	r3, #1
 800663c:	4a2d      	ldr	r2, [pc, #180]	; (80066f4 <xPortStartScheduler+0x134>)
 800663e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006640:	78fb      	ldrb	r3, [r7, #3]
 8006642:	b2db      	uxtb	r3, r3
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	b2db      	uxtb	r3, r3
 8006648:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800664a:	78fb      	ldrb	r3, [r7, #3]
 800664c:	b2db      	uxtb	r3, r3
 800664e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006652:	2b80      	cmp	r3, #128	; 0x80
 8006654:	d0ef      	beq.n	8006636 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006656:	4b27      	ldr	r3, [pc, #156]	; (80066f4 <xPortStartScheduler+0x134>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f1c3 0307 	rsb	r3, r3, #7
 800665e:	2b04      	cmp	r3, #4
 8006660:	d00a      	beq.n	8006678 <xPortStartScheduler+0xb8>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	60bb      	str	r3, [r7, #8]
}
 8006674:	bf00      	nop
 8006676:	e7fe      	b.n	8006676 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006678:	4b1e      	ldr	r3, [pc, #120]	; (80066f4 <xPortStartScheduler+0x134>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	021b      	lsls	r3, r3, #8
 800667e:	4a1d      	ldr	r2, [pc, #116]	; (80066f4 <xPortStartScheduler+0x134>)
 8006680:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006682:	4b1c      	ldr	r3, [pc, #112]	; (80066f4 <xPortStartScheduler+0x134>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800668a:	4a1a      	ldr	r2, [pc, #104]	; (80066f4 <xPortStartScheduler+0x134>)
 800668c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	b2da      	uxtb	r2, r3
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006696:	4b18      	ldr	r3, [pc, #96]	; (80066f8 <xPortStartScheduler+0x138>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a17      	ldr	r2, [pc, #92]	; (80066f8 <xPortStartScheduler+0x138>)
 800669c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066a2:	4b15      	ldr	r3, [pc, #84]	; (80066f8 <xPortStartScheduler+0x138>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a14      	ldr	r2, [pc, #80]	; (80066f8 <xPortStartScheduler+0x138>)
 80066a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80066ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066ae:	f000 f8dd 	bl	800686c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066b2:	4b12      	ldr	r3, [pc, #72]	; (80066fc <xPortStartScheduler+0x13c>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80066b8:	f000 f8fc 	bl	80068b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066bc:	4b10      	ldr	r3, [pc, #64]	; (8006700 <xPortStartScheduler+0x140>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a0f      	ldr	r2, [pc, #60]	; (8006700 <xPortStartScheduler+0x140>)
 80066c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80066c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80066c8:	f7ff ff66 	bl	8006598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80066cc:	f7fe ff3e 	bl	800554c <vTaskSwitchContext>
	prvTaskExitError();
 80066d0:	f7ff ff22 	bl	8006518 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	e000ed00 	.word	0xe000ed00
 80066e4:	410fc271 	.word	0x410fc271
 80066e8:	410fc270 	.word	0x410fc270
 80066ec:	e000e400 	.word	0xe000e400
 80066f0:	20000f2c 	.word	0x20000f2c
 80066f4:	20000f30 	.word	0x20000f30
 80066f8:	e000ed20 	.word	0xe000ed20
 80066fc:	20000008 	.word	0x20000008
 8006700:	e000ef34 	.word	0xe000ef34

08006704 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	607b      	str	r3, [r7, #4]
}
 800671c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800671e:	4b0f      	ldr	r3, [pc, #60]	; (800675c <vPortEnterCritical+0x58>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3301      	adds	r3, #1
 8006724:	4a0d      	ldr	r2, [pc, #52]	; (800675c <vPortEnterCritical+0x58>)
 8006726:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006728:	4b0c      	ldr	r3, [pc, #48]	; (800675c <vPortEnterCritical+0x58>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d10f      	bne.n	8006750 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006730:	4b0b      	ldr	r3, [pc, #44]	; (8006760 <vPortEnterCritical+0x5c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00a      	beq.n	8006750 <vPortEnterCritical+0x4c>
	__asm volatile
 800673a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	603b      	str	r3, [r7, #0]
}
 800674c:	bf00      	nop
 800674e:	e7fe      	b.n	800674e <vPortEnterCritical+0x4a>
	}
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	20000008 	.word	0x20000008
 8006760:	e000ed04 	.word	0xe000ed04

08006764 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800676a:	4b12      	ldr	r3, [pc, #72]	; (80067b4 <vPortExitCritical+0x50>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10a      	bne.n	8006788 <vPortExitCritical+0x24>
	__asm volatile
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	607b      	str	r3, [r7, #4]
}
 8006784:	bf00      	nop
 8006786:	e7fe      	b.n	8006786 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006788:	4b0a      	ldr	r3, [pc, #40]	; (80067b4 <vPortExitCritical+0x50>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3b01      	subs	r3, #1
 800678e:	4a09      	ldr	r2, [pc, #36]	; (80067b4 <vPortExitCritical+0x50>)
 8006790:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006792:	4b08      	ldr	r3, [pc, #32]	; (80067b4 <vPortExitCritical+0x50>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d105      	bne.n	80067a6 <vPortExitCritical+0x42>
 800679a:	2300      	movs	r3, #0
 800679c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	f383 8811 	msr	BASEPRI, r3
}
 80067a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	20000008 	.word	0x20000008
	...

080067c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80067c0:	f3ef 8009 	mrs	r0, PSP
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	4b15      	ldr	r3, [pc, #84]	; (8006820 <pxCurrentTCBConst>)
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	f01e 0f10 	tst.w	lr, #16
 80067d0:	bf08      	it	eq
 80067d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067da:	6010      	str	r0, [r2, #0]
 80067dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80067e4:	f380 8811 	msr	BASEPRI, r0
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f7fe feac 	bl	800554c <vTaskSwitchContext>
 80067f4:	f04f 0000 	mov.w	r0, #0
 80067f8:	f380 8811 	msr	BASEPRI, r0
 80067fc:	bc09      	pop	{r0, r3}
 80067fe:	6819      	ldr	r1, [r3, #0]
 8006800:	6808      	ldr	r0, [r1, #0]
 8006802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006806:	f01e 0f10 	tst.w	lr, #16
 800680a:	bf08      	it	eq
 800680c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006810:	f380 8809 	msr	PSP, r0
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	f3af 8000 	nop.w

08006820 <pxCurrentTCBConst>:
 8006820:	20000900 	.word	0x20000900
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop

08006828 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	607b      	str	r3, [r7, #4]
}
 8006840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006842:	f7fe fdc9 	bl	80053d8 <xTaskIncrementTick>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800684c:	4b06      	ldr	r3, [pc, #24]	; (8006868 <xPortSysTickHandler+0x40>)
 800684e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	2300      	movs	r3, #0
 8006856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	f383 8811 	msr	BASEPRI, r3
}
 800685e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006860:	bf00      	nop
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	e000ed04 	.word	0xe000ed04

0800686c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006870:	4b0b      	ldr	r3, [pc, #44]	; (80068a0 <vPortSetupTimerInterrupt+0x34>)
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006876:	4b0b      	ldr	r3, [pc, #44]	; (80068a4 <vPortSetupTimerInterrupt+0x38>)
 8006878:	2200      	movs	r2, #0
 800687a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800687c:	4b0a      	ldr	r3, [pc, #40]	; (80068a8 <vPortSetupTimerInterrupt+0x3c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a0a      	ldr	r2, [pc, #40]	; (80068ac <vPortSetupTimerInterrupt+0x40>)
 8006882:	fba2 2303 	umull	r2, r3, r2, r3
 8006886:	099b      	lsrs	r3, r3, #6
 8006888:	4a09      	ldr	r2, [pc, #36]	; (80068b0 <vPortSetupTimerInterrupt+0x44>)
 800688a:	3b01      	subs	r3, #1
 800688c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800688e:	4b04      	ldr	r3, [pc, #16]	; (80068a0 <vPortSetupTimerInterrupt+0x34>)
 8006890:	2207      	movs	r2, #7
 8006892:	601a      	str	r2, [r3, #0]
}
 8006894:	bf00      	nop
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	e000e010 	.word	0xe000e010
 80068a4:	e000e018 	.word	0xe000e018
 80068a8:	20000000 	.word	0x20000000
 80068ac:	10624dd3 	.word	0x10624dd3
 80068b0:	e000e014 	.word	0xe000e014

080068b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80068b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80068c4 <vPortEnableVFP+0x10>
 80068b8:	6801      	ldr	r1, [r0, #0]
 80068ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80068be:	6001      	str	r1, [r0, #0]
 80068c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80068c2:	bf00      	nop
 80068c4:	e000ed88 	.word	0xe000ed88

080068c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80068ce:	f3ef 8305 	mrs	r3, IPSR
 80068d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b0f      	cmp	r3, #15
 80068d8:	d914      	bls.n	8006904 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80068da:	4a17      	ldr	r2, [pc, #92]	; (8006938 <vPortValidateInterruptPriority+0x70>)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4413      	add	r3, r2
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068e4:	4b15      	ldr	r3, [pc, #84]	; (800693c <vPortValidateInterruptPriority+0x74>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	7afa      	ldrb	r2, [r7, #11]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d20a      	bcs.n	8006904 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80068ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	607b      	str	r3, [r7, #4]
}
 8006900:	bf00      	nop
 8006902:	e7fe      	b.n	8006902 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006904:	4b0e      	ldr	r3, [pc, #56]	; (8006940 <vPortValidateInterruptPriority+0x78>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800690c:	4b0d      	ldr	r3, [pc, #52]	; (8006944 <vPortValidateInterruptPriority+0x7c>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	429a      	cmp	r2, r3
 8006912:	d90a      	bls.n	800692a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	603b      	str	r3, [r7, #0]
}
 8006926:	bf00      	nop
 8006928:	e7fe      	b.n	8006928 <vPortValidateInterruptPriority+0x60>
	}
 800692a:	bf00      	nop
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	e000e3f0 	.word	0xe000e3f0
 800693c:	20000f2c 	.word	0x20000f2c
 8006940:	e000ed0c 	.word	0xe000ed0c
 8006944:	20000f30 	.word	0x20000f30

08006948 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b08a      	sub	sp, #40	; 0x28
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006950:	2300      	movs	r3, #0
 8006952:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006954:	f7fe fc84 	bl	8005260 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006958:	4b5b      	ldr	r3, [pc, #364]	; (8006ac8 <pvPortMalloc+0x180>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006960:	f000 f920 	bl	8006ba4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006964:	4b59      	ldr	r3, [pc, #356]	; (8006acc <pvPortMalloc+0x184>)
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4013      	ands	r3, r2
 800696c:	2b00      	cmp	r3, #0
 800696e:	f040 8093 	bne.w	8006a98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d01d      	beq.n	80069b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006978:	2208      	movs	r2, #8
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4413      	add	r3, r2
 800697e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f003 0307 	and.w	r3, r3, #7
 8006986:	2b00      	cmp	r3, #0
 8006988:	d014      	beq.n	80069b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f023 0307 	bic.w	r3, r3, #7
 8006990:	3308      	adds	r3, #8
 8006992:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <pvPortMalloc+0x6c>
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	617b      	str	r3, [r7, #20]
}
 80069b0:	bf00      	nop
 80069b2:	e7fe      	b.n	80069b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d06e      	beq.n	8006a98 <pvPortMalloc+0x150>
 80069ba:	4b45      	ldr	r3, [pc, #276]	; (8006ad0 <pvPortMalloc+0x188>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d869      	bhi.n	8006a98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069c4:	4b43      	ldr	r3, [pc, #268]	; (8006ad4 <pvPortMalloc+0x18c>)
 80069c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069c8:	4b42      	ldr	r3, [pc, #264]	; (8006ad4 <pvPortMalloc+0x18c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069ce:	e004      	b.n	80069da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d903      	bls.n	80069ec <pvPortMalloc+0xa4>
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1f1      	bne.n	80069d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80069ec:	4b36      	ldr	r3, [pc, #216]	; (8006ac8 <pvPortMalloc+0x180>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d050      	beq.n	8006a98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2208      	movs	r2, #8
 80069fc:	4413      	add	r3, r2
 80069fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	1ad2      	subs	r2, r2, r3
 8006a10:	2308      	movs	r3, #8
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d91f      	bls.n	8006a58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	f003 0307 	and.w	r3, r3, #7
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <pvPortMalloc+0xf8>
	__asm volatile
 8006a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2e:	f383 8811 	msr	BASEPRI, r3
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	613b      	str	r3, [r7, #16]
}
 8006a3c:	bf00      	nop
 8006a3e:	e7fe      	b.n	8006a3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	1ad2      	subs	r2, r2, r3
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a52:	69b8      	ldr	r0, [r7, #24]
 8006a54:	f000 f908 	bl	8006c68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a58:	4b1d      	ldr	r3, [pc, #116]	; (8006ad0 <pvPortMalloc+0x188>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	4a1b      	ldr	r2, [pc, #108]	; (8006ad0 <pvPortMalloc+0x188>)
 8006a64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a66:	4b1a      	ldr	r3, [pc, #104]	; (8006ad0 <pvPortMalloc+0x188>)
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	4b1b      	ldr	r3, [pc, #108]	; (8006ad8 <pvPortMalloc+0x190>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d203      	bcs.n	8006a7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a72:	4b17      	ldr	r3, [pc, #92]	; (8006ad0 <pvPortMalloc+0x188>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a18      	ldr	r2, [pc, #96]	; (8006ad8 <pvPortMalloc+0x190>)
 8006a78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	4b13      	ldr	r3, [pc, #76]	; (8006acc <pvPortMalloc+0x184>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	431a      	orrs	r2, r3
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006a8e:	4b13      	ldr	r3, [pc, #76]	; (8006adc <pvPortMalloc+0x194>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3301      	adds	r3, #1
 8006a94:	4a11      	ldr	r2, [pc, #68]	; (8006adc <pvPortMalloc+0x194>)
 8006a96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a98:	f7fe fbf0 	bl	800527c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	f003 0307 	and.w	r3, r3, #7
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00a      	beq.n	8006abc <pvPortMalloc+0x174>
	__asm volatile
 8006aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aaa:	f383 8811 	msr	BASEPRI, r3
 8006aae:	f3bf 8f6f 	isb	sy
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	60fb      	str	r3, [r7, #12]
}
 8006ab8:	bf00      	nop
 8006aba:	e7fe      	b.n	8006aba <pvPortMalloc+0x172>
	return pvReturn;
 8006abc:	69fb      	ldr	r3, [r7, #28]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3728      	adds	r7, #40	; 0x28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20001af4 	.word	0x20001af4
 8006acc:	20001b08 	.word	0x20001b08
 8006ad0:	20001af8 	.word	0x20001af8
 8006ad4:	20001aec 	.word	0x20001aec
 8006ad8:	20001afc 	.word	0x20001afc
 8006adc:	20001b00 	.word	0x20001b00

08006ae0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d04d      	beq.n	8006b8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006af2:	2308      	movs	r3, #8
 8006af4:	425b      	negs	r3, r3
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	4413      	add	r3, r2
 8006afa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	4b24      	ldr	r3, [pc, #144]	; (8006b98 <vPortFree+0xb8>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10a      	bne.n	8006b24 <vPortFree+0x44>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	60fb      	str	r3, [r7, #12]
}
 8006b20:	bf00      	nop
 8006b22:	e7fe      	b.n	8006b22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00a      	beq.n	8006b42 <vPortFree+0x62>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	60bb      	str	r3, [r7, #8]
}
 8006b3e:	bf00      	nop
 8006b40:	e7fe      	b.n	8006b40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	4b14      	ldr	r3, [pc, #80]	; (8006b98 <vPortFree+0xb8>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d01e      	beq.n	8006b8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d11a      	bne.n	8006b8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	4b0e      	ldr	r3, [pc, #56]	; (8006b98 <vPortFree+0xb8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	43db      	mvns	r3, r3
 8006b62:	401a      	ands	r2, r3
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b68:	f7fe fb7a 	bl	8005260 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	4b0a      	ldr	r3, [pc, #40]	; (8006b9c <vPortFree+0xbc>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4413      	add	r3, r2
 8006b76:	4a09      	ldr	r2, [pc, #36]	; (8006b9c <vPortFree+0xbc>)
 8006b78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b7a:	6938      	ldr	r0, [r7, #16]
 8006b7c:	f000 f874 	bl	8006c68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006b80:	4b07      	ldr	r3, [pc, #28]	; (8006ba0 <vPortFree+0xc0>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3301      	adds	r3, #1
 8006b86:	4a06      	ldr	r2, [pc, #24]	; (8006ba0 <vPortFree+0xc0>)
 8006b88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006b8a:	f7fe fb77 	bl	800527c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b8e:	bf00      	nop
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20001b08 	.word	0x20001b08
 8006b9c:	20001af8 	.word	0x20001af8
 8006ba0:	20001b04 	.word	0x20001b04

08006ba4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006baa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006bae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006bb0:	4b27      	ldr	r3, [pc, #156]	; (8006c50 <prvHeapInit+0xac>)
 8006bb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f003 0307 	and.w	r3, r3, #7
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00c      	beq.n	8006bd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	3307      	adds	r3, #7
 8006bc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0307 	bic.w	r3, r3, #7
 8006bca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	4a1f      	ldr	r2, [pc, #124]	; (8006c50 <prvHeapInit+0xac>)
 8006bd4:	4413      	add	r3, r2
 8006bd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006bdc:	4a1d      	ldr	r2, [pc, #116]	; (8006c54 <prvHeapInit+0xb0>)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006be2:	4b1c      	ldr	r3, [pc, #112]	; (8006c54 <prvHeapInit+0xb0>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	4413      	add	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006bf0:	2208      	movs	r2, #8
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	1a9b      	subs	r3, r3, r2
 8006bf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f023 0307 	bic.w	r3, r3, #7
 8006bfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4a15      	ldr	r2, [pc, #84]	; (8006c58 <prvHeapInit+0xb4>)
 8006c04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c06:	4b14      	ldr	r3, [pc, #80]	; (8006c58 <prvHeapInit+0xb4>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c0e:	4b12      	ldr	r3, [pc, #72]	; (8006c58 <prvHeapInit+0xb4>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	1ad2      	subs	r2, r2, r3
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c24:	4b0c      	ldr	r3, [pc, #48]	; (8006c58 <prvHeapInit+0xb4>)
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	4a0a      	ldr	r2, [pc, #40]	; (8006c5c <prvHeapInit+0xb8>)
 8006c32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	4a09      	ldr	r2, [pc, #36]	; (8006c60 <prvHeapInit+0xbc>)
 8006c3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c3c:	4b09      	ldr	r3, [pc, #36]	; (8006c64 <prvHeapInit+0xc0>)
 8006c3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c42:	601a      	str	r2, [r3, #0]
}
 8006c44:	bf00      	nop
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	20000f34 	.word	0x20000f34
 8006c54:	20001aec 	.word	0x20001aec
 8006c58:	20001af4 	.word	0x20001af4
 8006c5c:	20001afc 	.word	0x20001afc
 8006c60:	20001af8 	.word	0x20001af8
 8006c64:	20001b08 	.word	0x20001b08

08006c68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c70:	4b28      	ldr	r3, [pc, #160]	; (8006d14 <prvInsertBlockIntoFreeList+0xac>)
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	e002      	b.n	8006c7c <prvInsertBlockIntoFreeList+0x14>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	60fb      	str	r3, [r7, #12]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d8f7      	bhi.n	8006c76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	4413      	add	r3, r2
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d108      	bne.n	8006caa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	441a      	add	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	441a      	add	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d118      	bne.n	8006cf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b15      	ldr	r3, [pc, #84]	; (8006d18 <prvInsertBlockIntoFreeList+0xb0>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d00d      	beq.n	8006ce6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	441a      	add	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	e008      	b.n	8006cf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ce6:	4b0c      	ldr	r3, [pc, #48]	; (8006d18 <prvInsertBlockIntoFreeList+0xb0>)
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	e003      	b.n	8006cf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d002      	beq.n	8006d06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d06:	bf00      	nop
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	20001aec 	.word	0x20001aec
 8006d18:	20001af4 	.word	0x20001af4

08006d1c <std>:
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	b510      	push	{r4, lr}
 8006d20:	4604      	mov	r4, r0
 8006d22:	e9c0 3300 	strd	r3, r3, [r0]
 8006d26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d2a:	6083      	str	r3, [r0, #8]
 8006d2c:	8181      	strh	r1, [r0, #12]
 8006d2e:	6643      	str	r3, [r0, #100]	; 0x64
 8006d30:	81c2      	strh	r2, [r0, #14]
 8006d32:	6183      	str	r3, [r0, #24]
 8006d34:	4619      	mov	r1, r3
 8006d36:	2208      	movs	r2, #8
 8006d38:	305c      	adds	r0, #92	; 0x5c
 8006d3a:	f000 f9e5 	bl	8007108 <memset>
 8006d3e:	4b0d      	ldr	r3, [pc, #52]	; (8006d74 <std+0x58>)
 8006d40:	6263      	str	r3, [r4, #36]	; 0x24
 8006d42:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <std+0x5c>)
 8006d44:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d46:	4b0d      	ldr	r3, [pc, #52]	; (8006d7c <std+0x60>)
 8006d48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d4a:	4b0d      	ldr	r3, [pc, #52]	; (8006d80 <std+0x64>)
 8006d4c:	6323      	str	r3, [r4, #48]	; 0x30
 8006d4e:	4b0d      	ldr	r3, [pc, #52]	; (8006d84 <std+0x68>)
 8006d50:	6224      	str	r4, [r4, #32]
 8006d52:	429c      	cmp	r4, r3
 8006d54:	d006      	beq.n	8006d64 <std+0x48>
 8006d56:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006d5a:	4294      	cmp	r4, r2
 8006d5c:	d002      	beq.n	8006d64 <std+0x48>
 8006d5e:	33d0      	adds	r3, #208	; 0xd0
 8006d60:	429c      	cmp	r4, r3
 8006d62:	d105      	bne.n	8006d70 <std+0x54>
 8006d64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d6c:	f000 ba9a 	b.w	80072a4 <__retarget_lock_init_recursive>
 8006d70:	bd10      	pop	{r4, pc}
 8006d72:	bf00      	nop
 8006d74:	08006f59 	.word	0x08006f59
 8006d78:	08006f7b 	.word	0x08006f7b
 8006d7c:	08006fb3 	.word	0x08006fb3
 8006d80:	08006fd7 	.word	0x08006fd7
 8006d84:	20001b0c 	.word	0x20001b0c

08006d88 <stdio_exit_handler>:
 8006d88:	4a02      	ldr	r2, [pc, #8]	; (8006d94 <stdio_exit_handler+0xc>)
 8006d8a:	4903      	ldr	r1, [pc, #12]	; (8006d98 <stdio_exit_handler+0x10>)
 8006d8c:	4803      	ldr	r0, [pc, #12]	; (8006d9c <stdio_exit_handler+0x14>)
 8006d8e:	f000 b869 	b.w	8006e64 <_fwalk_sglue>
 8006d92:	bf00      	nop
 8006d94:	2000000c 	.word	0x2000000c
 8006d98:	080075c5 	.word	0x080075c5
 8006d9c:	20000018 	.word	0x20000018

08006da0 <cleanup_stdio>:
 8006da0:	6841      	ldr	r1, [r0, #4]
 8006da2:	4b0c      	ldr	r3, [pc, #48]	; (8006dd4 <cleanup_stdio+0x34>)
 8006da4:	4299      	cmp	r1, r3
 8006da6:	b510      	push	{r4, lr}
 8006da8:	4604      	mov	r4, r0
 8006daa:	d001      	beq.n	8006db0 <cleanup_stdio+0x10>
 8006dac:	f000 fc0a 	bl	80075c4 <_fflush_r>
 8006db0:	68a1      	ldr	r1, [r4, #8]
 8006db2:	4b09      	ldr	r3, [pc, #36]	; (8006dd8 <cleanup_stdio+0x38>)
 8006db4:	4299      	cmp	r1, r3
 8006db6:	d002      	beq.n	8006dbe <cleanup_stdio+0x1e>
 8006db8:	4620      	mov	r0, r4
 8006dba:	f000 fc03 	bl	80075c4 <_fflush_r>
 8006dbe:	68e1      	ldr	r1, [r4, #12]
 8006dc0:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <cleanup_stdio+0x3c>)
 8006dc2:	4299      	cmp	r1, r3
 8006dc4:	d004      	beq.n	8006dd0 <cleanup_stdio+0x30>
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dcc:	f000 bbfa 	b.w	80075c4 <_fflush_r>
 8006dd0:	bd10      	pop	{r4, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20001b0c 	.word	0x20001b0c
 8006dd8:	20001b74 	.word	0x20001b74
 8006ddc:	20001bdc 	.word	0x20001bdc

08006de0 <global_stdio_init.part.0>:
 8006de0:	b510      	push	{r4, lr}
 8006de2:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <global_stdio_init.part.0+0x30>)
 8006de4:	4c0b      	ldr	r4, [pc, #44]	; (8006e14 <global_stdio_init.part.0+0x34>)
 8006de6:	4a0c      	ldr	r2, [pc, #48]	; (8006e18 <global_stdio_init.part.0+0x38>)
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	4620      	mov	r0, r4
 8006dec:	2200      	movs	r2, #0
 8006dee:	2104      	movs	r1, #4
 8006df0:	f7ff ff94 	bl	8006d1c <std>
 8006df4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006df8:	2201      	movs	r2, #1
 8006dfa:	2109      	movs	r1, #9
 8006dfc:	f7ff ff8e 	bl	8006d1c <std>
 8006e00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006e04:	2202      	movs	r2, #2
 8006e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e0a:	2112      	movs	r1, #18
 8006e0c:	f7ff bf86 	b.w	8006d1c <std>
 8006e10:	20001c44 	.word	0x20001c44
 8006e14:	20001b0c 	.word	0x20001b0c
 8006e18:	08006d89 	.word	0x08006d89

08006e1c <__sfp_lock_acquire>:
 8006e1c:	4801      	ldr	r0, [pc, #4]	; (8006e24 <__sfp_lock_acquire+0x8>)
 8006e1e:	f000 ba42 	b.w	80072a6 <__retarget_lock_acquire_recursive>
 8006e22:	bf00      	nop
 8006e24:	20001c4d 	.word	0x20001c4d

08006e28 <__sfp_lock_release>:
 8006e28:	4801      	ldr	r0, [pc, #4]	; (8006e30 <__sfp_lock_release+0x8>)
 8006e2a:	f000 ba3d 	b.w	80072a8 <__retarget_lock_release_recursive>
 8006e2e:	bf00      	nop
 8006e30:	20001c4d 	.word	0x20001c4d

08006e34 <__sinit>:
 8006e34:	b510      	push	{r4, lr}
 8006e36:	4604      	mov	r4, r0
 8006e38:	f7ff fff0 	bl	8006e1c <__sfp_lock_acquire>
 8006e3c:	6a23      	ldr	r3, [r4, #32]
 8006e3e:	b11b      	cbz	r3, 8006e48 <__sinit+0x14>
 8006e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e44:	f7ff bff0 	b.w	8006e28 <__sfp_lock_release>
 8006e48:	4b04      	ldr	r3, [pc, #16]	; (8006e5c <__sinit+0x28>)
 8006e4a:	6223      	str	r3, [r4, #32]
 8006e4c:	4b04      	ldr	r3, [pc, #16]	; (8006e60 <__sinit+0x2c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1f5      	bne.n	8006e40 <__sinit+0xc>
 8006e54:	f7ff ffc4 	bl	8006de0 <global_stdio_init.part.0>
 8006e58:	e7f2      	b.n	8006e40 <__sinit+0xc>
 8006e5a:	bf00      	nop
 8006e5c:	08006da1 	.word	0x08006da1
 8006e60:	20001c44 	.word	0x20001c44

08006e64 <_fwalk_sglue>:
 8006e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e68:	4607      	mov	r7, r0
 8006e6a:	4688      	mov	r8, r1
 8006e6c:	4614      	mov	r4, r2
 8006e6e:	2600      	movs	r6, #0
 8006e70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e74:	f1b9 0901 	subs.w	r9, r9, #1
 8006e78:	d505      	bpl.n	8006e86 <_fwalk_sglue+0x22>
 8006e7a:	6824      	ldr	r4, [r4, #0]
 8006e7c:	2c00      	cmp	r4, #0
 8006e7e:	d1f7      	bne.n	8006e70 <_fwalk_sglue+0xc>
 8006e80:	4630      	mov	r0, r6
 8006e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e86:	89ab      	ldrh	r3, [r5, #12]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d907      	bls.n	8006e9c <_fwalk_sglue+0x38>
 8006e8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e90:	3301      	adds	r3, #1
 8006e92:	d003      	beq.n	8006e9c <_fwalk_sglue+0x38>
 8006e94:	4629      	mov	r1, r5
 8006e96:	4638      	mov	r0, r7
 8006e98:	47c0      	blx	r8
 8006e9a:	4306      	orrs	r6, r0
 8006e9c:	3568      	adds	r5, #104	; 0x68
 8006e9e:	e7e9      	b.n	8006e74 <_fwalk_sglue+0x10>

08006ea0 <_puts_r>:
 8006ea0:	6a03      	ldr	r3, [r0, #32]
 8006ea2:	b570      	push	{r4, r5, r6, lr}
 8006ea4:	6884      	ldr	r4, [r0, #8]
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	460e      	mov	r6, r1
 8006eaa:	b90b      	cbnz	r3, 8006eb0 <_puts_r+0x10>
 8006eac:	f7ff ffc2 	bl	8006e34 <__sinit>
 8006eb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006eb2:	07db      	lsls	r3, r3, #31
 8006eb4:	d405      	bmi.n	8006ec2 <_puts_r+0x22>
 8006eb6:	89a3      	ldrh	r3, [r4, #12]
 8006eb8:	0598      	lsls	r0, r3, #22
 8006eba:	d402      	bmi.n	8006ec2 <_puts_r+0x22>
 8006ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ebe:	f000 f9f2 	bl	80072a6 <__retarget_lock_acquire_recursive>
 8006ec2:	89a3      	ldrh	r3, [r4, #12]
 8006ec4:	0719      	lsls	r1, r3, #28
 8006ec6:	d513      	bpl.n	8006ef0 <_puts_r+0x50>
 8006ec8:	6923      	ldr	r3, [r4, #16]
 8006eca:	b18b      	cbz	r3, 8006ef0 <_puts_r+0x50>
 8006ecc:	3e01      	subs	r6, #1
 8006ece:	68a3      	ldr	r3, [r4, #8]
 8006ed0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	60a3      	str	r3, [r4, #8]
 8006ed8:	b9e9      	cbnz	r1, 8006f16 <_puts_r+0x76>
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	da2e      	bge.n	8006f3c <_puts_r+0x9c>
 8006ede:	4622      	mov	r2, r4
 8006ee0:	210a      	movs	r1, #10
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	f000 f87b 	bl	8006fde <__swbuf_r>
 8006ee8:	3001      	adds	r0, #1
 8006eea:	d007      	beq.n	8006efc <_puts_r+0x5c>
 8006eec:	250a      	movs	r5, #10
 8006eee:	e007      	b.n	8006f00 <_puts_r+0x60>
 8006ef0:	4621      	mov	r1, r4
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	f000 f8b0 	bl	8007058 <__swsetup_r>
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	d0e7      	beq.n	8006ecc <_puts_r+0x2c>
 8006efc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006f00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f02:	07da      	lsls	r2, r3, #31
 8006f04:	d405      	bmi.n	8006f12 <_puts_r+0x72>
 8006f06:	89a3      	ldrh	r3, [r4, #12]
 8006f08:	059b      	lsls	r3, r3, #22
 8006f0a:	d402      	bmi.n	8006f12 <_puts_r+0x72>
 8006f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f0e:	f000 f9cb 	bl	80072a8 <__retarget_lock_release_recursive>
 8006f12:	4628      	mov	r0, r5
 8006f14:	bd70      	pop	{r4, r5, r6, pc}
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	da04      	bge.n	8006f24 <_puts_r+0x84>
 8006f1a:	69a2      	ldr	r2, [r4, #24]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	dc06      	bgt.n	8006f2e <_puts_r+0x8e>
 8006f20:	290a      	cmp	r1, #10
 8006f22:	d004      	beq.n	8006f2e <_puts_r+0x8e>
 8006f24:	6823      	ldr	r3, [r4, #0]
 8006f26:	1c5a      	adds	r2, r3, #1
 8006f28:	6022      	str	r2, [r4, #0]
 8006f2a:	7019      	strb	r1, [r3, #0]
 8006f2c:	e7cf      	b.n	8006ece <_puts_r+0x2e>
 8006f2e:	4622      	mov	r2, r4
 8006f30:	4628      	mov	r0, r5
 8006f32:	f000 f854 	bl	8006fde <__swbuf_r>
 8006f36:	3001      	adds	r0, #1
 8006f38:	d1c9      	bne.n	8006ece <_puts_r+0x2e>
 8006f3a:	e7df      	b.n	8006efc <_puts_r+0x5c>
 8006f3c:	6823      	ldr	r3, [r4, #0]
 8006f3e:	250a      	movs	r5, #10
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	6022      	str	r2, [r4, #0]
 8006f44:	701d      	strb	r5, [r3, #0]
 8006f46:	e7db      	b.n	8006f00 <_puts_r+0x60>

08006f48 <puts>:
 8006f48:	4b02      	ldr	r3, [pc, #8]	; (8006f54 <puts+0xc>)
 8006f4a:	4601      	mov	r1, r0
 8006f4c:	6818      	ldr	r0, [r3, #0]
 8006f4e:	f7ff bfa7 	b.w	8006ea0 <_puts_r>
 8006f52:	bf00      	nop
 8006f54:	20000064 	.word	0x20000064

08006f58 <__sread>:
 8006f58:	b510      	push	{r4, lr}
 8006f5a:	460c      	mov	r4, r1
 8006f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f60:	f000 f952 	bl	8007208 <_read_r>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	bfab      	itete	ge
 8006f68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f6a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f6c:	181b      	addge	r3, r3, r0
 8006f6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f72:	bfac      	ite	ge
 8006f74:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f76:	81a3      	strhlt	r3, [r4, #12]
 8006f78:	bd10      	pop	{r4, pc}

08006f7a <__swrite>:
 8006f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7e:	461f      	mov	r7, r3
 8006f80:	898b      	ldrh	r3, [r1, #12]
 8006f82:	05db      	lsls	r3, r3, #23
 8006f84:	4605      	mov	r5, r0
 8006f86:	460c      	mov	r4, r1
 8006f88:	4616      	mov	r6, r2
 8006f8a:	d505      	bpl.n	8006f98 <__swrite+0x1e>
 8006f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f90:	2302      	movs	r3, #2
 8006f92:	2200      	movs	r2, #0
 8006f94:	f000 f926 	bl	80071e4 <_lseek_r>
 8006f98:	89a3      	ldrh	r3, [r4, #12]
 8006f9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fa2:	81a3      	strh	r3, [r4, #12]
 8006fa4:	4632      	mov	r2, r6
 8006fa6:	463b      	mov	r3, r7
 8006fa8:	4628      	mov	r0, r5
 8006faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fae:	f000 b93d 	b.w	800722c <_write_r>

08006fb2 <__sseek>:
 8006fb2:	b510      	push	{r4, lr}
 8006fb4:	460c      	mov	r4, r1
 8006fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fba:	f000 f913 	bl	80071e4 <_lseek_r>
 8006fbe:	1c43      	adds	r3, r0, #1
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	bf15      	itete	ne
 8006fc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fce:	81a3      	strheq	r3, [r4, #12]
 8006fd0:	bf18      	it	ne
 8006fd2:	81a3      	strhne	r3, [r4, #12]
 8006fd4:	bd10      	pop	{r4, pc}

08006fd6 <__sclose>:
 8006fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fda:	f000 b89d 	b.w	8007118 <_close_r>

08006fde <__swbuf_r>:
 8006fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe0:	460e      	mov	r6, r1
 8006fe2:	4614      	mov	r4, r2
 8006fe4:	4605      	mov	r5, r0
 8006fe6:	b118      	cbz	r0, 8006ff0 <__swbuf_r+0x12>
 8006fe8:	6a03      	ldr	r3, [r0, #32]
 8006fea:	b90b      	cbnz	r3, 8006ff0 <__swbuf_r+0x12>
 8006fec:	f7ff ff22 	bl	8006e34 <__sinit>
 8006ff0:	69a3      	ldr	r3, [r4, #24]
 8006ff2:	60a3      	str	r3, [r4, #8]
 8006ff4:	89a3      	ldrh	r3, [r4, #12]
 8006ff6:	071a      	lsls	r2, r3, #28
 8006ff8:	d525      	bpl.n	8007046 <__swbuf_r+0x68>
 8006ffa:	6923      	ldr	r3, [r4, #16]
 8006ffc:	b31b      	cbz	r3, 8007046 <__swbuf_r+0x68>
 8006ffe:	6823      	ldr	r3, [r4, #0]
 8007000:	6922      	ldr	r2, [r4, #16]
 8007002:	1a98      	subs	r0, r3, r2
 8007004:	6963      	ldr	r3, [r4, #20]
 8007006:	b2f6      	uxtb	r6, r6
 8007008:	4283      	cmp	r3, r0
 800700a:	4637      	mov	r7, r6
 800700c:	dc04      	bgt.n	8007018 <__swbuf_r+0x3a>
 800700e:	4621      	mov	r1, r4
 8007010:	4628      	mov	r0, r5
 8007012:	f000 fad7 	bl	80075c4 <_fflush_r>
 8007016:	b9e0      	cbnz	r0, 8007052 <__swbuf_r+0x74>
 8007018:	68a3      	ldr	r3, [r4, #8]
 800701a:	3b01      	subs	r3, #1
 800701c:	60a3      	str	r3, [r4, #8]
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	6022      	str	r2, [r4, #0]
 8007024:	701e      	strb	r6, [r3, #0]
 8007026:	6962      	ldr	r2, [r4, #20]
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	429a      	cmp	r2, r3
 800702c:	d004      	beq.n	8007038 <__swbuf_r+0x5a>
 800702e:	89a3      	ldrh	r3, [r4, #12]
 8007030:	07db      	lsls	r3, r3, #31
 8007032:	d506      	bpl.n	8007042 <__swbuf_r+0x64>
 8007034:	2e0a      	cmp	r6, #10
 8007036:	d104      	bne.n	8007042 <__swbuf_r+0x64>
 8007038:	4621      	mov	r1, r4
 800703a:	4628      	mov	r0, r5
 800703c:	f000 fac2 	bl	80075c4 <_fflush_r>
 8007040:	b938      	cbnz	r0, 8007052 <__swbuf_r+0x74>
 8007042:	4638      	mov	r0, r7
 8007044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007046:	4621      	mov	r1, r4
 8007048:	4628      	mov	r0, r5
 800704a:	f000 f805 	bl	8007058 <__swsetup_r>
 800704e:	2800      	cmp	r0, #0
 8007050:	d0d5      	beq.n	8006ffe <__swbuf_r+0x20>
 8007052:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007056:	e7f4      	b.n	8007042 <__swbuf_r+0x64>

08007058 <__swsetup_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	4b2a      	ldr	r3, [pc, #168]	; (8007104 <__swsetup_r+0xac>)
 800705c:	4605      	mov	r5, r0
 800705e:	6818      	ldr	r0, [r3, #0]
 8007060:	460c      	mov	r4, r1
 8007062:	b118      	cbz	r0, 800706c <__swsetup_r+0x14>
 8007064:	6a03      	ldr	r3, [r0, #32]
 8007066:	b90b      	cbnz	r3, 800706c <__swsetup_r+0x14>
 8007068:	f7ff fee4 	bl	8006e34 <__sinit>
 800706c:	89a3      	ldrh	r3, [r4, #12]
 800706e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007072:	0718      	lsls	r0, r3, #28
 8007074:	d422      	bmi.n	80070bc <__swsetup_r+0x64>
 8007076:	06d9      	lsls	r1, r3, #27
 8007078:	d407      	bmi.n	800708a <__swsetup_r+0x32>
 800707a:	2309      	movs	r3, #9
 800707c:	602b      	str	r3, [r5, #0]
 800707e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007082:	81a3      	strh	r3, [r4, #12]
 8007084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007088:	e034      	b.n	80070f4 <__swsetup_r+0x9c>
 800708a:	0758      	lsls	r0, r3, #29
 800708c:	d512      	bpl.n	80070b4 <__swsetup_r+0x5c>
 800708e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007090:	b141      	cbz	r1, 80070a4 <__swsetup_r+0x4c>
 8007092:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007096:	4299      	cmp	r1, r3
 8007098:	d002      	beq.n	80070a0 <__swsetup_r+0x48>
 800709a:	4628      	mov	r0, r5
 800709c:	f000 f914 	bl	80072c8 <_free_r>
 80070a0:	2300      	movs	r3, #0
 80070a2:	6363      	str	r3, [r4, #52]	; 0x34
 80070a4:	89a3      	ldrh	r3, [r4, #12]
 80070a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80070aa:	81a3      	strh	r3, [r4, #12]
 80070ac:	2300      	movs	r3, #0
 80070ae:	6063      	str	r3, [r4, #4]
 80070b0:	6923      	ldr	r3, [r4, #16]
 80070b2:	6023      	str	r3, [r4, #0]
 80070b4:	89a3      	ldrh	r3, [r4, #12]
 80070b6:	f043 0308 	orr.w	r3, r3, #8
 80070ba:	81a3      	strh	r3, [r4, #12]
 80070bc:	6923      	ldr	r3, [r4, #16]
 80070be:	b94b      	cbnz	r3, 80070d4 <__swsetup_r+0x7c>
 80070c0:	89a3      	ldrh	r3, [r4, #12]
 80070c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070ca:	d003      	beq.n	80070d4 <__swsetup_r+0x7c>
 80070cc:	4621      	mov	r1, r4
 80070ce:	4628      	mov	r0, r5
 80070d0:	f000 fac6 	bl	8007660 <__smakebuf_r>
 80070d4:	89a0      	ldrh	r0, [r4, #12]
 80070d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070da:	f010 0301 	ands.w	r3, r0, #1
 80070de:	d00a      	beq.n	80070f6 <__swsetup_r+0x9e>
 80070e0:	2300      	movs	r3, #0
 80070e2:	60a3      	str	r3, [r4, #8]
 80070e4:	6963      	ldr	r3, [r4, #20]
 80070e6:	425b      	negs	r3, r3
 80070e8:	61a3      	str	r3, [r4, #24]
 80070ea:	6923      	ldr	r3, [r4, #16]
 80070ec:	b943      	cbnz	r3, 8007100 <__swsetup_r+0xa8>
 80070ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80070f2:	d1c4      	bne.n	800707e <__swsetup_r+0x26>
 80070f4:	bd38      	pop	{r3, r4, r5, pc}
 80070f6:	0781      	lsls	r1, r0, #30
 80070f8:	bf58      	it	pl
 80070fa:	6963      	ldrpl	r3, [r4, #20]
 80070fc:	60a3      	str	r3, [r4, #8]
 80070fe:	e7f4      	b.n	80070ea <__swsetup_r+0x92>
 8007100:	2000      	movs	r0, #0
 8007102:	e7f7      	b.n	80070f4 <__swsetup_r+0x9c>
 8007104:	20000064 	.word	0x20000064

08007108 <memset>:
 8007108:	4402      	add	r2, r0
 800710a:	4603      	mov	r3, r0
 800710c:	4293      	cmp	r3, r2
 800710e:	d100      	bne.n	8007112 <memset+0xa>
 8007110:	4770      	bx	lr
 8007112:	f803 1b01 	strb.w	r1, [r3], #1
 8007116:	e7f9      	b.n	800710c <memset+0x4>

08007118 <_close_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	4d06      	ldr	r5, [pc, #24]	; (8007134 <_close_r+0x1c>)
 800711c:	2300      	movs	r3, #0
 800711e:	4604      	mov	r4, r0
 8007120:	4608      	mov	r0, r1
 8007122:	602b      	str	r3, [r5, #0]
 8007124:	f7f9 fca6 	bl	8000a74 <_close>
 8007128:	1c43      	adds	r3, r0, #1
 800712a:	d102      	bne.n	8007132 <_close_r+0x1a>
 800712c:	682b      	ldr	r3, [r5, #0]
 800712e:	b103      	cbz	r3, 8007132 <_close_r+0x1a>
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	bd38      	pop	{r3, r4, r5, pc}
 8007134:	20001c48 	.word	0x20001c48

08007138 <_reclaim_reent>:
 8007138:	4b29      	ldr	r3, [pc, #164]	; (80071e0 <_reclaim_reent+0xa8>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4283      	cmp	r3, r0
 800713e:	b570      	push	{r4, r5, r6, lr}
 8007140:	4604      	mov	r4, r0
 8007142:	d04b      	beq.n	80071dc <_reclaim_reent+0xa4>
 8007144:	69c3      	ldr	r3, [r0, #28]
 8007146:	b143      	cbz	r3, 800715a <_reclaim_reent+0x22>
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d144      	bne.n	80071d8 <_reclaim_reent+0xa0>
 800714e:	69e3      	ldr	r3, [r4, #28]
 8007150:	6819      	ldr	r1, [r3, #0]
 8007152:	b111      	cbz	r1, 800715a <_reclaim_reent+0x22>
 8007154:	4620      	mov	r0, r4
 8007156:	f000 f8b7 	bl	80072c8 <_free_r>
 800715a:	6961      	ldr	r1, [r4, #20]
 800715c:	b111      	cbz	r1, 8007164 <_reclaim_reent+0x2c>
 800715e:	4620      	mov	r0, r4
 8007160:	f000 f8b2 	bl	80072c8 <_free_r>
 8007164:	69e1      	ldr	r1, [r4, #28]
 8007166:	b111      	cbz	r1, 800716e <_reclaim_reent+0x36>
 8007168:	4620      	mov	r0, r4
 800716a:	f000 f8ad 	bl	80072c8 <_free_r>
 800716e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007170:	b111      	cbz	r1, 8007178 <_reclaim_reent+0x40>
 8007172:	4620      	mov	r0, r4
 8007174:	f000 f8a8 	bl	80072c8 <_free_r>
 8007178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800717a:	b111      	cbz	r1, 8007182 <_reclaim_reent+0x4a>
 800717c:	4620      	mov	r0, r4
 800717e:	f000 f8a3 	bl	80072c8 <_free_r>
 8007182:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007184:	b111      	cbz	r1, 800718c <_reclaim_reent+0x54>
 8007186:	4620      	mov	r0, r4
 8007188:	f000 f89e 	bl	80072c8 <_free_r>
 800718c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800718e:	b111      	cbz	r1, 8007196 <_reclaim_reent+0x5e>
 8007190:	4620      	mov	r0, r4
 8007192:	f000 f899 	bl	80072c8 <_free_r>
 8007196:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007198:	b111      	cbz	r1, 80071a0 <_reclaim_reent+0x68>
 800719a:	4620      	mov	r0, r4
 800719c:	f000 f894 	bl	80072c8 <_free_r>
 80071a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80071a2:	b111      	cbz	r1, 80071aa <_reclaim_reent+0x72>
 80071a4:	4620      	mov	r0, r4
 80071a6:	f000 f88f 	bl	80072c8 <_free_r>
 80071aa:	6a23      	ldr	r3, [r4, #32]
 80071ac:	b1b3      	cbz	r3, 80071dc <_reclaim_reent+0xa4>
 80071ae:	4620      	mov	r0, r4
 80071b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80071b4:	4718      	bx	r3
 80071b6:	5949      	ldr	r1, [r1, r5]
 80071b8:	b941      	cbnz	r1, 80071cc <_reclaim_reent+0x94>
 80071ba:	3504      	adds	r5, #4
 80071bc:	69e3      	ldr	r3, [r4, #28]
 80071be:	2d80      	cmp	r5, #128	; 0x80
 80071c0:	68d9      	ldr	r1, [r3, #12]
 80071c2:	d1f8      	bne.n	80071b6 <_reclaim_reent+0x7e>
 80071c4:	4620      	mov	r0, r4
 80071c6:	f000 f87f 	bl	80072c8 <_free_r>
 80071ca:	e7c0      	b.n	800714e <_reclaim_reent+0x16>
 80071cc:	680e      	ldr	r6, [r1, #0]
 80071ce:	4620      	mov	r0, r4
 80071d0:	f000 f87a 	bl	80072c8 <_free_r>
 80071d4:	4631      	mov	r1, r6
 80071d6:	e7ef      	b.n	80071b8 <_reclaim_reent+0x80>
 80071d8:	2500      	movs	r5, #0
 80071da:	e7ef      	b.n	80071bc <_reclaim_reent+0x84>
 80071dc:	bd70      	pop	{r4, r5, r6, pc}
 80071de:	bf00      	nop
 80071e0:	20000064 	.word	0x20000064

080071e4 <_lseek_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	4d07      	ldr	r5, [pc, #28]	; (8007204 <_lseek_r+0x20>)
 80071e8:	4604      	mov	r4, r0
 80071ea:	4608      	mov	r0, r1
 80071ec:	4611      	mov	r1, r2
 80071ee:	2200      	movs	r2, #0
 80071f0:	602a      	str	r2, [r5, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	f7f9 fc65 	bl	8000ac2 <_lseek>
 80071f8:	1c43      	adds	r3, r0, #1
 80071fa:	d102      	bne.n	8007202 <_lseek_r+0x1e>
 80071fc:	682b      	ldr	r3, [r5, #0]
 80071fe:	b103      	cbz	r3, 8007202 <_lseek_r+0x1e>
 8007200:	6023      	str	r3, [r4, #0]
 8007202:	bd38      	pop	{r3, r4, r5, pc}
 8007204:	20001c48 	.word	0x20001c48

08007208 <_read_r>:
 8007208:	b538      	push	{r3, r4, r5, lr}
 800720a:	4d07      	ldr	r5, [pc, #28]	; (8007228 <_read_r+0x20>)
 800720c:	4604      	mov	r4, r0
 800720e:	4608      	mov	r0, r1
 8007210:	4611      	mov	r1, r2
 8007212:	2200      	movs	r2, #0
 8007214:	602a      	str	r2, [r5, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	f7f9 fbf8 	bl	8000a0c <_read>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d102      	bne.n	8007226 <_read_r+0x1e>
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	b103      	cbz	r3, 8007226 <_read_r+0x1e>
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	bd38      	pop	{r3, r4, r5, pc}
 8007228:	20001c48 	.word	0x20001c48

0800722c <_write_r>:
 800722c:	b538      	push	{r3, r4, r5, lr}
 800722e:	4d07      	ldr	r5, [pc, #28]	; (800724c <_write_r+0x20>)
 8007230:	4604      	mov	r4, r0
 8007232:	4608      	mov	r0, r1
 8007234:	4611      	mov	r1, r2
 8007236:	2200      	movs	r2, #0
 8007238:	602a      	str	r2, [r5, #0]
 800723a:	461a      	mov	r2, r3
 800723c:	f7f9 fc04 	bl	8000a48 <_write>
 8007240:	1c43      	adds	r3, r0, #1
 8007242:	d102      	bne.n	800724a <_write_r+0x1e>
 8007244:	682b      	ldr	r3, [r5, #0]
 8007246:	b103      	cbz	r3, 800724a <_write_r+0x1e>
 8007248:	6023      	str	r3, [r4, #0]
 800724a:	bd38      	pop	{r3, r4, r5, pc}
 800724c:	20001c48 	.word	0x20001c48

08007250 <__errno>:
 8007250:	4b01      	ldr	r3, [pc, #4]	; (8007258 <__errno+0x8>)
 8007252:	6818      	ldr	r0, [r3, #0]
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	20000064 	.word	0x20000064

0800725c <__libc_init_array>:
 800725c:	b570      	push	{r4, r5, r6, lr}
 800725e:	4d0d      	ldr	r5, [pc, #52]	; (8007294 <__libc_init_array+0x38>)
 8007260:	4c0d      	ldr	r4, [pc, #52]	; (8007298 <__libc_init_array+0x3c>)
 8007262:	1b64      	subs	r4, r4, r5
 8007264:	10a4      	asrs	r4, r4, #2
 8007266:	2600      	movs	r6, #0
 8007268:	42a6      	cmp	r6, r4
 800726a:	d109      	bne.n	8007280 <__libc_init_array+0x24>
 800726c:	4d0b      	ldr	r5, [pc, #44]	; (800729c <__libc_init_array+0x40>)
 800726e:	4c0c      	ldr	r4, [pc, #48]	; (80072a0 <__libc_init_array+0x44>)
 8007270:	f000 fa64 	bl	800773c <_init>
 8007274:	1b64      	subs	r4, r4, r5
 8007276:	10a4      	asrs	r4, r4, #2
 8007278:	2600      	movs	r6, #0
 800727a:	42a6      	cmp	r6, r4
 800727c:	d105      	bne.n	800728a <__libc_init_array+0x2e>
 800727e:	bd70      	pop	{r4, r5, r6, pc}
 8007280:	f855 3b04 	ldr.w	r3, [r5], #4
 8007284:	4798      	blx	r3
 8007286:	3601      	adds	r6, #1
 8007288:	e7ee      	b.n	8007268 <__libc_init_array+0xc>
 800728a:	f855 3b04 	ldr.w	r3, [r5], #4
 800728e:	4798      	blx	r3
 8007290:	3601      	adds	r6, #1
 8007292:	e7f2      	b.n	800727a <__libc_init_array+0x1e>
 8007294:	080078e8 	.word	0x080078e8
 8007298:	080078e8 	.word	0x080078e8
 800729c:	080078e8 	.word	0x080078e8
 80072a0:	080078ec 	.word	0x080078ec

080072a4 <__retarget_lock_init_recursive>:
 80072a4:	4770      	bx	lr

080072a6 <__retarget_lock_acquire_recursive>:
 80072a6:	4770      	bx	lr

080072a8 <__retarget_lock_release_recursive>:
 80072a8:	4770      	bx	lr

080072aa <memcpy>:
 80072aa:	440a      	add	r2, r1
 80072ac:	4291      	cmp	r1, r2
 80072ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80072b2:	d100      	bne.n	80072b6 <memcpy+0xc>
 80072b4:	4770      	bx	lr
 80072b6:	b510      	push	{r4, lr}
 80072b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072c0:	4291      	cmp	r1, r2
 80072c2:	d1f9      	bne.n	80072b8 <memcpy+0xe>
 80072c4:	bd10      	pop	{r4, pc}
	...

080072c8 <_free_r>:
 80072c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072ca:	2900      	cmp	r1, #0
 80072cc:	d044      	beq.n	8007358 <_free_r+0x90>
 80072ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072d2:	9001      	str	r0, [sp, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f1a1 0404 	sub.w	r4, r1, #4
 80072da:	bfb8      	it	lt
 80072dc:	18e4      	addlt	r4, r4, r3
 80072de:	f000 f8df 	bl	80074a0 <__malloc_lock>
 80072e2:	4a1e      	ldr	r2, [pc, #120]	; (800735c <_free_r+0x94>)
 80072e4:	9801      	ldr	r0, [sp, #4]
 80072e6:	6813      	ldr	r3, [r2, #0]
 80072e8:	b933      	cbnz	r3, 80072f8 <_free_r+0x30>
 80072ea:	6063      	str	r3, [r4, #4]
 80072ec:	6014      	str	r4, [r2, #0]
 80072ee:	b003      	add	sp, #12
 80072f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072f4:	f000 b8da 	b.w	80074ac <__malloc_unlock>
 80072f8:	42a3      	cmp	r3, r4
 80072fa:	d908      	bls.n	800730e <_free_r+0x46>
 80072fc:	6825      	ldr	r5, [r4, #0]
 80072fe:	1961      	adds	r1, r4, r5
 8007300:	428b      	cmp	r3, r1
 8007302:	bf01      	itttt	eq
 8007304:	6819      	ldreq	r1, [r3, #0]
 8007306:	685b      	ldreq	r3, [r3, #4]
 8007308:	1949      	addeq	r1, r1, r5
 800730a:	6021      	streq	r1, [r4, #0]
 800730c:	e7ed      	b.n	80072ea <_free_r+0x22>
 800730e:	461a      	mov	r2, r3
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	b10b      	cbz	r3, 8007318 <_free_r+0x50>
 8007314:	42a3      	cmp	r3, r4
 8007316:	d9fa      	bls.n	800730e <_free_r+0x46>
 8007318:	6811      	ldr	r1, [r2, #0]
 800731a:	1855      	adds	r5, r2, r1
 800731c:	42a5      	cmp	r5, r4
 800731e:	d10b      	bne.n	8007338 <_free_r+0x70>
 8007320:	6824      	ldr	r4, [r4, #0]
 8007322:	4421      	add	r1, r4
 8007324:	1854      	adds	r4, r2, r1
 8007326:	42a3      	cmp	r3, r4
 8007328:	6011      	str	r1, [r2, #0]
 800732a:	d1e0      	bne.n	80072ee <_free_r+0x26>
 800732c:	681c      	ldr	r4, [r3, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	6053      	str	r3, [r2, #4]
 8007332:	440c      	add	r4, r1
 8007334:	6014      	str	r4, [r2, #0]
 8007336:	e7da      	b.n	80072ee <_free_r+0x26>
 8007338:	d902      	bls.n	8007340 <_free_r+0x78>
 800733a:	230c      	movs	r3, #12
 800733c:	6003      	str	r3, [r0, #0]
 800733e:	e7d6      	b.n	80072ee <_free_r+0x26>
 8007340:	6825      	ldr	r5, [r4, #0]
 8007342:	1961      	adds	r1, r4, r5
 8007344:	428b      	cmp	r3, r1
 8007346:	bf04      	itt	eq
 8007348:	6819      	ldreq	r1, [r3, #0]
 800734a:	685b      	ldreq	r3, [r3, #4]
 800734c:	6063      	str	r3, [r4, #4]
 800734e:	bf04      	itt	eq
 8007350:	1949      	addeq	r1, r1, r5
 8007352:	6021      	streq	r1, [r4, #0]
 8007354:	6054      	str	r4, [r2, #4]
 8007356:	e7ca      	b.n	80072ee <_free_r+0x26>
 8007358:	b003      	add	sp, #12
 800735a:	bd30      	pop	{r4, r5, pc}
 800735c:	20001c50 	.word	0x20001c50

08007360 <sbrk_aligned>:
 8007360:	b570      	push	{r4, r5, r6, lr}
 8007362:	4e0e      	ldr	r6, [pc, #56]	; (800739c <sbrk_aligned+0x3c>)
 8007364:	460c      	mov	r4, r1
 8007366:	6831      	ldr	r1, [r6, #0]
 8007368:	4605      	mov	r5, r0
 800736a:	b911      	cbnz	r1, 8007372 <sbrk_aligned+0x12>
 800736c:	f000 f9d6 	bl	800771c <_sbrk_r>
 8007370:	6030      	str	r0, [r6, #0]
 8007372:	4621      	mov	r1, r4
 8007374:	4628      	mov	r0, r5
 8007376:	f000 f9d1 	bl	800771c <_sbrk_r>
 800737a:	1c43      	adds	r3, r0, #1
 800737c:	d00a      	beq.n	8007394 <sbrk_aligned+0x34>
 800737e:	1cc4      	adds	r4, r0, #3
 8007380:	f024 0403 	bic.w	r4, r4, #3
 8007384:	42a0      	cmp	r0, r4
 8007386:	d007      	beq.n	8007398 <sbrk_aligned+0x38>
 8007388:	1a21      	subs	r1, r4, r0
 800738a:	4628      	mov	r0, r5
 800738c:	f000 f9c6 	bl	800771c <_sbrk_r>
 8007390:	3001      	adds	r0, #1
 8007392:	d101      	bne.n	8007398 <sbrk_aligned+0x38>
 8007394:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007398:	4620      	mov	r0, r4
 800739a:	bd70      	pop	{r4, r5, r6, pc}
 800739c:	20001c54 	.word	0x20001c54

080073a0 <_malloc_r>:
 80073a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a4:	1ccd      	adds	r5, r1, #3
 80073a6:	f025 0503 	bic.w	r5, r5, #3
 80073aa:	3508      	adds	r5, #8
 80073ac:	2d0c      	cmp	r5, #12
 80073ae:	bf38      	it	cc
 80073b0:	250c      	movcc	r5, #12
 80073b2:	2d00      	cmp	r5, #0
 80073b4:	4607      	mov	r7, r0
 80073b6:	db01      	blt.n	80073bc <_malloc_r+0x1c>
 80073b8:	42a9      	cmp	r1, r5
 80073ba:	d905      	bls.n	80073c8 <_malloc_r+0x28>
 80073bc:	230c      	movs	r3, #12
 80073be:	603b      	str	r3, [r7, #0]
 80073c0:	2600      	movs	r6, #0
 80073c2:	4630      	mov	r0, r6
 80073c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800749c <_malloc_r+0xfc>
 80073cc:	f000 f868 	bl	80074a0 <__malloc_lock>
 80073d0:	f8d8 3000 	ldr.w	r3, [r8]
 80073d4:	461c      	mov	r4, r3
 80073d6:	bb5c      	cbnz	r4, 8007430 <_malloc_r+0x90>
 80073d8:	4629      	mov	r1, r5
 80073da:	4638      	mov	r0, r7
 80073dc:	f7ff ffc0 	bl	8007360 <sbrk_aligned>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	4604      	mov	r4, r0
 80073e4:	d155      	bne.n	8007492 <_malloc_r+0xf2>
 80073e6:	f8d8 4000 	ldr.w	r4, [r8]
 80073ea:	4626      	mov	r6, r4
 80073ec:	2e00      	cmp	r6, #0
 80073ee:	d145      	bne.n	800747c <_malloc_r+0xdc>
 80073f0:	2c00      	cmp	r4, #0
 80073f2:	d048      	beq.n	8007486 <_malloc_r+0xe6>
 80073f4:	6823      	ldr	r3, [r4, #0]
 80073f6:	4631      	mov	r1, r6
 80073f8:	4638      	mov	r0, r7
 80073fa:	eb04 0903 	add.w	r9, r4, r3
 80073fe:	f000 f98d 	bl	800771c <_sbrk_r>
 8007402:	4581      	cmp	r9, r0
 8007404:	d13f      	bne.n	8007486 <_malloc_r+0xe6>
 8007406:	6821      	ldr	r1, [r4, #0]
 8007408:	1a6d      	subs	r5, r5, r1
 800740a:	4629      	mov	r1, r5
 800740c:	4638      	mov	r0, r7
 800740e:	f7ff ffa7 	bl	8007360 <sbrk_aligned>
 8007412:	3001      	adds	r0, #1
 8007414:	d037      	beq.n	8007486 <_malloc_r+0xe6>
 8007416:	6823      	ldr	r3, [r4, #0]
 8007418:	442b      	add	r3, r5
 800741a:	6023      	str	r3, [r4, #0]
 800741c:	f8d8 3000 	ldr.w	r3, [r8]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d038      	beq.n	8007496 <_malloc_r+0xf6>
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	42a2      	cmp	r2, r4
 8007428:	d12b      	bne.n	8007482 <_malloc_r+0xe2>
 800742a:	2200      	movs	r2, #0
 800742c:	605a      	str	r2, [r3, #4]
 800742e:	e00f      	b.n	8007450 <_malloc_r+0xb0>
 8007430:	6822      	ldr	r2, [r4, #0]
 8007432:	1b52      	subs	r2, r2, r5
 8007434:	d41f      	bmi.n	8007476 <_malloc_r+0xd6>
 8007436:	2a0b      	cmp	r2, #11
 8007438:	d917      	bls.n	800746a <_malloc_r+0xca>
 800743a:	1961      	adds	r1, r4, r5
 800743c:	42a3      	cmp	r3, r4
 800743e:	6025      	str	r5, [r4, #0]
 8007440:	bf18      	it	ne
 8007442:	6059      	strne	r1, [r3, #4]
 8007444:	6863      	ldr	r3, [r4, #4]
 8007446:	bf08      	it	eq
 8007448:	f8c8 1000 	streq.w	r1, [r8]
 800744c:	5162      	str	r2, [r4, r5]
 800744e:	604b      	str	r3, [r1, #4]
 8007450:	4638      	mov	r0, r7
 8007452:	f104 060b 	add.w	r6, r4, #11
 8007456:	f000 f829 	bl	80074ac <__malloc_unlock>
 800745a:	f026 0607 	bic.w	r6, r6, #7
 800745e:	1d23      	adds	r3, r4, #4
 8007460:	1af2      	subs	r2, r6, r3
 8007462:	d0ae      	beq.n	80073c2 <_malloc_r+0x22>
 8007464:	1b9b      	subs	r3, r3, r6
 8007466:	50a3      	str	r3, [r4, r2]
 8007468:	e7ab      	b.n	80073c2 <_malloc_r+0x22>
 800746a:	42a3      	cmp	r3, r4
 800746c:	6862      	ldr	r2, [r4, #4]
 800746e:	d1dd      	bne.n	800742c <_malloc_r+0x8c>
 8007470:	f8c8 2000 	str.w	r2, [r8]
 8007474:	e7ec      	b.n	8007450 <_malloc_r+0xb0>
 8007476:	4623      	mov	r3, r4
 8007478:	6864      	ldr	r4, [r4, #4]
 800747a:	e7ac      	b.n	80073d6 <_malloc_r+0x36>
 800747c:	4634      	mov	r4, r6
 800747e:	6876      	ldr	r6, [r6, #4]
 8007480:	e7b4      	b.n	80073ec <_malloc_r+0x4c>
 8007482:	4613      	mov	r3, r2
 8007484:	e7cc      	b.n	8007420 <_malloc_r+0x80>
 8007486:	230c      	movs	r3, #12
 8007488:	603b      	str	r3, [r7, #0]
 800748a:	4638      	mov	r0, r7
 800748c:	f000 f80e 	bl	80074ac <__malloc_unlock>
 8007490:	e797      	b.n	80073c2 <_malloc_r+0x22>
 8007492:	6025      	str	r5, [r4, #0]
 8007494:	e7dc      	b.n	8007450 <_malloc_r+0xb0>
 8007496:	605b      	str	r3, [r3, #4]
 8007498:	deff      	udf	#255	; 0xff
 800749a:	bf00      	nop
 800749c:	20001c50 	.word	0x20001c50

080074a0 <__malloc_lock>:
 80074a0:	4801      	ldr	r0, [pc, #4]	; (80074a8 <__malloc_lock+0x8>)
 80074a2:	f7ff bf00 	b.w	80072a6 <__retarget_lock_acquire_recursive>
 80074a6:	bf00      	nop
 80074a8:	20001c4c 	.word	0x20001c4c

080074ac <__malloc_unlock>:
 80074ac:	4801      	ldr	r0, [pc, #4]	; (80074b4 <__malloc_unlock+0x8>)
 80074ae:	f7ff befb 	b.w	80072a8 <__retarget_lock_release_recursive>
 80074b2:	bf00      	nop
 80074b4:	20001c4c 	.word	0x20001c4c

080074b8 <__sflush_r>:
 80074b8:	898a      	ldrh	r2, [r1, #12]
 80074ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074be:	4605      	mov	r5, r0
 80074c0:	0710      	lsls	r0, r2, #28
 80074c2:	460c      	mov	r4, r1
 80074c4:	d458      	bmi.n	8007578 <__sflush_r+0xc0>
 80074c6:	684b      	ldr	r3, [r1, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	dc05      	bgt.n	80074d8 <__sflush_r+0x20>
 80074cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	dc02      	bgt.n	80074d8 <__sflush_r+0x20>
 80074d2:	2000      	movs	r0, #0
 80074d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074da:	2e00      	cmp	r6, #0
 80074dc:	d0f9      	beq.n	80074d2 <__sflush_r+0x1a>
 80074de:	2300      	movs	r3, #0
 80074e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074e4:	682f      	ldr	r7, [r5, #0]
 80074e6:	6a21      	ldr	r1, [r4, #32]
 80074e8:	602b      	str	r3, [r5, #0]
 80074ea:	d032      	beq.n	8007552 <__sflush_r+0x9a>
 80074ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074ee:	89a3      	ldrh	r3, [r4, #12]
 80074f0:	075a      	lsls	r2, r3, #29
 80074f2:	d505      	bpl.n	8007500 <__sflush_r+0x48>
 80074f4:	6863      	ldr	r3, [r4, #4]
 80074f6:	1ac0      	subs	r0, r0, r3
 80074f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074fa:	b10b      	cbz	r3, 8007500 <__sflush_r+0x48>
 80074fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074fe:	1ac0      	subs	r0, r0, r3
 8007500:	2300      	movs	r3, #0
 8007502:	4602      	mov	r2, r0
 8007504:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007506:	6a21      	ldr	r1, [r4, #32]
 8007508:	4628      	mov	r0, r5
 800750a:	47b0      	blx	r6
 800750c:	1c43      	adds	r3, r0, #1
 800750e:	89a3      	ldrh	r3, [r4, #12]
 8007510:	d106      	bne.n	8007520 <__sflush_r+0x68>
 8007512:	6829      	ldr	r1, [r5, #0]
 8007514:	291d      	cmp	r1, #29
 8007516:	d82b      	bhi.n	8007570 <__sflush_r+0xb8>
 8007518:	4a29      	ldr	r2, [pc, #164]	; (80075c0 <__sflush_r+0x108>)
 800751a:	410a      	asrs	r2, r1
 800751c:	07d6      	lsls	r6, r2, #31
 800751e:	d427      	bmi.n	8007570 <__sflush_r+0xb8>
 8007520:	2200      	movs	r2, #0
 8007522:	6062      	str	r2, [r4, #4]
 8007524:	04d9      	lsls	r1, r3, #19
 8007526:	6922      	ldr	r2, [r4, #16]
 8007528:	6022      	str	r2, [r4, #0]
 800752a:	d504      	bpl.n	8007536 <__sflush_r+0x7e>
 800752c:	1c42      	adds	r2, r0, #1
 800752e:	d101      	bne.n	8007534 <__sflush_r+0x7c>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	b903      	cbnz	r3, 8007536 <__sflush_r+0x7e>
 8007534:	6560      	str	r0, [r4, #84]	; 0x54
 8007536:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007538:	602f      	str	r7, [r5, #0]
 800753a:	2900      	cmp	r1, #0
 800753c:	d0c9      	beq.n	80074d2 <__sflush_r+0x1a>
 800753e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007542:	4299      	cmp	r1, r3
 8007544:	d002      	beq.n	800754c <__sflush_r+0x94>
 8007546:	4628      	mov	r0, r5
 8007548:	f7ff febe 	bl	80072c8 <_free_r>
 800754c:	2000      	movs	r0, #0
 800754e:	6360      	str	r0, [r4, #52]	; 0x34
 8007550:	e7c0      	b.n	80074d4 <__sflush_r+0x1c>
 8007552:	2301      	movs	r3, #1
 8007554:	4628      	mov	r0, r5
 8007556:	47b0      	blx	r6
 8007558:	1c41      	adds	r1, r0, #1
 800755a:	d1c8      	bne.n	80074ee <__sflush_r+0x36>
 800755c:	682b      	ldr	r3, [r5, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d0c5      	beq.n	80074ee <__sflush_r+0x36>
 8007562:	2b1d      	cmp	r3, #29
 8007564:	d001      	beq.n	800756a <__sflush_r+0xb2>
 8007566:	2b16      	cmp	r3, #22
 8007568:	d101      	bne.n	800756e <__sflush_r+0xb6>
 800756a:	602f      	str	r7, [r5, #0]
 800756c:	e7b1      	b.n	80074d2 <__sflush_r+0x1a>
 800756e:	89a3      	ldrh	r3, [r4, #12]
 8007570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007574:	81a3      	strh	r3, [r4, #12]
 8007576:	e7ad      	b.n	80074d4 <__sflush_r+0x1c>
 8007578:	690f      	ldr	r7, [r1, #16]
 800757a:	2f00      	cmp	r7, #0
 800757c:	d0a9      	beq.n	80074d2 <__sflush_r+0x1a>
 800757e:	0793      	lsls	r3, r2, #30
 8007580:	680e      	ldr	r6, [r1, #0]
 8007582:	bf08      	it	eq
 8007584:	694b      	ldreq	r3, [r1, #20]
 8007586:	600f      	str	r7, [r1, #0]
 8007588:	bf18      	it	ne
 800758a:	2300      	movne	r3, #0
 800758c:	eba6 0807 	sub.w	r8, r6, r7
 8007590:	608b      	str	r3, [r1, #8]
 8007592:	f1b8 0f00 	cmp.w	r8, #0
 8007596:	dd9c      	ble.n	80074d2 <__sflush_r+0x1a>
 8007598:	6a21      	ldr	r1, [r4, #32]
 800759a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800759c:	4643      	mov	r3, r8
 800759e:	463a      	mov	r2, r7
 80075a0:	4628      	mov	r0, r5
 80075a2:	47b0      	blx	r6
 80075a4:	2800      	cmp	r0, #0
 80075a6:	dc06      	bgt.n	80075b6 <__sflush_r+0xfe>
 80075a8:	89a3      	ldrh	r3, [r4, #12]
 80075aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ae:	81a3      	strh	r3, [r4, #12]
 80075b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075b4:	e78e      	b.n	80074d4 <__sflush_r+0x1c>
 80075b6:	4407      	add	r7, r0
 80075b8:	eba8 0800 	sub.w	r8, r8, r0
 80075bc:	e7e9      	b.n	8007592 <__sflush_r+0xda>
 80075be:	bf00      	nop
 80075c0:	dfbffffe 	.word	0xdfbffffe

080075c4 <_fflush_r>:
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	690b      	ldr	r3, [r1, #16]
 80075c8:	4605      	mov	r5, r0
 80075ca:	460c      	mov	r4, r1
 80075cc:	b913      	cbnz	r3, 80075d4 <_fflush_r+0x10>
 80075ce:	2500      	movs	r5, #0
 80075d0:	4628      	mov	r0, r5
 80075d2:	bd38      	pop	{r3, r4, r5, pc}
 80075d4:	b118      	cbz	r0, 80075de <_fflush_r+0x1a>
 80075d6:	6a03      	ldr	r3, [r0, #32]
 80075d8:	b90b      	cbnz	r3, 80075de <_fflush_r+0x1a>
 80075da:	f7ff fc2b 	bl	8006e34 <__sinit>
 80075de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d0f3      	beq.n	80075ce <_fflush_r+0xa>
 80075e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075e8:	07d0      	lsls	r0, r2, #31
 80075ea:	d404      	bmi.n	80075f6 <_fflush_r+0x32>
 80075ec:	0599      	lsls	r1, r3, #22
 80075ee:	d402      	bmi.n	80075f6 <_fflush_r+0x32>
 80075f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075f2:	f7ff fe58 	bl	80072a6 <__retarget_lock_acquire_recursive>
 80075f6:	4628      	mov	r0, r5
 80075f8:	4621      	mov	r1, r4
 80075fa:	f7ff ff5d 	bl	80074b8 <__sflush_r>
 80075fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007600:	07da      	lsls	r2, r3, #31
 8007602:	4605      	mov	r5, r0
 8007604:	d4e4      	bmi.n	80075d0 <_fflush_r+0xc>
 8007606:	89a3      	ldrh	r3, [r4, #12]
 8007608:	059b      	lsls	r3, r3, #22
 800760a:	d4e1      	bmi.n	80075d0 <_fflush_r+0xc>
 800760c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800760e:	f7ff fe4b 	bl	80072a8 <__retarget_lock_release_recursive>
 8007612:	e7dd      	b.n	80075d0 <_fflush_r+0xc>

08007614 <__swhatbuf_r>:
 8007614:	b570      	push	{r4, r5, r6, lr}
 8007616:	460c      	mov	r4, r1
 8007618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800761c:	2900      	cmp	r1, #0
 800761e:	b096      	sub	sp, #88	; 0x58
 8007620:	4615      	mov	r5, r2
 8007622:	461e      	mov	r6, r3
 8007624:	da0d      	bge.n	8007642 <__swhatbuf_r+0x2e>
 8007626:	89a3      	ldrh	r3, [r4, #12]
 8007628:	f013 0f80 	tst.w	r3, #128	; 0x80
 800762c:	f04f 0100 	mov.w	r1, #0
 8007630:	bf0c      	ite	eq
 8007632:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007636:	2340      	movne	r3, #64	; 0x40
 8007638:	2000      	movs	r0, #0
 800763a:	6031      	str	r1, [r6, #0]
 800763c:	602b      	str	r3, [r5, #0]
 800763e:	b016      	add	sp, #88	; 0x58
 8007640:	bd70      	pop	{r4, r5, r6, pc}
 8007642:	466a      	mov	r2, sp
 8007644:	f000 f848 	bl	80076d8 <_fstat_r>
 8007648:	2800      	cmp	r0, #0
 800764a:	dbec      	blt.n	8007626 <__swhatbuf_r+0x12>
 800764c:	9901      	ldr	r1, [sp, #4]
 800764e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007652:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007656:	4259      	negs	r1, r3
 8007658:	4159      	adcs	r1, r3
 800765a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800765e:	e7eb      	b.n	8007638 <__swhatbuf_r+0x24>

08007660 <__smakebuf_r>:
 8007660:	898b      	ldrh	r3, [r1, #12]
 8007662:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007664:	079d      	lsls	r5, r3, #30
 8007666:	4606      	mov	r6, r0
 8007668:	460c      	mov	r4, r1
 800766a:	d507      	bpl.n	800767c <__smakebuf_r+0x1c>
 800766c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	6123      	str	r3, [r4, #16]
 8007674:	2301      	movs	r3, #1
 8007676:	6163      	str	r3, [r4, #20]
 8007678:	b002      	add	sp, #8
 800767a:	bd70      	pop	{r4, r5, r6, pc}
 800767c:	ab01      	add	r3, sp, #4
 800767e:	466a      	mov	r2, sp
 8007680:	f7ff ffc8 	bl	8007614 <__swhatbuf_r>
 8007684:	9900      	ldr	r1, [sp, #0]
 8007686:	4605      	mov	r5, r0
 8007688:	4630      	mov	r0, r6
 800768a:	f7ff fe89 	bl	80073a0 <_malloc_r>
 800768e:	b948      	cbnz	r0, 80076a4 <__smakebuf_r+0x44>
 8007690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007694:	059a      	lsls	r2, r3, #22
 8007696:	d4ef      	bmi.n	8007678 <__smakebuf_r+0x18>
 8007698:	f023 0303 	bic.w	r3, r3, #3
 800769c:	f043 0302 	orr.w	r3, r3, #2
 80076a0:	81a3      	strh	r3, [r4, #12]
 80076a2:	e7e3      	b.n	800766c <__smakebuf_r+0xc>
 80076a4:	89a3      	ldrh	r3, [r4, #12]
 80076a6:	6020      	str	r0, [r4, #0]
 80076a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ac:	81a3      	strh	r3, [r4, #12]
 80076ae:	9b00      	ldr	r3, [sp, #0]
 80076b0:	6163      	str	r3, [r4, #20]
 80076b2:	9b01      	ldr	r3, [sp, #4]
 80076b4:	6120      	str	r0, [r4, #16]
 80076b6:	b15b      	cbz	r3, 80076d0 <__smakebuf_r+0x70>
 80076b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076bc:	4630      	mov	r0, r6
 80076be:	f000 f81d 	bl	80076fc <_isatty_r>
 80076c2:	b128      	cbz	r0, 80076d0 <__smakebuf_r+0x70>
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	f023 0303 	bic.w	r3, r3, #3
 80076ca:	f043 0301 	orr.w	r3, r3, #1
 80076ce:	81a3      	strh	r3, [r4, #12]
 80076d0:	89a3      	ldrh	r3, [r4, #12]
 80076d2:	431d      	orrs	r5, r3
 80076d4:	81a5      	strh	r5, [r4, #12]
 80076d6:	e7cf      	b.n	8007678 <__smakebuf_r+0x18>

080076d8 <_fstat_r>:
 80076d8:	b538      	push	{r3, r4, r5, lr}
 80076da:	4d07      	ldr	r5, [pc, #28]	; (80076f8 <_fstat_r+0x20>)
 80076dc:	2300      	movs	r3, #0
 80076de:	4604      	mov	r4, r0
 80076e0:	4608      	mov	r0, r1
 80076e2:	4611      	mov	r1, r2
 80076e4:	602b      	str	r3, [r5, #0]
 80076e6:	f7f9 f9d1 	bl	8000a8c <_fstat>
 80076ea:	1c43      	adds	r3, r0, #1
 80076ec:	d102      	bne.n	80076f4 <_fstat_r+0x1c>
 80076ee:	682b      	ldr	r3, [r5, #0]
 80076f0:	b103      	cbz	r3, 80076f4 <_fstat_r+0x1c>
 80076f2:	6023      	str	r3, [r4, #0]
 80076f4:	bd38      	pop	{r3, r4, r5, pc}
 80076f6:	bf00      	nop
 80076f8:	20001c48 	.word	0x20001c48

080076fc <_isatty_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	4d06      	ldr	r5, [pc, #24]	; (8007718 <_isatty_r+0x1c>)
 8007700:	2300      	movs	r3, #0
 8007702:	4604      	mov	r4, r0
 8007704:	4608      	mov	r0, r1
 8007706:	602b      	str	r3, [r5, #0]
 8007708:	f7f9 f9d0 	bl	8000aac <_isatty>
 800770c:	1c43      	adds	r3, r0, #1
 800770e:	d102      	bne.n	8007716 <_isatty_r+0x1a>
 8007710:	682b      	ldr	r3, [r5, #0]
 8007712:	b103      	cbz	r3, 8007716 <_isatty_r+0x1a>
 8007714:	6023      	str	r3, [r4, #0]
 8007716:	bd38      	pop	{r3, r4, r5, pc}
 8007718:	20001c48 	.word	0x20001c48

0800771c <_sbrk_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4d06      	ldr	r5, [pc, #24]	; (8007738 <_sbrk_r+0x1c>)
 8007720:	2300      	movs	r3, #0
 8007722:	4604      	mov	r4, r0
 8007724:	4608      	mov	r0, r1
 8007726:	602b      	str	r3, [r5, #0]
 8007728:	f7f9 f9d8 	bl	8000adc <_sbrk>
 800772c:	1c43      	adds	r3, r0, #1
 800772e:	d102      	bne.n	8007736 <_sbrk_r+0x1a>
 8007730:	682b      	ldr	r3, [r5, #0]
 8007732:	b103      	cbz	r3, 8007736 <_sbrk_r+0x1a>
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	bd38      	pop	{r3, r4, r5, pc}
 8007738:	20001c48 	.word	0x20001c48

0800773c <_init>:
 800773c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773e:	bf00      	nop
 8007740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007742:	bc08      	pop	{r3}
 8007744:	469e      	mov	lr, r3
 8007746:	4770      	bx	lr

08007748 <_fini>:
 8007748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774a:	bf00      	nop
 800774c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800774e:	bc08      	pop	{r3}
 8007750:	469e      	mov	lr, r3
 8007752:	4770      	bx	lr
