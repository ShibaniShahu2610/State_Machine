
FreeRTOS_Task_Creation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cc4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08006e74  08006e74  00016e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fe8  08006fe8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08006fe8  08006fe8  00016fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ff0  08006ff0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ff0  08006ff0  00016ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ff4  08006ff4  00016ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf0  2000006c  08007064  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c5c  08007064  00021c5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bb7b  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038a4  00000000  00000000  0003bc5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001750  00000000  00000000  0003f500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001217  00000000  00000000  00040c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004965  00000000  00000000  00041e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000192f2  00000000  00000000  000467cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f1ee  00000000  00000000  0005fabe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006880  00000000  00000000  0016ecac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0017552c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006e5c 	.word	0x08006e5c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08006e5c 	.word	0x08006e5c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fb2f 	bl	8000b52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f84e 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f8ca 	bl	8000690 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004fc:	f000 f89c 	bl	8000638 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000500:	f003 fa20 	bl	8003944 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_1 */
  Task_1Handle = osThreadNew(Start_Task_1, NULL, &Task_1_attributes);
 8000504:	4a17      	ldr	r2, [pc, #92]	; (8000564 <main+0x78>)
 8000506:	2100      	movs	r1, #0
 8000508:	4817      	ldr	r0, [pc, #92]	; (8000568 <main+0x7c>)
 800050a:	f003 fa65 	bl	80039d8 <osThreadNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a16      	ldr	r2, [pc, #88]	; (800056c <main+0x80>)
 8000512:	6013      	str	r3, [r2, #0]
  if(Task_1Handle == NULL){
 8000514:	4b15      	ldr	r3, [pc, #84]	; (800056c <main+0x80>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d102      	bne.n	8000522 <main+0x36>
	  printf("Failed to create Task 1\r\n");
 800051c:	4814      	ldr	r0, [pc, #80]	; (8000570 <main+0x84>)
 800051e:	f006 f8a3 	bl	8006668 <puts>
  }

  /* creation of Task_2 */
  Task_2Handle = osThreadNew(Start_Task_2, NULL, &Task_2_attributes);
 8000522:	4a14      	ldr	r2, [pc, #80]	; (8000574 <main+0x88>)
 8000524:	2100      	movs	r1, #0
 8000526:	4814      	ldr	r0, [pc, #80]	; (8000578 <main+0x8c>)
 8000528:	f003 fa56 	bl	80039d8 <osThreadNew>
 800052c:	4603      	mov	r3, r0
 800052e:	4a13      	ldr	r2, [pc, #76]	; (800057c <main+0x90>)
 8000530:	6013      	str	r3, [r2, #0]
  if(Task_2Handle == NULL){
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <main+0x90>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d102      	bne.n	8000540 <main+0x54>
  	  printf("Failed to create Task 2\r\n");
 800053a:	4811      	ldr	r0, [pc, #68]	; (8000580 <main+0x94>)
 800053c:	f006 f894 	bl	8006668 <puts>
  }
  /* creation of Task_3 */
  Task_3Handle = osThreadNew(Start_Task_3, NULL, &Task_3_attributes);
 8000540:	4a10      	ldr	r2, [pc, #64]	; (8000584 <main+0x98>)
 8000542:	2100      	movs	r1, #0
 8000544:	4810      	ldr	r0, [pc, #64]	; (8000588 <main+0x9c>)
 8000546:	f003 fa47 	bl	80039d8 <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a0f      	ldr	r2, [pc, #60]	; (800058c <main+0xa0>)
 800054e:	6013      	str	r3, [r2, #0]
  if(Task_3Handle == NULL){
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <main+0xa0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d102      	bne.n	800055e <main+0x72>
  	  printf("Failed to create Task 3\r\n");
 8000558:	480d      	ldr	r0, [pc, #52]	; (8000590 <main+0xa4>)
 800055a:	f006 f885 	bl	8006668 <puts>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800055e:	f003 fa15 	bl	800398c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000562:	e7fe      	b.n	8000562 <main+0x76>
 8000564:	08006f34 	.word	0x08006f34
 8000568:	080006d9 	.word	0x080006d9
 800056c:	20000110 	.word	0x20000110
 8000570:	08006e8c 	.word	0x08006e8c
 8000574:	08006f58 	.word	0x08006f58
 8000578:	080006f5 	.word	0x080006f5
 800057c:	20000114 	.word	0x20000114
 8000580:	08006ea8 	.word	0x08006ea8
 8000584:	08006f7c 	.word	0x08006f7c
 8000588:	08000711 	.word	0x08000711
 800058c:	20000118 	.word	0x20000118
 8000590:	08006ec4 	.word	0x08006ec4

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b096      	sub	sp, #88	; 0x58
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	2244      	movs	r2, #68	; 0x44
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f006 f940 	bl	8006828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	463b      	mov	r3, r7
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ba:	f000 fd85 	bl	80010c8 <HAL_PWREx_ControlVoltageScaling>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005c4:	f000 f8c4 	bl	8000750 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d2:	2340      	movs	r3, #64	; 0x40
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005da:	2302      	movs	r3, #2
 80005dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005de:	2301      	movs	r3, #1
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005e2:	230a      	movs	r3, #10
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 fdcc 	bl	8001194 <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000602:	f000 f8a5 	bl	8000750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2303      	movs	r3, #3
 800060c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000616:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	2104      	movs	r1, #4
 8000620:	4618      	mov	r0, r3
 8000622:	f001 f9d1 	bl	80019c8 <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800062c:	f000 f890 	bl	8000750 <Error_Handler>
  }
}
 8000630:	bf00      	nop
 8000632:	3758      	adds	r7, #88	; 0x58
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_LPUART1_UART_Init+0x50>)
 800063e:	4a13      	ldr	r2, [pc, #76]	; (800068c <MX_LPUART1_UART_Init+0x54>)
 8000640:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_LPUART1_UART_Init+0x50>)
 8000644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000648:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_LPUART1_UART_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <MX_LPUART1_UART_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_LPUART1_UART_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <MX_LPUART1_UART_Init+0x50>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_LPUART1_UART_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <MX_LPUART1_UART_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_LPUART1_UART_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_LPUART1_UART_Init+0x50>)
 8000676:	f002 fb7b 	bl	8002d70 <HAL_UART_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000680:	f000 f866 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000088 	.word	0x20000088
 800068c:	40008000 	.word	0x40008000

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_GPIO_Init+0x44>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <MX_GPIO_Init+0x44>)
 800069c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_GPIO_Init+0x44>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80006ae:	f000 fd61 	bl	8001174 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_GPIO_Init+0x44>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <MX_GPIO_Init+0x44>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <MX_GPIO_Init+0x44>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000

080006d8 <Start_Task_1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Task_1 */
void Start_Task_1(void *argument)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	printf("Hello from Task 1\r\n");
 80006e0:	4803      	ldr	r0, [pc, #12]	; (80006f0 <Start_Task_1+0x18>)
 80006e2:	f005 ffc1 	bl	8006668 <puts>
    osDelay(1000);
 80006e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ea:	f003 fa07 	bl	8003afc <osDelay>
	printf("Hello from Task 1\r\n");
 80006ee:	e7f7      	b.n	80006e0 <Start_Task_1+0x8>
 80006f0:	08006ee0 	.word	0x08006ee0

080006f4 <Start_Task_2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Task_2 */
void Start_Task_2(void *argument)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Task_2 */
  /* Infinite loop */
  for(;;)
  {
	printf("Hello from Task 2\r\n");
 80006fc:	4803      	ldr	r0, [pc, #12]	; (800070c <Start_Task_2+0x18>)
 80006fe:	f005 ffb3 	bl	8006668 <puts>
    osDelay(1000);
 8000702:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000706:	f003 f9f9 	bl	8003afc <osDelay>
	printf("Hello from Task 2\r\n");
 800070a:	e7f7      	b.n	80006fc <Start_Task_2+0x8>
 800070c:	08006ef4 	.word	0x08006ef4

08000710 <Start_Task_3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Task_3 */
void Start_Task_3(void *argument)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Task_3 */
  /* Infinite loop */
  for(;;)
  {
	printf("Hello from Task 3\r\n");
 8000718:	4803      	ldr	r0, [pc, #12]	; (8000728 <Start_Task_3+0x18>)
 800071a:	f005 ffa5 	bl	8006668 <puts>
    osDelay(1000);
 800071e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000722:	f003 f9eb 	bl	8003afc <osDelay>
	printf("Hello from Task 3\r\n");
 8000726:	e7f7      	b.n	8000718 <Start_Task_3+0x8>
 8000728:	08006f08 	.word	0x08006f08

0800072c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a04      	ldr	r2, [pc, #16]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d101      	bne.n	8000742 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800073e:	f000 fa21 	bl	8000b84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40001000 	.word	0x40001000

08000750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000754:	b672      	cpsid	i
}
 8000756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000758:	e7fe      	b.n	8000758 <Error_Handler+0x8>
	...

0800075c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <HAL_MspInit+0x4c>)
 8000764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000766:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <HAL_MspInit+0x4c>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6613      	str	r3, [r2, #96]	; 0x60
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <HAL_MspInit+0x4c>)
 8000770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <HAL_MspInit+0x4c>)
 800077c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800077e:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <HAL_MspInit+0x4c>)
 8000780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000784:	6593      	str	r3, [r2, #88]	; 0x58
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_MspInit+0x4c>)
 8000788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800078a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	210f      	movs	r1, #15
 8000796:	f06f 0001 	mvn.w	r0, #1
 800079a:	f000 facb 	bl	8000d34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b0ac      	sub	sp, #176	; 0xb0
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	228c      	movs	r2, #140	; 0x8c
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f006 f82b 	bl	8006828 <memset>
  if(huart->Instance==LPUART1)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a22      	ldr	r2, [pc, #136]	; (8000860 <HAL_UART_MspInit+0xb4>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d13d      	bne.n	8000858 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80007dc:	2320      	movs	r3, #32
 80007de:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	4618      	mov	r0, r3
 80007ea:	f001 fb43 	bl	8001e74 <HAL_RCCEx_PeriphCLKConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007f4:	f7ff ffac 	bl	8000750 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <HAL_UART_MspInit+0xb8>)
 80007fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007fc:	4a19      	ldr	r2, [pc, #100]	; (8000864 <HAL_UART_MspInit+0xb8>)
 80007fe:	f043 0301 	orr.w	r3, r3, #1
 8000802:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000804:	4b17      	ldr	r3, [pc, #92]	; (8000864 <HAL_UART_MspInit+0xb8>)
 8000806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <HAL_UART_MspInit+0xb8>)
 8000812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000814:	4a13      	ldr	r2, [pc, #76]	; (8000864 <HAL_UART_MspInit+0xb8>)
 8000816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800081a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <HAL_UART_MspInit+0xb8>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000828:	f000 fca4 	bl	8001174 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800082c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000830:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000834:	2302      	movs	r3, #2
 8000836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000840:	2303      	movs	r3, #3
 8000842:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000846:	2308      	movs	r3, #8
 8000848:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800084c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000850:	4619      	mov	r1, r3
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <HAL_UART_MspInit+0xbc>)
 8000854:	f000 fa98 	bl	8000d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000858:	bf00      	nop
 800085a:	37b0      	adds	r7, #176	; 0xb0
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40008000 	.word	0x40008000
 8000864:	40021000 	.word	0x40021000
 8000868:	48001800 	.word	0x48001800

0800086c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08e      	sub	sp, #56	; 0x38
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000874:	2300      	movs	r3, #0
 8000876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800087a:	4b34      	ldr	r3, [pc, #208]	; (800094c <HAL_InitTick+0xe0>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087e:	4a33      	ldr	r2, [pc, #204]	; (800094c <HAL_InitTick+0xe0>)
 8000880:	f043 0310 	orr.w	r3, r3, #16
 8000884:	6593      	str	r3, [r2, #88]	; 0x58
 8000886:	4b31      	ldr	r3, [pc, #196]	; (800094c <HAL_InitTick+0xe0>)
 8000888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088a:	f003 0310 	and.w	r3, r3, #16
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000892:	f107 0210 	add.w	r2, r7, #16
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f001 fa57 	bl	8001d50 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008a2:	6a3b      	ldr	r3, [r7, #32]
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d103      	bne.n	80008b4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008ac:	f001 fa24 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 80008b0:	6378      	str	r0, [r7, #52]	; 0x34
 80008b2:	e004      	b.n	80008be <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008b4:	f001 fa20 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 80008b8:	4603      	mov	r3, r0
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008c0:	4a23      	ldr	r2, [pc, #140]	; (8000950 <HAL_InitTick+0xe4>)
 80008c2:	fba2 2303 	umull	r2, r3, r2, r3
 80008c6:	0c9b      	lsrs	r3, r3, #18
 80008c8:	3b01      	subs	r3, #1
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008cc:	4b21      	ldr	r3, [pc, #132]	; (8000954 <HAL_InitTick+0xe8>)
 80008ce:	4a22      	ldr	r2, [pc, #136]	; (8000958 <HAL_InitTick+0xec>)
 80008d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008d2:	4b20      	ldr	r3, [pc, #128]	; (8000954 <HAL_InitTick+0xe8>)
 80008d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008d8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008da:	4a1e      	ldr	r2, [pc, #120]	; (8000954 <HAL_InitTick+0xe8>)
 80008dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008de:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <HAL_InitTick+0xe8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e6:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <HAL_InitTick+0xe8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <HAL_InitTick+0xe8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80008f2:	4818      	ldr	r0, [pc, #96]	; (8000954 <HAL_InitTick+0xe8>)
 80008f4:	f001 ff88 	bl	8002808 <HAL_TIM_Base_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80008fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000902:	2b00      	cmp	r3, #0
 8000904:	d11b      	bne.n	800093e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000906:	4813      	ldr	r0, [pc, #76]	; (8000954 <HAL_InitTick+0xe8>)
 8000908:	f001 ffe0 	bl	80028cc <HAL_TIM_Base_Start_IT>
 800090c:	4603      	mov	r3, r0
 800090e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000912:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000916:	2b00      	cmp	r3, #0
 8000918:	d111      	bne.n	800093e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800091a:	2036      	movs	r0, #54	; 0x36
 800091c:	f000 fa26 	bl	8000d6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b0f      	cmp	r3, #15
 8000924:	d808      	bhi.n	8000938 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000926:	2200      	movs	r2, #0
 8000928:	6879      	ldr	r1, [r7, #4]
 800092a:	2036      	movs	r0, #54	; 0x36
 800092c:	f000 fa02 	bl	8000d34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000930:	4a0a      	ldr	r2, [pc, #40]	; (800095c <HAL_InitTick+0xf0>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6013      	str	r3, [r2, #0]
 8000936:	e002      	b.n	800093e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000938:	2301      	movs	r3, #1
 800093a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800093e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000942:	4618      	mov	r0, r3
 8000944:	3738      	adds	r7, #56	; 0x38
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40021000 	.word	0x40021000
 8000950:	431bde83 	.word	0x431bde83
 8000954:	2000011c 	.word	0x2000011c
 8000958:	40001000 	.word	0x40001000
 800095c:	20000004 	.word	0x20000004

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <NMI_Handler+0x4>

08000966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <HardFault_Handler+0x4>

0800096c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <MemManage_Handler+0x4>

08000972 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <UsageFault_Handler+0x4>

0800097e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000990:	4802      	ldr	r0, [pc, #8]	; (800099c <TIM6_DAC_IRQHandler+0x10>)
 8000992:	f002 f80b 	bl	80029ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	2000011c 	.word	0x2000011c

080009a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	e00a      	b.n	80009c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009b2:	f3af 8000 	nop.w
 80009b6:	4601      	mov	r1, r0
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	60ba      	str	r2, [r7, #8]
 80009be:	b2ca      	uxtb	r2, r1
 80009c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	3301      	adds	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697a      	ldr	r2, [r7, #20]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	dbf0      	blt.n	80009b2 <_read+0x12>
  }

  return len;
 80009d0:	687b      	ldr	r3, [r7, #4]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (unsigned char const *) ptr, len, 1000);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f0:	68b9      	ldr	r1, [r7, #8]
 80009f2:	4804      	ldr	r0, [pc, #16]	; (8000a04 <_write+0x28>)
 80009f4:	f002 fa0a 	bl	8002e0c <HAL_UART_Transmit>
  return len;
 80009f8:	687b      	ldr	r3, [r7, #4]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000088 	.word	0x20000088

08000a08 <_close>:

int _close(int file)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a30:	605a      	str	r2, [r3, #4]
  return 0;
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <_isatty>:

int _isatty(int file)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a48:	2301      	movs	r3, #1
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b085      	sub	sp, #20
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	60f8      	str	r0, [r7, #12]
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a62:	2300      	movs	r3, #0
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a78:	4a14      	ldr	r2, [pc, #80]	; (8000acc <_sbrk+0x5c>)
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <_sbrk+0x60>)
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a84:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <_sbrk+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d102      	bne.n	8000a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <_sbrk+0x64>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <_sbrk+0x68>)
 8000a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d207      	bcs.n	8000ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa0:	f005 ff66 	bl	8006970 <__errno>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aae:	e009      	b.n	8000ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ab6:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <_sbrk+0x64>)
 8000ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20050000 	.word	0x20050000
 8000ad0:	00000400 	.word	0x00000400
 8000ad4:	20000168 	.word	0x20000168
 8000ad8:	20001c60 	.word	0x20001c60

08000adc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <SystemInit+0x20>)
 8000ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <SystemInit+0x20>)
 8000ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b04:	f7ff ffea 	bl	8000adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0a:	490d      	ldr	r1, [pc, #52]	; (8000b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	; (8000b44 <LoopForever+0xe>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b20:	4c0a      	ldr	r4, [pc, #40]	; (8000b4c <LoopForever+0x16>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f005 ff25 	bl	800697c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b32:	f7ff fcdb 	bl	80004ec <main>

08000b36 <LoopForever>:

LoopForever:
    b LoopForever
 8000b36:	e7fe      	b.n	8000b36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b38:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b44:	08006ff8 	.word	0x08006ff8
  ldr r2, =_sbss
 8000b48:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b4c:	20001c5c 	.word	0x20001c5c

08000b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_2_IRQHandler>

08000b52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f000 f8de 	bl	8000d1e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b62:	200f      	movs	r0, #15
 8000b64:	f7ff fe82 	bl	800086c <HAL_InitTick>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d002      	beq.n	8000b74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	71fb      	strb	r3, [r7, #7]
 8000b72:	e001      	b.n	8000b78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b74:	f7ff fdf2 	bl	800075c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b78:	79fb      	ldrb	r3, [r7, #7]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	2000016c 	.word	0x2000016c

08000bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <HAL_GetTick+0x14>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	2000016c 	.word	0x2000016c

08000bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	60d3      	str	r3, [r2, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <__NVIC_GetPriorityGrouping+0x18>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	f003 0307 	and.w	r3, r3, #7
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db0b      	blt.n	8000c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	f003 021f 	and.w	r2, r3, #31
 8000c40:	4907      	ldr	r1, [pc, #28]	; (8000c60 <__NVIC_EnableIRQ+0x38>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	095b      	lsrs	r3, r3, #5
 8000c48:	2001      	movs	r0, #1
 8000c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000e100 	.word	0xe000e100

08000c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db0a      	blt.n	8000c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	490c      	ldr	r1, [pc, #48]	; (8000cb0 <__NVIC_SetPriority+0x4c>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	440b      	add	r3, r1
 8000c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c8c:	e00a      	b.n	8000ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <__NVIC_SetPriority+0x50>)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	3b04      	subs	r3, #4
 8000c9c:	0112      	lsls	r2, r2, #4
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	761a      	strb	r2, [r3, #24]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f1c3 0307 	rsb	r3, r3, #7
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	bf28      	it	cs
 8000cd6:	2304      	movcs	r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	2b06      	cmp	r3, #6
 8000ce0:	d902      	bls.n	8000ce8 <NVIC_EncodePriority+0x30>
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3b03      	subs	r3, #3
 8000ce6:	e000      	b.n	8000cea <NVIC_EncodePriority+0x32>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	43d9      	mvns	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	4313      	orrs	r3, r2
         );
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3724      	adds	r7, #36	; 0x24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ff4c 	bl	8000bc4 <__NVIC_SetPriorityGrouping>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d46:	f7ff ff61 	bl	8000c0c <__NVIC_GetPriorityGrouping>
 8000d4a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	68b9      	ldr	r1, [r7, #8]
 8000d50:	6978      	ldr	r0, [r7, #20]
 8000d52:	f7ff ffb1 	bl	8000cb8 <NVIC_EncodePriority>
 8000d56:	4602      	mov	r2, r0
 8000d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff80 	bl	8000c64 <__NVIC_SetPriority>
}
 8000d64:	bf00      	nop
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ff54 	bl	8000c28 <__NVIC_EnableIRQ>
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b087      	sub	sp, #28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d96:	e166      	b.n	8001066 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	fa01 f303 	lsl.w	r3, r1, r3
 8000da4:	4013      	ands	r3, r2
 8000da6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f000 8158 	beq.w	8001060 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d005      	beq.n	8000dc8 <HAL_GPIO_Init+0x40>
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0303 	and.w	r3, r3, #3
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d130      	bne.n	8000e2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	68da      	ldr	r2, [r3, #12]
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dfe:	2201      	movs	r2, #1
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43db      	mvns	r3, r3
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	091b      	lsrs	r3, r3, #4
 8000e14:	f003 0201 	and.w	r2, r3, #1
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 0303 	and.w	r3, r3, #3
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d017      	beq.n	8000e66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	2203      	movs	r2, #3
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d123      	bne.n	8000eba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	08da      	lsrs	r2, r3, #3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3208      	adds	r2, #8
 8000e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	220f      	movs	r2, #15
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	691a      	ldr	r2, [r3, #16]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	f003 0307 	and.w	r3, r3, #7
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	08da      	lsrs	r2, r3, #3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3208      	adds	r2, #8
 8000eb4:	6939      	ldr	r1, [r7, #16]
 8000eb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0203 	and.w	r2, r3, #3
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f000 80b2 	beq.w	8001060 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efc:	4b61      	ldr	r3, [pc, #388]	; (8001084 <HAL_GPIO_Init+0x2fc>)
 8000efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f00:	4a60      	ldr	r2, [pc, #384]	; (8001084 <HAL_GPIO_Init+0x2fc>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6613      	str	r3, [r2, #96]	; 0x60
 8000f08:	4b5e      	ldr	r3, [pc, #376]	; (8001084 <HAL_GPIO_Init+0x2fc>)
 8000f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f14:	4a5c      	ldr	r2, [pc, #368]	; (8001088 <HAL_GPIO_Init+0x300>)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f3e:	d02b      	beq.n	8000f98 <HAL_GPIO_Init+0x210>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a52      	ldr	r2, [pc, #328]	; (800108c <HAL_GPIO_Init+0x304>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d025      	beq.n	8000f94 <HAL_GPIO_Init+0x20c>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a51      	ldr	r2, [pc, #324]	; (8001090 <HAL_GPIO_Init+0x308>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d01f      	beq.n	8000f90 <HAL_GPIO_Init+0x208>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a50      	ldr	r2, [pc, #320]	; (8001094 <HAL_GPIO_Init+0x30c>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d019      	beq.n	8000f8c <HAL_GPIO_Init+0x204>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a4f      	ldr	r2, [pc, #316]	; (8001098 <HAL_GPIO_Init+0x310>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d013      	beq.n	8000f88 <HAL_GPIO_Init+0x200>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a4e      	ldr	r2, [pc, #312]	; (800109c <HAL_GPIO_Init+0x314>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d00d      	beq.n	8000f84 <HAL_GPIO_Init+0x1fc>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a4d      	ldr	r2, [pc, #308]	; (80010a0 <HAL_GPIO_Init+0x318>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d007      	beq.n	8000f80 <HAL_GPIO_Init+0x1f8>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a4c      	ldr	r2, [pc, #304]	; (80010a4 <HAL_GPIO_Init+0x31c>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d101      	bne.n	8000f7c <HAL_GPIO_Init+0x1f4>
 8000f78:	2307      	movs	r3, #7
 8000f7a:	e00e      	b.n	8000f9a <HAL_GPIO_Init+0x212>
 8000f7c:	2308      	movs	r3, #8
 8000f7e:	e00c      	b.n	8000f9a <HAL_GPIO_Init+0x212>
 8000f80:	2306      	movs	r3, #6
 8000f82:	e00a      	b.n	8000f9a <HAL_GPIO_Init+0x212>
 8000f84:	2305      	movs	r3, #5
 8000f86:	e008      	b.n	8000f9a <HAL_GPIO_Init+0x212>
 8000f88:	2304      	movs	r3, #4
 8000f8a:	e006      	b.n	8000f9a <HAL_GPIO_Init+0x212>
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e004      	b.n	8000f9a <HAL_GPIO_Init+0x212>
 8000f90:	2302      	movs	r3, #2
 8000f92:	e002      	b.n	8000f9a <HAL_GPIO_Init+0x212>
 8000f94:	2301      	movs	r3, #1
 8000f96:	e000      	b.n	8000f9a <HAL_GPIO_Init+0x212>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	f002 0203 	and.w	r2, r2, #3
 8000fa0:	0092      	lsls	r2, r2, #2
 8000fa2:	4093      	lsls	r3, r2
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000faa:	4937      	ldr	r1, [pc, #220]	; (8001088 <HAL_GPIO_Init+0x300>)
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fb8:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <HAL_GPIO_Init+0x320>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fdc:	4a32      	ldr	r2, [pc, #200]	; (80010a8 <HAL_GPIO_Init+0x320>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <HAL_GPIO_Init+0x320>)
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001006:	4a28      	ldr	r2, [pc, #160]	; (80010a8 <HAL_GPIO_Init+0x320>)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800100c:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <HAL_GPIO_Init+0x320>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001030:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <HAL_GPIO_Init+0x320>)
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <HAL_GPIO_Init+0x320>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800105a:	4a13      	ldr	r2, [pc, #76]	; (80010a8 <HAL_GPIO_Init+0x320>)
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	3301      	adds	r3, #1
 8001064:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	fa22 f303 	lsr.w	r3, r2, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	f47f ae91 	bne.w	8000d98 <HAL_GPIO_Init+0x10>
  }
}
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	371c      	adds	r7, #28
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	40021000 	.word	0x40021000
 8001088:	40010000 	.word	0x40010000
 800108c:	48000400 	.word	0x48000400
 8001090:	48000800 	.word	0x48000800
 8001094:	48000c00 	.word	0x48000c00
 8001098:	48001000 	.word	0x48001000
 800109c:	48001400 	.word	0x48001400
 80010a0:	48001800 	.word	0x48001800
 80010a4:	48001c00 	.word	0x48001c00
 80010a8:	40010400 	.word	0x40010400

080010ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40007000 	.word	0x40007000

080010c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010d6:	d130      	bne.n	800113a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010e4:	d038      	beq.n	8001158 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010ee:	4a1e      	ldr	r2, [pc, #120]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010f6:	4b1d      	ldr	r3, [pc, #116]	; (800116c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2232      	movs	r2, #50	; 0x32
 80010fc:	fb02 f303 	mul.w	r3, r2, r3
 8001100:	4a1b      	ldr	r2, [pc, #108]	; (8001170 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001102:	fba2 2303 	umull	r2, r3, r2, r3
 8001106:	0c9b      	lsrs	r3, r3, #18
 8001108:	3301      	adds	r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800110c:	e002      	b.n	8001114 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	3b01      	subs	r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800111c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001120:	d102      	bne.n	8001128 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1f2      	bne.n	800110e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001134:	d110      	bne.n	8001158 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e00f      	b.n	800115a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001146:	d007      	beq.n	8001158 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001150:	4a05      	ldr	r2, [pc, #20]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001156:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40007000 	.word	0x40007000
 800116c:	20000000 	.word	0x20000000
 8001170:	431bde83 	.word	0x431bde83

08001174 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <HAL_PWREx_EnableVddIO2+0x1c>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HAL_PWREx_EnableVddIO2+0x1c>)
 800117e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001182:	6053      	str	r3, [r2, #4]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40007000 	.word	0x40007000

08001194 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d102      	bne.n	80011a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	f000 bc08 	b.w	80019b8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011a8:	4b96      	ldr	r3, [pc, #600]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 030c 	and.w	r3, r3, #12
 80011b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011b2:	4b94      	ldr	r3, [pc, #592]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0310 	and.w	r3, r3, #16
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 80e4 	beq.w	8001392 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d007      	beq.n	80011e0 <HAL_RCC_OscConfig+0x4c>
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	2b0c      	cmp	r3, #12
 80011d4:	f040 808b 	bne.w	80012ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	f040 8087 	bne.w	80012ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011e0:	4b88      	ldr	r3, [pc, #544]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d005      	beq.n	80011f8 <HAL_RCC_OscConfig+0x64>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e3df      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a1a      	ldr	r2, [r3, #32]
 80011fc:	4b81      	ldr	r3, [pc, #516]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	2b00      	cmp	r3, #0
 8001206:	d004      	beq.n	8001212 <HAL_RCC_OscConfig+0x7e>
 8001208:	4b7e      	ldr	r3, [pc, #504]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001210:	e005      	b.n	800121e <HAL_RCC_OscConfig+0x8a>
 8001212:	4b7c      	ldr	r3, [pc, #496]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800121e:	4293      	cmp	r3, r2
 8001220:	d223      	bcs.n	800126a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a1b      	ldr	r3, [r3, #32]
 8001226:	4618      	mov	r0, r3
 8001228:	f000 fdc4 	bl	8001db4 <RCC_SetFlashLatencyFromMSIRange>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e3c0      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001236:	4b73      	ldr	r3, [pc, #460]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a72      	ldr	r2, [pc, #456]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800123c:	f043 0308 	orr.w	r3, r3, #8
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	4b70      	ldr	r3, [pc, #448]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	496d      	ldr	r1, [pc, #436]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001250:	4313      	orrs	r3, r2
 8001252:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001254:	4b6b      	ldr	r3, [pc, #428]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69db      	ldr	r3, [r3, #28]
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	4968      	ldr	r1, [pc, #416]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001264:	4313      	orrs	r3, r2
 8001266:	604b      	str	r3, [r1, #4]
 8001268:	e025      	b.n	80012b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800126a:	4b66      	ldr	r3, [pc, #408]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a65      	ldr	r2, [pc, #404]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001270:	f043 0308 	orr.w	r3, r3, #8
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4b63      	ldr	r3, [pc, #396]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4960      	ldr	r1, [pc, #384]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001284:	4313      	orrs	r3, r2
 8001286:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001288:	4b5e      	ldr	r3, [pc, #376]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	495b      	ldr	r1, [pc, #364]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001298:	4313      	orrs	r3, r2
 800129a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d109      	bne.n	80012b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fd84 	bl	8001db4 <RCC_SetFlashLatencyFromMSIRange>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e380      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012b6:	f000 fc87 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 80012ba:	4602      	mov	r2, r0
 80012bc:	4b51      	ldr	r3, [pc, #324]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	4950      	ldr	r1, [pc, #320]	; (8001408 <HAL_RCC_OscConfig+0x274>)
 80012c8:	5ccb      	ldrb	r3, [r1, r3]
 80012ca:	f003 031f 	and.w	r3, r3, #31
 80012ce:	fa22 f303 	lsr.w	r3, r2, r3
 80012d2:	4a4e      	ldr	r2, [pc, #312]	; (800140c <HAL_RCC_OscConfig+0x278>)
 80012d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012d6:	4b4e      	ldr	r3, [pc, #312]	; (8001410 <HAL_RCC_OscConfig+0x27c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fac6 	bl	800086c <HAL_InitTick>
 80012e0:	4603      	mov	r3, r0
 80012e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d052      	beq.n	8001390 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	e364      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d032      	beq.n	800135c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012f6:	4b43      	ldr	r3, [pc, #268]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a42      	ldr	r2, [pc, #264]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001302:	f7ff fc53 	bl	8000bac <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800130a:	f7ff fc4f 	bl	8000bac <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e34d      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800131c:	4b39      	ldr	r3, [pc, #228]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001328:	4b36      	ldr	r3, [pc, #216]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a35      	ldr	r2, [pc, #212]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800132e:	f043 0308 	orr.w	r3, r3, #8
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b33      	ldr	r3, [pc, #204]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	4930      	ldr	r1, [pc, #192]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001346:	4b2f      	ldr	r3, [pc, #188]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	492b      	ldr	r1, [pc, #172]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001356:	4313      	orrs	r3, r2
 8001358:	604b      	str	r3, [r1, #4]
 800135a:	e01a      	b.n	8001392 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800135c:	4b29      	ldr	r3, [pc, #164]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a28      	ldr	r2, [pc, #160]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001362:	f023 0301 	bic.w	r3, r3, #1
 8001366:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001368:	f7ff fc20 	bl	8000bac <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001370:	f7ff fc1c 	bl	8000bac <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e31a      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001382:	4b20      	ldr	r3, [pc, #128]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0x1dc>
 800138e:	e000      	b.n	8001392 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001390:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d073      	beq.n	8001486 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	2b08      	cmp	r3, #8
 80013a2:	d005      	beq.n	80013b0 <HAL_RCC_OscConfig+0x21c>
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	2b0c      	cmp	r3, #12
 80013a8:	d10e      	bne.n	80013c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	d10b      	bne.n	80013c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d063      	beq.n	8001484 <HAL_RCC_OscConfig+0x2f0>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d15f      	bne.n	8001484 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e2f7      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d0:	d106      	bne.n	80013e0 <HAL_RCC_OscConfig+0x24c>
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e025      	b.n	800142c <HAL_RCC_OscConfig+0x298>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e8:	d114      	bne.n	8001414 <HAL_RCC_OscConfig+0x280>
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80013f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	4b03      	ldr	r3, [pc, #12]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a02      	ldr	r2, [pc, #8]	; (8001404 <HAL_RCC_OscConfig+0x270>)
 80013fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e013      	b.n	800142c <HAL_RCC_OscConfig+0x298>
 8001404:	40021000 	.word	0x40021000
 8001408:	08006fa0 	.word	0x08006fa0
 800140c:	20000000 	.word	0x20000000
 8001410:	20000004 	.word	0x20000004
 8001414:	4ba0      	ldr	r3, [pc, #640]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a9f      	ldr	r2, [pc, #636]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800141a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b9d      	ldr	r3, [pc, #628]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a9c      	ldr	r2, [pc, #624]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d013      	beq.n	800145c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fbba 	bl	8000bac <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800143c:	f7ff fbb6 	bl	8000bac <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e2b4      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800144e:	4b92      	ldr	r3, [pc, #584]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x2a8>
 800145a:	e014      	b.n	8001486 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fba6 	bl	8000bac <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fba2 	bl	8000bac <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e2a0      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001476:	4b88      	ldr	r3, [pc, #544]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x2d0>
 8001482:	e000      	b.n	8001486 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d060      	beq.n	8001554 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	2b04      	cmp	r3, #4
 8001496:	d005      	beq.n	80014a4 <HAL_RCC_OscConfig+0x310>
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	2b0c      	cmp	r3, #12
 800149c:	d119      	bne.n	80014d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d116      	bne.n	80014d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014a4:	4b7c      	ldr	r3, [pc, #496]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_RCC_OscConfig+0x328>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e27d      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014bc:	4b76      	ldr	r3, [pc, #472]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	061b      	lsls	r3, r3, #24
 80014ca:	4973      	ldr	r1, [pc, #460]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014d0:	e040      	b.n	8001554 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d023      	beq.n	8001522 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014da:	4b6f      	ldr	r3, [pc, #444]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a6e      	ldr	r2, [pc, #440]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80014e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e6:	f7ff fb61 	bl	8000bac <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ee:	f7ff fb5d 	bl	8000bac <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e25b      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001500:	4b65      	ldr	r3, [pc, #404]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150c:	4b62      	ldr	r3, [pc, #392]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	061b      	lsls	r3, r3, #24
 800151a:	495f      	ldr	r1, [pc, #380]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
 8001520:	e018      	b.n	8001554 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001522:	4b5d      	ldr	r3, [pc, #372]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a5c      	ldr	r2, [pc, #368]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800152c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152e:	f7ff fb3d 	bl	8000bac <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001536:	f7ff fb39 	bl	8000bac <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e237      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001548:	4b53      	ldr	r3, [pc, #332]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	2b00      	cmp	r3, #0
 800155e:	d03c      	beq.n	80015da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d01c      	beq.n	80015a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001568:	4b4b      	ldr	r3, [pc, #300]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800156a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800156e:	4a4a      	ldr	r2, [pc, #296]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001578:	f7ff fb18 	bl	8000bac <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001580:	f7ff fb14 	bl	8000bac <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e212      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001592:	4b41      	ldr	r3, [pc, #260]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0ef      	beq.n	8001580 <HAL_RCC_OscConfig+0x3ec>
 80015a0:	e01b      	b.n	80015da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a2:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80015a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a8:	4a3b      	ldr	r2, [pc, #236]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80015aa:	f023 0301 	bic.w	r3, r3, #1
 80015ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b2:	f7ff fafb 	bl	8000bac <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ba:	f7ff faf7 	bl	8000bac <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e1f5      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015cc:	4b32      	ldr	r3, [pc, #200]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80015ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1ef      	bne.n	80015ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 80a6 	beq.w	8001734 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015ec:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80015ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d10d      	bne.n	8001614 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f8:	4b27      	ldr	r3, [pc, #156]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80015fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fc:	4a26      	ldr	r2, [pc, #152]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 80015fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001602:	6593      	str	r3, [r2, #88]	; 0x58
 8001604:	4b24      	ldr	r3, [pc, #144]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001610:	2301      	movs	r3, #1
 8001612:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001614:	4b21      	ldr	r3, [pc, #132]	; (800169c <HAL_RCC_OscConfig+0x508>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161c:	2b00      	cmp	r3, #0
 800161e:	d118      	bne.n	8001652 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001620:	4b1e      	ldr	r3, [pc, #120]	; (800169c <HAL_RCC_OscConfig+0x508>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a1d      	ldr	r2, [pc, #116]	; (800169c <HAL_RCC_OscConfig+0x508>)
 8001626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162c:	f7ff fabe 	bl	8000bac <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001634:	f7ff faba 	bl	8000bac <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e1b8      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_RCC_OscConfig+0x508>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d108      	bne.n	800166c <HAL_RCC_OscConfig+0x4d8>
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800165c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001660:	4a0d      	ldr	r2, [pc, #52]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800166a:	e029      	b.n	80016c0 <HAL_RCC_OscConfig+0x52c>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b05      	cmp	r3, #5
 8001672:	d115      	bne.n	80016a0 <HAL_RCC_OscConfig+0x50c>
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800167a:	4a07      	ldr	r2, [pc, #28]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 8001686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168a:	4a03      	ldr	r2, [pc, #12]	; (8001698 <HAL_RCC_OscConfig+0x504>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001694:	e014      	b.n	80016c0 <HAL_RCC_OscConfig+0x52c>
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	40007000 	.word	0x40007000
 80016a0:	4b9d      	ldr	r3, [pc, #628]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 80016a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a6:	4a9c      	ldr	r2, [pc, #624]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016b0:	4b99      	ldr	r3, [pc, #612]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 80016b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b6:	4a98      	ldr	r2, [pc, #608]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 80016b8:	f023 0304 	bic.w	r3, r3, #4
 80016bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d016      	beq.n	80016f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c8:	f7ff fa70 	bl	8000bac <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d0:	f7ff fa6c 	bl	8000bac <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e168      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016e6:	4b8c      	ldr	r3, [pc, #560]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 80016e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0ed      	beq.n	80016d0 <HAL_RCC_OscConfig+0x53c>
 80016f4:	e015      	b.n	8001722 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f6:	f7ff fa59 	bl	8000bac <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016fc:	e00a      	b.n	8001714 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fe:	f7ff fa55 	bl	8000bac <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	f241 3288 	movw	r2, #5000	; 0x1388
 800170c:	4293      	cmp	r3, r2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e151      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001714:	4b80      	ldr	r3, [pc, #512]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 8001716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1ed      	bne.n	80016fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001722:	7ffb      	ldrb	r3, [r7, #31]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d105      	bne.n	8001734 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001728:	4b7b      	ldr	r3, [pc, #492]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	4a7a      	ldr	r2, [pc, #488]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 800172e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001732:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0320 	and.w	r3, r3, #32
 800173c:	2b00      	cmp	r3, #0
 800173e:	d03c      	beq.n	80017ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	2b00      	cmp	r3, #0
 8001746:	d01c      	beq.n	8001782 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001748:	4b73      	ldr	r3, [pc, #460]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 800174a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800174e:	4a72      	ldr	r2, [pc, #456]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001758:	f7ff fa28 	bl	8000bac <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001760:	f7ff fa24 	bl	8000bac <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e122      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001772:	4b69      	ldr	r3, [pc, #420]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 8001774:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0ef      	beq.n	8001760 <HAL_RCC_OscConfig+0x5cc>
 8001780:	e01b      	b.n	80017ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001782:	4b65      	ldr	r3, [pc, #404]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 8001784:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001788:	4a63      	ldr	r2, [pc, #396]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 800178a:	f023 0301 	bic.w	r3, r3, #1
 800178e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001792:	f7ff fa0b 	bl	8000bac <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800179a:	f7ff fa07 	bl	8000bac <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e105      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017ac:	4b5a      	ldr	r3, [pc, #360]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 80017ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1ef      	bne.n	800179a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 80f9 	beq.w	80019b6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	f040 80cf 	bne.w	800196c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017ce:	4b52      	ldr	r3, [pc, #328]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f003 0203 	and.w	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017de:	429a      	cmp	r2, r3
 80017e0:	d12c      	bne.n	800183c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	3b01      	subs	r3, #1
 80017ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d123      	bne.n	800183c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d11b      	bne.n	800183c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001810:	429a      	cmp	r2, r3
 8001812:	d113      	bne.n	800183c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181e:	085b      	lsrs	r3, r3, #1
 8001820:	3b01      	subs	r3, #1
 8001822:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001824:	429a      	cmp	r2, r3
 8001826:	d109      	bne.n	800183c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	085b      	lsrs	r3, r3, #1
 8001834:	3b01      	subs	r3, #1
 8001836:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001838:	429a      	cmp	r2, r3
 800183a:	d071      	beq.n	8001920 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	2b0c      	cmp	r3, #12
 8001840:	d068      	beq.n	8001914 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001842:	4b35      	ldr	r3, [pc, #212]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d105      	bne.n	800185a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800184e:	4b32      	ldr	r3, [pc, #200]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e0ac      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800185e:	4b2e      	ldr	r3, [pc, #184]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a2d      	ldr	r2, [pc, #180]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 8001864:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001868:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800186a:	f7ff f99f 	bl	8000bac <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001872:	f7ff f99b 	bl	8000bac <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e099      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001884:	4b24      	ldr	r3, [pc, #144]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001890:	4b21      	ldr	r3, [pc, #132]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	4b21      	ldr	r3, [pc, #132]	; (800191c <HAL_RCC_OscConfig+0x788>)
 8001896:	4013      	ands	r3, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018a0:	3a01      	subs	r2, #1
 80018a2:	0112      	lsls	r2, r2, #4
 80018a4:	4311      	orrs	r1, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018aa:	0212      	lsls	r2, r2, #8
 80018ac:	4311      	orrs	r1, r2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018b2:	0852      	lsrs	r2, r2, #1
 80018b4:	3a01      	subs	r2, #1
 80018b6:	0552      	lsls	r2, r2, #21
 80018b8:	4311      	orrs	r1, r2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018be:	0852      	lsrs	r2, r2, #1
 80018c0:	3a01      	subs	r2, #1
 80018c2:	0652      	lsls	r2, r2, #25
 80018c4:	4311      	orrs	r1, r2
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018ca:	06d2      	lsls	r2, r2, #27
 80018cc:	430a      	orrs	r2, r1
 80018ce:	4912      	ldr	r1, [pc, #72]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018d4:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0f      	ldr	r2, [pc, #60]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 80018da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018e0:	4b0d      	ldr	r3, [pc, #52]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4a0c      	ldr	r2, [pc, #48]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 80018e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018ec:	f7ff f95e 	bl	8000bac <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff f95a 	bl	8000bac <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e058      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001906:	4b04      	ldr	r3, [pc, #16]	; (8001918 <HAL_RCC_OscConfig+0x784>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001912:	e050      	b.n	80019b6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e04f      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
 8001918:	40021000 	.word	0x40021000
 800191c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001920:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <HAL_RCC_OscConfig+0x82c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d144      	bne.n	80019b6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800192c:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <HAL_RCC_OscConfig+0x82c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a23      	ldr	r2, [pc, #140]	; (80019c0 <HAL_RCC_OscConfig+0x82c>)
 8001932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001936:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001938:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <HAL_RCC_OscConfig+0x82c>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	4a20      	ldr	r2, [pc, #128]	; (80019c0 <HAL_RCC_OscConfig+0x82c>)
 800193e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001942:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001944:	f7ff f932 	bl	8000bac <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff f92e 	bl	8000bac <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e02c      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195e:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <HAL_RCC_OscConfig+0x82c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x7b8>
 800196a:	e024      	b.n	80019b6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2b0c      	cmp	r3, #12
 8001970:	d01f      	beq.n	80019b2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <HAL_RCC_OscConfig+0x82c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <HAL_RCC_OscConfig+0x82c>)
 8001978:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800197c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197e:	f7ff f915 	bl	8000bac <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001986:	f7ff f911 	bl	8000bac <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e00f      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_RCC_OscConfig+0x82c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f0      	bne.n	8001986 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_RCC_OscConfig+0x82c>)
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	4905      	ldr	r1, [pc, #20]	; (80019c0 <HAL_RCC_OscConfig+0x82c>)
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_RCC_OscConfig+0x830>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	60cb      	str	r3, [r1, #12]
 80019b0:	e001      	b.n	80019b6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3720      	adds	r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000
 80019c4:	feeefffc 	.word	0xfeeefffc

080019c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0e7      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019dc:	4b75      	ldr	r3, [pc, #468]	; (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d910      	bls.n	8001a0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ea:	4b72      	ldr	r3, [pc, #456]	; (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 0207 	bic.w	r2, r3, #7
 80019f2:	4970      	ldr	r1, [pc, #448]	; (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	4b6e      	ldr	r3, [pc, #440]	; (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0cf      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d010      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	4b66      	ldr	r3, [pc, #408]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d908      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a28:	4b63      	ldr	r3, [pc, #396]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4960      	ldr	r1, [pc, #384]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d04c      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4e:	4b5a      	ldr	r3, [pc, #360]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d121      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e0a6      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a66:	4b54      	ldr	r3, [pc, #336]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d115      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e09a      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d107      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a7e:	4b4e      	ldr	r3, [pc, #312]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d109      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e08e      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a8e:	4b4a      	ldr	r3, [pc, #296]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e086      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a9e:	4b46      	ldr	r3, [pc, #280]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f023 0203 	bic.w	r2, r3, #3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	4943      	ldr	r1, [pc, #268]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ab0:	f7ff f87c 	bl	8000bac <HAL_GetTick>
 8001ab4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	e00a      	b.n	8001ace <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab8:	f7ff f878 	bl	8000bac <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e06e      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ace:	4b3a      	ldr	r3, [pc, #232]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 020c 	and.w	r2, r3, #12
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d1eb      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d010      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	4b31      	ldr	r3, [pc, #196]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d208      	bcs.n	8001b0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001afc:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	492b      	ldr	r1, [pc, #172]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b0e:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d210      	bcs.n	8001b3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1c:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 0207 	bic.w	r2, r3, #7
 8001b24:	4923      	ldr	r1, [pc, #140]	; (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2c:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d001      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e036      	b.n	8001bac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d008      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	4918      	ldr	r1, [pc, #96]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d009      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4910      	ldr	r1, [pc, #64]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b7c:	f000 f824 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8001b80:	4602      	mov	r2, r0
 8001b82:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	091b      	lsrs	r3, r3, #4
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	490b      	ldr	r1, [pc, #44]	; (8001bbc <HAL_RCC_ClockConfig+0x1f4>)
 8001b8e:	5ccb      	ldrb	r3, [r1, r3]
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	fa22 f303 	lsr.w	r3, r2, r3
 8001b98:	4a09      	ldr	r2, [pc, #36]	; (8001bc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001b9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_RCC_ClockConfig+0x1fc>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fe63 	bl	800086c <HAL_InitTick>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001baa:	7afb      	ldrb	r3, [r7, #11]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40022000 	.word	0x40022000
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	08006fa0 	.word	0x08006fa0
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	20000004 	.word	0x20000004

08001bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bd6:	4b3e      	ldr	r3, [pc, #248]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001be0:	4b3b      	ldr	r3, [pc, #236]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x34>
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	2b0c      	cmp	r3, #12
 8001bf4:	d121      	bne.n	8001c3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d11e      	bne.n	8001c3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bfc:	4b34      	ldr	r3, [pc, #208]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d107      	bne.n	8001c18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c08:	4b31      	ldr	r3, [pc, #196]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	e005      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c18:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c24:	4a2b      	ldr	r2, [pc, #172]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10d      	bne.n	8001c50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c38:	e00a      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d102      	bne.n	8001c46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c40:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c42:	61bb      	str	r3, [r7, #24]
 8001c44:	e004      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c4c:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x114>)
 8001c4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	2b0c      	cmp	r3, #12
 8001c54:	d134      	bne.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c56:	4b1e      	ldr	r3, [pc, #120]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d003      	beq.n	8001c6e <HAL_RCC_GetSysClockFreq+0xa6>
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d003      	beq.n	8001c74 <HAL_RCC_GetSysClockFreq+0xac>
 8001c6c:	e005      	b.n	8001c7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c70:	617b      	str	r3, [r7, #20]
      break;
 8001c72:	e005      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c74:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x114>)
 8001c76:	617b      	str	r3, [r7, #20]
      break;
 8001c78:	e002      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	617b      	str	r3, [r7, #20]
      break;
 8001c7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c80:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	091b      	lsrs	r3, r3, #4
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	0a1b      	lsrs	r3, r3, #8
 8001c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	fb03 f202 	mul.w	r2, r3, r2
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	0e5b      	lsrs	r3, r3, #25
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cc0:	69bb      	ldr	r3, [r7, #24]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3724      	adds	r7, #36	; 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	08006fb8 	.word	0x08006fb8
 8001cd8:	00f42400 	.word	0x00f42400
 8001cdc:	007a1200 	.word	0x007a1200

08001ce0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000000 	.word	0x20000000

08001cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cfc:	f7ff fff0 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	0a1b      	lsrs	r3, r3, #8
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	4904      	ldr	r1, [pc, #16]	; (8001d20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d0e:	5ccb      	ldrb	r3, [r1, r3]
 8001d10:	f003 031f 	and.w	r3, r3, #31
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	08006fb0 	.word	0x08006fb0

08001d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d28:	f7ff ffda 	bl	8001ce0 <HAL_RCC_GetHCLKFreq>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	0adb      	lsrs	r3, r3, #11
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	4904      	ldr	r1, [pc, #16]	; (8001d4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d3a:	5ccb      	ldrb	r3, [r1, r3]
 8001d3c:	f003 031f 	and.w	r3, r3, #31
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	08006fb0 	.word	0x08006fb0

08001d50 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_RCC_GetClockConfig+0x5c>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 0203 	and.w	r2, r3, #3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <HAL_RCC_GetClockConfig+0x5c>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_RCC_GetClockConfig+0x5c>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_RCC_GetClockConfig+0x5c>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	08db      	lsrs	r3, r3, #3
 8001d8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d92:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <HAL_RCC_GetClockConfig+0x60>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0207 	and.w	r2, r3, #7
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	601a      	str	r2, [r3, #0]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40022000 	.word	0x40022000

08001db4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dc0:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dcc:	f7ff f96e 	bl	80010ac <HAL_PWREx_GetVoltageRange>
 8001dd0:	6178      	str	r0, [r7, #20]
 8001dd2:	e014      	b.n	8001dfe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dd4:	4b25      	ldr	r3, [pc, #148]	; (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd8:	4a24      	ldr	r2, [pc, #144]	; (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dde:	6593      	str	r3, [r2, #88]	; 0x58
 8001de0:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001dec:	f7ff f95e 	bl	80010ac <HAL_PWREx_GetVoltageRange>
 8001df0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001df2:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	4a1d      	ldr	r2, [pc, #116]	; (8001e6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e04:	d10b      	bne.n	8001e1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b80      	cmp	r3, #128	; 0x80
 8001e0a:	d919      	bls.n	8001e40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2ba0      	cmp	r3, #160	; 0xa0
 8001e10:	d902      	bls.n	8001e18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e12:	2302      	movs	r3, #2
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	e013      	b.n	8001e40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e18:	2301      	movs	r3, #1
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	e010      	b.n	8001e40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b80      	cmp	r3, #128	; 0x80
 8001e22:	d902      	bls.n	8001e2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e24:	2303      	movs	r3, #3
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	e00a      	b.n	8001e40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b80      	cmp	r3, #128	; 0x80
 8001e2e:	d102      	bne.n	8001e36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e30:	2302      	movs	r3, #2
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	e004      	b.n	8001e40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b70      	cmp	r3, #112	; 0x70
 8001e3a:	d101      	bne.n	8001e40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f023 0207 	bic.w	r2, r3, #7
 8001e48:	4909      	ldr	r1, [pc, #36]	; (8001e70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e50:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d001      	beq.n	8001e62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40022000 	.word	0x40022000

08001e74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e80:	2300      	movs	r3, #0
 8001e82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d041      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e98:	d02a      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e9e:	d824      	bhi.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ea0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ea4:	d008      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ea6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001eaa:	d81e      	bhi.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00a      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001eb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eb4:	d010      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001eb6:	e018      	b.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001eb8:	4b86      	ldr	r3, [pc, #536]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4a85      	ldr	r2, [pc, #532]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ec4:	e015      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 facd 	bl	800246c <RCCEx_PLLSAI1_Config>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ed6:	e00c      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3320      	adds	r3, #32
 8001edc:	2100      	movs	r1, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 fbb6 	bl	8002650 <RCCEx_PLLSAI2_Config>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ee8:	e003      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	74fb      	strb	r3, [r7, #19]
      break;
 8001eee:	e000      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ef2:	7cfb      	ldrb	r3, [r7, #19]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10b      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ef8:	4b76      	ldr	r3, [pc, #472]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f06:	4973      	ldr	r1, [pc, #460]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f0e:	e001      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f10:	7cfb      	ldrb	r3, [r7, #19]
 8001f12:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d041      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f28:	d02a      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f2e:	d824      	bhi.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f34:	d008      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f3a:	d81e      	bhi.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00a      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f44:	d010      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f46:	e018      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f48:	4b62      	ldr	r3, [pc, #392]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	4a61      	ldr	r2, [pc, #388]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f52:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f54:	e015      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 fa85 	bl	800246c <RCCEx_PLLSAI1_Config>
 8001f62:	4603      	mov	r3, r0
 8001f64:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f66:	e00c      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3320      	adds	r3, #32
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 fb6e 	bl	8002650 <RCCEx_PLLSAI2_Config>
 8001f74:	4603      	mov	r3, r0
 8001f76:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f78:	e003      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	74fb      	strb	r3, [r7, #19]
      break;
 8001f7e:	e000      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f82:	7cfb      	ldrb	r3, [r7, #19]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10b      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f88:	4b52      	ldr	r3, [pc, #328]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f96:	494f      	ldr	r1, [pc, #316]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f9e:	e001      	b.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fa0:	7cfb      	ldrb	r3, [r7, #19]
 8001fa2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 80a0 	beq.w	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fb6:	4b47      	ldr	r3, [pc, #284]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00d      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fcc:	4b41      	ldr	r3, [pc, #260]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	4a40      	ldr	r2, [pc, #256]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	6593      	str	r3, [r2, #88]	; 0x58
 8001fd8:	4b3e      	ldr	r3, [pc, #248]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fe8:	4b3b      	ldr	r3, [pc, #236]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a3a      	ldr	r2, [pc, #232]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ff4:	f7fe fdda 	bl	8000bac <HAL_GetTick>
 8001ff8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ffa:	e009      	b.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffc:	f7fe fdd6 	bl	8000bac <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d902      	bls.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	74fb      	strb	r3, [r7, #19]
        break;
 800200e:	e005      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002010:	4b31      	ldr	r3, [pc, #196]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0ef      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800201c:	7cfb      	ldrb	r3, [r7, #19]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d15c      	bne.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002022:	4b2c      	ldr	r3, [pc, #176]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002028:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800202c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01f      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	429a      	cmp	r2, r3
 800203e:	d019      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002040:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800204a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800204c:	4b21      	ldr	r3, [pc, #132]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	4a20      	ldr	r2, [pc, #128]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800205c:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002062:	4a1c      	ldr	r2, [pc, #112]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800206c:	4a19      	ldr	r2, [pc, #100]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d016      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7fe fd95 	bl	8000bac <HAL_GetTick>
 8002082:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002084:	e00b      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002086:	f7fe fd91 	bl	8000bac <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	f241 3288 	movw	r2, #5000	; 0x1388
 8002094:	4293      	cmp	r3, r2
 8002096:	d902      	bls.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	74fb      	strb	r3, [r7, #19]
            break;
 800209c:	e006      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800209e:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0ec      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020ac:	7cfb      	ldrb	r3, [r7, #19]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10c      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020b2:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c2:	4904      	ldr	r1, [pc, #16]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020ca:	e009      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020cc:	7cfb      	ldrb	r3, [r7, #19]
 80020ce:	74bb      	strb	r3, [r7, #18]
 80020d0:	e006      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80020d2:	bf00      	nop
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020dc:	7cfb      	ldrb	r3, [r7, #19]
 80020de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020e0:	7c7b      	ldrb	r3, [r7, #17]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d105      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e6:	4ba6      	ldr	r3, [pc, #664]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ea:	4aa5      	ldr	r2, [pc, #660]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020fe:	4ba0      	ldr	r3, [pc, #640]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002104:	f023 0203 	bic.w	r2, r3, #3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210c:	499c      	ldr	r1, [pc, #624]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00a      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002120:	4b97      	ldr	r3, [pc, #604]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002126:	f023 020c 	bic.w	r2, r3, #12
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212e:	4994      	ldr	r1, [pc, #592]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00a      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002142:	4b8f      	ldr	r3, [pc, #572]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002148:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	498b      	ldr	r1, [pc, #556]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00a      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002164:	4b86      	ldr	r3, [pc, #536]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	4983      	ldr	r1, [pc, #524]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002186:	4b7e      	ldr	r3, [pc, #504]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002194:	497a      	ldr	r1, [pc, #488]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021a8:	4b75      	ldr	r3, [pc, #468]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b6:	4972      	ldr	r1, [pc, #456]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021ca:	4b6d      	ldr	r3, [pc, #436]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d8:	4969      	ldr	r1, [pc, #420]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021ec:	4b64      	ldr	r3, [pc, #400]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021fa:	4961      	ldr	r1, [pc, #388]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800220e:	4b5c      	ldr	r3, [pc, #368]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002214:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800221c:	4958      	ldr	r1, [pc, #352]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002230:	4b53      	ldr	r3, [pc, #332]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002236:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	4950      	ldr	r1, [pc, #320]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002252:	4b4b      	ldr	r3, [pc, #300]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002258:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002260:	4947      	ldr	r1, [pc, #284]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002274:	4b42      	ldr	r3, [pc, #264]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002276:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800227a:	f023 0203 	bic.w	r2, r3, #3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002282:	493f      	ldr	r1, [pc, #252]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d028      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002296:	4b3a      	ldr	r3, [pc, #232]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a4:	4936      	ldr	r1, [pc, #216]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022b4:	d106      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022b6:	4b32      	ldr	r3, [pc, #200]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	4a31      	ldr	r2, [pc, #196]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022c0:	60d3      	str	r3, [r2, #12]
 80022c2:	e011      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3304      	adds	r3, #4
 80022d2:	2101      	movs	r1, #1
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 f8c9 	bl	800246c <RCCEx_PLLSAI1_Config>
 80022da:	4603      	mov	r3, r0
 80022dc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022de:	7cfb      	ldrb	r3, [r7, #19]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80022e4:	7cfb      	ldrb	r3, [r7, #19]
 80022e6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d028      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022f4:	4b22      	ldr	r3, [pc, #136]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002302:	491f      	ldr	r1, [pc, #124]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800230e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002312:	d106      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4a19      	ldr	r2, [pc, #100]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800231a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800231e:	60d3      	str	r3, [r2, #12]
 8002320:	e011      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002326:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800232a:	d10c      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3304      	adds	r3, #4
 8002330:	2101      	movs	r1, #1
 8002332:	4618      	mov	r0, r3
 8002334:	f000 f89a 	bl	800246c <RCCEx_PLLSAI1_Config>
 8002338:	4603      	mov	r3, r0
 800233a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800233c:	7cfb      	ldrb	r3, [r7, #19]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002342:	7cfb      	ldrb	r3, [r7, #19]
 8002344:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d02a      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002352:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002358:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002360:	4907      	ldr	r1, [pc, #28]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800236c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002370:	d108      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002372:	4b03      	ldr	r3, [pc, #12]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	4a02      	ldr	r2, [pc, #8]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002378:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800237c:	60d3      	str	r3, [r2, #12]
 800237e:	e013      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002380:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002388:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800238c:	d10c      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3304      	adds	r3, #4
 8002392:	2101      	movs	r1, #1
 8002394:	4618      	mov	r0, r3
 8002396:	f000 f869 	bl	800246c <RCCEx_PLLSAI1_Config>
 800239a:	4603      	mov	r3, r0
 800239c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800239e:	7cfb      	ldrb	r3, [r7, #19]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d02f      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023b4:	4b2c      	ldr	r3, [pc, #176]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023c2:	4929      	ldr	r1, [pc, #164]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023d2:	d10d      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3304      	adds	r3, #4
 80023d8:	2102      	movs	r1, #2
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 f846 	bl	800246c <RCCEx_PLLSAI1_Config>
 80023e0:	4603      	mov	r3, r0
 80023e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023e4:	7cfb      	ldrb	r3, [r7, #19]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d014      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80023ea:	7cfb      	ldrb	r3, [r7, #19]
 80023ec:	74bb      	strb	r3, [r7, #18]
 80023ee:	e011      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023f8:	d10c      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3320      	adds	r3, #32
 80023fe:	2102      	movs	r1, #2
 8002400:	4618      	mov	r0, r3
 8002402:	f000 f925 	bl	8002650 <RCCEx_PLLSAI2_Config>
 8002406:	4603      	mov	r3, r0
 8002408:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800240a:	7cfb      	ldrb	r3, [r7, #19]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002410:	7cfb      	ldrb	r3, [r7, #19]
 8002412:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00b      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002420:	4b11      	ldr	r3, [pc, #68]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002426:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002430:	490d      	ldr	r1, [pc, #52]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00b      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002454:	4904      	ldr	r1, [pc, #16]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800245c:	7cbb      	ldrb	r3, [r7, #18]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000

0800246c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800247a:	4b74      	ldr	r3, [pc, #464]	; (800264c <RCCEx_PLLSAI1_Config+0x1e0>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d018      	beq.n	80024b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002486:	4b71      	ldr	r3, [pc, #452]	; (800264c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f003 0203 	and.w	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d10d      	bne.n	80024b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
       ||
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800249e:	4b6b      	ldr	r3, [pc, #428]	; (800264c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	091b      	lsrs	r3, r3, #4
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
       ||
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d047      	beq.n	8002542 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	73fb      	strb	r3, [r7, #15]
 80024b6:	e044      	b.n	8002542 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d018      	beq.n	80024f2 <RCCEx_PLLSAI1_Config+0x86>
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d825      	bhi.n	8002510 <RCCEx_PLLSAI1_Config+0xa4>
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d002      	beq.n	80024ce <RCCEx_PLLSAI1_Config+0x62>
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d009      	beq.n	80024e0 <RCCEx_PLLSAI1_Config+0x74>
 80024cc:	e020      	b.n	8002510 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024ce:	4b5f      	ldr	r3, [pc, #380]	; (800264c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d11d      	bne.n	8002516 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024de:	e01a      	b.n	8002516 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024e0:	4b5a      	ldr	r3, [pc, #360]	; (800264c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d116      	bne.n	800251a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f0:	e013      	b.n	800251a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024f2:	4b56      	ldr	r3, [pc, #344]	; (800264c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10f      	bne.n	800251e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024fe:	4b53      	ldr	r3, [pc, #332]	; (800264c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800250e:	e006      	b.n	800251e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]
      break;
 8002514:	e004      	b.n	8002520 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002516:	bf00      	nop
 8002518:	e002      	b.n	8002520 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800251a:	bf00      	nop
 800251c:	e000      	b.n	8002520 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800251e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10d      	bne.n	8002542 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002526:	4b49      	ldr	r3, [pc, #292]	; (800264c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6819      	ldr	r1, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	3b01      	subs	r3, #1
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	430b      	orrs	r3, r1
 800253c:	4943      	ldr	r1, [pc, #268]	; (800264c <RCCEx_PLLSAI1_Config+0x1e0>)
 800253e:	4313      	orrs	r3, r2
 8002540:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d17c      	bne.n	8002642 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002548:	4b40      	ldr	r3, [pc, #256]	; (800264c <RCCEx_PLLSAI1_Config+0x1e0>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a3f      	ldr	r2, [pc, #252]	; (800264c <RCCEx_PLLSAI1_Config+0x1e0>)
 800254e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002552:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002554:	f7fe fb2a 	bl	8000bac <HAL_GetTick>
 8002558:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800255a:	e009      	b.n	8002570 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800255c:	f7fe fb26 	bl	8000bac <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d902      	bls.n	8002570 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	73fb      	strb	r3, [r7, #15]
        break;
 800256e:	e005      	b.n	800257c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002570:	4b36      	ldr	r3, [pc, #216]	; (800264c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1ef      	bne.n	800255c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d15f      	bne.n	8002642 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d110      	bne.n	80025aa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002588:	4b30      	ldr	r3, [pc, #192]	; (800264c <RCCEx_PLLSAI1_Config+0x1e0>)
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002590:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6892      	ldr	r2, [r2, #8]
 8002598:	0211      	lsls	r1, r2, #8
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68d2      	ldr	r2, [r2, #12]
 800259e:	06d2      	lsls	r2, r2, #27
 80025a0:	430a      	orrs	r2, r1
 80025a2:	492a      	ldr	r1, [pc, #168]	; (800264c <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	610b      	str	r3, [r1, #16]
 80025a8:	e027      	b.n	80025fa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d112      	bne.n	80025d6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025b0:	4b26      	ldr	r3, [pc, #152]	; (800264c <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6892      	ldr	r2, [r2, #8]
 80025c0:	0211      	lsls	r1, r2, #8
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6912      	ldr	r2, [r2, #16]
 80025c6:	0852      	lsrs	r2, r2, #1
 80025c8:	3a01      	subs	r2, #1
 80025ca:	0552      	lsls	r2, r2, #21
 80025cc:	430a      	orrs	r2, r1
 80025ce:	491f      	ldr	r1, [pc, #124]	; (800264c <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	610b      	str	r3, [r1, #16]
 80025d4:	e011      	b.n	80025fa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025d6:	4b1d      	ldr	r3, [pc, #116]	; (800264c <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6892      	ldr	r2, [r2, #8]
 80025e6:	0211      	lsls	r1, r2, #8
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6952      	ldr	r2, [r2, #20]
 80025ec:	0852      	lsrs	r2, r2, #1
 80025ee:	3a01      	subs	r2, #1
 80025f0:	0652      	lsls	r2, r2, #25
 80025f2:	430a      	orrs	r2, r1
 80025f4:	4915      	ldr	r1, [pc, #84]	; (800264c <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025fa:	4b14      	ldr	r3, [pc, #80]	; (800264c <RCCEx_PLLSAI1_Config+0x1e0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a13      	ldr	r2, [pc, #76]	; (800264c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002600:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002604:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002606:	f7fe fad1 	bl	8000bac <HAL_GetTick>
 800260a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800260c:	e009      	b.n	8002622 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800260e:	f7fe facd 	bl	8000bac <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d902      	bls.n	8002622 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	73fb      	strb	r3, [r7, #15]
          break;
 8002620:	e005      	b.n	800262e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0ef      	beq.n	800260e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d106      	bne.n	8002642 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002634:	4b05      	ldr	r3, [pc, #20]	; (800264c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	4903      	ldr	r1, [pc, #12]	; (800264c <RCCEx_PLLSAI1_Config+0x1e0>)
 800263e:	4313      	orrs	r3, r2
 8002640:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002642:	7bfb      	ldrb	r3, [r7, #15]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021000 	.word	0x40021000

08002650 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800265e:	4b69      	ldr	r3, [pc, #420]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d018      	beq.n	800269c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800266a:	4b66      	ldr	r3, [pc, #408]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b4>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f003 0203 	and.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d10d      	bne.n	8002696 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
       ||
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002682:	4b60      	ldr	r3, [pc, #384]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	091b      	lsrs	r3, r3, #4
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
       ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d047      	beq.n	8002726 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
 800269a:	e044      	b.n	8002726 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d018      	beq.n	80026d6 <RCCEx_PLLSAI2_Config+0x86>
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d825      	bhi.n	80026f4 <RCCEx_PLLSAI2_Config+0xa4>
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d002      	beq.n	80026b2 <RCCEx_PLLSAI2_Config+0x62>
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d009      	beq.n	80026c4 <RCCEx_PLLSAI2_Config+0x74>
 80026b0:	e020      	b.n	80026f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026b2:	4b54      	ldr	r3, [pc, #336]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d11d      	bne.n	80026fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026c2:	e01a      	b.n	80026fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026c4:	4b4f      	ldr	r3, [pc, #316]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d116      	bne.n	80026fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d4:	e013      	b.n	80026fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026d6:	4b4b      	ldr	r3, [pc, #300]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10f      	bne.n	8002702 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026e2:	4b48      	ldr	r3, [pc, #288]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d109      	bne.n	8002702 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026f2:	e006      	b.n	8002702 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
      break;
 80026f8:	e004      	b.n	8002704 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026fa:	bf00      	nop
 80026fc:	e002      	b.n	8002704 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026fe:	bf00      	nop
 8002700:	e000      	b.n	8002704 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002702:	bf00      	nop
    }

    if(status == HAL_OK)
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10d      	bne.n	8002726 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800270a:	4b3e      	ldr	r3, [pc, #248]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b4>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6819      	ldr	r1, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	3b01      	subs	r3, #1
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	430b      	orrs	r3, r1
 8002720:	4938      	ldr	r1, [pc, #224]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002722:	4313      	orrs	r3, r2
 8002724:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d166      	bne.n	80027fa <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800272c:	4b35      	ldr	r3, [pc, #212]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a34      	ldr	r2, [pc, #208]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002736:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002738:	f7fe fa38 	bl	8000bac <HAL_GetTick>
 800273c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800273e:	e009      	b.n	8002754 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002740:	f7fe fa34 	bl	8000bac <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d902      	bls.n	8002754 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	73fb      	strb	r3, [r7, #15]
        break;
 8002752:	e005      	b.n	8002760 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002754:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1ef      	bne.n	8002740 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d149      	bne.n	80027fa <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d110      	bne.n	800278e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800276c:	4b25      	ldr	r3, [pc, #148]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b4>)
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002774:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6892      	ldr	r2, [r2, #8]
 800277c:	0211      	lsls	r1, r2, #8
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68d2      	ldr	r2, [r2, #12]
 8002782:	06d2      	lsls	r2, r2, #27
 8002784:	430a      	orrs	r2, r1
 8002786:	491f      	ldr	r1, [pc, #124]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002788:	4313      	orrs	r3, r2
 800278a:	614b      	str	r3, [r1, #20]
 800278c:	e011      	b.n	80027b2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800278e:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002796:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6892      	ldr	r2, [r2, #8]
 800279e:	0211      	lsls	r1, r2, #8
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6912      	ldr	r2, [r2, #16]
 80027a4:	0852      	lsrs	r2, r2, #1
 80027a6:	3a01      	subs	r2, #1
 80027a8:	0652      	lsls	r2, r2, #25
 80027aa:	430a      	orrs	r2, r1
 80027ac:	4915      	ldr	r1, [pc, #84]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027b2:	4b14      	ldr	r3, [pc, #80]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a13      	ldr	r2, [pc, #76]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027bc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027be:	f7fe f9f5 	bl	8000bac <HAL_GetTick>
 80027c2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027c4:	e009      	b.n	80027da <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027c6:	f7fe f9f1 	bl	8000bac <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d902      	bls.n	80027da <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	73fb      	strb	r3, [r7, #15]
          break;
 80027d8:	e005      	b.n	80027e6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0ef      	beq.n	80027c6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d106      	bne.n	80027fa <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027ee:	695a      	ldr	r2, [r3, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	4903      	ldr	r1, [pc, #12]	; (8002804 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000

08002808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e049      	b.n	80028ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f841 	bl	80028b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3304      	adds	r3, #4
 8002844:	4619      	mov	r1, r3
 8002846:	4610      	mov	r0, r2
 8002848:	f000 f9da 	bl	8002c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d001      	beq.n	80028e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e04f      	b.n	8002984 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a23      	ldr	r2, [pc, #140]	; (8002990 <HAL_TIM_Base_Start_IT+0xc4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d01d      	beq.n	8002942 <HAL_TIM_Base_Start_IT+0x76>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290e:	d018      	beq.n	8002942 <HAL_TIM_Base_Start_IT+0x76>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a1f      	ldr	r2, [pc, #124]	; (8002994 <HAL_TIM_Base_Start_IT+0xc8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d013      	beq.n	8002942 <HAL_TIM_Base_Start_IT+0x76>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a1e      	ldr	r2, [pc, #120]	; (8002998 <HAL_TIM_Base_Start_IT+0xcc>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d00e      	beq.n	8002942 <HAL_TIM_Base_Start_IT+0x76>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1c      	ldr	r2, [pc, #112]	; (800299c <HAL_TIM_Base_Start_IT+0xd0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d009      	beq.n	8002942 <HAL_TIM_Base_Start_IT+0x76>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1b      	ldr	r2, [pc, #108]	; (80029a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d004      	beq.n	8002942 <HAL_TIM_Base_Start_IT+0x76>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a19      	ldr	r2, [pc, #100]	; (80029a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d115      	bne.n	800296e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800294a:	4013      	ands	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b06      	cmp	r3, #6
 8002952:	d015      	beq.n	8002980 <HAL_TIM_Base_Start_IT+0xb4>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800295a:	d011      	beq.n	8002980 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800296c:	e008      	b.n	8002980 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f042 0201 	orr.w	r2, r2, #1
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	e000      	b.n	8002982 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002980:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	40012c00 	.word	0x40012c00
 8002994:	40000400 	.word	0x40000400
 8002998:	40000800 	.word	0x40000800
 800299c:	40000c00 	.word	0x40000c00
 80029a0:	40013400 	.word	0x40013400
 80029a4:	40014000 	.word	0x40014000
 80029a8:	00010007 	.word	0x00010007

080029ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d020      	beq.n	8002a10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01b      	beq.n	8002a10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0202 	mvn.w	r2, #2
 80029e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f8e4 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 80029fc:	e005      	b.n	8002a0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f8d6 	bl	8002bb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f8e7 	bl	8002bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d020      	beq.n	8002a5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01b      	beq.n	8002a5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0204 	mvn.w	r2, #4
 8002a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2202      	movs	r2, #2
 8002a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f8be 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 8002a48:	e005      	b.n	8002a56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f8b0 	bl	8002bb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f8c1 	bl	8002bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d020      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d01b      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0208 	mvn.w	r2, #8
 8002a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f898 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 8002a94:	e005      	b.n	8002aa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f88a 	bl	8002bb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f89b 	bl	8002bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d020      	beq.n	8002af4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d01b      	beq.n	8002af4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0210 	mvn.w	r2, #16
 8002ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2208      	movs	r2, #8
 8002aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f872 	bl	8002bc4 <HAL_TIM_IC_CaptureCallback>
 8002ae0:	e005      	b.n	8002aee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f864 	bl	8002bb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f875 	bl	8002bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00c      	beq.n	8002b18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d007      	beq.n	8002b18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0201 	mvn.w	r2, #1
 8002b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fd fe0a 	bl	800072c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00c      	beq.n	8002b3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d007      	beq.n	8002b3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f906 	bl	8002d48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00c      	beq.n	8002b60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d007      	beq.n	8002b60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f8fe 	bl	8002d5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00c      	beq.n	8002b84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d007      	beq.n	8002b84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f834 	bl	8002bec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00c      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0220 	mvn.w	r2, #32
 8002ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f8c6 	bl	8002d34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ba8:	bf00      	nop
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a40      	ldr	r2, [pc, #256]	; (8002d14 <TIM_Base_SetConfig+0x114>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d013      	beq.n	8002c40 <TIM_Base_SetConfig+0x40>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c1e:	d00f      	beq.n	8002c40 <TIM_Base_SetConfig+0x40>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a3d      	ldr	r2, [pc, #244]	; (8002d18 <TIM_Base_SetConfig+0x118>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00b      	beq.n	8002c40 <TIM_Base_SetConfig+0x40>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a3c      	ldr	r2, [pc, #240]	; (8002d1c <TIM_Base_SetConfig+0x11c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d007      	beq.n	8002c40 <TIM_Base_SetConfig+0x40>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a3b      	ldr	r2, [pc, #236]	; (8002d20 <TIM_Base_SetConfig+0x120>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d003      	beq.n	8002c40 <TIM_Base_SetConfig+0x40>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a3a      	ldr	r2, [pc, #232]	; (8002d24 <TIM_Base_SetConfig+0x124>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d108      	bne.n	8002c52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a2f      	ldr	r2, [pc, #188]	; (8002d14 <TIM_Base_SetConfig+0x114>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d01f      	beq.n	8002c9a <TIM_Base_SetConfig+0x9a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c60:	d01b      	beq.n	8002c9a <TIM_Base_SetConfig+0x9a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a2c      	ldr	r2, [pc, #176]	; (8002d18 <TIM_Base_SetConfig+0x118>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d017      	beq.n	8002c9a <TIM_Base_SetConfig+0x9a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a2b      	ldr	r2, [pc, #172]	; (8002d1c <TIM_Base_SetConfig+0x11c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d013      	beq.n	8002c9a <TIM_Base_SetConfig+0x9a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a2a      	ldr	r2, [pc, #168]	; (8002d20 <TIM_Base_SetConfig+0x120>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d00f      	beq.n	8002c9a <TIM_Base_SetConfig+0x9a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a29      	ldr	r2, [pc, #164]	; (8002d24 <TIM_Base_SetConfig+0x124>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00b      	beq.n	8002c9a <TIM_Base_SetConfig+0x9a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a28      	ldr	r2, [pc, #160]	; (8002d28 <TIM_Base_SetConfig+0x128>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d007      	beq.n	8002c9a <TIM_Base_SetConfig+0x9a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a27      	ldr	r2, [pc, #156]	; (8002d2c <TIM_Base_SetConfig+0x12c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d003      	beq.n	8002c9a <TIM_Base_SetConfig+0x9a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a26      	ldr	r2, [pc, #152]	; (8002d30 <TIM_Base_SetConfig+0x130>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d108      	bne.n	8002cac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a10      	ldr	r2, [pc, #64]	; (8002d14 <TIM_Base_SetConfig+0x114>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00f      	beq.n	8002cf8 <TIM_Base_SetConfig+0xf8>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a12      	ldr	r2, [pc, #72]	; (8002d24 <TIM_Base_SetConfig+0x124>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d00b      	beq.n	8002cf8 <TIM_Base_SetConfig+0xf8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a11      	ldr	r2, [pc, #68]	; (8002d28 <TIM_Base_SetConfig+0x128>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d007      	beq.n	8002cf8 <TIM_Base_SetConfig+0xf8>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a10      	ldr	r2, [pc, #64]	; (8002d2c <TIM_Base_SetConfig+0x12c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d003      	beq.n	8002cf8 <TIM_Base_SetConfig+0xf8>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a0f      	ldr	r2, [pc, #60]	; (8002d30 <TIM_Base_SetConfig+0x130>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d103      	bne.n	8002d00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	615a      	str	r2, [r3, #20]
}
 8002d06:	bf00      	nop
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40012c00 	.word	0x40012c00
 8002d18:	40000400 	.word	0x40000400
 8002d1c:	40000800 	.word	0x40000800
 8002d20:	40000c00 	.word	0x40000c00
 8002d24:	40013400 	.word	0x40013400
 8002d28:	40014000 	.word	0x40014000
 8002d2c:	40014400 	.word	0x40014400
 8002d30:	40014800 	.word	0x40014800

08002d34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e040      	b.n	8002e04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fd fd0a 	bl	80007ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2224      	movs	r2, #36	; 0x24
 8002d9c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0201 	bic.w	r2, r2, #1
 8002dac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fb6a 	bl	8003490 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f8af 	bl	8002f20 <UART_SetConfig>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e01b      	b.n	8002e04 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fbe9 	bl	80035d4 <UART_CheckIdleState>
 8002e02:	4603      	mov	r3, r0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	; 0x28
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	d178      	bne.n	8002f16 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_UART_Transmit+0x24>
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e071      	b.n	8002f18 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2221      	movs	r2, #33	; 0x21
 8002e40:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e42:	f7fd feb3 	bl	8000bac <HAL_GetTick>
 8002e46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	88fa      	ldrh	r2, [r7, #6]
 8002e4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	88fa      	ldrh	r2, [r7, #6]
 8002e54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e60:	d108      	bne.n	8002e74 <HAL_UART_Transmit+0x68>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d104      	bne.n	8002e74 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	e003      	b.n	8002e7c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e7c:	e030      	b.n	8002ee0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2200      	movs	r2, #0
 8002e86:	2180      	movs	r1, #128	; 0x80
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 fc4b 	bl	8003724 <UART_WaitOnFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d004      	beq.n	8002e9e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e03c      	b.n	8002f18 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10b      	bne.n	8002ebc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	881a      	ldrh	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eb0:	b292      	uxth	r2, r2
 8002eb2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	3302      	adds	r3, #2
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	e008      	b.n	8002ece <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	781a      	ldrb	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	b292      	uxth	r2, r2
 8002ec6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1c8      	bne.n	8002e7e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2140      	movs	r1, #64	; 0x40
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 fc14 	bl	8003724 <UART_WaitOnFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d004      	beq.n	8002f0c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2220      	movs	r2, #32
 8002f06:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e005      	b.n	8002f18 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	e000      	b.n	8002f18 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002f16:	2302      	movs	r3, #2
  }
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3720      	adds	r7, #32
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f24:	b08a      	sub	sp, #40	; 0x28
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	4ba4      	ldr	r3, [pc, #656]	; (80031e0 <UART_SetConfig+0x2c0>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	6812      	ldr	r2, [r2, #0]
 8002f56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a99      	ldr	r2, [pc, #612]	; (80031e4 <UART_SetConfig+0x2c4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d004      	beq.n	8002f8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a90      	ldr	r2, [pc, #576]	; (80031e8 <UART_SetConfig+0x2c8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d126      	bne.n	8002ff8 <UART_SetConfig+0xd8>
 8002faa:	4b90      	ldr	r3, [pc, #576]	; (80031ec <UART_SetConfig+0x2cc>)
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d81b      	bhi.n	8002ff0 <UART_SetConfig+0xd0>
 8002fb8:	a201      	add	r2, pc, #4	; (adr r2, 8002fc0 <UART_SetConfig+0xa0>)
 8002fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbe:	bf00      	nop
 8002fc0:	08002fd1 	.word	0x08002fd1
 8002fc4:	08002fe1 	.word	0x08002fe1
 8002fc8:	08002fd9 	.word	0x08002fd9
 8002fcc:	08002fe9 	.word	0x08002fe9
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fd6:	e116      	b.n	8003206 <UART_SetConfig+0x2e6>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fde:	e112      	b.n	8003206 <UART_SetConfig+0x2e6>
 8002fe0:	2304      	movs	r3, #4
 8002fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fe6:	e10e      	b.n	8003206 <UART_SetConfig+0x2e6>
 8002fe8:	2308      	movs	r3, #8
 8002fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fee:	e10a      	b.n	8003206 <UART_SetConfig+0x2e6>
 8002ff0:	2310      	movs	r3, #16
 8002ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ff6:	e106      	b.n	8003206 <UART_SetConfig+0x2e6>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a7c      	ldr	r2, [pc, #496]	; (80031f0 <UART_SetConfig+0x2d0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d138      	bne.n	8003074 <UART_SetConfig+0x154>
 8003002:	4b7a      	ldr	r3, [pc, #488]	; (80031ec <UART_SetConfig+0x2cc>)
 8003004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003008:	f003 030c 	and.w	r3, r3, #12
 800300c:	2b0c      	cmp	r3, #12
 800300e:	d82d      	bhi.n	800306c <UART_SetConfig+0x14c>
 8003010:	a201      	add	r2, pc, #4	; (adr r2, 8003018 <UART_SetConfig+0xf8>)
 8003012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003016:	bf00      	nop
 8003018:	0800304d 	.word	0x0800304d
 800301c:	0800306d 	.word	0x0800306d
 8003020:	0800306d 	.word	0x0800306d
 8003024:	0800306d 	.word	0x0800306d
 8003028:	0800305d 	.word	0x0800305d
 800302c:	0800306d 	.word	0x0800306d
 8003030:	0800306d 	.word	0x0800306d
 8003034:	0800306d 	.word	0x0800306d
 8003038:	08003055 	.word	0x08003055
 800303c:	0800306d 	.word	0x0800306d
 8003040:	0800306d 	.word	0x0800306d
 8003044:	0800306d 	.word	0x0800306d
 8003048:	08003065 	.word	0x08003065
 800304c:	2300      	movs	r3, #0
 800304e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003052:	e0d8      	b.n	8003206 <UART_SetConfig+0x2e6>
 8003054:	2302      	movs	r3, #2
 8003056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800305a:	e0d4      	b.n	8003206 <UART_SetConfig+0x2e6>
 800305c:	2304      	movs	r3, #4
 800305e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003062:	e0d0      	b.n	8003206 <UART_SetConfig+0x2e6>
 8003064:	2308      	movs	r3, #8
 8003066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306a:	e0cc      	b.n	8003206 <UART_SetConfig+0x2e6>
 800306c:	2310      	movs	r3, #16
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003072:	e0c8      	b.n	8003206 <UART_SetConfig+0x2e6>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a5e      	ldr	r2, [pc, #376]	; (80031f4 <UART_SetConfig+0x2d4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d125      	bne.n	80030ca <UART_SetConfig+0x1aa>
 800307e:	4b5b      	ldr	r3, [pc, #364]	; (80031ec <UART_SetConfig+0x2cc>)
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003084:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003088:	2b30      	cmp	r3, #48	; 0x30
 800308a:	d016      	beq.n	80030ba <UART_SetConfig+0x19a>
 800308c:	2b30      	cmp	r3, #48	; 0x30
 800308e:	d818      	bhi.n	80030c2 <UART_SetConfig+0x1a2>
 8003090:	2b20      	cmp	r3, #32
 8003092:	d00a      	beq.n	80030aa <UART_SetConfig+0x18a>
 8003094:	2b20      	cmp	r3, #32
 8003096:	d814      	bhi.n	80030c2 <UART_SetConfig+0x1a2>
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <UART_SetConfig+0x182>
 800309c:	2b10      	cmp	r3, #16
 800309e:	d008      	beq.n	80030b2 <UART_SetConfig+0x192>
 80030a0:	e00f      	b.n	80030c2 <UART_SetConfig+0x1a2>
 80030a2:	2300      	movs	r3, #0
 80030a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030a8:	e0ad      	b.n	8003206 <UART_SetConfig+0x2e6>
 80030aa:	2302      	movs	r3, #2
 80030ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030b0:	e0a9      	b.n	8003206 <UART_SetConfig+0x2e6>
 80030b2:	2304      	movs	r3, #4
 80030b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030b8:	e0a5      	b.n	8003206 <UART_SetConfig+0x2e6>
 80030ba:	2308      	movs	r3, #8
 80030bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030c0:	e0a1      	b.n	8003206 <UART_SetConfig+0x2e6>
 80030c2:	2310      	movs	r3, #16
 80030c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030c8:	e09d      	b.n	8003206 <UART_SetConfig+0x2e6>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a4a      	ldr	r2, [pc, #296]	; (80031f8 <UART_SetConfig+0x2d8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d125      	bne.n	8003120 <UART_SetConfig+0x200>
 80030d4:	4b45      	ldr	r3, [pc, #276]	; (80031ec <UART_SetConfig+0x2cc>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030de:	2bc0      	cmp	r3, #192	; 0xc0
 80030e0:	d016      	beq.n	8003110 <UART_SetConfig+0x1f0>
 80030e2:	2bc0      	cmp	r3, #192	; 0xc0
 80030e4:	d818      	bhi.n	8003118 <UART_SetConfig+0x1f8>
 80030e6:	2b80      	cmp	r3, #128	; 0x80
 80030e8:	d00a      	beq.n	8003100 <UART_SetConfig+0x1e0>
 80030ea:	2b80      	cmp	r3, #128	; 0x80
 80030ec:	d814      	bhi.n	8003118 <UART_SetConfig+0x1f8>
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <UART_SetConfig+0x1d8>
 80030f2:	2b40      	cmp	r3, #64	; 0x40
 80030f4:	d008      	beq.n	8003108 <UART_SetConfig+0x1e8>
 80030f6:	e00f      	b.n	8003118 <UART_SetConfig+0x1f8>
 80030f8:	2300      	movs	r3, #0
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030fe:	e082      	b.n	8003206 <UART_SetConfig+0x2e6>
 8003100:	2302      	movs	r3, #2
 8003102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003106:	e07e      	b.n	8003206 <UART_SetConfig+0x2e6>
 8003108:	2304      	movs	r3, #4
 800310a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800310e:	e07a      	b.n	8003206 <UART_SetConfig+0x2e6>
 8003110:	2308      	movs	r3, #8
 8003112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003116:	e076      	b.n	8003206 <UART_SetConfig+0x2e6>
 8003118:	2310      	movs	r3, #16
 800311a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800311e:	e072      	b.n	8003206 <UART_SetConfig+0x2e6>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a35      	ldr	r2, [pc, #212]	; (80031fc <UART_SetConfig+0x2dc>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d12a      	bne.n	8003180 <UART_SetConfig+0x260>
 800312a:	4b30      	ldr	r3, [pc, #192]	; (80031ec <UART_SetConfig+0x2cc>)
 800312c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003134:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003138:	d01a      	beq.n	8003170 <UART_SetConfig+0x250>
 800313a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800313e:	d81b      	bhi.n	8003178 <UART_SetConfig+0x258>
 8003140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003144:	d00c      	beq.n	8003160 <UART_SetConfig+0x240>
 8003146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800314a:	d815      	bhi.n	8003178 <UART_SetConfig+0x258>
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <UART_SetConfig+0x238>
 8003150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003154:	d008      	beq.n	8003168 <UART_SetConfig+0x248>
 8003156:	e00f      	b.n	8003178 <UART_SetConfig+0x258>
 8003158:	2300      	movs	r3, #0
 800315a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800315e:	e052      	b.n	8003206 <UART_SetConfig+0x2e6>
 8003160:	2302      	movs	r3, #2
 8003162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003166:	e04e      	b.n	8003206 <UART_SetConfig+0x2e6>
 8003168:	2304      	movs	r3, #4
 800316a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800316e:	e04a      	b.n	8003206 <UART_SetConfig+0x2e6>
 8003170:	2308      	movs	r3, #8
 8003172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003176:	e046      	b.n	8003206 <UART_SetConfig+0x2e6>
 8003178:	2310      	movs	r3, #16
 800317a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800317e:	e042      	b.n	8003206 <UART_SetConfig+0x2e6>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a17      	ldr	r2, [pc, #92]	; (80031e4 <UART_SetConfig+0x2c4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d13a      	bne.n	8003200 <UART_SetConfig+0x2e0>
 800318a:	4b18      	ldr	r3, [pc, #96]	; (80031ec <UART_SetConfig+0x2cc>)
 800318c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003190:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003194:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003198:	d01a      	beq.n	80031d0 <UART_SetConfig+0x2b0>
 800319a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800319e:	d81b      	bhi.n	80031d8 <UART_SetConfig+0x2b8>
 80031a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031a4:	d00c      	beq.n	80031c0 <UART_SetConfig+0x2a0>
 80031a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031aa:	d815      	bhi.n	80031d8 <UART_SetConfig+0x2b8>
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <UART_SetConfig+0x298>
 80031b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b4:	d008      	beq.n	80031c8 <UART_SetConfig+0x2a8>
 80031b6:	e00f      	b.n	80031d8 <UART_SetConfig+0x2b8>
 80031b8:	2300      	movs	r3, #0
 80031ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031be:	e022      	b.n	8003206 <UART_SetConfig+0x2e6>
 80031c0:	2302      	movs	r3, #2
 80031c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031c6:	e01e      	b.n	8003206 <UART_SetConfig+0x2e6>
 80031c8:	2304      	movs	r3, #4
 80031ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ce:	e01a      	b.n	8003206 <UART_SetConfig+0x2e6>
 80031d0:	2308      	movs	r3, #8
 80031d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031d6:	e016      	b.n	8003206 <UART_SetConfig+0x2e6>
 80031d8:	2310      	movs	r3, #16
 80031da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031de:	e012      	b.n	8003206 <UART_SetConfig+0x2e6>
 80031e0:	efff69f3 	.word	0xefff69f3
 80031e4:	40008000 	.word	0x40008000
 80031e8:	40013800 	.word	0x40013800
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40004400 	.word	0x40004400
 80031f4:	40004800 	.word	0x40004800
 80031f8:	40004c00 	.word	0x40004c00
 80031fc:	40005000 	.word	0x40005000
 8003200:	2310      	movs	r3, #16
 8003202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a9f      	ldr	r2, [pc, #636]	; (8003488 <UART_SetConfig+0x568>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d17a      	bne.n	8003306 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003210:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003214:	2b08      	cmp	r3, #8
 8003216:	d824      	bhi.n	8003262 <UART_SetConfig+0x342>
 8003218:	a201      	add	r2, pc, #4	; (adr r2, 8003220 <UART_SetConfig+0x300>)
 800321a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321e:	bf00      	nop
 8003220:	08003245 	.word	0x08003245
 8003224:	08003263 	.word	0x08003263
 8003228:	0800324d 	.word	0x0800324d
 800322c:	08003263 	.word	0x08003263
 8003230:	08003253 	.word	0x08003253
 8003234:	08003263 	.word	0x08003263
 8003238:	08003263 	.word	0x08003263
 800323c:	08003263 	.word	0x08003263
 8003240:	0800325b 	.word	0x0800325b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003244:	f7fe fd58 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 8003248:	61f8      	str	r0, [r7, #28]
        break;
 800324a:	e010      	b.n	800326e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800324c:	4b8f      	ldr	r3, [pc, #572]	; (800348c <UART_SetConfig+0x56c>)
 800324e:	61fb      	str	r3, [r7, #28]
        break;
 8003250:	e00d      	b.n	800326e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003252:	f7fe fcb9 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 8003256:	61f8      	str	r0, [r7, #28]
        break;
 8003258:	e009      	b.n	800326e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800325a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800325e:	61fb      	str	r3, [r7, #28]
        break;
 8003260:	e005      	b.n	800326e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800326c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80fb 	beq.w	800346c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	4413      	add	r3, r2
 8003280:	69fa      	ldr	r2, [r7, #28]
 8003282:	429a      	cmp	r2, r3
 8003284:	d305      	bcc.n	8003292 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800328c:	69fa      	ldr	r2, [r7, #28]
 800328e:	429a      	cmp	r2, r3
 8003290:	d903      	bls.n	800329a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003298:	e0e8      	b.n	800346c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	2200      	movs	r2, #0
 800329e:	461c      	mov	r4, r3
 80032a0:	4615      	mov	r5, r2
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	022b      	lsls	r3, r5, #8
 80032ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80032b0:	0222      	lsls	r2, r4, #8
 80032b2:	68f9      	ldr	r1, [r7, #12]
 80032b4:	6849      	ldr	r1, [r1, #4]
 80032b6:	0849      	lsrs	r1, r1, #1
 80032b8:	2000      	movs	r0, #0
 80032ba:	4688      	mov	r8, r1
 80032bc:	4681      	mov	r9, r0
 80032be:	eb12 0a08 	adds.w	sl, r2, r8
 80032c2:	eb43 0b09 	adc.w	fp, r3, r9
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	603b      	str	r3, [r7, #0]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032d4:	4650      	mov	r0, sl
 80032d6:	4659      	mov	r1, fp
 80032d8:	f7fc ff8a 	bl	80001f0 <__aeabi_uldivmod>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4613      	mov	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032ea:	d308      	bcc.n	80032fe <UART_SetConfig+0x3de>
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032f2:	d204      	bcs.n	80032fe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	60da      	str	r2, [r3, #12]
 80032fc:	e0b6      	b.n	800346c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003304:	e0b2      	b.n	800346c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800330e:	d15e      	bne.n	80033ce <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003310:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003314:	2b08      	cmp	r3, #8
 8003316:	d828      	bhi.n	800336a <UART_SetConfig+0x44a>
 8003318:	a201      	add	r2, pc, #4	; (adr r2, 8003320 <UART_SetConfig+0x400>)
 800331a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331e:	bf00      	nop
 8003320:	08003345 	.word	0x08003345
 8003324:	0800334d 	.word	0x0800334d
 8003328:	08003355 	.word	0x08003355
 800332c:	0800336b 	.word	0x0800336b
 8003330:	0800335b 	.word	0x0800335b
 8003334:	0800336b 	.word	0x0800336b
 8003338:	0800336b 	.word	0x0800336b
 800333c:	0800336b 	.word	0x0800336b
 8003340:	08003363 	.word	0x08003363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003344:	f7fe fcd8 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 8003348:	61f8      	str	r0, [r7, #28]
        break;
 800334a:	e014      	b.n	8003376 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800334c:	f7fe fcea 	bl	8001d24 <HAL_RCC_GetPCLK2Freq>
 8003350:	61f8      	str	r0, [r7, #28]
        break;
 8003352:	e010      	b.n	8003376 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003354:	4b4d      	ldr	r3, [pc, #308]	; (800348c <UART_SetConfig+0x56c>)
 8003356:	61fb      	str	r3, [r7, #28]
        break;
 8003358:	e00d      	b.n	8003376 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800335a:	f7fe fc35 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 800335e:	61f8      	str	r0, [r7, #28]
        break;
 8003360:	e009      	b.n	8003376 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003366:	61fb      	str	r3, [r7, #28]
        break;
 8003368:	e005      	b.n	8003376 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003374:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d077      	beq.n	800346c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	005a      	lsls	r2, r3, #1
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	085b      	lsrs	r3, r3, #1
 8003386:	441a      	add	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003390:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	2b0f      	cmp	r3, #15
 8003396:	d916      	bls.n	80033c6 <UART_SetConfig+0x4a6>
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339e:	d212      	bcs.n	80033c6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	f023 030f 	bic.w	r3, r3, #15
 80033a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	085b      	lsrs	r3, r3, #1
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	8afb      	ldrh	r3, [r7, #22]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	8afa      	ldrh	r2, [r7, #22]
 80033c2:	60da      	str	r2, [r3, #12]
 80033c4:	e052      	b.n	800346c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033cc:	e04e      	b.n	800346c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d827      	bhi.n	8003426 <UART_SetConfig+0x506>
 80033d6:	a201      	add	r2, pc, #4	; (adr r2, 80033dc <UART_SetConfig+0x4bc>)
 80033d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033dc:	08003401 	.word	0x08003401
 80033e0:	08003409 	.word	0x08003409
 80033e4:	08003411 	.word	0x08003411
 80033e8:	08003427 	.word	0x08003427
 80033ec:	08003417 	.word	0x08003417
 80033f0:	08003427 	.word	0x08003427
 80033f4:	08003427 	.word	0x08003427
 80033f8:	08003427 	.word	0x08003427
 80033fc:	0800341f 	.word	0x0800341f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003400:	f7fe fc7a 	bl	8001cf8 <HAL_RCC_GetPCLK1Freq>
 8003404:	61f8      	str	r0, [r7, #28]
        break;
 8003406:	e014      	b.n	8003432 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003408:	f7fe fc8c 	bl	8001d24 <HAL_RCC_GetPCLK2Freq>
 800340c:	61f8      	str	r0, [r7, #28]
        break;
 800340e:	e010      	b.n	8003432 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003410:	4b1e      	ldr	r3, [pc, #120]	; (800348c <UART_SetConfig+0x56c>)
 8003412:	61fb      	str	r3, [r7, #28]
        break;
 8003414:	e00d      	b.n	8003432 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003416:	f7fe fbd7 	bl	8001bc8 <HAL_RCC_GetSysClockFreq>
 800341a:	61f8      	str	r0, [r7, #28]
        break;
 800341c:	e009      	b.n	8003432 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800341e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003422:	61fb      	str	r3, [r7, #28]
        break;
 8003424:	e005      	b.n	8003432 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003430:	bf00      	nop
    }

    if (pclk != 0U)
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d019      	beq.n	800346c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	085a      	lsrs	r2, r3, #1
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	441a      	add	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	fbb2 f3f3 	udiv	r3, r2, r3
 800344a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2b0f      	cmp	r3, #15
 8003450:	d909      	bls.n	8003466 <UART_SetConfig+0x546>
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003458:	d205      	bcs.n	8003466 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60da      	str	r2, [r3, #12]
 8003464:	e002      	b.n	800346c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003478:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800347c:	4618      	mov	r0, r3
 800347e:	3728      	adds	r7, #40	; 0x28
 8003480:	46bd      	mov	sp, r7
 8003482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003486:	bf00      	nop
 8003488:	40008000 	.word	0x40008000
 800348c:	00f42400 	.word	0x00f42400

08003490 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01a      	beq.n	80035a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800358e:	d10a      	bne.n	80035a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	605a      	str	r2, [r3, #4]
  }
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b098      	sub	sp, #96	; 0x60
 80035d8:	af02      	add	r7, sp, #8
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035e4:	f7fd fae2 	bl	8000bac <HAL_GetTick>
 80035e8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d12e      	bne.n	8003656 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003600:	2200      	movs	r2, #0
 8003602:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f88c 	bl	8003724 <UART_WaitOnFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d021      	beq.n	8003656 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361a:	e853 3f00 	ldrex	r3, [r3]
 800361e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003626:	653b      	str	r3, [r7, #80]	; 0x50
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003630:	647b      	str	r3, [r7, #68]	; 0x44
 8003632:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003634:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003638:	e841 2300 	strex	r3, r2, [r1]
 800363c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800363e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1e6      	bne.n	8003612 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e062      	b.n	800371c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b04      	cmp	r3, #4
 8003662:	d149      	bne.n	80036f8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003664:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800366c:	2200      	movs	r2, #0
 800366e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f856 	bl	8003724 <UART_WaitOnFlagUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d03c      	beq.n	80036f8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	e853 3f00 	ldrex	r3, [r3]
 800368a:	623b      	str	r3, [r7, #32]
   return(result);
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800369c:	633b      	str	r3, [r7, #48]	; 0x30
 800369e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a4:	e841 2300 	strex	r3, r2, [r1]
 80036a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1e6      	bne.n	800367e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3308      	adds	r3, #8
 80036b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	e853 3f00 	ldrex	r3, [r3]
 80036be:	60fb      	str	r3, [r7, #12]
   return(result);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f023 0301 	bic.w	r3, r3, #1
 80036c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3308      	adds	r3, #8
 80036ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036d0:	61fa      	str	r2, [r7, #28]
 80036d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d4:	69b9      	ldr	r1, [r7, #24]
 80036d6:	69fa      	ldr	r2, [r7, #28]
 80036d8:	e841 2300 	strex	r3, r2, [r1]
 80036dc:	617b      	str	r3, [r7, #20]
   return(result);
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e5      	bne.n	80036b0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e011      	b.n	800371c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2220      	movs	r2, #32
 80036fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2220      	movs	r2, #32
 8003702:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3758      	adds	r7, #88	; 0x58
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	4613      	mov	r3, r2
 8003732:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003734:	e049      	b.n	80037ca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800373c:	d045      	beq.n	80037ca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800373e:	f7fd fa35 	bl	8000bac <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	429a      	cmp	r2, r3
 800374c:	d302      	bcc.n	8003754 <UART_WaitOnFlagUntilTimeout+0x30>
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e048      	b.n	80037ea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	d031      	beq.n	80037ca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b08      	cmp	r3, #8
 8003772:	d110      	bne.n	8003796 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2208      	movs	r2, #8
 800377a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 f838 	bl	80037f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2208      	movs	r2, #8
 8003786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e029      	b.n	80037ea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037a4:	d111      	bne.n	80037ca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 f81e 	bl	80037f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e00f      	b.n	80037ea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69da      	ldr	r2, [r3, #28]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4013      	ands	r3, r2
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	bf0c      	ite	eq
 80037da:	2301      	moveq	r3, #1
 80037dc:	2300      	movne	r3, #0
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	461a      	mov	r2, r3
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d0a6      	beq.n	8003736 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b095      	sub	sp, #84	; 0x54
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003802:	e853 3f00 	ldrex	r3, [r3]
 8003806:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800380e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	461a      	mov	r2, r3
 8003816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003818:	643b      	str	r3, [r7, #64]	; 0x40
 800381a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800381e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003820:	e841 2300 	strex	r3, r2, [r1]
 8003824:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e6      	bne.n	80037fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3308      	adds	r3, #8
 8003832:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	e853 3f00 	ldrex	r3, [r3]
 800383a:	61fb      	str	r3, [r7, #28]
   return(result);
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f023 0301 	bic.w	r3, r3, #1
 8003842:	64bb      	str	r3, [r7, #72]	; 0x48
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3308      	adds	r3, #8
 800384a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800384c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800384e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003854:	e841 2300 	strex	r3, r2, [r1]
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1e5      	bne.n	800382c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003864:	2b01      	cmp	r3, #1
 8003866:	d118      	bne.n	800389a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	e853 3f00 	ldrex	r3, [r3]
 8003874:	60bb      	str	r3, [r7, #8]
   return(result);
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f023 0310 	bic.w	r3, r3, #16
 800387c:	647b      	str	r3, [r7, #68]	; 0x44
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003886:	61bb      	str	r3, [r7, #24]
 8003888:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388a:	6979      	ldr	r1, [r7, #20]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	e841 2300 	strex	r3, r2, [r1]
 8003892:	613b      	str	r3, [r7, #16]
   return(result);
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1e6      	bne.n	8003868 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	669a      	str	r2, [r3, #104]	; 0x68
}
 80038ae:	bf00      	nop
 80038b0:	3754      	adds	r7, #84	; 0x54
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
	...

080038bc <__NVIC_SetPriority>:
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	6039      	str	r1, [r7, #0]
 80038c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	db0a      	blt.n	80038e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	490c      	ldr	r1, [pc, #48]	; (8003908 <__NVIC_SetPriority+0x4c>)
 80038d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038da:	0112      	lsls	r2, r2, #4
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	440b      	add	r3, r1
 80038e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80038e4:	e00a      	b.n	80038fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	4908      	ldr	r1, [pc, #32]	; (800390c <__NVIC_SetPriority+0x50>)
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	3b04      	subs	r3, #4
 80038f4:	0112      	lsls	r2, r2, #4
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	440b      	add	r3, r1
 80038fa:	761a      	strb	r2, [r3, #24]
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	e000e100 	.word	0xe000e100
 800390c:	e000ed00 	.word	0xe000ed00

08003910 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <SysTick_Handler+0x1c>)
 8003916:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003918:	f001 fd28 	bl	800536c <xTaskGetSchedulerState>
 800391c:	4603      	mov	r3, r0
 800391e:	2b01      	cmp	r3, #1
 8003920:	d001      	beq.n	8003926 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003922:	f002 fb11 	bl	8005f48 <xPortSysTickHandler>
  }
}
 8003926:	bf00      	nop
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	e000e010 	.word	0xe000e010

08003930 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003934:	2100      	movs	r1, #0
 8003936:	f06f 0004 	mvn.w	r0, #4
 800393a:	f7ff ffbf 	bl	80038bc <__NVIC_SetPriority>
#endif
}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800394a:	f3ef 8305 	mrs	r3, IPSR
 800394e:	603b      	str	r3, [r7, #0]
  return(result);
 8003950:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003956:	f06f 0305 	mvn.w	r3, #5
 800395a:	607b      	str	r3, [r7, #4]
 800395c:	e00c      	b.n	8003978 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800395e:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <osKernelInitialize+0x44>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d105      	bne.n	8003972 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003966:	4b08      	ldr	r3, [pc, #32]	; (8003988 <osKernelInitialize+0x44>)
 8003968:	2201      	movs	r2, #1
 800396a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800396c:	2300      	movs	r3, #0
 800396e:	607b      	str	r3, [r7, #4]
 8003970:	e002      	b.n	8003978 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003976:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003978:	687b      	ldr	r3, [r7, #4]
}
 800397a:	4618      	mov	r0, r3
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	20000170 	.word	0x20000170

0800398c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003992:	f3ef 8305 	mrs	r3, IPSR
 8003996:	603b      	str	r3, [r7, #0]
  return(result);
 8003998:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800399e:	f06f 0305 	mvn.w	r3, #5
 80039a2:	607b      	str	r3, [r7, #4]
 80039a4:	e010      	b.n	80039c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80039a6:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <osKernelStart+0x48>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d109      	bne.n	80039c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80039ae:	f7ff ffbf 	bl	8003930 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80039b2:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <osKernelStart+0x48>)
 80039b4:	2202      	movs	r2, #2
 80039b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80039b8:	f001 f87c 	bl	8004ab4 <vTaskStartScheduler>
      stat = osOK;
 80039bc:	2300      	movs	r3, #0
 80039be:	607b      	str	r3, [r7, #4]
 80039c0:	e002      	b.n	80039c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80039c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039c8:	687b      	ldr	r3, [r7, #4]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20000170 	.word	0x20000170

080039d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08e      	sub	sp, #56	; 0x38
 80039dc:	af04      	add	r7, sp, #16
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039e8:	f3ef 8305 	mrs	r3, IPSR
 80039ec:	617b      	str	r3, [r7, #20]
  return(result);
 80039ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d17e      	bne.n	8003af2 <osThreadNew+0x11a>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d07b      	beq.n	8003af2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80039fa:	2380      	movs	r3, #128	; 0x80
 80039fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80039fe:	2318      	movs	r3, #24
 8003a00:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d045      	beq.n	8003a9e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <osThreadNew+0x48>
        name = attr->name;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d002      	beq.n	8003a2e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <osThreadNew+0x6e>
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	2b38      	cmp	r3, #56	; 0x38
 8003a38:	d805      	bhi.n	8003a46 <osThreadNew+0x6e>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <osThreadNew+0x72>
        return (NULL);
 8003a46:	2300      	movs	r3, #0
 8003a48:	e054      	b.n	8003af4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	089b      	lsrs	r3, r3, #2
 8003a58:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00e      	beq.n	8003a80 <osThreadNew+0xa8>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	2ba7      	cmp	r3, #167	; 0xa7
 8003a68:	d90a      	bls.n	8003a80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d006      	beq.n	8003a80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <osThreadNew+0xa8>
        mem = 1;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	e010      	b.n	8003aa2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10c      	bne.n	8003aa2 <osThreadNew+0xca>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d108      	bne.n	8003aa2 <osThreadNew+0xca>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d104      	bne.n	8003aa2 <osThreadNew+0xca>
          mem = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61bb      	str	r3, [r7, #24]
 8003a9c:	e001      	b.n	8003aa2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d110      	bne.n	8003aca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ab0:	9202      	str	r2, [sp, #8]
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	6a3a      	ldr	r2, [r7, #32]
 8003abc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fe0c 	bl	80046dc <xTaskCreateStatic>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	e013      	b.n	8003af2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d110      	bne.n	8003af2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	f107 0310 	add.w	r3, r7, #16
 8003ad8:	9301      	str	r3, [sp, #4]
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 fe57 	bl	8004796 <xTaskCreate>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d001      	beq.n	8003af2 <osThreadNew+0x11a>
            hTask = NULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003af2:	693b      	ldr	r3, [r7, #16]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3728      	adds	r7, #40	; 0x28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b04:	f3ef 8305 	mrs	r3, IPSR
 8003b08:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <osDelay+0x1c>
    stat = osErrorISR;
 8003b10:	f06f 0305 	mvn.w	r3, #5
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	e007      	b.n	8003b28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 ff92 	bl	8004a4c <vTaskDelay>
    }
  }

  return (stat);
 8003b28:	68fb      	ldr	r3, [r7, #12]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4a07      	ldr	r2, [pc, #28]	; (8003b60 <vApplicationGetIdleTaskMemory+0x2c>)
 8003b44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	4a06      	ldr	r2, [pc, #24]	; (8003b64 <vApplicationGetIdleTaskMemory+0x30>)
 8003b4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2280      	movs	r2, #128	; 0x80
 8003b50:	601a      	str	r2, [r3, #0]
}
 8003b52:	bf00      	nop
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000174 	.word	0x20000174
 8003b64:	2000021c 	.word	0x2000021c

08003b68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4a07      	ldr	r2, [pc, #28]	; (8003b94 <vApplicationGetTimerTaskMemory+0x2c>)
 8003b78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4a06      	ldr	r2, [pc, #24]	; (8003b98 <vApplicationGetTimerTaskMemory+0x30>)
 8003b7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b86:	601a      	str	r2, [r3, #0]
}
 8003b88:	bf00      	nop
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	2000041c 	.word	0x2000041c
 8003b98:	200004c4 	.word	0x200004c4

08003b9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f103 0208 	add.w	r2, r3, #8
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f103 0208 	add.w	r2, r3, #8
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f103 0208 	add.w	r2, r3, #8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b085      	sub	sp, #20
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	601a      	str	r2, [r3, #0]
}
 8003c32:	bf00      	nop
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b085      	sub	sp, #20
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c54:	d103      	bne.n	8003c5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	e00c      	b.n	8003c78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3308      	adds	r3, #8
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	e002      	b.n	8003c6c <vListInsert+0x2e>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d2f6      	bcs.n	8003c66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	601a      	str	r2, [r3, #0]
}
 8003ca4:	bf00      	nop
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6892      	ldr	r2, [r2, #8]
 8003cc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6852      	ldr	r2, [r2, #4]
 8003cd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d103      	bne.n	8003ce4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	1e5a      	subs	r2, r3, #1
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10a      	bne.n	8003d2e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d2a:	bf00      	nop
 8003d2c:	e7fe      	b.n	8003d2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d2e:	f002 f879 	bl	8005e24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3a:	68f9      	ldr	r1, [r7, #12]
 8003d3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d3e:	fb01 f303 	mul.w	r3, r1, r3
 8003d42:	441a      	add	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	68f9      	ldr	r1, [r7, #12]
 8003d62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d64:	fb01 f303 	mul.w	r3, r1, r3
 8003d68:	441a      	add	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	22ff      	movs	r2, #255	; 0xff
 8003d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	22ff      	movs	r2, #255	; 0xff
 8003d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d114      	bne.n	8003dae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d01a      	beq.n	8003dc2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3310      	adds	r3, #16
 8003d90:	4618      	mov	r0, r3
 8003d92:	f001 f929 	bl	8004fe8 <xTaskRemoveFromEventList>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d012      	beq.n	8003dc2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <xQueueGenericReset+0xcc>)
 8003d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	e009      	b.n	8003dc2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3310      	adds	r3, #16
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fef2 	bl	8003b9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3324      	adds	r3, #36	; 0x24
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff feed 	bl	8003b9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003dc2:	f002 f85f 	bl	8005e84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003dc6:	2301      	movs	r3, #1
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	e000ed04 	.word	0xe000ed04

08003dd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08e      	sub	sp, #56	; 0x38
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10a      	bne.n	8003dfe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003dfa:	bf00      	nop
 8003dfc:	e7fe      	b.n	8003dfc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10a      	bne.n	8003e1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e16:	bf00      	nop
 8003e18:	e7fe      	b.n	8003e18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <xQueueGenericCreateStatic+0x52>
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <xQueueGenericCreateStatic+0x56>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <xQueueGenericCreateStatic+0x58>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10a      	bne.n	8003e46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	623b      	str	r3, [r7, #32]
}
 8003e42:	bf00      	nop
 8003e44:	e7fe      	b.n	8003e44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d102      	bne.n	8003e52 <xQueueGenericCreateStatic+0x7e>
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <xQueueGenericCreateStatic+0x82>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <xQueueGenericCreateStatic+0x84>
 8003e56:	2300      	movs	r3, #0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10a      	bne.n	8003e72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e60:	f383 8811 	msr	BASEPRI, r3
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	61fb      	str	r3, [r7, #28]
}
 8003e6e:	bf00      	nop
 8003e70:	e7fe      	b.n	8003e70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e72:	2350      	movs	r3, #80	; 0x50
 8003e74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2b50      	cmp	r3, #80	; 0x50
 8003e7a:	d00a      	beq.n	8003e92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	61bb      	str	r3, [r7, #24]
}
 8003e8e:	bf00      	nop
 8003e90:	e7fe      	b.n	8003e90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003e92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00d      	beq.n	8003eba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ea6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	68b9      	ldr	r1, [r7, #8]
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 f805 	bl	8003ec4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3730      	adds	r7, #48	; 0x30
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
 8003ed0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d103      	bne.n	8003ee0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	e002      	b.n	8003ee6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	69b8      	ldr	r0, [r7, #24]
 8003ef6:	f7ff ff05 	bl	8003d04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	78fa      	ldrb	r2, [r7, #3]
 8003efe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f02:	bf00      	nop
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08e      	sub	sp, #56	; 0x38
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <xQueueGenericSend+0x32>
	__asm volatile
 8003f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2c:	f383 8811 	msr	BASEPRI, r3
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f3a:	bf00      	nop
 8003f3c:	e7fe      	b.n	8003f3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d103      	bne.n	8003f4c <xQueueGenericSend+0x40>
 8003f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <xQueueGenericSend+0x44>
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e000      	b.n	8003f52 <xQueueGenericSend+0x46>
 8003f50:	2300      	movs	r3, #0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <xQueueGenericSend+0x60>
	__asm volatile
 8003f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5a:	f383 8811 	msr	BASEPRI, r3
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f68:	bf00      	nop
 8003f6a:	e7fe      	b.n	8003f6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d103      	bne.n	8003f7a <xQueueGenericSend+0x6e>
 8003f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <xQueueGenericSend+0x72>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <xQueueGenericSend+0x74>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10a      	bne.n	8003f9a <xQueueGenericSend+0x8e>
	__asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	623b      	str	r3, [r7, #32]
}
 8003f96:	bf00      	nop
 8003f98:	e7fe      	b.n	8003f98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f9a:	f001 f9e7 	bl	800536c <xTaskGetSchedulerState>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d102      	bne.n	8003faa <xQueueGenericSend+0x9e>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <xQueueGenericSend+0xa2>
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <xQueueGenericSend+0xa4>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <xQueueGenericSend+0xbe>
	__asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	61fb      	str	r3, [r7, #28]
}
 8003fc6:	bf00      	nop
 8003fc8:	e7fe      	b.n	8003fc8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fca:	f001 ff2b 	bl	8005e24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d302      	bcc.n	8003fe0 <xQueueGenericSend+0xd4>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d129      	bne.n	8004034 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	68b9      	ldr	r1, [r7, #8]
 8003fe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fe6:	f000 fa0b 	bl	8004400 <prvCopyDataToQueue>
 8003fea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d010      	beq.n	8004016 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	3324      	adds	r3, #36	; 0x24
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fff5 	bl	8004fe8 <xTaskRemoveFromEventList>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d013      	beq.n	800402c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004004:	4b3f      	ldr	r3, [pc, #252]	; (8004104 <xQueueGenericSend+0x1f8>)
 8004006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	e00a      	b.n	800402c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d007      	beq.n	800402c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800401c:	4b39      	ldr	r3, [pc, #228]	; (8004104 <xQueueGenericSend+0x1f8>)
 800401e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800402c:	f001 ff2a 	bl	8005e84 <vPortExitCritical>
				return pdPASS;
 8004030:	2301      	movs	r3, #1
 8004032:	e063      	b.n	80040fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d103      	bne.n	8004042 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800403a:	f001 ff23 	bl	8005e84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800403e:	2300      	movs	r3, #0
 8004040:	e05c      	b.n	80040fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004044:	2b00      	cmp	r3, #0
 8004046:	d106      	bne.n	8004056 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004048:	f107 0314 	add.w	r3, r7, #20
 800404c:	4618      	mov	r0, r3
 800404e:	f001 f82f 	bl	80050b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004052:	2301      	movs	r3, #1
 8004054:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004056:	f001 ff15 	bl	8005e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800405a:	f000 fd9b 	bl	8004b94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800405e:	f001 fee1 	bl	8005e24 <vPortEnterCritical>
 8004062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004064:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004068:	b25b      	sxtb	r3, r3
 800406a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800406e:	d103      	bne.n	8004078 <xQueueGenericSend+0x16c>
 8004070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800407e:	b25b      	sxtb	r3, r3
 8004080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004084:	d103      	bne.n	800408e <xQueueGenericSend+0x182>
 8004086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800408e:	f001 fef9 	bl	8005e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004092:	1d3a      	adds	r2, r7, #4
 8004094:	f107 0314 	add.w	r3, r7, #20
 8004098:	4611      	mov	r1, r2
 800409a:	4618      	mov	r0, r3
 800409c:	f001 f81e 	bl	80050dc <xTaskCheckForTimeOut>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d124      	bne.n	80040f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80040a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040a8:	f000 faa2 	bl	80045f0 <prvIsQueueFull>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d018      	beq.n	80040e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	3310      	adds	r3, #16
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	4611      	mov	r1, r2
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 ff44 	bl	8004f48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80040c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040c2:	f000 fa2d 	bl	8004520 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80040c6:	f000 fd73 	bl	8004bb0 <xTaskResumeAll>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f47f af7c 	bne.w	8003fca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80040d2:	4b0c      	ldr	r3, [pc, #48]	; (8004104 <xQueueGenericSend+0x1f8>)
 80040d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	e772      	b.n	8003fca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040e6:	f000 fa1b 	bl	8004520 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040ea:	f000 fd61 	bl	8004bb0 <xTaskResumeAll>
 80040ee:	e76c      	b.n	8003fca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040f2:	f000 fa15 	bl	8004520 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040f6:	f000 fd5b 	bl	8004bb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80040fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3738      	adds	r7, #56	; 0x38
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	e000ed04 	.word	0xe000ed04

08004108 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b090      	sub	sp, #64	; 0x40
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10a      	bne.n	8004136 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004132:	bf00      	nop
 8004134:	e7fe      	b.n	8004134 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d103      	bne.n	8004144 <xQueueGenericSendFromISR+0x3c>
 800413c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <xQueueGenericSendFromISR+0x40>
 8004144:	2301      	movs	r3, #1
 8004146:	e000      	b.n	800414a <xQueueGenericSendFromISR+0x42>
 8004148:	2300      	movs	r3, #0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10a      	bne.n	8004164 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800414e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004160:	bf00      	nop
 8004162:	e7fe      	b.n	8004162 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d103      	bne.n	8004172 <xQueueGenericSendFromISR+0x6a>
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416e:	2b01      	cmp	r3, #1
 8004170:	d101      	bne.n	8004176 <xQueueGenericSendFromISR+0x6e>
 8004172:	2301      	movs	r3, #1
 8004174:	e000      	b.n	8004178 <xQueueGenericSendFromISR+0x70>
 8004176:	2300      	movs	r3, #0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10a      	bne.n	8004192 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800417c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	623b      	str	r3, [r7, #32]
}
 800418e:	bf00      	nop
 8004190:	e7fe      	b.n	8004190 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004192:	f001 ff29 	bl	8005fe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004196:	f3ef 8211 	mrs	r2, BASEPRI
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	61fa      	str	r2, [r7, #28]
 80041ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80041ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d302      	bcc.n	80041c4 <xQueueGenericSendFromISR+0xbc>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d12f      	bne.n	8004224 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	68b9      	ldr	r1, [r7, #8]
 80041d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80041da:	f000 f911 	bl	8004400 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80041e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041e6:	d112      	bne.n	800420e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d016      	beq.n	800421e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f2:	3324      	adds	r3, #36	; 0x24
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 fef7 	bl	8004fe8 <xTaskRemoveFromEventList>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00e      	beq.n	800421e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00b      	beq.n	800421e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	e007      	b.n	800421e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800420e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004212:	3301      	adds	r3, #1
 8004214:	b2db      	uxtb	r3, r3
 8004216:	b25a      	sxtb	r2, r3
 8004218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800421e:	2301      	movs	r3, #1
 8004220:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004222:	e001      	b.n	8004228 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004224:	2300      	movs	r3, #0
 8004226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800422a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004232:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004236:	4618      	mov	r0, r3
 8004238:	3740      	adds	r7, #64	; 0x40
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08c      	sub	sp, #48	; 0x30
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800424c:	2300      	movs	r3, #0
 800424e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10a      	bne.n	8004270 <xQueueReceive+0x30>
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	623b      	str	r3, [r7, #32]
}
 800426c:	bf00      	nop
 800426e:	e7fe      	b.n	800426e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d103      	bne.n	800427e <xQueueReceive+0x3e>
 8004276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <xQueueReceive+0x42>
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <xQueueReceive+0x44>
 8004282:	2300      	movs	r3, #0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10a      	bne.n	800429e <xQueueReceive+0x5e>
	__asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	61fb      	str	r3, [r7, #28]
}
 800429a:	bf00      	nop
 800429c:	e7fe      	b.n	800429c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800429e:	f001 f865 	bl	800536c <xTaskGetSchedulerState>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d102      	bne.n	80042ae <xQueueReceive+0x6e>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <xQueueReceive+0x72>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <xQueueReceive+0x74>
 80042b2:	2300      	movs	r3, #0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10a      	bne.n	80042ce <xQueueReceive+0x8e>
	__asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	61bb      	str	r3, [r7, #24]
}
 80042ca:	bf00      	nop
 80042cc:	e7fe      	b.n	80042cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042ce:	f001 fda9 	bl	8005e24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d01f      	beq.n	800431e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042de:	68b9      	ldr	r1, [r7, #8]
 80042e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042e2:	f000 f8f7 	bl	80044d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	1e5a      	subs	r2, r3, #1
 80042ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00f      	beq.n	8004316 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f8:	3310      	adds	r3, #16
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fe74 	bl	8004fe8 <xTaskRemoveFromEventList>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d007      	beq.n	8004316 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004306:	4b3d      	ldr	r3, [pc, #244]	; (80043fc <xQueueReceive+0x1bc>)
 8004308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004316:	f001 fdb5 	bl	8005e84 <vPortExitCritical>
				return pdPASS;
 800431a:	2301      	movs	r3, #1
 800431c:	e069      	b.n	80043f2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d103      	bne.n	800432c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004324:	f001 fdae 	bl	8005e84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004328:	2300      	movs	r3, #0
 800432a:	e062      	b.n	80043f2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800432c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432e:	2b00      	cmp	r3, #0
 8004330:	d106      	bne.n	8004340 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004332:	f107 0310 	add.w	r3, r7, #16
 8004336:	4618      	mov	r0, r3
 8004338:	f000 feba 	bl	80050b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800433c:	2301      	movs	r3, #1
 800433e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004340:	f001 fda0 	bl	8005e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004344:	f000 fc26 	bl	8004b94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004348:	f001 fd6c 	bl	8005e24 <vPortEnterCritical>
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004352:	b25b      	sxtb	r3, r3
 8004354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004358:	d103      	bne.n	8004362 <xQueueReceive+0x122>
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004364:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004368:	b25b      	sxtb	r3, r3
 800436a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800436e:	d103      	bne.n	8004378 <xQueueReceive+0x138>
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004378:	f001 fd84 	bl	8005e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800437c:	1d3a      	adds	r2, r7, #4
 800437e:	f107 0310 	add.w	r3, r7, #16
 8004382:	4611      	mov	r1, r2
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fea9 	bl	80050dc <xTaskCheckForTimeOut>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d123      	bne.n	80043d8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004392:	f000 f917 	bl	80045c4 <prvIsQueueEmpty>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d017      	beq.n	80043cc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	3324      	adds	r3, #36	; 0x24
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	4611      	mov	r1, r2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fdcf 	bl	8004f48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ac:	f000 f8b8 	bl	8004520 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043b0:	f000 fbfe 	bl	8004bb0 <xTaskResumeAll>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d189      	bne.n	80042ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80043ba:	4b10      	ldr	r3, [pc, #64]	; (80043fc <xQueueReceive+0x1bc>)
 80043bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	e780      	b.n	80042ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80043cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ce:	f000 f8a7 	bl	8004520 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043d2:	f000 fbed 	bl	8004bb0 <xTaskResumeAll>
 80043d6:	e77a      	b.n	80042ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80043d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043da:	f000 f8a1 	bl	8004520 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043de:	f000 fbe7 	bl	8004bb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043e4:	f000 f8ee 	bl	80045c4 <prvIsQueueEmpty>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f43f af6f 	beq.w	80042ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80043f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3730      	adds	r7, #48	; 0x30
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	e000ed04 	.word	0xe000ed04

08004400 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004414:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10d      	bne.n	800443a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d14d      	bne.n	80044c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	4618      	mov	r0, r3
 800442c:	f000 ffbc 	bl	80053a8 <xTaskPriorityDisinherit>
 8004430:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	609a      	str	r2, [r3, #8]
 8004438:	e043      	b.n	80044c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d119      	bne.n	8004474 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6858      	ldr	r0, [r3, #4]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	461a      	mov	r2, r3
 800444a:	68b9      	ldr	r1, [r7, #8]
 800444c:	f002 fabd 	bl	80069ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	441a      	add	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	429a      	cmp	r2, r3
 8004468:	d32b      	bcc.n	80044c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	605a      	str	r2, [r3, #4]
 8004472:	e026      	b.n	80044c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	68d8      	ldr	r0, [r3, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	461a      	mov	r2, r3
 800447e:	68b9      	ldr	r1, [r7, #8]
 8004480:	f002 faa3 	bl	80069ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	68da      	ldr	r2, [r3, #12]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	425b      	negs	r3, r3
 800448e:	441a      	add	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d207      	bcs.n	80044b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	425b      	negs	r3, r3
 80044aa:	441a      	add	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d105      	bne.n	80044c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d002      	beq.n	80044c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	3b01      	subs	r3, #1
 80044c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80044ca:	697b      	ldr	r3, [r7, #20]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d018      	beq.n	8004518 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	441a      	add	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d303      	bcc.n	8004508 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68d9      	ldr	r1, [r3, #12]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	461a      	mov	r2, r3
 8004512:	6838      	ldr	r0, [r7, #0]
 8004514:	f002 fa59 	bl	80069ca <memcpy>
	}
}
 8004518:	bf00      	nop
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004528:	f001 fc7c 	bl	8005e24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004532:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004534:	e011      	b.n	800455a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	2b00      	cmp	r3, #0
 800453c:	d012      	beq.n	8004564 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3324      	adds	r3, #36	; 0x24
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fd50 	bl	8004fe8 <xTaskRemoveFromEventList>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800454e:	f000 fe27 	bl	80051a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	3b01      	subs	r3, #1
 8004556:	b2db      	uxtb	r3, r3
 8004558:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800455a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800455e:	2b00      	cmp	r3, #0
 8004560:	dce9      	bgt.n	8004536 <prvUnlockQueue+0x16>
 8004562:	e000      	b.n	8004566 <prvUnlockQueue+0x46>
					break;
 8004564:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	22ff      	movs	r2, #255	; 0xff
 800456a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800456e:	f001 fc89 	bl	8005e84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004572:	f001 fc57 	bl	8005e24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800457c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800457e:	e011      	b.n	80045a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d012      	beq.n	80045ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3310      	adds	r3, #16
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fd2b 	bl	8004fe8 <xTaskRemoveFromEventList>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004598:	f000 fe02 	bl	80051a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800459c:	7bbb      	ldrb	r3, [r7, #14]
 800459e:	3b01      	subs	r3, #1
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	dce9      	bgt.n	8004580 <prvUnlockQueue+0x60>
 80045ac:	e000      	b.n	80045b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80045ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	22ff      	movs	r2, #255	; 0xff
 80045b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80045b8:	f001 fc64 	bl	8005e84 <vPortExitCritical>
}
 80045bc:	bf00      	nop
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045cc:	f001 fc2a 	bl	8005e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d102      	bne.n	80045de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80045d8:	2301      	movs	r3, #1
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	e001      	b.n	80045e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045e2:	f001 fc4f 	bl	8005e84 <vPortExitCritical>

	return xReturn;
 80045e6:	68fb      	ldr	r3, [r7, #12]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045f8:	f001 fc14 	bl	8005e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004604:	429a      	cmp	r2, r3
 8004606:	d102      	bne.n	800460e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004608:	2301      	movs	r3, #1
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	e001      	b.n	8004612 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800460e:	2300      	movs	r3, #0
 8004610:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004612:	f001 fc37 	bl	8005e84 <vPortExitCritical>

	return xReturn;
 8004616:	68fb      	ldr	r3, [r7, #12]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	e014      	b.n	800465a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004630:	4a0f      	ldr	r2, [pc, #60]	; (8004670 <vQueueAddToRegistry+0x50>)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10b      	bne.n	8004654 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800463c:	490c      	ldr	r1, [pc, #48]	; (8004670 <vQueueAddToRegistry+0x50>)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004646:	4a0a      	ldr	r2, [pc, #40]	; (8004670 <vQueueAddToRegistry+0x50>)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	4413      	add	r3, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004652:	e006      	b.n	8004662 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3301      	adds	r3, #1
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2b07      	cmp	r3, #7
 800465e:	d9e7      	bls.n	8004630 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004660:	bf00      	nop
 8004662:	bf00      	nop
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	200008c4 	.word	0x200008c4

08004674 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004684:	f001 fbce 	bl	8005e24 <vPortEnterCritical>
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800468e:	b25b      	sxtb	r3, r3
 8004690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004694:	d103      	bne.n	800469e <vQueueWaitForMessageRestricted+0x2a>
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046a4:	b25b      	sxtb	r3, r3
 80046a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046aa:	d103      	bne.n	80046b4 <vQueueWaitForMessageRestricted+0x40>
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046b4:	f001 fbe6 	bl	8005e84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d106      	bne.n	80046ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	3324      	adds	r3, #36	; 0x24
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	68b9      	ldr	r1, [r7, #8]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 fc61 	bl	8004f90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80046ce:	6978      	ldr	r0, [r7, #20]
 80046d0:	f7ff ff26 	bl	8004520 <prvUnlockQueue>
	}
 80046d4:	bf00      	nop
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08e      	sub	sp, #56	; 0x38
 80046e0:	af04      	add	r7, sp, #16
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80046ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10a      	bne.n	8004706 <xTaskCreateStatic+0x2a>
	__asm volatile
 80046f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	623b      	str	r3, [r7, #32]
}
 8004702:	bf00      	nop
 8004704:	e7fe      	b.n	8004704 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <xTaskCreateStatic+0x46>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	61fb      	str	r3, [r7, #28]
}
 800471e:	bf00      	nop
 8004720:	e7fe      	b.n	8004720 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004722:	23a8      	movs	r3, #168	; 0xa8
 8004724:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2ba8      	cmp	r3, #168	; 0xa8
 800472a:	d00a      	beq.n	8004742 <xTaskCreateStatic+0x66>
	__asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	61bb      	str	r3, [r7, #24]
}
 800473e:	bf00      	nop
 8004740:	e7fe      	b.n	8004740 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004742:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004746:	2b00      	cmp	r3, #0
 8004748:	d01e      	beq.n	8004788 <xTaskCreateStatic+0xac>
 800474a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474c:	2b00      	cmp	r3, #0
 800474e:	d01b      	beq.n	8004788 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004758:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	2202      	movs	r2, #2
 800475e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004762:	2300      	movs	r3, #0
 8004764:	9303      	str	r3, [sp, #12]
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	9302      	str	r3, [sp, #8]
 800476a:	f107 0314 	add.w	r3, r7, #20
 800476e:	9301      	str	r3, [sp, #4]
 8004770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	68b9      	ldr	r1, [r7, #8]
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 f850 	bl	8004820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004782:	f000 f8f3 	bl	800496c <prvAddNewTaskToReadyList>
 8004786:	e001      	b.n	800478c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800478c:	697b      	ldr	r3, [r7, #20]
	}
 800478e:	4618      	mov	r0, r3
 8004790:	3728      	adds	r7, #40	; 0x28
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004796:	b580      	push	{r7, lr}
 8004798:	b08c      	sub	sp, #48	; 0x30
 800479a:	af04      	add	r7, sp, #16
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	603b      	str	r3, [r7, #0]
 80047a2:	4613      	mov	r3, r2
 80047a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047a6:	88fb      	ldrh	r3, [r7, #6]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f001 fc5c 	bl	8006068 <pvPortMalloc>
 80047b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00e      	beq.n	80047d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047b8:	20a8      	movs	r0, #168	; 0xa8
 80047ba:	f001 fc55 	bl	8006068 <pvPortMalloc>
 80047be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	631a      	str	r2, [r3, #48]	; 0x30
 80047cc:	e005      	b.n	80047da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047ce:	6978      	ldr	r0, [r7, #20]
 80047d0:	f001 fd16 	bl	8006200 <vPortFree>
 80047d4:	e001      	b.n	80047da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d017      	beq.n	8004810 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047e8:	88fa      	ldrh	r2, [r7, #6]
 80047ea:	2300      	movs	r3, #0
 80047ec:	9303      	str	r3, [sp, #12]
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	9302      	str	r3, [sp, #8]
 80047f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f4:	9301      	str	r3, [sp, #4]
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68b9      	ldr	r1, [r7, #8]
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f80e 	bl	8004820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004804:	69f8      	ldr	r0, [r7, #28]
 8004806:	f000 f8b1 	bl	800496c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800480a:	2301      	movs	r3, #1
 800480c:	61bb      	str	r3, [r7, #24]
 800480e:	e002      	b.n	8004816 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004814:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004816:	69bb      	ldr	r3, [r7, #24]
	}
 8004818:	4618      	mov	r0, r3
 800481a:	3720      	adds	r7, #32
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	461a      	mov	r2, r3
 8004838:	21a5      	movs	r1, #165	; 0xa5
 800483a:	f001 fff5 	bl	8006828 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004848:	3b01      	subs	r3, #1
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	f023 0307 	bic.w	r3, r3, #7
 8004856:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	617b      	str	r3, [r7, #20]
}
 8004874:	bf00      	nop
 8004876:	e7fe      	b.n	8004876 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d01f      	beq.n	80048be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800487e:	2300      	movs	r3, #0
 8004880:	61fb      	str	r3, [r7, #28]
 8004882:	e012      	b.n	80048aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	4413      	add	r3, r2
 800488a:	7819      	ldrb	r1, [r3, #0]
 800488c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	4413      	add	r3, r2
 8004892:	3334      	adds	r3, #52	; 0x34
 8004894:	460a      	mov	r2, r1
 8004896:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	4413      	add	r3, r2
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d006      	beq.n	80048b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	3301      	adds	r3, #1
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	2b0f      	cmp	r3, #15
 80048ae:	d9e9      	bls.n	8004884 <prvInitialiseNewTask+0x64>
 80048b0:	e000      	b.n	80048b4 <prvInitialiseNewTask+0x94>
			{
				break;
 80048b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048bc:	e003      	b.n	80048c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80048be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c8:	2b37      	cmp	r3, #55	; 0x37
 80048ca:	d901      	bls.n	80048d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048cc:	2337      	movs	r3, #55	; 0x37
 80048ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80048dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048de:	2200      	movs	r2, #0
 80048e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	3304      	adds	r3, #4
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff f978 	bl	8003bdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80048ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ee:	3318      	adds	r3, #24
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7ff f973 	bl	8003bdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004904:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800490a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490e:	2200      	movs	r2, #0
 8004910:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004916:	2200      	movs	r2, #0
 8004918:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800491c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491e:	3354      	adds	r3, #84	; 0x54
 8004920:	224c      	movs	r2, #76	; 0x4c
 8004922:	2100      	movs	r1, #0
 8004924:	4618      	mov	r0, r3
 8004926:	f001 ff7f 	bl	8006828 <memset>
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	4a0c      	ldr	r2, [pc, #48]	; (8004960 <prvInitialiseNewTask+0x140>)
 800492e:	659a      	str	r2, [r3, #88]	; 0x58
 8004930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004932:	4a0c      	ldr	r2, [pc, #48]	; (8004964 <prvInitialiseNewTask+0x144>)
 8004934:	65da      	str	r2, [r3, #92]	; 0x5c
 8004936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004938:	4a0b      	ldr	r2, [pc, #44]	; (8004968 <prvInitialiseNewTask+0x148>)
 800493a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	68f9      	ldr	r1, [r7, #12]
 8004940:	69b8      	ldr	r0, [r7, #24]
 8004942:	f001 f941 	bl	8005bc8 <pxPortInitialiseStack>
 8004946:	4602      	mov	r2, r0
 8004948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800494c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004956:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004958:	bf00      	nop
 800495a:	3720      	adds	r7, #32
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	20001b10 	.word	0x20001b10
 8004964:	20001b78 	.word	0x20001b78
 8004968:	20001be0 	.word	0x20001be0

0800496c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004974:	f001 fa56 	bl	8005e24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004978:	4b2d      	ldr	r3, [pc, #180]	; (8004a30 <prvAddNewTaskToReadyList+0xc4>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3301      	adds	r3, #1
 800497e:	4a2c      	ldr	r2, [pc, #176]	; (8004a30 <prvAddNewTaskToReadyList+0xc4>)
 8004980:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004982:	4b2c      	ldr	r3, [pc, #176]	; (8004a34 <prvAddNewTaskToReadyList+0xc8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800498a:	4a2a      	ldr	r2, [pc, #168]	; (8004a34 <prvAddNewTaskToReadyList+0xc8>)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004990:	4b27      	ldr	r3, [pc, #156]	; (8004a30 <prvAddNewTaskToReadyList+0xc4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d110      	bne.n	80049ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004998:	f000 fc26 	bl	80051e8 <prvInitialiseTaskLists>
 800499c:	e00d      	b.n	80049ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800499e:	4b26      	ldr	r3, [pc, #152]	; (8004a38 <prvAddNewTaskToReadyList+0xcc>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049a6:	4b23      	ldr	r3, [pc, #140]	; (8004a34 <prvAddNewTaskToReadyList+0xc8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d802      	bhi.n	80049ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049b4:	4a1f      	ldr	r2, [pc, #124]	; (8004a34 <prvAddNewTaskToReadyList+0xc8>)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049ba:	4b20      	ldr	r3, [pc, #128]	; (8004a3c <prvAddNewTaskToReadyList+0xd0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3301      	adds	r3, #1
 80049c0:	4a1e      	ldr	r2, [pc, #120]	; (8004a3c <prvAddNewTaskToReadyList+0xd0>)
 80049c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049c4:	4b1d      	ldr	r3, [pc, #116]	; (8004a3c <prvAddNewTaskToReadyList+0xd0>)
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d0:	4b1b      	ldr	r3, [pc, #108]	; (8004a40 <prvAddNewTaskToReadyList+0xd4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d903      	bls.n	80049e0 <prvAddNewTaskToReadyList+0x74>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049dc:	4a18      	ldr	r2, [pc, #96]	; (8004a40 <prvAddNewTaskToReadyList+0xd4>)
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e4:	4613      	mov	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4a15      	ldr	r2, [pc, #84]	; (8004a44 <prvAddNewTaskToReadyList+0xd8>)
 80049ee:	441a      	add	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3304      	adds	r3, #4
 80049f4:	4619      	mov	r1, r3
 80049f6:	4610      	mov	r0, r2
 80049f8:	f7ff f8fd 	bl	8003bf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80049fc:	f001 fa42 	bl	8005e84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a00:	4b0d      	ldr	r3, [pc, #52]	; (8004a38 <prvAddNewTaskToReadyList+0xcc>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00e      	beq.n	8004a26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a08:	4b0a      	ldr	r3, [pc, #40]	; (8004a34 <prvAddNewTaskToReadyList+0xc8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d207      	bcs.n	8004a26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a16:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <prvAddNewTaskToReadyList+0xdc>)
 8004a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a26:	bf00      	nop
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20000dd8 	.word	0x20000dd8
 8004a34:	20000904 	.word	0x20000904
 8004a38:	20000de4 	.word	0x20000de4
 8004a3c:	20000df4 	.word	0x20000df4
 8004a40:	20000de0 	.word	0x20000de0
 8004a44:	20000908 	.word	0x20000908
 8004a48:	e000ed04 	.word	0xe000ed04

08004a4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d017      	beq.n	8004a8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a5e:	4b13      	ldr	r3, [pc, #76]	; (8004aac <vTaskDelay+0x60>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <vTaskDelay+0x30>
	__asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	60bb      	str	r3, [r7, #8]
}
 8004a78:	bf00      	nop
 8004a7a:	e7fe      	b.n	8004a7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004a7c:	f000 f88a 	bl	8004b94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a80:	2100      	movs	r1, #0
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 fcfe 	bl	8005484 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a88:	f000 f892 	bl	8004bb0 <xTaskResumeAll>
 8004a8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d107      	bne.n	8004aa4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004a94:	4b06      	ldr	r3, [pc, #24]	; (8004ab0 <vTaskDelay+0x64>)
 8004a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004aa4:	bf00      	nop
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	20000e00 	.word	0x20000e00
 8004ab0:	e000ed04 	.word	0xe000ed04

08004ab4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08a      	sub	sp, #40	; 0x28
 8004ab8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ac2:	463a      	mov	r2, r7
 8004ac4:	1d39      	adds	r1, r7, #4
 8004ac6:	f107 0308 	add.w	r3, r7, #8
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff f832 	bl	8003b34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ad0:	6839      	ldr	r1, [r7, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	9202      	str	r2, [sp, #8]
 8004ad8:	9301      	str	r3, [sp, #4]
 8004ada:	2300      	movs	r3, #0
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	2300      	movs	r3, #0
 8004ae0:	460a      	mov	r2, r1
 8004ae2:	4924      	ldr	r1, [pc, #144]	; (8004b74 <vTaskStartScheduler+0xc0>)
 8004ae4:	4824      	ldr	r0, [pc, #144]	; (8004b78 <vTaskStartScheduler+0xc4>)
 8004ae6:	f7ff fdf9 	bl	80046dc <xTaskCreateStatic>
 8004aea:	4603      	mov	r3, r0
 8004aec:	4a23      	ldr	r2, [pc, #140]	; (8004b7c <vTaskStartScheduler+0xc8>)
 8004aee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004af0:	4b22      	ldr	r3, [pc, #136]	; (8004b7c <vTaskStartScheduler+0xc8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004af8:	2301      	movs	r3, #1
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	e001      	b.n	8004b02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d102      	bne.n	8004b0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004b08:	f000 fd10 	bl	800552c <xTimerCreateTimerTask>
 8004b0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d11b      	bne.n	8004b4c <vTaskStartScheduler+0x98>
	__asm volatile
 8004b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	613b      	str	r3, [r7, #16]
}
 8004b26:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b28:	4b15      	ldr	r3, [pc, #84]	; (8004b80 <vTaskStartScheduler+0xcc>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3354      	adds	r3, #84	; 0x54
 8004b2e:	4a15      	ldr	r2, [pc, #84]	; (8004b84 <vTaskStartScheduler+0xd0>)
 8004b30:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b32:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <vTaskStartScheduler+0xd4>)
 8004b34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b3a:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <vTaskStartScheduler+0xd8>)
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b40:	4b13      	ldr	r3, [pc, #76]	; (8004b90 <vTaskStartScheduler+0xdc>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b46:	f001 f8cb 	bl	8005ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b4a:	e00e      	b.n	8004b6a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b52:	d10a      	bne.n	8004b6a <vTaskStartScheduler+0xb6>
	__asm volatile
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	60fb      	str	r3, [r7, #12]
}
 8004b66:	bf00      	nop
 8004b68:	e7fe      	b.n	8004b68 <vTaskStartScheduler+0xb4>
}
 8004b6a:	bf00      	nop
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	08006f1c 	.word	0x08006f1c
 8004b78:	080051b9 	.word	0x080051b9
 8004b7c:	20000dfc 	.word	0x20000dfc
 8004b80:	20000904 	.word	0x20000904
 8004b84:	20000068 	.word	0x20000068
 8004b88:	20000df8 	.word	0x20000df8
 8004b8c:	20000de4 	.word	0x20000de4
 8004b90:	20000ddc 	.word	0x20000ddc

08004b94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004b98:	4b04      	ldr	r3, [pc, #16]	; (8004bac <vTaskSuspendAll+0x18>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	4a03      	ldr	r2, [pc, #12]	; (8004bac <vTaskSuspendAll+0x18>)
 8004ba0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ba2:	bf00      	nop
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	20000e00 	.word	0x20000e00

08004bb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004bbe:	4b42      	ldr	r3, [pc, #264]	; (8004cc8 <xTaskResumeAll+0x118>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10a      	bne.n	8004bdc <xTaskResumeAll+0x2c>
	__asm volatile
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	603b      	str	r3, [r7, #0]
}
 8004bd8:	bf00      	nop
 8004bda:	e7fe      	b.n	8004bda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004bdc:	f001 f922 	bl	8005e24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004be0:	4b39      	ldr	r3, [pc, #228]	; (8004cc8 <xTaskResumeAll+0x118>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3b01      	subs	r3, #1
 8004be6:	4a38      	ldr	r2, [pc, #224]	; (8004cc8 <xTaskResumeAll+0x118>)
 8004be8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bea:	4b37      	ldr	r3, [pc, #220]	; (8004cc8 <xTaskResumeAll+0x118>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d162      	bne.n	8004cb8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004bf2:	4b36      	ldr	r3, [pc, #216]	; (8004ccc <xTaskResumeAll+0x11c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d05e      	beq.n	8004cb8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bfa:	e02f      	b.n	8004c5c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bfc:	4b34      	ldr	r3, [pc, #208]	; (8004cd0 <xTaskResumeAll+0x120>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3318      	adds	r3, #24
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff f851 	bl	8003cb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3304      	adds	r3, #4
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff f84c 	bl	8003cb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1c:	4b2d      	ldr	r3, [pc, #180]	; (8004cd4 <xTaskResumeAll+0x124>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d903      	bls.n	8004c2c <xTaskResumeAll+0x7c>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	4a2a      	ldr	r2, [pc, #168]	; (8004cd4 <xTaskResumeAll+0x124>)
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4a27      	ldr	r2, [pc, #156]	; (8004cd8 <xTaskResumeAll+0x128>)
 8004c3a:	441a      	add	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3304      	adds	r3, #4
 8004c40:	4619      	mov	r1, r3
 8004c42:	4610      	mov	r0, r2
 8004c44:	f7fe ffd7 	bl	8003bf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4c:	4b23      	ldr	r3, [pc, #140]	; (8004cdc <xTaskResumeAll+0x12c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d302      	bcc.n	8004c5c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004c56:	4b22      	ldr	r3, [pc, #136]	; (8004ce0 <xTaskResumeAll+0x130>)
 8004c58:	2201      	movs	r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c5c:	4b1c      	ldr	r3, [pc, #112]	; (8004cd0 <xTaskResumeAll+0x120>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1cb      	bne.n	8004bfc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c6a:	f000 fb5f 	bl	800532c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004c6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ce4 <xTaskResumeAll+0x134>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d010      	beq.n	8004c9c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c7a:	f000 f847 	bl	8004d0c <xTaskIncrementTick>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004c84:	4b16      	ldr	r3, [pc, #88]	; (8004ce0 <xTaskResumeAll+0x130>)
 8004c86:	2201      	movs	r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1f1      	bne.n	8004c7a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004c96:	4b13      	ldr	r3, [pc, #76]	; (8004ce4 <xTaskResumeAll+0x134>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c9c:	4b10      	ldr	r3, [pc, #64]	; (8004ce0 <xTaskResumeAll+0x130>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d009      	beq.n	8004cb8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ca8:	4b0f      	ldr	r3, [pc, #60]	; (8004ce8 <xTaskResumeAll+0x138>)
 8004caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cb8:	f001 f8e4 	bl	8005e84 <vPortExitCritical>

	return xAlreadyYielded;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20000e00 	.word	0x20000e00
 8004ccc:	20000dd8 	.word	0x20000dd8
 8004cd0:	20000d98 	.word	0x20000d98
 8004cd4:	20000de0 	.word	0x20000de0
 8004cd8:	20000908 	.word	0x20000908
 8004cdc:	20000904 	.word	0x20000904
 8004ce0:	20000dec 	.word	0x20000dec
 8004ce4:	20000de8 	.word	0x20000de8
 8004ce8:	e000ed04 	.word	0xe000ed04

08004cec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004cf2:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <xTaskGetTickCount+0x1c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004cf8:	687b      	ldr	r3, [r7, #4]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	20000ddc 	.word	0x20000ddc

08004d0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d16:	4b4f      	ldr	r3, [pc, #316]	; (8004e54 <xTaskIncrementTick+0x148>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f040 808f 	bne.w	8004e3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d20:	4b4d      	ldr	r3, [pc, #308]	; (8004e58 <xTaskIncrementTick+0x14c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3301      	adds	r3, #1
 8004d26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d28:	4a4b      	ldr	r2, [pc, #300]	; (8004e58 <xTaskIncrementTick+0x14c>)
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d120      	bne.n	8004d76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d34:	4b49      	ldr	r3, [pc, #292]	; (8004e5c <xTaskIncrementTick+0x150>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <xTaskIncrementTick+0x48>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	603b      	str	r3, [r7, #0]
}
 8004d50:	bf00      	nop
 8004d52:	e7fe      	b.n	8004d52 <xTaskIncrementTick+0x46>
 8004d54:	4b41      	ldr	r3, [pc, #260]	; (8004e5c <xTaskIncrementTick+0x150>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	4b41      	ldr	r3, [pc, #260]	; (8004e60 <xTaskIncrementTick+0x154>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a3f      	ldr	r2, [pc, #252]	; (8004e5c <xTaskIncrementTick+0x150>)
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	4a3f      	ldr	r2, [pc, #252]	; (8004e60 <xTaskIncrementTick+0x154>)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	4b3e      	ldr	r3, [pc, #248]	; (8004e64 <xTaskIncrementTick+0x158>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	4a3d      	ldr	r2, [pc, #244]	; (8004e64 <xTaskIncrementTick+0x158>)
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	f000 fadb 	bl	800532c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d76:	4b3c      	ldr	r3, [pc, #240]	; (8004e68 <xTaskIncrementTick+0x15c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d349      	bcc.n	8004e14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d80:	4b36      	ldr	r3, [pc, #216]	; (8004e5c <xTaskIncrementTick+0x150>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d104      	bne.n	8004d94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d8a:	4b37      	ldr	r3, [pc, #220]	; (8004e68 <xTaskIncrementTick+0x15c>)
 8004d8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d90:	601a      	str	r2, [r3, #0]
					break;
 8004d92:	e03f      	b.n	8004e14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d94:	4b31      	ldr	r3, [pc, #196]	; (8004e5c <xTaskIncrementTick+0x150>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d203      	bcs.n	8004db4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004dac:	4a2e      	ldr	r2, [pc, #184]	; (8004e68 <xTaskIncrementTick+0x15c>)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004db2:	e02f      	b.n	8004e14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	3304      	adds	r3, #4
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fe ff79 	bl	8003cb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d004      	beq.n	8004dd0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	3318      	adds	r3, #24
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fe ff70 	bl	8003cb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd4:	4b25      	ldr	r3, [pc, #148]	; (8004e6c <xTaskIncrementTick+0x160>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d903      	bls.n	8004de4 <xTaskIncrementTick+0xd8>
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	4a22      	ldr	r2, [pc, #136]	; (8004e6c <xTaskIncrementTick+0x160>)
 8004de2:	6013      	str	r3, [r2, #0]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de8:	4613      	mov	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4a1f      	ldr	r2, [pc, #124]	; (8004e70 <xTaskIncrementTick+0x164>)
 8004df2:	441a      	add	r2, r3
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	3304      	adds	r3, #4
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	f7fe fefb 	bl	8003bf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e04:	4b1b      	ldr	r3, [pc, #108]	; (8004e74 <xTaskIncrementTick+0x168>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d3b8      	bcc.n	8004d80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e12:	e7b5      	b.n	8004d80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e14:	4b17      	ldr	r3, [pc, #92]	; (8004e74 <xTaskIncrementTick+0x168>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1a:	4915      	ldr	r1, [pc, #84]	; (8004e70 <xTaskIncrementTick+0x164>)
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d901      	bls.n	8004e30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e30:	4b11      	ldr	r3, [pc, #68]	; (8004e78 <xTaskIncrementTick+0x16c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d007      	beq.n	8004e48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	e004      	b.n	8004e48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e3e:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <xTaskIncrementTick+0x170>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	3301      	adds	r3, #1
 8004e44:	4a0d      	ldr	r2, [pc, #52]	; (8004e7c <xTaskIncrementTick+0x170>)
 8004e46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e48:	697b      	ldr	r3, [r7, #20]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20000e00 	.word	0x20000e00
 8004e58:	20000ddc 	.word	0x20000ddc
 8004e5c:	20000d90 	.word	0x20000d90
 8004e60:	20000d94 	.word	0x20000d94
 8004e64:	20000df0 	.word	0x20000df0
 8004e68:	20000df8 	.word	0x20000df8
 8004e6c:	20000de0 	.word	0x20000de0
 8004e70:	20000908 	.word	0x20000908
 8004e74:	20000904 	.word	0x20000904
 8004e78:	20000dec 	.word	0x20000dec
 8004e7c:	20000de8 	.word	0x20000de8

08004e80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e86:	4b2a      	ldr	r3, [pc, #168]	; (8004f30 <vTaskSwitchContext+0xb0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e8e:	4b29      	ldr	r3, [pc, #164]	; (8004f34 <vTaskSwitchContext+0xb4>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e94:	e046      	b.n	8004f24 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004e96:	4b27      	ldr	r3, [pc, #156]	; (8004f34 <vTaskSwitchContext+0xb4>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e9c:	4b26      	ldr	r3, [pc, #152]	; (8004f38 <vTaskSwitchContext+0xb8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	e010      	b.n	8004ec6 <vTaskSwitchContext+0x46>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10a      	bne.n	8004ec0 <vTaskSwitchContext+0x40>
	__asm volatile
 8004eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	607b      	str	r3, [r7, #4]
}
 8004ebc:	bf00      	nop
 8004ebe:	e7fe      	b.n	8004ebe <vTaskSwitchContext+0x3e>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	60fb      	str	r3, [r7, #12]
 8004ec6:	491d      	ldr	r1, [pc, #116]	; (8004f3c <vTaskSwitchContext+0xbc>)
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0e4      	beq.n	8004ea4 <vTaskSwitchContext+0x24>
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4a15      	ldr	r2, [pc, #84]	; (8004f3c <vTaskSwitchContext+0xbc>)
 8004ee6:	4413      	add	r3, r2
 8004ee8:	60bb      	str	r3, [r7, #8]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	605a      	str	r2, [r3, #4]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	3308      	adds	r3, #8
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d104      	bne.n	8004f0a <vTaskSwitchContext+0x8a>
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	605a      	str	r2, [r3, #4]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4a0b      	ldr	r2, [pc, #44]	; (8004f40 <vTaskSwitchContext+0xc0>)
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	4a08      	ldr	r2, [pc, #32]	; (8004f38 <vTaskSwitchContext+0xb8>)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f1a:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <vTaskSwitchContext+0xc0>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	3354      	adds	r3, #84	; 0x54
 8004f20:	4a08      	ldr	r2, [pc, #32]	; (8004f44 <vTaskSwitchContext+0xc4>)
 8004f22:	6013      	str	r3, [r2, #0]
}
 8004f24:	bf00      	nop
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	20000e00 	.word	0x20000e00
 8004f34:	20000dec 	.word	0x20000dec
 8004f38:	20000de0 	.word	0x20000de0
 8004f3c:	20000908 	.word	0x20000908
 8004f40:	20000904 	.word	0x20000904
 8004f44:	20000068 	.word	0x20000068

08004f48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10a      	bne.n	8004f6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5c:	f383 8811 	msr	BASEPRI, r3
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	60fb      	str	r3, [r7, #12]
}
 8004f6a:	bf00      	nop
 8004f6c:	e7fe      	b.n	8004f6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f6e:	4b07      	ldr	r3, [pc, #28]	; (8004f8c <vTaskPlaceOnEventList+0x44>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3318      	adds	r3, #24
 8004f74:	4619      	mov	r1, r3
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fe fe61 	bl	8003c3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	6838      	ldr	r0, [r7, #0]
 8004f80:	f000 fa80 	bl	8005484 <prvAddCurrentTaskToDelayedList>
}
 8004f84:	bf00      	nop
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	20000904 	.word	0x20000904

08004f90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	617b      	str	r3, [r7, #20]
}
 8004fb4:	bf00      	nop
 8004fb6:	e7fe      	b.n	8004fb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fb8:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <vTaskPlaceOnEventListRestricted+0x54>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3318      	adds	r3, #24
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f7fe fe18 	bl	8003bf6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fd0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	68b8      	ldr	r0, [r7, #8]
 8004fd6:	f000 fa55 	bl	8005484 <prvAddCurrentTaskToDelayedList>
	}
 8004fda:	bf00      	nop
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000904 	.word	0x20000904

08004fe8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10a      	bne.n	8005014 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	60fb      	str	r3, [r7, #12]
}
 8005010:	bf00      	nop
 8005012:	e7fe      	b.n	8005012 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	3318      	adds	r3, #24
 8005018:	4618      	mov	r0, r3
 800501a:	f7fe fe49 	bl	8003cb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800501e:	4b1e      	ldr	r3, [pc, #120]	; (8005098 <xTaskRemoveFromEventList+0xb0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d11d      	bne.n	8005062 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	3304      	adds	r3, #4
 800502a:	4618      	mov	r0, r3
 800502c:	f7fe fe40 	bl	8003cb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005034:	4b19      	ldr	r3, [pc, #100]	; (800509c <xTaskRemoveFromEventList+0xb4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d903      	bls.n	8005044 <xTaskRemoveFromEventList+0x5c>
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	4a16      	ldr	r2, [pc, #88]	; (800509c <xTaskRemoveFromEventList+0xb4>)
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4a13      	ldr	r2, [pc, #76]	; (80050a0 <xTaskRemoveFromEventList+0xb8>)
 8005052:	441a      	add	r2, r3
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	3304      	adds	r3, #4
 8005058:	4619      	mov	r1, r3
 800505a:	4610      	mov	r0, r2
 800505c:	f7fe fdcb 	bl	8003bf6 <vListInsertEnd>
 8005060:	e005      	b.n	800506e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	3318      	adds	r3, #24
 8005066:	4619      	mov	r1, r3
 8005068:	480e      	ldr	r0, [pc, #56]	; (80050a4 <xTaskRemoveFromEventList+0xbc>)
 800506a:	f7fe fdc4 	bl	8003bf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005072:	4b0d      	ldr	r3, [pc, #52]	; (80050a8 <xTaskRemoveFromEventList+0xc0>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005078:	429a      	cmp	r2, r3
 800507a:	d905      	bls.n	8005088 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800507c:	2301      	movs	r3, #1
 800507e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005080:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <xTaskRemoveFromEventList+0xc4>)
 8005082:	2201      	movs	r2, #1
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	e001      	b.n	800508c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005088:	2300      	movs	r3, #0
 800508a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800508c:	697b      	ldr	r3, [r7, #20]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20000e00 	.word	0x20000e00
 800509c:	20000de0 	.word	0x20000de0
 80050a0:	20000908 	.word	0x20000908
 80050a4:	20000d98 	.word	0x20000d98
 80050a8:	20000904 	.word	0x20000904
 80050ac:	20000dec 	.word	0x20000dec

080050b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050b8:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <vTaskInternalSetTimeOutState+0x24>)
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050c0:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <vTaskInternalSetTimeOutState+0x28>)
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	605a      	str	r2, [r3, #4]
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	20000df0 	.word	0x20000df0
 80050d8:	20000ddc 	.word	0x20000ddc

080050dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10a      	bne.n	8005102 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	613b      	str	r3, [r7, #16]
}
 80050fe:	bf00      	nop
 8005100:	e7fe      	b.n	8005100 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	60fb      	str	r3, [r7, #12]
}
 800511a:	bf00      	nop
 800511c:	e7fe      	b.n	800511c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800511e:	f000 fe81 	bl	8005e24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005122:	4b1d      	ldr	r3, [pc, #116]	; (8005198 <xTaskCheckForTimeOut+0xbc>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800513a:	d102      	bne.n	8005142 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800513c:	2300      	movs	r3, #0
 800513e:	61fb      	str	r3, [r7, #28]
 8005140:	e023      	b.n	800518a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	4b15      	ldr	r3, [pc, #84]	; (800519c <xTaskCheckForTimeOut+0xc0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d007      	beq.n	800515e <xTaskCheckForTimeOut+0x82>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	429a      	cmp	r2, r3
 8005156:	d302      	bcc.n	800515e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005158:	2301      	movs	r3, #1
 800515a:	61fb      	str	r3, [r7, #28]
 800515c:	e015      	b.n	800518a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	429a      	cmp	r2, r3
 8005166:	d20b      	bcs.n	8005180 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	1ad2      	subs	r2, r2, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7ff ff9b 	bl	80050b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800517a:	2300      	movs	r3, #0
 800517c:	61fb      	str	r3, [r7, #28]
 800517e:	e004      	b.n	800518a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005186:	2301      	movs	r3, #1
 8005188:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800518a:	f000 fe7b 	bl	8005e84 <vPortExitCritical>

	return xReturn;
 800518e:	69fb      	ldr	r3, [r7, #28]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3720      	adds	r7, #32
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	20000ddc 	.word	0x20000ddc
 800519c:	20000df0 	.word	0x20000df0

080051a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80051a4:	4b03      	ldr	r3, [pc, #12]	; (80051b4 <vTaskMissedYield+0x14>)
 80051a6:	2201      	movs	r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
}
 80051aa:	bf00      	nop
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	20000dec 	.word	0x20000dec

080051b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051c0:	f000 f852 	bl	8005268 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051c4:	4b06      	ldr	r3, [pc, #24]	; (80051e0 <prvIdleTask+0x28>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d9f9      	bls.n	80051c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80051cc:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <prvIdleTask+0x2c>)
 80051ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051dc:	e7f0      	b.n	80051c0 <prvIdleTask+0x8>
 80051de:	bf00      	nop
 80051e0:	20000908 	.word	0x20000908
 80051e4:	e000ed04 	.word	0xe000ed04

080051e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051ee:	2300      	movs	r3, #0
 80051f0:	607b      	str	r3, [r7, #4]
 80051f2:	e00c      	b.n	800520e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4a12      	ldr	r2, [pc, #72]	; (8005248 <prvInitialiseTaskLists+0x60>)
 8005200:	4413      	add	r3, r2
 8005202:	4618      	mov	r0, r3
 8005204:	f7fe fcca 	bl	8003b9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3301      	adds	r3, #1
 800520c:	607b      	str	r3, [r7, #4]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b37      	cmp	r3, #55	; 0x37
 8005212:	d9ef      	bls.n	80051f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005214:	480d      	ldr	r0, [pc, #52]	; (800524c <prvInitialiseTaskLists+0x64>)
 8005216:	f7fe fcc1 	bl	8003b9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800521a:	480d      	ldr	r0, [pc, #52]	; (8005250 <prvInitialiseTaskLists+0x68>)
 800521c:	f7fe fcbe 	bl	8003b9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005220:	480c      	ldr	r0, [pc, #48]	; (8005254 <prvInitialiseTaskLists+0x6c>)
 8005222:	f7fe fcbb 	bl	8003b9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005226:	480c      	ldr	r0, [pc, #48]	; (8005258 <prvInitialiseTaskLists+0x70>)
 8005228:	f7fe fcb8 	bl	8003b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800522c:	480b      	ldr	r0, [pc, #44]	; (800525c <prvInitialiseTaskLists+0x74>)
 800522e:	f7fe fcb5 	bl	8003b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005232:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <prvInitialiseTaskLists+0x78>)
 8005234:	4a05      	ldr	r2, [pc, #20]	; (800524c <prvInitialiseTaskLists+0x64>)
 8005236:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005238:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <prvInitialiseTaskLists+0x7c>)
 800523a:	4a05      	ldr	r2, [pc, #20]	; (8005250 <prvInitialiseTaskLists+0x68>)
 800523c:	601a      	str	r2, [r3, #0]
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000908 	.word	0x20000908
 800524c:	20000d68 	.word	0x20000d68
 8005250:	20000d7c 	.word	0x20000d7c
 8005254:	20000d98 	.word	0x20000d98
 8005258:	20000dac 	.word	0x20000dac
 800525c:	20000dc4 	.word	0x20000dc4
 8005260:	20000d90 	.word	0x20000d90
 8005264:	20000d94 	.word	0x20000d94

08005268 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800526e:	e019      	b.n	80052a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005270:	f000 fdd8 	bl	8005e24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005274:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <prvCheckTasksWaitingTermination+0x50>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3304      	adds	r3, #4
 8005280:	4618      	mov	r0, r3
 8005282:	f7fe fd15 	bl	8003cb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005286:	4b0d      	ldr	r3, [pc, #52]	; (80052bc <prvCheckTasksWaitingTermination+0x54>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3b01      	subs	r3, #1
 800528c:	4a0b      	ldr	r2, [pc, #44]	; (80052bc <prvCheckTasksWaitingTermination+0x54>)
 800528e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <prvCheckTasksWaitingTermination+0x58>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3b01      	subs	r3, #1
 8005296:	4a0a      	ldr	r2, [pc, #40]	; (80052c0 <prvCheckTasksWaitingTermination+0x58>)
 8005298:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800529a:	f000 fdf3 	bl	8005e84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f810 	bl	80052c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052a4:	4b06      	ldr	r3, [pc, #24]	; (80052c0 <prvCheckTasksWaitingTermination+0x58>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e1      	bne.n	8005270 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052ac:	bf00      	nop
 80052ae:	bf00      	nop
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20000dac 	.word	0x20000dac
 80052bc:	20000dd8 	.word	0x20000dd8
 80052c0:	20000dc0 	.word	0x20000dc0

080052c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	3354      	adds	r3, #84	; 0x54
 80052d0:	4618      	mov	r0, r3
 80052d2:	f001 fac1 	bl	8006858 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d108      	bne.n	80052f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 ff8b 	bl	8006200 <vPortFree>
				vPortFree( pxTCB );
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 ff88 	bl	8006200 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052f0:	e018      	b.n	8005324 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d103      	bne.n	8005304 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 ff7f 	bl	8006200 <vPortFree>
	}
 8005302:	e00f      	b.n	8005324 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800530a:	2b02      	cmp	r3, #2
 800530c:	d00a      	beq.n	8005324 <prvDeleteTCB+0x60>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	60fb      	str	r3, [r7, #12]
}
 8005320:	bf00      	nop
 8005322:	e7fe      	b.n	8005322 <prvDeleteTCB+0x5e>
	}
 8005324:	bf00      	nop
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005332:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <prvResetNextTaskUnblockTime+0x38>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d104      	bne.n	8005346 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800533c:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <prvResetNextTaskUnblockTime+0x3c>)
 800533e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005342:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005344:	e008      	b.n	8005358 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005346:	4b07      	ldr	r3, [pc, #28]	; (8005364 <prvResetNextTaskUnblockTime+0x38>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	4a04      	ldr	r2, [pc, #16]	; (8005368 <prvResetNextTaskUnblockTime+0x3c>)
 8005356:	6013      	str	r3, [r2, #0]
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	20000d90 	.word	0x20000d90
 8005368:	20000df8 	.word	0x20000df8

0800536c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005372:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <xTaskGetSchedulerState+0x34>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d102      	bne.n	8005380 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800537a:	2301      	movs	r3, #1
 800537c:	607b      	str	r3, [r7, #4]
 800537e:	e008      	b.n	8005392 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005380:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <xTaskGetSchedulerState+0x38>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d102      	bne.n	800538e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005388:	2302      	movs	r3, #2
 800538a:	607b      	str	r3, [r7, #4]
 800538c:	e001      	b.n	8005392 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800538e:	2300      	movs	r3, #0
 8005390:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005392:	687b      	ldr	r3, [r7, #4]
	}
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	20000de4 	.word	0x20000de4
 80053a4:	20000e00 	.word	0x20000e00

080053a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80053b4:	2300      	movs	r3, #0
 80053b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d056      	beq.n	800546c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80053be:	4b2e      	ldr	r3, [pc, #184]	; (8005478 <xTaskPriorityDisinherit+0xd0>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d00a      	beq.n	80053de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	60fb      	str	r3, [r7, #12]
}
 80053da:	bf00      	nop
 80053dc:	e7fe      	b.n	80053dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10a      	bne.n	80053fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80053e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	60bb      	str	r3, [r7, #8]
}
 80053f8:	bf00      	nop
 80053fa:	e7fe      	b.n	80053fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005400:	1e5a      	subs	r2, r3, #1
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540e:	429a      	cmp	r2, r3
 8005410:	d02c      	beq.n	800546c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005416:	2b00      	cmp	r3, #0
 8005418:	d128      	bne.n	800546c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	3304      	adds	r3, #4
 800541e:	4618      	mov	r0, r3
 8005420:	f7fe fc46 	bl	8003cb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005430:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800543c:	4b0f      	ldr	r3, [pc, #60]	; (800547c <xTaskPriorityDisinherit+0xd4>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	429a      	cmp	r2, r3
 8005442:	d903      	bls.n	800544c <xTaskPriorityDisinherit+0xa4>
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005448:	4a0c      	ldr	r2, [pc, #48]	; (800547c <xTaskPriorityDisinherit+0xd4>)
 800544a:	6013      	str	r3, [r2, #0]
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005450:	4613      	mov	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4a09      	ldr	r2, [pc, #36]	; (8005480 <xTaskPriorityDisinherit+0xd8>)
 800545a:	441a      	add	r2, r3
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	3304      	adds	r3, #4
 8005460:	4619      	mov	r1, r3
 8005462:	4610      	mov	r0, r2
 8005464:	f7fe fbc7 	bl	8003bf6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005468:	2301      	movs	r3, #1
 800546a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800546c:	697b      	ldr	r3, [r7, #20]
	}
 800546e:	4618      	mov	r0, r3
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20000904 	.word	0x20000904
 800547c:	20000de0 	.word	0x20000de0
 8005480:	20000908 	.word	0x20000908

08005484 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800548e:	4b21      	ldr	r3, [pc, #132]	; (8005514 <prvAddCurrentTaskToDelayedList+0x90>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005494:	4b20      	ldr	r3, [pc, #128]	; (8005518 <prvAddCurrentTaskToDelayedList+0x94>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3304      	adds	r3, #4
 800549a:	4618      	mov	r0, r3
 800549c:	f7fe fc08 	bl	8003cb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054a6:	d10a      	bne.n	80054be <prvAddCurrentTaskToDelayedList+0x3a>
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d007      	beq.n	80054be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054ae:	4b1a      	ldr	r3, [pc, #104]	; (8005518 <prvAddCurrentTaskToDelayedList+0x94>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3304      	adds	r3, #4
 80054b4:	4619      	mov	r1, r3
 80054b6:	4819      	ldr	r0, [pc, #100]	; (800551c <prvAddCurrentTaskToDelayedList+0x98>)
 80054b8:	f7fe fb9d 	bl	8003bf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054bc:	e026      	b.n	800550c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4413      	add	r3, r2
 80054c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054c6:	4b14      	ldr	r3, [pc, #80]	; (8005518 <prvAddCurrentTaskToDelayedList+0x94>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d209      	bcs.n	80054ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054d6:	4b12      	ldr	r3, [pc, #72]	; (8005520 <prvAddCurrentTaskToDelayedList+0x9c>)
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	4b0f      	ldr	r3, [pc, #60]	; (8005518 <prvAddCurrentTaskToDelayedList+0x94>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3304      	adds	r3, #4
 80054e0:	4619      	mov	r1, r3
 80054e2:	4610      	mov	r0, r2
 80054e4:	f7fe fbab 	bl	8003c3e <vListInsert>
}
 80054e8:	e010      	b.n	800550c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054ea:	4b0e      	ldr	r3, [pc, #56]	; (8005524 <prvAddCurrentTaskToDelayedList+0xa0>)
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4b0a      	ldr	r3, [pc, #40]	; (8005518 <prvAddCurrentTaskToDelayedList+0x94>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3304      	adds	r3, #4
 80054f4:	4619      	mov	r1, r3
 80054f6:	4610      	mov	r0, r2
 80054f8:	f7fe fba1 	bl	8003c3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80054fc:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <prvAddCurrentTaskToDelayedList+0xa4>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	429a      	cmp	r2, r3
 8005504:	d202      	bcs.n	800550c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005506:	4a08      	ldr	r2, [pc, #32]	; (8005528 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	6013      	str	r3, [r2, #0]
}
 800550c:	bf00      	nop
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	20000ddc 	.word	0x20000ddc
 8005518:	20000904 	.word	0x20000904
 800551c:	20000dc4 	.word	0x20000dc4
 8005520:	20000d94 	.word	0x20000d94
 8005524:	20000d90 	.word	0x20000d90
 8005528:	20000df8 	.word	0x20000df8

0800552c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b08a      	sub	sp, #40	; 0x28
 8005530:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005532:	2300      	movs	r3, #0
 8005534:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005536:	f000 fb07 	bl	8005b48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800553a:	4b1c      	ldr	r3, [pc, #112]	; (80055ac <xTimerCreateTimerTask+0x80>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d021      	beq.n	8005586 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005542:	2300      	movs	r3, #0
 8005544:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005546:	2300      	movs	r3, #0
 8005548:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800554a:	1d3a      	adds	r2, r7, #4
 800554c:	f107 0108 	add.w	r1, r7, #8
 8005550:	f107 030c 	add.w	r3, r7, #12
 8005554:	4618      	mov	r0, r3
 8005556:	f7fe fb07 	bl	8003b68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800555a:	6879      	ldr	r1, [r7, #4]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	9202      	str	r2, [sp, #8]
 8005562:	9301      	str	r3, [sp, #4]
 8005564:	2302      	movs	r3, #2
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	2300      	movs	r3, #0
 800556a:	460a      	mov	r2, r1
 800556c:	4910      	ldr	r1, [pc, #64]	; (80055b0 <xTimerCreateTimerTask+0x84>)
 800556e:	4811      	ldr	r0, [pc, #68]	; (80055b4 <xTimerCreateTimerTask+0x88>)
 8005570:	f7ff f8b4 	bl	80046dc <xTaskCreateStatic>
 8005574:	4603      	mov	r3, r0
 8005576:	4a10      	ldr	r2, [pc, #64]	; (80055b8 <xTimerCreateTimerTask+0x8c>)
 8005578:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800557a:	4b0f      	ldr	r3, [pc, #60]	; (80055b8 <xTimerCreateTimerTask+0x8c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005582:	2301      	movs	r3, #1
 8005584:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10a      	bne.n	80055a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800558c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005590:	f383 8811 	msr	BASEPRI, r3
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	613b      	str	r3, [r7, #16]
}
 800559e:	bf00      	nop
 80055a0:	e7fe      	b.n	80055a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80055a2:	697b      	ldr	r3, [r7, #20]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20000e34 	.word	0x20000e34
 80055b0:	08006f24 	.word	0x08006f24
 80055b4:	080056f1 	.word	0x080056f1
 80055b8:	20000e38 	.word	0x20000e38

080055bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b08a      	sub	sp, #40	; 0x28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80055ca:	2300      	movs	r3, #0
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10a      	bne.n	80055ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80055d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d8:	f383 8811 	msr	BASEPRI, r3
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	623b      	str	r3, [r7, #32]
}
 80055e6:	bf00      	nop
 80055e8:	e7fe      	b.n	80055e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80055ea:	4b1a      	ldr	r3, [pc, #104]	; (8005654 <xTimerGenericCommand+0x98>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d02a      	beq.n	8005648 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2b05      	cmp	r3, #5
 8005602:	dc18      	bgt.n	8005636 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005604:	f7ff feb2 	bl	800536c <xTaskGetSchedulerState>
 8005608:	4603      	mov	r3, r0
 800560a:	2b02      	cmp	r3, #2
 800560c:	d109      	bne.n	8005622 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800560e:	4b11      	ldr	r3, [pc, #68]	; (8005654 <xTimerGenericCommand+0x98>)
 8005610:	6818      	ldr	r0, [r3, #0]
 8005612:	f107 0110 	add.w	r1, r7, #16
 8005616:	2300      	movs	r3, #0
 8005618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800561a:	f7fe fc77 	bl	8003f0c <xQueueGenericSend>
 800561e:	6278      	str	r0, [r7, #36]	; 0x24
 8005620:	e012      	b.n	8005648 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005622:	4b0c      	ldr	r3, [pc, #48]	; (8005654 <xTimerGenericCommand+0x98>)
 8005624:	6818      	ldr	r0, [r3, #0]
 8005626:	f107 0110 	add.w	r1, r7, #16
 800562a:	2300      	movs	r3, #0
 800562c:	2200      	movs	r2, #0
 800562e:	f7fe fc6d 	bl	8003f0c <xQueueGenericSend>
 8005632:	6278      	str	r0, [r7, #36]	; 0x24
 8005634:	e008      	b.n	8005648 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005636:	4b07      	ldr	r3, [pc, #28]	; (8005654 <xTimerGenericCommand+0x98>)
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	f107 0110 	add.w	r1, r7, #16
 800563e:	2300      	movs	r3, #0
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	f7fe fd61 	bl	8004108 <xQueueGenericSendFromISR>
 8005646:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800564a:	4618      	mov	r0, r3
 800564c:	3728      	adds	r7, #40	; 0x28
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20000e34 	.word	0x20000e34

08005658 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af02      	add	r7, sp, #8
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005662:	4b22      	ldr	r3, [pc, #136]	; (80056ec <prvProcessExpiredTimer+0x94>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	3304      	adds	r3, #4
 8005670:	4618      	mov	r0, r3
 8005672:	f7fe fb1d 	bl	8003cb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d022      	beq.n	80056ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	699a      	ldr	r2, [r3, #24]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	18d1      	adds	r1, r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	6978      	ldr	r0, [r7, #20]
 8005692:	f000 f8d1 	bl	8005838 <prvInsertTimerInActiveList>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d01f      	beq.n	80056dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800569c:	2300      	movs	r3, #0
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	2300      	movs	r3, #0
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	2100      	movs	r1, #0
 80056a6:	6978      	ldr	r0, [r7, #20]
 80056a8:	f7ff ff88 	bl	80055bc <xTimerGenericCommand>
 80056ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d113      	bne.n	80056dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	60fb      	str	r3, [r7, #12]
}
 80056c6:	bf00      	nop
 80056c8:	e7fe      	b.n	80056c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056d0:	f023 0301 	bic.w	r3, r3, #1
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	6978      	ldr	r0, [r7, #20]
 80056e2:	4798      	blx	r3
}
 80056e4:	bf00      	nop
 80056e6:	3718      	adds	r7, #24
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	20000e2c 	.word	0x20000e2c

080056f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056f8:	f107 0308 	add.w	r3, r7, #8
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 f857 	bl	80057b0 <prvGetNextExpireTime>
 8005702:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	4619      	mov	r1, r3
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 f803 	bl	8005714 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800570e:	f000 f8d5 	bl	80058bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005712:	e7f1      	b.n	80056f8 <prvTimerTask+0x8>

08005714 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800571e:	f7ff fa39 	bl	8004b94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005722:	f107 0308 	add.w	r3, r7, #8
 8005726:	4618      	mov	r0, r3
 8005728:	f000 f866 	bl	80057f8 <prvSampleTimeNow>
 800572c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d130      	bne.n	8005796 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10a      	bne.n	8005750 <prvProcessTimerOrBlockTask+0x3c>
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	429a      	cmp	r2, r3
 8005740:	d806      	bhi.n	8005750 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005742:	f7ff fa35 	bl	8004bb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005746:	68f9      	ldr	r1, [r7, #12]
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7ff ff85 	bl	8005658 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800574e:	e024      	b.n	800579a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d008      	beq.n	8005768 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005756:	4b13      	ldr	r3, [pc, #76]	; (80057a4 <prvProcessTimerOrBlockTask+0x90>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <prvProcessTimerOrBlockTask+0x50>
 8005760:	2301      	movs	r3, #1
 8005762:	e000      	b.n	8005766 <prvProcessTimerOrBlockTask+0x52>
 8005764:	2300      	movs	r3, #0
 8005766:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005768:	4b0f      	ldr	r3, [pc, #60]	; (80057a8 <prvProcessTimerOrBlockTask+0x94>)
 800576a:	6818      	ldr	r0, [r3, #0]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	4619      	mov	r1, r3
 8005776:	f7fe ff7d 	bl	8004674 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800577a:	f7ff fa19 	bl	8004bb0 <xTaskResumeAll>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10a      	bne.n	800579a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005784:	4b09      	ldr	r3, [pc, #36]	; (80057ac <prvProcessTimerOrBlockTask+0x98>)
 8005786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	f3bf 8f6f 	isb	sy
}
 8005794:	e001      	b.n	800579a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005796:	f7ff fa0b 	bl	8004bb0 <xTaskResumeAll>
}
 800579a:	bf00      	nop
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	20000e30 	.word	0x20000e30
 80057a8:	20000e34 	.word	0x20000e34
 80057ac:	e000ed04 	.word	0xe000ed04

080057b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80057b8:	4b0e      	ldr	r3, [pc, #56]	; (80057f4 <prvGetNextExpireTime+0x44>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <prvGetNextExpireTime+0x16>
 80057c2:	2201      	movs	r2, #1
 80057c4:	e000      	b.n	80057c8 <prvGetNextExpireTime+0x18>
 80057c6:	2200      	movs	r2, #0
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d105      	bne.n	80057e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057d4:	4b07      	ldr	r3, [pc, #28]	; (80057f4 <prvGetNextExpireTime+0x44>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	e001      	b.n	80057e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80057e4:	68fb      	ldr	r3, [r7, #12]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	20000e2c 	.word	0x20000e2c

080057f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005800:	f7ff fa74 	bl	8004cec <xTaskGetTickCount>
 8005804:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005806:	4b0b      	ldr	r3, [pc, #44]	; (8005834 <prvSampleTimeNow+0x3c>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	429a      	cmp	r2, r3
 800580e:	d205      	bcs.n	800581c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005810:	f000 f936 	bl	8005a80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	e002      	b.n	8005822 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005822:	4a04      	ldr	r2, [pc, #16]	; (8005834 <prvSampleTimeNow+0x3c>)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005828:	68fb      	ldr	r3, [r7, #12]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	20000e3c 	.word	0x20000e3c

08005838 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005846:	2300      	movs	r3, #0
 8005848:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	429a      	cmp	r2, r3
 800585c:	d812      	bhi.n	8005884 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	1ad2      	subs	r2, r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	429a      	cmp	r2, r3
 800586a:	d302      	bcc.n	8005872 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800586c:	2301      	movs	r3, #1
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	e01b      	b.n	80058aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005872:	4b10      	ldr	r3, [pc, #64]	; (80058b4 <prvInsertTimerInActiveList+0x7c>)
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	3304      	adds	r3, #4
 800587a:	4619      	mov	r1, r3
 800587c:	4610      	mov	r0, r2
 800587e:	f7fe f9de 	bl	8003c3e <vListInsert>
 8005882:	e012      	b.n	80058aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	429a      	cmp	r2, r3
 800588a:	d206      	bcs.n	800589a <prvInsertTimerInActiveList+0x62>
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d302      	bcc.n	800589a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005894:	2301      	movs	r3, #1
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	e007      	b.n	80058aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800589a:	4b07      	ldr	r3, [pc, #28]	; (80058b8 <prvInsertTimerInActiveList+0x80>)
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3304      	adds	r3, #4
 80058a2:	4619      	mov	r1, r3
 80058a4:	4610      	mov	r0, r2
 80058a6:	f7fe f9ca 	bl	8003c3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80058aa:	697b      	ldr	r3, [r7, #20]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	20000e30 	.word	0x20000e30
 80058b8:	20000e2c 	.word	0x20000e2c

080058bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08e      	sub	sp, #56	; 0x38
 80058c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058c2:	e0ca      	b.n	8005a5a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	da18      	bge.n	80058fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80058ca:	1d3b      	adds	r3, r7, #4
 80058cc:	3304      	adds	r3, #4
 80058ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80058d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10a      	bne.n	80058ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	61fb      	str	r3, [r7, #28]
}
 80058e8:	bf00      	nop
 80058ea:	e7fe      	b.n	80058ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80058ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f2:	6850      	ldr	r0, [r2, #4]
 80058f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f6:	6892      	ldr	r2, [r2, #8]
 80058f8:	4611      	mov	r1, r2
 80058fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f2c0 80ab 	blt.w	8005a5a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d004      	beq.n	800591a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005912:	3304      	adds	r3, #4
 8005914:	4618      	mov	r0, r3
 8005916:	f7fe f9cb 	bl	8003cb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800591a:	463b      	mov	r3, r7
 800591c:	4618      	mov	r0, r3
 800591e:	f7ff ff6b 	bl	80057f8 <prvSampleTimeNow>
 8005922:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b09      	cmp	r3, #9
 8005928:	f200 8096 	bhi.w	8005a58 <prvProcessReceivedCommands+0x19c>
 800592c:	a201      	add	r2, pc, #4	; (adr r2, 8005934 <prvProcessReceivedCommands+0x78>)
 800592e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005932:	bf00      	nop
 8005934:	0800595d 	.word	0x0800595d
 8005938:	0800595d 	.word	0x0800595d
 800593c:	0800595d 	.word	0x0800595d
 8005940:	080059d1 	.word	0x080059d1
 8005944:	080059e5 	.word	0x080059e5
 8005948:	08005a2f 	.word	0x08005a2f
 800594c:	0800595d 	.word	0x0800595d
 8005950:	0800595d 	.word	0x0800595d
 8005954:	080059d1 	.word	0x080059d1
 8005958:	080059e5 	.word	0x080059e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005962:	f043 0301 	orr.w	r3, r3, #1
 8005966:	b2da      	uxtb	r2, r3
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	18d1      	adds	r1, r2, r3
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800597a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800597c:	f7ff ff5c 	bl	8005838 <prvInsertTimerInActiveList>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d069      	beq.n	8005a5a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800598c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800598e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b00      	cmp	r3, #0
 800599a:	d05e      	beq.n	8005a5a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	441a      	add	r2, r3
 80059a4:	2300      	movs	r3, #0
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	2300      	movs	r3, #0
 80059aa:	2100      	movs	r1, #0
 80059ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059ae:	f7ff fe05 	bl	80055bc <xTimerGenericCommand>
 80059b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d14f      	bne.n	8005a5a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	61bb      	str	r3, [r7, #24]
}
 80059cc:	bf00      	nop
 80059ce:	e7fe      	b.n	80059ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059d6:	f023 0301 	bic.w	r3, r3, #1
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80059e2:	e03a      	b.n	8005a5a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059ea:	f043 0301 	orr.w	r3, r3, #1
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80059fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10a      	bne.n	8005a1a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	617b      	str	r3, [r7, #20]
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	18d1      	adds	r1, r2, r3
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a28:	f7ff ff06 	bl	8005838 <prvInsertTimerInActiveList>
					break;
 8005a2c:	e015      	b.n	8005a5a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d103      	bne.n	8005a44 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a3e:	f000 fbdf 	bl	8006200 <vPortFree>
 8005a42:	e00a      	b.n	8005a5a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a4a:	f023 0301 	bic.w	r3, r3, #1
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005a56:	e000      	b.n	8005a5a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005a58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a5a:	4b08      	ldr	r3, [pc, #32]	; (8005a7c <prvProcessReceivedCommands+0x1c0>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	1d39      	adds	r1, r7, #4
 8005a60:	2200      	movs	r2, #0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fe fbec 	bl	8004240 <xQueueReceive>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f47f af2a 	bne.w	80058c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005a70:	bf00      	nop
 8005a72:	bf00      	nop
 8005a74:	3730      	adds	r7, #48	; 0x30
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000e34 	.word	0x20000e34

08005a80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a86:	e048      	b.n	8005b1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a88:	4b2d      	ldr	r3, [pc, #180]	; (8005b40 <prvSwitchTimerLists+0xc0>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a92:	4b2b      	ldr	r3, [pc, #172]	; (8005b40 <prvSwitchTimerLists+0xc0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fe f905 	bl	8003cb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ab4:	f003 0304 	and.w	r3, r3, #4
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d02e      	beq.n	8005b1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d90e      	bls.n	8005aec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ada:	4b19      	ldr	r3, [pc, #100]	; (8005b40 <prvSwitchTimerLists+0xc0>)
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	4610      	mov	r0, r2
 8005ae6:	f7fe f8aa 	bl	8003c3e <vListInsert>
 8005aea:	e016      	b.n	8005b1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005aec:	2300      	movs	r3, #0
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	2300      	movs	r3, #0
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	2100      	movs	r1, #0
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f7ff fd60 	bl	80055bc <xTimerGenericCommand>
 8005afc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10a      	bne.n	8005b1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	603b      	str	r3, [r7, #0]
}
 8005b16:	bf00      	nop
 8005b18:	e7fe      	b.n	8005b18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b1a:	4b09      	ldr	r3, [pc, #36]	; (8005b40 <prvSwitchTimerLists+0xc0>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1b1      	bne.n	8005a88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005b24:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <prvSwitchTimerLists+0xc0>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005b2a:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <prvSwitchTimerLists+0xc4>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a04      	ldr	r2, [pc, #16]	; (8005b40 <prvSwitchTimerLists+0xc0>)
 8005b30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005b32:	4a04      	ldr	r2, [pc, #16]	; (8005b44 <prvSwitchTimerLists+0xc4>)
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	6013      	str	r3, [r2, #0]
}
 8005b38:	bf00      	nop
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20000e2c 	.word	0x20000e2c
 8005b44:	20000e30 	.word	0x20000e30

08005b48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005b4e:	f000 f969 	bl	8005e24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005b52:	4b15      	ldr	r3, [pc, #84]	; (8005ba8 <prvCheckForValidListAndQueue+0x60>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d120      	bne.n	8005b9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005b5a:	4814      	ldr	r0, [pc, #80]	; (8005bac <prvCheckForValidListAndQueue+0x64>)
 8005b5c:	f7fe f81e 	bl	8003b9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005b60:	4813      	ldr	r0, [pc, #76]	; (8005bb0 <prvCheckForValidListAndQueue+0x68>)
 8005b62:	f7fe f81b 	bl	8003b9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005b66:	4b13      	ldr	r3, [pc, #76]	; (8005bb4 <prvCheckForValidListAndQueue+0x6c>)
 8005b68:	4a10      	ldr	r2, [pc, #64]	; (8005bac <prvCheckForValidListAndQueue+0x64>)
 8005b6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005b6c:	4b12      	ldr	r3, [pc, #72]	; (8005bb8 <prvCheckForValidListAndQueue+0x70>)
 8005b6e:	4a10      	ldr	r2, [pc, #64]	; (8005bb0 <prvCheckForValidListAndQueue+0x68>)
 8005b70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005b72:	2300      	movs	r3, #0
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	4b11      	ldr	r3, [pc, #68]	; (8005bbc <prvCheckForValidListAndQueue+0x74>)
 8005b78:	4a11      	ldr	r2, [pc, #68]	; (8005bc0 <prvCheckForValidListAndQueue+0x78>)
 8005b7a:	2110      	movs	r1, #16
 8005b7c:	200a      	movs	r0, #10
 8005b7e:	f7fe f929 	bl	8003dd4 <xQueueGenericCreateStatic>
 8005b82:	4603      	mov	r3, r0
 8005b84:	4a08      	ldr	r2, [pc, #32]	; (8005ba8 <prvCheckForValidListAndQueue+0x60>)
 8005b86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b88:	4b07      	ldr	r3, [pc, #28]	; (8005ba8 <prvCheckForValidListAndQueue+0x60>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d005      	beq.n	8005b9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b90:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <prvCheckForValidListAndQueue+0x60>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	490b      	ldr	r1, [pc, #44]	; (8005bc4 <prvCheckForValidListAndQueue+0x7c>)
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fe fd42 	bl	8004620 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b9c:	f000 f972 	bl	8005e84 <vPortExitCritical>
}
 8005ba0:	bf00      	nop
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	20000e34 	.word	0x20000e34
 8005bac:	20000e04 	.word	0x20000e04
 8005bb0:	20000e18 	.word	0x20000e18
 8005bb4:	20000e2c 	.word	0x20000e2c
 8005bb8:	20000e30 	.word	0x20000e30
 8005bbc:	20000ee0 	.word	0x20000ee0
 8005bc0:	20000e40 	.word	0x20000e40
 8005bc4:	08006f2c 	.word	0x08006f2c

08005bc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	3b04      	subs	r3, #4
 8005bd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005be0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	3b04      	subs	r3, #4
 8005be6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f023 0201 	bic.w	r2, r3, #1
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3b04      	subs	r3, #4
 8005bf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005bf8:	4a0c      	ldr	r2, [pc, #48]	; (8005c2c <pxPortInitialiseStack+0x64>)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3b14      	subs	r3, #20
 8005c02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	3b04      	subs	r3, #4
 8005c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f06f 0202 	mvn.w	r2, #2
 8005c16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	3b20      	subs	r3, #32
 8005c1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	08005c31 	.word	0x08005c31

08005c30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c36:	2300      	movs	r3, #0
 8005c38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c3a:	4b12      	ldr	r3, [pc, #72]	; (8005c84 <prvTaskExitError+0x54>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c42:	d00a      	beq.n	8005c5a <prvTaskExitError+0x2a>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	60fb      	str	r3, [r7, #12]
}
 8005c56:	bf00      	nop
 8005c58:	e7fe      	b.n	8005c58 <prvTaskExitError+0x28>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	60bb      	str	r3, [r7, #8]
}
 8005c6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c6e:	bf00      	nop
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0fc      	beq.n	8005c70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c76:	bf00      	nop
 8005c78:	bf00      	nop
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	2000000c 	.word	0x2000000c
	...

08005c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c90:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <pxCurrentTCBConst2>)
 8005c92:	6819      	ldr	r1, [r3, #0]
 8005c94:	6808      	ldr	r0, [r1, #0]
 8005c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c9a:	f380 8809 	msr	PSP, r0
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f04f 0000 	mov.w	r0, #0
 8005ca6:	f380 8811 	msr	BASEPRI, r0
 8005caa:	4770      	bx	lr
 8005cac:	f3af 8000 	nop.w

08005cb0 <pxCurrentTCBConst2>:
 8005cb0:	20000904 	.word	0x20000904
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005cb4:	bf00      	nop
 8005cb6:	bf00      	nop

08005cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005cb8:	4808      	ldr	r0, [pc, #32]	; (8005cdc <prvPortStartFirstTask+0x24>)
 8005cba:	6800      	ldr	r0, [r0, #0]
 8005cbc:	6800      	ldr	r0, [r0, #0]
 8005cbe:	f380 8808 	msr	MSP, r0
 8005cc2:	f04f 0000 	mov.w	r0, #0
 8005cc6:	f380 8814 	msr	CONTROL, r0
 8005cca:	b662      	cpsie	i
 8005ccc:	b661      	cpsie	f
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	df00      	svc	0
 8005cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005cda:	bf00      	nop
 8005cdc:	e000ed08 	.word	0xe000ed08

08005ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ce6:	4b46      	ldr	r3, [pc, #280]	; (8005e00 <xPortStartScheduler+0x120>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a46      	ldr	r2, [pc, #280]	; (8005e04 <xPortStartScheduler+0x124>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d10a      	bne.n	8005d06 <xPortStartScheduler+0x26>
	__asm volatile
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	613b      	str	r3, [r7, #16]
}
 8005d02:	bf00      	nop
 8005d04:	e7fe      	b.n	8005d04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d06:	4b3e      	ldr	r3, [pc, #248]	; (8005e00 <xPortStartScheduler+0x120>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a3f      	ldr	r2, [pc, #252]	; (8005e08 <xPortStartScheduler+0x128>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d10a      	bne.n	8005d26 <xPortStartScheduler+0x46>
	__asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	60fb      	str	r3, [r7, #12]
}
 8005d22:	bf00      	nop
 8005d24:	e7fe      	b.n	8005d24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d26:	4b39      	ldr	r3, [pc, #228]	; (8005e0c <xPortStartScheduler+0x12c>)
 8005d28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	22ff      	movs	r2, #255	; 0xff
 8005d36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d40:	78fb      	ldrb	r3, [r7, #3]
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	4b31      	ldr	r3, [pc, #196]	; (8005e10 <xPortStartScheduler+0x130>)
 8005d4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d4e:	4b31      	ldr	r3, [pc, #196]	; (8005e14 <xPortStartScheduler+0x134>)
 8005d50:	2207      	movs	r2, #7
 8005d52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d54:	e009      	b.n	8005d6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005d56:	4b2f      	ldr	r3, [pc, #188]	; (8005e14 <xPortStartScheduler+0x134>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	4a2d      	ldr	r2, [pc, #180]	; (8005e14 <xPortStartScheduler+0x134>)
 8005d5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d60:	78fb      	ldrb	r3, [r7, #3]
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d6a:	78fb      	ldrb	r3, [r7, #3]
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d72:	2b80      	cmp	r3, #128	; 0x80
 8005d74:	d0ef      	beq.n	8005d56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d76:	4b27      	ldr	r3, [pc, #156]	; (8005e14 <xPortStartScheduler+0x134>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f1c3 0307 	rsb	r3, r3, #7
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d00a      	beq.n	8005d98 <xPortStartScheduler+0xb8>
	__asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	60bb      	str	r3, [r7, #8]
}
 8005d94:	bf00      	nop
 8005d96:	e7fe      	b.n	8005d96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d98:	4b1e      	ldr	r3, [pc, #120]	; (8005e14 <xPortStartScheduler+0x134>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	021b      	lsls	r3, r3, #8
 8005d9e:	4a1d      	ldr	r2, [pc, #116]	; (8005e14 <xPortStartScheduler+0x134>)
 8005da0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005da2:	4b1c      	ldr	r3, [pc, #112]	; (8005e14 <xPortStartScheduler+0x134>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005daa:	4a1a      	ldr	r2, [pc, #104]	; (8005e14 <xPortStartScheduler+0x134>)
 8005dac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005db6:	4b18      	ldr	r3, [pc, #96]	; (8005e18 <xPortStartScheduler+0x138>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a17      	ldr	r2, [pc, #92]	; (8005e18 <xPortStartScheduler+0x138>)
 8005dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005dc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005dc2:	4b15      	ldr	r3, [pc, #84]	; (8005e18 <xPortStartScheduler+0x138>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a14      	ldr	r2, [pc, #80]	; (8005e18 <xPortStartScheduler+0x138>)
 8005dc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005dcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005dce:	f000 f8dd 	bl	8005f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005dd2:	4b12      	ldr	r3, [pc, #72]	; (8005e1c <xPortStartScheduler+0x13c>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005dd8:	f000 f8fc 	bl	8005fd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ddc:	4b10      	ldr	r3, [pc, #64]	; (8005e20 <xPortStartScheduler+0x140>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a0f      	ldr	r2, [pc, #60]	; (8005e20 <xPortStartScheduler+0x140>)
 8005de2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005de6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005de8:	f7ff ff66 	bl	8005cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005dec:	f7ff f848 	bl	8004e80 <vTaskSwitchContext>
	prvTaskExitError();
 8005df0:	f7ff ff1e 	bl	8005c30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	e000ed00 	.word	0xe000ed00
 8005e04:	410fc271 	.word	0x410fc271
 8005e08:	410fc270 	.word	0x410fc270
 8005e0c:	e000e400 	.word	0xe000e400
 8005e10:	20000f30 	.word	0x20000f30
 8005e14:	20000f34 	.word	0x20000f34
 8005e18:	e000ed20 	.word	0xe000ed20
 8005e1c:	2000000c 	.word	0x2000000c
 8005e20:	e000ef34 	.word	0xe000ef34

08005e24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
	__asm volatile
 8005e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	607b      	str	r3, [r7, #4]
}
 8005e3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e3e:	4b0f      	ldr	r3, [pc, #60]	; (8005e7c <vPortEnterCritical+0x58>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3301      	adds	r3, #1
 8005e44:	4a0d      	ldr	r2, [pc, #52]	; (8005e7c <vPortEnterCritical+0x58>)
 8005e46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e48:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <vPortEnterCritical+0x58>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d10f      	bne.n	8005e70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e50:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <vPortEnterCritical+0x5c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <vPortEnterCritical+0x4c>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	603b      	str	r3, [r7, #0]
}
 8005e6c:	bf00      	nop
 8005e6e:	e7fe      	b.n	8005e6e <vPortEnterCritical+0x4a>
	}
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	2000000c 	.word	0x2000000c
 8005e80:	e000ed04 	.word	0xe000ed04

08005e84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e8a:	4b12      	ldr	r3, [pc, #72]	; (8005ed4 <vPortExitCritical+0x50>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10a      	bne.n	8005ea8 <vPortExitCritical+0x24>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	607b      	str	r3, [r7, #4]
}
 8005ea4:	bf00      	nop
 8005ea6:	e7fe      	b.n	8005ea6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ea8:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <vPortExitCritical+0x50>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3b01      	subs	r3, #1
 8005eae:	4a09      	ldr	r2, [pc, #36]	; (8005ed4 <vPortExitCritical+0x50>)
 8005eb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005eb2:	4b08      	ldr	r3, [pc, #32]	; (8005ed4 <vPortExitCritical+0x50>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d105      	bne.n	8005ec6 <vPortExitCritical+0x42>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	f383 8811 	msr	BASEPRI, r3
}
 8005ec4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	2000000c 	.word	0x2000000c
	...

08005ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ee0:	f3ef 8009 	mrs	r0, PSP
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	4b15      	ldr	r3, [pc, #84]	; (8005f40 <pxCurrentTCBConst>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	f01e 0f10 	tst.w	lr, #16
 8005ef0:	bf08      	it	eq
 8005ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efa:	6010      	str	r0, [r2, #0]
 8005efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f04:	f380 8811 	msr	BASEPRI, r0
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f7fe ffb6 	bl	8004e80 <vTaskSwitchContext>
 8005f14:	f04f 0000 	mov.w	r0, #0
 8005f18:	f380 8811 	msr	BASEPRI, r0
 8005f1c:	bc09      	pop	{r0, r3}
 8005f1e:	6819      	ldr	r1, [r3, #0]
 8005f20:	6808      	ldr	r0, [r1, #0]
 8005f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f26:	f01e 0f10 	tst.w	lr, #16
 8005f2a:	bf08      	it	eq
 8005f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f30:	f380 8809 	msr	PSP, r0
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	f3af 8000 	nop.w

08005f40 <pxCurrentTCBConst>:
 8005f40:	20000904 	.word	0x20000904
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop

08005f48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	607b      	str	r3, [r7, #4]
}
 8005f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f62:	f7fe fed3 	bl	8004d0c <xTaskIncrementTick>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d003      	beq.n	8005f74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f6c:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <xPortSysTickHandler+0x40>)
 8005f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	2300      	movs	r3, #0
 8005f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	f383 8811 	msr	BASEPRI, r3
}
 8005f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f80:	bf00      	nop
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	e000ed04 	.word	0xe000ed04

08005f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f90:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <vPortSetupTimerInterrupt+0x34>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f96:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <vPortSetupTimerInterrupt+0x38>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f9c:	4b0a      	ldr	r3, [pc, #40]	; (8005fc8 <vPortSetupTimerInterrupt+0x3c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a0a      	ldr	r2, [pc, #40]	; (8005fcc <vPortSetupTimerInterrupt+0x40>)
 8005fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa6:	099b      	lsrs	r3, r3, #6
 8005fa8:	4a09      	ldr	r2, [pc, #36]	; (8005fd0 <vPortSetupTimerInterrupt+0x44>)
 8005faa:	3b01      	subs	r3, #1
 8005fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005fae:	4b04      	ldr	r3, [pc, #16]	; (8005fc0 <vPortSetupTimerInterrupt+0x34>)
 8005fb0:	2207      	movs	r2, #7
 8005fb2:	601a      	str	r2, [r3, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	e000e010 	.word	0xe000e010
 8005fc4:	e000e018 	.word	0xe000e018
 8005fc8:	20000000 	.word	0x20000000
 8005fcc:	10624dd3 	.word	0x10624dd3
 8005fd0:	e000e014 	.word	0xe000e014

08005fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005fe4 <vPortEnableVFP+0x10>
 8005fd8:	6801      	ldr	r1, [r0, #0]
 8005fda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005fde:	6001      	str	r1, [r0, #0]
 8005fe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005fe2:	bf00      	nop
 8005fe4:	e000ed88 	.word	0xe000ed88

08005fe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005fee:	f3ef 8305 	mrs	r3, IPSR
 8005ff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2b0f      	cmp	r3, #15
 8005ff8:	d914      	bls.n	8006024 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005ffa:	4a17      	ldr	r2, [pc, #92]	; (8006058 <vPortValidateInterruptPriority+0x70>)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4413      	add	r3, r2
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006004:	4b15      	ldr	r3, [pc, #84]	; (800605c <vPortValidateInterruptPriority+0x74>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	7afa      	ldrb	r2, [r7, #11]
 800600a:	429a      	cmp	r2, r3
 800600c:	d20a      	bcs.n	8006024 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	607b      	str	r3, [r7, #4]
}
 8006020:	bf00      	nop
 8006022:	e7fe      	b.n	8006022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006024:	4b0e      	ldr	r3, [pc, #56]	; (8006060 <vPortValidateInterruptPriority+0x78>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800602c:	4b0d      	ldr	r3, [pc, #52]	; (8006064 <vPortValidateInterruptPriority+0x7c>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	429a      	cmp	r2, r3
 8006032:	d90a      	bls.n	800604a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	603b      	str	r3, [r7, #0]
}
 8006046:	bf00      	nop
 8006048:	e7fe      	b.n	8006048 <vPortValidateInterruptPriority+0x60>
	}
 800604a:	bf00      	nop
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	e000e3f0 	.word	0xe000e3f0
 800605c:	20000f30 	.word	0x20000f30
 8006060:	e000ed0c 	.word	0xe000ed0c
 8006064:	20000f34 	.word	0x20000f34

08006068 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08a      	sub	sp, #40	; 0x28
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006070:	2300      	movs	r3, #0
 8006072:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006074:	f7fe fd8e 	bl	8004b94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006078:	4b5b      	ldr	r3, [pc, #364]	; (80061e8 <pvPortMalloc+0x180>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d101      	bne.n	8006084 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006080:	f000 f920 	bl	80062c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006084:	4b59      	ldr	r3, [pc, #356]	; (80061ec <pvPortMalloc+0x184>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4013      	ands	r3, r2
 800608c:	2b00      	cmp	r3, #0
 800608e:	f040 8093 	bne.w	80061b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d01d      	beq.n	80060d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006098:	2208      	movs	r2, #8
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4413      	add	r3, r2
 800609e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f003 0307 	and.w	r3, r3, #7
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d014      	beq.n	80060d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f023 0307 	bic.w	r3, r3, #7
 80060b0:	3308      	adds	r3, #8
 80060b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <pvPortMalloc+0x6c>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	617b      	str	r3, [r7, #20]
}
 80060d0:	bf00      	nop
 80060d2:	e7fe      	b.n	80060d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d06e      	beq.n	80061b8 <pvPortMalloc+0x150>
 80060da:	4b45      	ldr	r3, [pc, #276]	; (80061f0 <pvPortMalloc+0x188>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d869      	bhi.n	80061b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80060e4:	4b43      	ldr	r3, [pc, #268]	; (80061f4 <pvPortMalloc+0x18c>)
 80060e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80060e8:	4b42      	ldr	r3, [pc, #264]	; (80061f4 <pvPortMalloc+0x18c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060ee:	e004      	b.n	80060fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	429a      	cmp	r2, r3
 8006102:	d903      	bls.n	800610c <pvPortMalloc+0xa4>
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1f1      	bne.n	80060f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800610c:	4b36      	ldr	r3, [pc, #216]	; (80061e8 <pvPortMalloc+0x180>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006112:	429a      	cmp	r2, r3
 8006114:	d050      	beq.n	80061b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2208      	movs	r2, #8
 800611c:	4413      	add	r3, r2
 800611e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	1ad2      	subs	r2, r2, r3
 8006130:	2308      	movs	r3, #8
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	429a      	cmp	r2, r3
 8006136:	d91f      	bls.n	8006178 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4413      	add	r3, r2
 800613e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	f003 0307 	and.w	r3, r3, #7
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <pvPortMalloc+0xf8>
	__asm volatile
 800614a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	613b      	str	r3, [r7, #16]
}
 800615c:	bf00      	nop
 800615e:	e7fe      	b.n	800615e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	1ad2      	subs	r2, r2, r3
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006172:	69b8      	ldr	r0, [r7, #24]
 8006174:	f000 f908 	bl	8006388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006178:	4b1d      	ldr	r3, [pc, #116]	; (80061f0 <pvPortMalloc+0x188>)
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	4a1b      	ldr	r2, [pc, #108]	; (80061f0 <pvPortMalloc+0x188>)
 8006184:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006186:	4b1a      	ldr	r3, [pc, #104]	; (80061f0 <pvPortMalloc+0x188>)
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	4b1b      	ldr	r3, [pc, #108]	; (80061f8 <pvPortMalloc+0x190>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	429a      	cmp	r2, r3
 8006190:	d203      	bcs.n	800619a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006192:	4b17      	ldr	r3, [pc, #92]	; (80061f0 <pvPortMalloc+0x188>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a18      	ldr	r2, [pc, #96]	; (80061f8 <pvPortMalloc+0x190>)
 8006198:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	4b13      	ldr	r3, [pc, #76]	; (80061ec <pvPortMalloc+0x184>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	431a      	orrs	r2, r3
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80061ae:	4b13      	ldr	r3, [pc, #76]	; (80061fc <pvPortMalloc+0x194>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3301      	adds	r3, #1
 80061b4:	4a11      	ldr	r2, [pc, #68]	; (80061fc <pvPortMalloc+0x194>)
 80061b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80061b8:	f7fe fcfa 	bl	8004bb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <pvPortMalloc+0x174>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	60fb      	str	r3, [r7, #12]
}
 80061d8:	bf00      	nop
 80061da:	e7fe      	b.n	80061da <pvPortMalloc+0x172>
	return pvReturn;
 80061dc:	69fb      	ldr	r3, [r7, #28]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3728      	adds	r7, #40	; 0x28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20001af8 	.word	0x20001af8
 80061ec:	20001b0c 	.word	0x20001b0c
 80061f0:	20001afc 	.word	0x20001afc
 80061f4:	20001af0 	.word	0x20001af0
 80061f8:	20001b00 	.word	0x20001b00
 80061fc:	20001b04 	.word	0x20001b04

08006200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d04d      	beq.n	80062ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006212:	2308      	movs	r3, #8
 8006214:	425b      	negs	r3, r3
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4413      	add	r3, r2
 800621a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	4b24      	ldr	r3, [pc, #144]	; (80062b8 <vPortFree+0xb8>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4013      	ands	r3, r2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10a      	bne.n	8006244 <vPortFree+0x44>
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	60fb      	str	r3, [r7, #12]
}
 8006240:	bf00      	nop
 8006242:	e7fe      	b.n	8006242 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00a      	beq.n	8006262 <vPortFree+0x62>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	60bb      	str	r3, [r7, #8]
}
 800625e:	bf00      	nop
 8006260:	e7fe      	b.n	8006260 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	4b14      	ldr	r3, [pc, #80]	; (80062b8 <vPortFree+0xb8>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4013      	ands	r3, r2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d01e      	beq.n	80062ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d11a      	bne.n	80062ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	4b0e      	ldr	r3, [pc, #56]	; (80062b8 <vPortFree+0xb8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	43db      	mvns	r3, r3
 8006282:	401a      	ands	r2, r3
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006288:	f7fe fc84 	bl	8004b94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <vPortFree+0xbc>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4413      	add	r3, r2
 8006296:	4a09      	ldr	r2, [pc, #36]	; (80062bc <vPortFree+0xbc>)
 8006298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800629a:	6938      	ldr	r0, [r7, #16]
 800629c:	f000 f874 	bl	8006388 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80062a0:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <vPortFree+0xc0>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3301      	adds	r3, #1
 80062a6:	4a06      	ldr	r2, [pc, #24]	; (80062c0 <vPortFree+0xc0>)
 80062a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80062aa:	f7fe fc81 	bl	8004bb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80062ae:	bf00      	nop
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	20001b0c 	.word	0x20001b0c
 80062bc:	20001afc 	.word	0x20001afc
 80062c0:	20001b08 	.word	0x20001b08

080062c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80062ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80062ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80062d0:	4b27      	ldr	r3, [pc, #156]	; (8006370 <prvHeapInit+0xac>)
 80062d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00c      	beq.n	80062f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3307      	adds	r3, #7
 80062e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0307 	bic.w	r3, r3, #7
 80062ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	4a1f      	ldr	r2, [pc, #124]	; (8006370 <prvHeapInit+0xac>)
 80062f4:	4413      	add	r3, r2
 80062f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80062fc:	4a1d      	ldr	r2, [pc, #116]	; (8006374 <prvHeapInit+0xb0>)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006302:	4b1c      	ldr	r3, [pc, #112]	; (8006374 <prvHeapInit+0xb0>)
 8006304:	2200      	movs	r2, #0
 8006306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	4413      	add	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006310:	2208      	movs	r2, #8
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	1a9b      	subs	r3, r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0307 	bic.w	r3, r3, #7
 800631e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4a15      	ldr	r2, [pc, #84]	; (8006378 <prvHeapInit+0xb4>)
 8006324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006326:	4b14      	ldr	r3, [pc, #80]	; (8006378 <prvHeapInit+0xb4>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2200      	movs	r2, #0
 800632c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800632e:	4b12      	ldr	r3, [pc, #72]	; (8006378 <prvHeapInit+0xb4>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	1ad2      	subs	r2, r2, r3
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006344:	4b0c      	ldr	r3, [pc, #48]	; (8006378 <prvHeapInit+0xb4>)
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	4a0a      	ldr	r2, [pc, #40]	; (800637c <prvHeapInit+0xb8>)
 8006352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	4a09      	ldr	r2, [pc, #36]	; (8006380 <prvHeapInit+0xbc>)
 800635a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800635c:	4b09      	ldr	r3, [pc, #36]	; (8006384 <prvHeapInit+0xc0>)
 800635e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006362:	601a      	str	r2, [r3, #0]
}
 8006364:	bf00      	nop
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	20000f38 	.word	0x20000f38
 8006374:	20001af0 	.word	0x20001af0
 8006378:	20001af8 	.word	0x20001af8
 800637c:	20001b00 	.word	0x20001b00
 8006380:	20001afc 	.word	0x20001afc
 8006384:	20001b0c 	.word	0x20001b0c

08006388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006390:	4b28      	ldr	r3, [pc, #160]	; (8006434 <prvInsertBlockIntoFreeList+0xac>)
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	e002      	b.n	800639c <prvInsertBlockIntoFreeList+0x14>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d8f7      	bhi.n	8006396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	4413      	add	r3, r2
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d108      	bne.n	80063ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	441a      	add	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	441a      	add	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d118      	bne.n	8006410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	4b15      	ldr	r3, [pc, #84]	; (8006438 <prvInsertBlockIntoFreeList+0xb0>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d00d      	beq.n	8006406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	441a      	add	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	e008      	b.n	8006418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006406:	4b0c      	ldr	r3, [pc, #48]	; (8006438 <prvInsertBlockIntoFreeList+0xb0>)
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	e003      	b.n	8006418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	429a      	cmp	r2, r3
 800641e:	d002      	beq.n	8006426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006426:	bf00      	nop
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	20001af0 	.word	0x20001af0
 8006438:	20001af8 	.word	0x20001af8

0800643c <std>:
 800643c:	2300      	movs	r3, #0
 800643e:	b510      	push	{r4, lr}
 8006440:	4604      	mov	r4, r0
 8006442:	e9c0 3300 	strd	r3, r3, [r0]
 8006446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800644a:	6083      	str	r3, [r0, #8]
 800644c:	8181      	strh	r1, [r0, #12]
 800644e:	6643      	str	r3, [r0, #100]	; 0x64
 8006450:	81c2      	strh	r2, [r0, #14]
 8006452:	6183      	str	r3, [r0, #24]
 8006454:	4619      	mov	r1, r3
 8006456:	2208      	movs	r2, #8
 8006458:	305c      	adds	r0, #92	; 0x5c
 800645a:	f000 f9e5 	bl	8006828 <memset>
 800645e:	4b0d      	ldr	r3, [pc, #52]	; (8006494 <std+0x58>)
 8006460:	6263      	str	r3, [r4, #36]	; 0x24
 8006462:	4b0d      	ldr	r3, [pc, #52]	; (8006498 <std+0x5c>)
 8006464:	62a3      	str	r3, [r4, #40]	; 0x28
 8006466:	4b0d      	ldr	r3, [pc, #52]	; (800649c <std+0x60>)
 8006468:	62e3      	str	r3, [r4, #44]	; 0x2c
 800646a:	4b0d      	ldr	r3, [pc, #52]	; (80064a0 <std+0x64>)
 800646c:	6323      	str	r3, [r4, #48]	; 0x30
 800646e:	4b0d      	ldr	r3, [pc, #52]	; (80064a4 <std+0x68>)
 8006470:	6224      	str	r4, [r4, #32]
 8006472:	429c      	cmp	r4, r3
 8006474:	d006      	beq.n	8006484 <std+0x48>
 8006476:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800647a:	4294      	cmp	r4, r2
 800647c:	d002      	beq.n	8006484 <std+0x48>
 800647e:	33d0      	adds	r3, #208	; 0xd0
 8006480:	429c      	cmp	r4, r3
 8006482:	d105      	bne.n	8006490 <std+0x54>
 8006484:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800648c:	f000 ba9a 	b.w	80069c4 <__retarget_lock_init_recursive>
 8006490:	bd10      	pop	{r4, pc}
 8006492:	bf00      	nop
 8006494:	08006679 	.word	0x08006679
 8006498:	0800669b 	.word	0x0800669b
 800649c:	080066d3 	.word	0x080066d3
 80064a0:	080066f7 	.word	0x080066f7
 80064a4:	20001b10 	.word	0x20001b10

080064a8 <stdio_exit_handler>:
 80064a8:	4a02      	ldr	r2, [pc, #8]	; (80064b4 <stdio_exit_handler+0xc>)
 80064aa:	4903      	ldr	r1, [pc, #12]	; (80064b8 <stdio_exit_handler+0x10>)
 80064ac:	4803      	ldr	r0, [pc, #12]	; (80064bc <stdio_exit_handler+0x14>)
 80064ae:	f000 b869 	b.w	8006584 <_fwalk_sglue>
 80064b2:	bf00      	nop
 80064b4:	20000010 	.word	0x20000010
 80064b8:	08006ce5 	.word	0x08006ce5
 80064bc:	2000001c 	.word	0x2000001c

080064c0 <cleanup_stdio>:
 80064c0:	6841      	ldr	r1, [r0, #4]
 80064c2:	4b0c      	ldr	r3, [pc, #48]	; (80064f4 <cleanup_stdio+0x34>)
 80064c4:	4299      	cmp	r1, r3
 80064c6:	b510      	push	{r4, lr}
 80064c8:	4604      	mov	r4, r0
 80064ca:	d001      	beq.n	80064d0 <cleanup_stdio+0x10>
 80064cc:	f000 fc0a 	bl	8006ce4 <_fflush_r>
 80064d0:	68a1      	ldr	r1, [r4, #8]
 80064d2:	4b09      	ldr	r3, [pc, #36]	; (80064f8 <cleanup_stdio+0x38>)
 80064d4:	4299      	cmp	r1, r3
 80064d6:	d002      	beq.n	80064de <cleanup_stdio+0x1e>
 80064d8:	4620      	mov	r0, r4
 80064da:	f000 fc03 	bl	8006ce4 <_fflush_r>
 80064de:	68e1      	ldr	r1, [r4, #12]
 80064e0:	4b06      	ldr	r3, [pc, #24]	; (80064fc <cleanup_stdio+0x3c>)
 80064e2:	4299      	cmp	r1, r3
 80064e4:	d004      	beq.n	80064f0 <cleanup_stdio+0x30>
 80064e6:	4620      	mov	r0, r4
 80064e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064ec:	f000 bbfa 	b.w	8006ce4 <_fflush_r>
 80064f0:	bd10      	pop	{r4, pc}
 80064f2:	bf00      	nop
 80064f4:	20001b10 	.word	0x20001b10
 80064f8:	20001b78 	.word	0x20001b78
 80064fc:	20001be0 	.word	0x20001be0

08006500 <global_stdio_init.part.0>:
 8006500:	b510      	push	{r4, lr}
 8006502:	4b0b      	ldr	r3, [pc, #44]	; (8006530 <global_stdio_init.part.0+0x30>)
 8006504:	4c0b      	ldr	r4, [pc, #44]	; (8006534 <global_stdio_init.part.0+0x34>)
 8006506:	4a0c      	ldr	r2, [pc, #48]	; (8006538 <global_stdio_init.part.0+0x38>)
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	4620      	mov	r0, r4
 800650c:	2200      	movs	r2, #0
 800650e:	2104      	movs	r1, #4
 8006510:	f7ff ff94 	bl	800643c <std>
 8006514:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006518:	2201      	movs	r2, #1
 800651a:	2109      	movs	r1, #9
 800651c:	f7ff ff8e 	bl	800643c <std>
 8006520:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006524:	2202      	movs	r2, #2
 8006526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800652a:	2112      	movs	r1, #18
 800652c:	f7ff bf86 	b.w	800643c <std>
 8006530:	20001c48 	.word	0x20001c48
 8006534:	20001b10 	.word	0x20001b10
 8006538:	080064a9 	.word	0x080064a9

0800653c <__sfp_lock_acquire>:
 800653c:	4801      	ldr	r0, [pc, #4]	; (8006544 <__sfp_lock_acquire+0x8>)
 800653e:	f000 ba42 	b.w	80069c6 <__retarget_lock_acquire_recursive>
 8006542:	bf00      	nop
 8006544:	20001c51 	.word	0x20001c51

08006548 <__sfp_lock_release>:
 8006548:	4801      	ldr	r0, [pc, #4]	; (8006550 <__sfp_lock_release+0x8>)
 800654a:	f000 ba3d 	b.w	80069c8 <__retarget_lock_release_recursive>
 800654e:	bf00      	nop
 8006550:	20001c51 	.word	0x20001c51

08006554 <__sinit>:
 8006554:	b510      	push	{r4, lr}
 8006556:	4604      	mov	r4, r0
 8006558:	f7ff fff0 	bl	800653c <__sfp_lock_acquire>
 800655c:	6a23      	ldr	r3, [r4, #32]
 800655e:	b11b      	cbz	r3, 8006568 <__sinit+0x14>
 8006560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006564:	f7ff bff0 	b.w	8006548 <__sfp_lock_release>
 8006568:	4b04      	ldr	r3, [pc, #16]	; (800657c <__sinit+0x28>)
 800656a:	6223      	str	r3, [r4, #32]
 800656c:	4b04      	ldr	r3, [pc, #16]	; (8006580 <__sinit+0x2c>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1f5      	bne.n	8006560 <__sinit+0xc>
 8006574:	f7ff ffc4 	bl	8006500 <global_stdio_init.part.0>
 8006578:	e7f2      	b.n	8006560 <__sinit+0xc>
 800657a:	bf00      	nop
 800657c:	080064c1 	.word	0x080064c1
 8006580:	20001c48 	.word	0x20001c48

08006584 <_fwalk_sglue>:
 8006584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006588:	4607      	mov	r7, r0
 800658a:	4688      	mov	r8, r1
 800658c:	4614      	mov	r4, r2
 800658e:	2600      	movs	r6, #0
 8006590:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006594:	f1b9 0901 	subs.w	r9, r9, #1
 8006598:	d505      	bpl.n	80065a6 <_fwalk_sglue+0x22>
 800659a:	6824      	ldr	r4, [r4, #0]
 800659c:	2c00      	cmp	r4, #0
 800659e:	d1f7      	bne.n	8006590 <_fwalk_sglue+0xc>
 80065a0:	4630      	mov	r0, r6
 80065a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065a6:	89ab      	ldrh	r3, [r5, #12]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d907      	bls.n	80065bc <_fwalk_sglue+0x38>
 80065ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065b0:	3301      	adds	r3, #1
 80065b2:	d003      	beq.n	80065bc <_fwalk_sglue+0x38>
 80065b4:	4629      	mov	r1, r5
 80065b6:	4638      	mov	r0, r7
 80065b8:	47c0      	blx	r8
 80065ba:	4306      	orrs	r6, r0
 80065bc:	3568      	adds	r5, #104	; 0x68
 80065be:	e7e9      	b.n	8006594 <_fwalk_sglue+0x10>

080065c0 <_puts_r>:
 80065c0:	6a03      	ldr	r3, [r0, #32]
 80065c2:	b570      	push	{r4, r5, r6, lr}
 80065c4:	6884      	ldr	r4, [r0, #8]
 80065c6:	4605      	mov	r5, r0
 80065c8:	460e      	mov	r6, r1
 80065ca:	b90b      	cbnz	r3, 80065d0 <_puts_r+0x10>
 80065cc:	f7ff ffc2 	bl	8006554 <__sinit>
 80065d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065d2:	07db      	lsls	r3, r3, #31
 80065d4:	d405      	bmi.n	80065e2 <_puts_r+0x22>
 80065d6:	89a3      	ldrh	r3, [r4, #12]
 80065d8:	0598      	lsls	r0, r3, #22
 80065da:	d402      	bmi.n	80065e2 <_puts_r+0x22>
 80065dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065de:	f000 f9f2 	bl	80069c6 <__retarget_lock_acquire_recursive>
 80065e2:	89a3      	ldrh	r3, [r4, #12]
 80065e4:	0719      	lsls	r1, r3, #28
 80065e6:	d513      	bpl.n	8006610 <_puts_r+0x50>
 80065e8:	6923      	ldr	r3, [r4, #16]
 80065ea:	b18b      	cbz	r3, 8006610 <_puts_r+0x50>
 80065ec:	3e01      	subs	r6, #1
 80065ee:	68a3      	ldr	r3, [r4, #8]
 80065f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065f4:	3b01      	subs	r3, #1
 80065f6:	60a3      	str	r3, [r4, #8]
 80065f8:	b9e9      	cbnz	r1, 8006636 <_puts_r+0x76>
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	da2e      	bge.n	800665c <_puts_r+0x9c>
 80065fe:	4622      	mov	r2, r4
 8006600:	210a      	movs	r1, #10
 8006602:	4628      	mov	r0, r5
 8006604:	f000 f87b 	bl	80066fe <__swbuf_r>
 8006608:	3001      	adds	r0, #1
 800660a:	d007      	beq.n	800661c <_puts_r+0x5c>
 800660c:	250a      	movs	r5, #10
 800660e:	e007      	b.n	8006620 <_puts_r+0x60>
 8006610:	4621      	mov	r1, r4
 8006612:	4628      	mov	r0, r5
 8006614:	f000 f8b0 	bl	8006778 <__swsetup_r>
 8006618:	2800      	cmp	r0, #0
 800661a:	d0e7      	beq.n	80065ec <_puts_r+0x2c>
 800661c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006620:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006622:	07da      	lsls	r2, r3, #31
 8006624:	d405      	bmi.n	8006632 <_puts_r+0x72>
 8006626:	89a3      	ldrh	r3, [r4, #12]
 8006628:	059b      	lsls	r3, r3, #22
 800662a:	d402      	bmi.n	8006632 <_puts_r+0x72>
 800662c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800662e:	f000 f9cb 	bl	80069c8 <__retarget_lock_release_recursive>
 8006632:	4628      	mov	r0, r5
 8006634:	bd70      	pop	{r4, r5, r6, pc}
 8006636:	2b00      	cmp	r3, #0
 8006638:	da04      	bge.n	8006644 <_puts_r+0x84>
 800663a:	69a2      	ldr	r2, [r4, #24]
 800663c:	429a      	cmp	r2, r3
 800663e:	dc06      	bgt.n	800664e <_puts_r+0x8e>
 8006640:	290a      	cmp	r1, #10
 8006642:	d004      	beq.n	800664e <_puts_r+0x8e>
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	6022      	str	r2, [r4, #0]
 800664a:	7019      	strb	r1, [r3, #0]
 800664c:	e7cf      	b.n	80065ee <_puts_r+0x2e>
 800664e:	4622      	mov	r2, r4
 8006650:	4628      	mov	r0, r5
 8006652:	f000 f854 	bl	80066fe <__swbuf_r>
 8006656:	3001      	adds	r0, #1
 8006658:	d1c9      	bne.n	80065ee <_puts_r+0x2e>
 800665a:	e7df      	b.n	800661c <_puts_r+0x5c>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	250a      	movs	r5, #10
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	6022      	str	r2, [r4, #0]
 8006664:	701d      	strb	r5, [r3, #0]
 8006666:	e7db      	b.n	8006620 <_puts_r+0x60>

08006668 <puts>:
 8006668:	4b02      	ldr	r3, [pc, #8]	; (8006674 <puts+0xc>)
 800666a:	4601      	mov	r1, r0
 800666c:	6818      	ldr	r0, [r3, #0]
 800666e:	f7ff bfa7 	b.w	80065c0 <_puts_r>
 8006672:	bf00      	nop
 8006674:	20000068 	.word	0x20000068

08006678 <__sread>:
 8006678:	b510      	push	{r4, lr}
 800667a:	460c      	mov	r4, r1
 800667c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006680:	f000 f952 	bl	8006928 <_read_r>
 8006684:	2800      	cmp	r0, #0
 8006686:	bfab      	itete	ge
 8006688:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800668a:	89a3      	ldrhlt	r3, [r4, #12]
 800668c:	181b      	addge	r3, r3, r0
 800668e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006692:	bfac      	ite	ge
 8006694:	6563      	strge	r3, [r4, #84]	; 0x54
 8006696:	81a3      	strhlt	r3, [r4, #12]
 8006698:	bd10      	pop	{r4, pc}

0800669a <__swrite>:
 800669a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800669e:	461f      	mov	r7, r3
 80066a0:	898b      	ldrh	r3, [r1, #12]
 80066a2:	05db      	lsls	r3, r3, #23
 80066a4:	4605      	mov	r5, r0
 80066a6:	460c      	mov	r4, r1
 80066a8:	4616      	mov	r6, r2
 80066aa:	d505      	bpl.n	80066b8 <__swrite+0x1e>
 80066ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b0:	2302      	movs	r3, #2
 80066b2:	2200      	movs	r2, #0
 80066b4:	f000 f926 	bl	8006904 <_lseek_r>
 80066b8:	89a3      	ldrh	r3, [r4, #12]
 80066ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066c2:	81a3      	strh	r3, [r4, #12]
 80066c4:	4632      	mov	r2, r6
 80066c6:	463b      	mov	r3, r7
 80066c8:	4628      	mov	r0, r5
 80066ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066ce:	f000 b93d 	b.w	800694c <_write_r>

080066d2 <__sseek>:
 80066d2:	b510      	push	{r4, lr}
 80066d4:	460c      	mov	r4, r1
 80066d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066da:	f000 f913 	bl	8006904 <_lseek_r>
 80066de:	1c43      	adds	r3, r0, #1
 80066e0:	89a3      	ldrh	r3, [r4, #12]
 80066e2:	bf15      	itete	ne
 80066e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80066e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066ee:	81a3      	strheq	r3, [r4, #12]
 80066f0:	bf18      	it	ne
 80066f2:	81a3      	strhne	r3, [r4, #12]
 80066f4:	bd10      	pop	{r4, pc}

080066f6 <__sclose>:
 80066f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066fa:	f000 b89d 	b.w	8006838 <_close_r>

080066fe <__swbuf_r>:
 80066fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006700:	460e      	mov	r6, r1
 8006702:	4614      	mov	r4, r2
 8006704:	4605      	mov	r5, r0
 8006706:	b118      	cbz	r0, 8006710 <__swbuf_r+0x12>
 8006708:	6a03      	ldr	r3, [r0, #32]
 800670a:	b90b      	cbnz	r3, 8006710 <__swbuf_r+0x12>
 800670c:	f7ff ff22 	bl	8006554 <__sinit>
 8006710:	69a3      	ldr	r3, [r4, #24]
 8006712:	60a3      	str	r3, [r4, #8]
 8006714:	89a3      	ldrh	r3, [r4, #12]
 8006716:	071a      	lsls	r2, r3, #28
 8006718:	d525      	bpl.n	8006766 <__swbuf_r+0x68>
 800671a:	6923      	ldr	r3, [r4, #16]
 800671c:	b31b      	cbz	r3, 8006766 <__swbuf_r+0x68>
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	6922      	ldr	r2, [r4, #16]
 8006722:	1a98      	subs	r0, r3, r2
 8006724:	6963      	ldr	r3, [r4, #20]
 8006726:	b2f6      	uxtb	r6, r6
 8006728:	4283      	cmp	r3, r0
 800672a:	4637      	mov	r7, r6
 800672c:	dc04      	bgt.n	8006738 <__swbuf_r+0x3a>
 800672e:	4621      	mov	r1, r4
 8006730:	4628      	mov	r0, r5
 8006732:	f000 fad7 	bl	8006ce4 <_fflush_r>
 8006736:	b9e0      	cbnz	r0, 8006772 <__swbuf_r+0x74>
 8006738:	68a3      	ldr	r3, [r4, #8]
 800673a:	3b01      	subs	r3, #1
 800673c:	60a3      	str	r3, [r4, #8]
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	6022      	str	r2, [r4, #0]
 8006744:	701e      	strb	r6, [r3, #0]
 8006746:	6962      	ldr	r2, [r4, #20]
 8006748:	1c43      	adds	r3, r0, #1
 800674a:	429a      	cmp	r2, r3
 800674c:	d004      	beq.n	8006758 <__swbuf_r+0x5a>
 800674e:	89a3      	ldrh	r3, [r4, #12]
 8006750:	07db      	lsls	r3, r3, #31
 8006752:	d506      	bpl.n	8006762 <__swbuf_r+0x64>
 8006754:	2e0a      	cmp	r6, #10
 8006756:	d104      	bne.n	8006762 <__swbuf_r+0x64>
 8006758:	4621      	mov	r1, r4
 800675a:	4628      	mov	r0, r5
 800675c:	f000 fac2 	bl	8006ce4 <_fflush_r>
 8006760:	b938      	cbnz	r0, 8006772 <__swbuf_r+0x74>
 8006762:	4638      	mov	r0, r7
 8006764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006766:	4621      	mov	r1, r4
 8006768:	4628      	mov	r0, r5
 800676a:	f000 f805 	bl	8006778 <__swsetup_r>
 800676e:	2800      	cmp	r0, #0
 8006770:	d0d5      	beq.n	800671e <__swbuf_r+0x20>
 8006772:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006776:	e7f4      	b.n	8006762 <__swbuf_r+0x64>

08006778 <__swsetup_r>:
 8006778:	b538      	push	{r3, r4, r5, lr}
 800677a:	4b2a      	ldr	r3, [pc, #168]	; (8006824 <__swsetup_r+0xac>)
 800677c:	4605      	mov	r5, r0
 800677e:	6818      	ldr	r0, [r3, #0]
 8006780:	460c      	mov	r4, r1
 8006782:	b118      	cbz	r0, 800678c <__swsetup_r+0x14>
 8006784:	6a03      	ldr	r3, [r0, #32]
 8006786:	b90b      	cbnz	r3, 800678c <__swsetup_r+0x14>
 8006788:	f7ff fee4 	bl	8006554 <__sinit>
 800678c:	89a3      	ldrh	r3, [r4, #12]
 800678e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006792:	0718      	lsls	r0, r3, #28
 8006794:	d422      	bmi.n	80067dc <__swsetup_r+0x64>
 8006796:	06d9      	lsls	r1, r3, #27
 8006798:	d407      	bmi.n	80067aa <__swsetup_r+0x32>
 800679a:	2309      	movs	r3, #9
 800679c:	602b      	str	r3, [r5, #0]
 800679e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067a2:	81a3      	strh	r3, [r4, #12]
 80067a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067a8:	e034      	b.n	8006814 <__swsetup_r+0x9c>
 80067aa:	0758      	lsls	r0, r3, #29
 80067ac:	d512      	bpl.n	80067d4 <__swsetup_r+0x5c>
 80067ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067b0:	b141      	cbz	r1, 80067c4 <__swsetup_r+0x4c>
 80067b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067b6:	4299      	cmp	r1, r3
 80067b8:	d002      	beq.n	80067c0 <__swsetup_r+0x48>
 80067ba:	4628      	mov	r0, r5
 80067bc:	f000 f914 	bl	80069e8 <_free_r>
 80067c0:	2300      	movs	r3, #0
 80067c2:	6363      	str	r3, [r4, #52]	; 0x34
 80067c4:	89a3      	ldrh	r3, [r4, #12]
 80067c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067ca:	81a3      	strh	r3, [r4, #12]
 80067cc:	2300      	movs	r3, #0
 80067ce:	6063      	str	r3, [r4, #4]
 80067d0:	6923      	ldr	r3, [r4, #16]
 80067d2:	6023      	str	r3, [r4, #0]
 80067d4:	89a3      	ldrh	r3, [r4, #12]
 80067d6:	f043 0308 	orr.w	r3, r3, #8
 80067da:	81a3      	strh	r3, [r4, #12]
 80067dc:	6923      	ldr	r3, [r4, #16]
 80067de:	b94b      	cbnz	r3, 80067f4 <__swsetup_r+0x7c>
 80067e0:	89a3      	ldrh	r3, [r4, #12]
 80067e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067ea:	d003      	beq.n	80067f4 <__swsetup_r+0x7c>
 80067ec:	4621      	mov	r1, r4
 80067ee:	4628      	mov	r0, r5
 80067f0:	f000 fac6 	bl	8006d80 <__smakebuf_r>
 80067f4:	89a0      	ldrh	r0, [r4, #12]
 80067f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067fa:	f010 0301 	ands.w	r3, r0, #1
 80067fe:	d00a      	beq.n	8006816 <__swsetup_r+0x9e>
 8006800:	2300      	movs	r3, #0
 8006802:	60a3      	str	r3, [r4, #8]
 8006804:	6963      	ldr	r3, [r4, #20]
 8006806:	425b      	negs	r3, r3
 8006808:	61a3      	str	r3, [r4, #24]
 800680a:	6923      	ldr	r3, [r4, #16]
 800680c:	b943      	cbnz	r3, 8006820 <__swsetup_r+0xa8>
 800680e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006812:	d1c4      	bne.n	800679e <__swsetup_r+0x26>
 8006814:	bd38      	pop	{r3, r4, r5, pc}
 8006816:	0781      	lsls	r1, r0, #30
 8006818:	bf58      	it	pl
 800681a:	6963      	ldrpl	r3, [r4, #20]
 800681c:	60a3      	str	r3, [r4, #8]
 800681e:	e7f4      	b.n	800680a <__swsetup_r+0x92>
 8006820:	2000      	movs	r0, #0
 8006822:	e7f7      	b.n	8006814 <__swsetup_r+0x9c>
 8006824:	20000068 	.word	0x20000068

08006828 <memset>:
 8006828:	4402      	add	r2, r0
 800682a:	4603      	mov	r3, r0
 800682c:	4293      	cmp	r3, r2
 800682e:	d100      	bne.n	8006832 <memset+0xa>
 8006830:	4770      	bx	lr
 8006832:	f803 1b01 	strb.w	r1, [r3], #1
 8006836:	e7f9      	b.n	800682c <memset+0x4>

08006838 <_close_r>:
 8006838:	b538      	push	{r3, r4, r5, lr}
 800683a:	4d06      	ldr	r5, [pc, #24]	; (8006854 <_close_r+0x1c>)
 800683c:	2300      	movs	r3, #0
 800683e:	4604      	mov	r4, r0
 8006840:	4608      	mov	r0, r1
 8006842:	602b      	str	r3, [r5, #0]
 8006844:	f7fa f8e0 	bl	8000a08 <_close>
 8006848:	1c43      	adds	r3, r0, #1
 800684a:	d102      	bne.n	8006852 <_close_r+0x1a>
 800684c:	682b      	ldr	r3, [r5, #0]
 800684e:	b103      	cbz	r3, 8006852 <_close_r+0x1a>
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	bd38      	pop	{r3, r4, r5, pc}
 8006854:	20001c4c 	.word	0x20001c4c

08006858 <_reclaim_reent>:
 8006858:	4b29      	ldr	r3, [pc, #164]	; (8006900 <_reclaim_reent+0xa8>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4283      	cmp	r3, r0
 800685e:	b570      	push	{r4, r5, r6, lr}
 8006860:	4604      	mov	r4, r0
 8006862:	d04b      	beq.n	80068fc <_reclaim_reent+0xa4>
 8006864:	69c3      	ldr	r3, [r0, #28]
 8006866:	b143      	cbz	r3, 800687a <_reclaim_reent+0x22>
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d144      	bne.n	80068f8 <_reclaim_reent+0xa0>
 800686e:	69e3      	ldr	r3, [r4, #28]
 8006870:	6819      	ldr	r1, [r3, #0]
 8006872:	b111      	cbz	r1, 800687a <_reclaim_reent+0x22>
 8006874:	4620      	mov	r0, r4
 8006876:	f000 f8b7 	bl	80069e8 <_free_r>
 800687a:	6961      	ldr	r1, [r4, #20]
 800687c:	b111      	cbz	r1, 8006884 <_reclaim_reent+0x2c>
 800687e:	4620      	mov	r0, r4
 8006880:	f000 f8b2 	bl	80069e8 <_free_r>
 8006884:	69e1      	ldr	r1, [r4, #28]
 8006886:	b111      	cbz	r1, 800688e <_reclaim_reent+0x36>
 8006888:	4620      	mov	r0, r4
 800688a:	f000 f8ad 	bl	80069e8 <_free_r>
 800688e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006890:	b111      	cbz	r1, 8006898 <_reclaim_reent+0x40>
 8006892:	4620      	mov	r0, r4
 8006894:	f000 f8a8 	bl	80069e8 <_free_r>
 8006898:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800689a:	b111      	cbz	r1, 80068a2 <_reclaim_reent+0x4a>
 800689c:	4620      	mov	r0, r4
 800689e:	f000 f8a3 	bl	80069e8 <_free_r>
 80068a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80068a4:	b111      	cbz	r1, 80068ac <_reclaim_reent+0x54>
 80068a6:	4620      	mov	r0, r4
 80068a8:	f000 f89e 	bl	80069e8 <_free_r>
 80068ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80068ae:	b111      	cbz	r1, 80068b6 <_reclaim_reent+0x5e>
 80068b0:	4620      	mov	r0, r4
 80068b2:	f000 f899 	bl	80069e8 <_free_r>
 80068b6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80068b8:	b111      	cbz	r1, 80068c0 <_reclaim_reent+0x68>
 80068ba:	4620      	mov	r0, r4
 80068bc:	f000 f894 	bl	80069e8 <_free_r>
 80068c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80068c2:	b111      	cbz	r1, 80068ca <_reclaim_reent+0x72>
 80068c4:	4620      	mov	r0, r4
 80068c6:	f000 f88f 	bl	80069e8 <_free_r>
 80068ca:	6a23      	ldr	r3, [r4, #32]
 80068cc:	b1b3      	cbz	r3, 80068fc <_reclaim_reent+0xa4>
 80068ce:	4620      	mov	r0, r4
 80068d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80068d4:	4718      	bx	r3
 80068d6:	5949      	ldr	r1, [r1, r5]
 80068d8:	b941      	cbnz	r1, 80068ec <_reclaim_reent+0x94>
 80068da:	3504      	adds	r5, #4
 80068dc:	69e3      	ldr	r3, [r4, #28]
 80068de:	2d80      	cmp	r5, #128	; 0x80
 80068e0:	68d9      	ldr	r1, [r3, #12]
 80068e2:	d1f8      	bne.n	80068d6 <_reclaim_reent+0x7e>
 80068e4:	4620      	mov	r0, r4
 80068e6:	f000 f87f 	bl	80069e8 <_free_r>
 80068ea:	e7c0      	b.n	800686e <_reclaim_reent+0x16>
 80068ec:	680e      	ldr	r6, [r1, #0]
 80068ee:	4620      	mov	r0, r4
 80068f0:	f000 f87a 	bl	80069e8 <_free_r>
 80068f4:	4631      	mov	r1, r6
 80068f6:	e7ef      	b.n	80068d8 <_reclaim_reent+0x80>
 80068f8:	2500      	movs	r5, #0
 80068fa:	e7ef      	b.n	80068dc <_reclaim_reent+0x84>
 80068fc:	bd70      	pop	{r4, r5, r6, pc}
 80068fe:	bf00      	nop
 8006900:	20000068 	.word	0x20000068

08006904 <_lseek_r>:
 8006904:	b538      	push	{r3, r4, r5, lr}
 8006906:	4d07      	ldr	r5, [pc, #28]	; (8006924 <_lseek_r+0x20>)
 8006908:	4604      	mov	r4, r0
 800690a:	4608      	mov	r0, r1
 800690c:	4611      	mov	r1, r2
 800690e:	2200      	movs	r2, #0
 8006910:	602a      	str	r2, [r5, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	f7fa f89f 	bl	8000a56 <_lseek>
 8006918:	1c43      	adds	r3, r0, #1
 800691a:	d102      	bne.n	8006922 <_lseek_r+0x1e>
 800691c:	682b      	ldr	r3, [r5, #0]
 800691e:	b103      	cbz	r3, 8006922 <_lseek_r+0x1e>
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	20001c4c 	.word	0x20001c4c

08006928 <_read_r>:
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	4d07      	ldr	r5, [pc, #28]	; (8006948 <_read_r+0x20>)
 800692c:	4604      	mov	r4, r0
 800692e:	4608      	mov	r0, r1
 8006930:	4611      	mov	r1, r2
 8006932:	2200      	movs	r2, #0
 8006934:	602a      	str	r2, [r5, #0]
 8006936:	461a      	mov	r2, r3
 8006938:	f7fa f832 	bl	80009a0 <_read>
 800693c:	1c43      	adds	r3, r0, #1
 800693e:	d102      	bne.n	8006946 <_read_r+0x1e>
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	b103      	cbz	r3, 8006946 <_read_r+0x1e>
 8006944:	6023      	str	r3, [r4, #0]
 8006946:	bd38      	pop	{r3, r4, r5, pc}
 8006948:	20001c4c 	.word	0x20001c4c

0800694c <_write_r>:
 800694c:	b538      	push	{r3, r4, r5, lr}
 800694e:	4d07      	ldr	r5, [pc, #28]	; (800696c <_write_r+0x20>)
 8006950:	4604      	mov	r4, r0
 8006952:	4608      	mov	r0, r1
 8006954:	4611      	mov	r1, r2
 8006956:	2200      	movs	r2, #0
 8006958:	602a      	str	r2, [r5, #0]
 800695a:	461a      	mov	r2, r3
 800695c:	f7fa f83e 	bl	80009dc <_write>
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	d102      	bne.n	800696a <_write_r+0x1e>
 8006964:	682b      	ldr	r3, [r5, #0]
 8006966:	b103      	cbz	r3, 800696a <_write_r+0x1e>
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	bd38      	pop	{r3, r4, r5, pc}
 800696c:	20001c4c 	.word	0x20001c4c

08006970 <__errno>:
 8006970:	4b01      	ldr	r3, [pc, #4]	; (8006978 <__errno+0x8>)
 8006972:	6818      	ldr	r0, [r3, #0]
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	20000068 	.word	0x20000068

0800697c <__libc_init_array>:
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	4d0d      	ldr	r5, [pc, #52]	; (80069b4 <__libc_init_array+0x38>)
 8006980:	4c0d      	ldr	r4, [pc, #52]	; (80069b8 <__libc_init_array+0x3c>)
 8006982:	1b64      	subs	r4, r4, r5
 8006984:	10a4      	asrs	r4, r4, #2
 8006986:	2600      	movs	r6, #0
 8006988:	42a6      	cmp	r6, r4
 800698a:	d109      	bne.n	80069a0 <__libc_init_array+0x24>
 800698c:	4d0b      	ldr	r5, [pc, #44]	; (80069bc <__libc_init_array+0x40>)
 800698e:	4c0c      	ldr	r4, [pc, #48]	; (80069c0 <__libc_init_array+0x44>)
 8006990:	f000 fa64 	bl	8006e5c <_init>
 8006994:	1b64      	subs	r4, r4, r5
 8006996:	10a4      	asrs	r4, r4, #2
 8006998:	2600      	movs	r6, #0
 800699a:	42a6      	cmp	r6, r4
 800699c:	d105      	bne.n	80069aa <__libc_init_array+0x2e>
 800699e:	bd70      	pop	{r4, r5, r6, pc}
 80069a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a4:	4798      	blx	r3
 80069a6:	3601      	adds	r6, #1
 80069a8:	e7ee      	b.n	8006988 <__libc_init_array+0xc>
 80069aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ae:	4798      	blx	r3
 80069b0:	3601      	adds	r6, #1
 80069b2:	e7f2      	b.n	800699a <__libc_init_array+0x1e>
 80069b4:	08006ff0 	.word	0x08006ff0
 80069b8:	08006ff0 	.word	0x08006ff0
 80069bc:	08006ff0 	.word	0x08006ff0
 80069c0:	08006ff4 	.word	0x08006ff4

080069c4 <__retarget_lock_init_recursive>:
 80069c4:	4770      	bx	lr

080069c6 <__retarget_lock_acquire_recursive>:
 80069c6:	4770      	bx	lr

080069c8 <__retarget_lock_release_recursive>:
 80069c8:	4770      	bx	lr

080069ca <memcpy>:
 80069ca:	440a      	add	r2, r1
 80069cc:	4291      	cmp	r1, r2
 80069ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80069d2:	d100      	bne.n	80069d6 <memcpy+0xc>
 80069d4:	4770      	bx	lr
 80069d6:	b510      	push	{r4, lr}
 80069d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069e0:	4291      	cmp	r1, r2
 80069e2:	d1f9      	bne.n	80069d8 <memcpy+0xe>
 80069e4:	bd10      	pop	{r4, pc}
	...

080069e8 <_free_r>:
 80069e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069ea:	2900      	cmp	r1, #0
 80069ec:	d044      	beq.n	8006a78 <_free_r+0x90>
 80069ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069f2:	9001      	str	r0, [sp, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f1a1 0404 	sub.w	r4, r1, #4
 80069fa:	bfb8      	it	lt
 80069fc:	18e4      	addlt	r4, r4, r3
 80069fe:	f000 f8df 	bl	8006bc0 <__malloc_lock>
 8006a02:	4a1e      	ldr	r2, [pc, #120]	; (8006a7c <_free_r+0x94>)
 8006a04:	9801      	ldr	r0, [sp, #4]
 8006a06:	6813      	ldr	r3, [r2, #0]
 8006a08:	b933      	cbnz	r3, 8006a18 <_free_r+0x30>
 8006a0a:	6063      	str	r3, [r4, #4]
 8006a0c:	6014      	str	r4, [r2, #0]
 8006a0e:	b003      	add	sp, #12
 8006a10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a14:	f000 b8da 	b.w	8006bcc <__malloc_unlock>
 8006a18:	42a3      	cmp	r3, r4
 8006a1a:	d908      	bls.n	8006a2e <_free_r+0x46>
 8006a1c:	6825      	ldr	r5, [r4, #0]
 8006a1e:	1961      	adds	r1, r4, r5
 8006a20:	428b      	cmp	r3, r1
 8006a22:	bf01      	itttt	eq
 8006a24:	6819      	ldreq	r1, [r3, #0]
 8006a26:	685b      	ldreq	r3, [r3, #4]
 8006a28:	1949      	addeq	r1, r1, r5
 8006a2a:	6021      	streq	r1, [r4, #0]
 8006a2c:	e7ed      	b.n	8006a0a <_free_r+0x22>
 8006a2e:	461a      	mov	r2, r3
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	b10b      	cbz	r3, 8006a38 <_free_r+0x50>
 8006a34:	42a3      	cmp	r3, r4
 8006a36:	d9fa      	bls.n	8006a2e <_free_r+0x46>
 8006a38:	6811      	ldr	r1, [r2, #0]
 8006a3a:	1855      	adds	r5, r2, r1
 8006a3c:	42a5      	cmp	r5, r4
 8006a3e:	d10b      	bne.n	8006a58 <_free_r+0x70>
 8006a40:	6824      	ldr	r4, [r4, #0]
 8006a42:	4421      	add	r1, r4
 8006a44:	1854      	adds	r4, r2, r1
 8006a46:	42a3      	cmp	r3, r4
 8006a48:	6011      	str	r1, [r2, #0]
 8006a4a:	d1e0      	bne.n	8006a0e <_free_r+0x26>
 8006a4c:	681c      	ldr	r4, [r3, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	6053      	str	r3, [r2, #4]
 8006a52:	440c      	add	r4, r1
 8006a54:	6014      	str	r4, [r2, #0]
 8006a56:	e7da      	b.n	8006a0e <_free_r+0x26>
 8006a58:	d902      	bls.n	8006a60 <_free_r+0x78>
 8006a5a:	230c      	movs	r3, #12
 8006a5c:	6003      	str	r3, [r0, #0]
 8006a5e:	e7d6      	b.n	8006a0e <_free_r+0x26>
 8006a60:	6825      	ldr	r5, [r4, #0]
 8006a62:	1961      	adds	r1, r4, r5
 8006a64:	428b      	cmp	r3, r1
 8006a66:	bf04      	itt	eq
 8006a68:	6819      	ldreq	r1, [r3, #0]
 8006a6a:	685b      	ldreq	r3, [r3, #4]
 8006a6c:	6063      	str	r3, [r4, #4]
 8006a6e:	bf04      	itt	eq
 8006a70:	1949      	addeq	r1, r1, r5
 8006a72:	6021      	streq	r1, [r4, #0]
 8006a74:	6054      	str	r4, [r2, #4]
 8006a76:	e7ca      	b.n	8006a0e <_free_r+0x26>
 8006a78:	b003      	add	sp, #12
 8006a7a:	bd30      	pop	{r4, r5, pc}
 8006a7c:	20001c54 	.word	0x20001c54

08006a80 <sbrk_aligned>:
 8006a80:	b570      	push	{r4, r5, r6, lr}
 8006a82:	4e0e      	ldr	r6, [pc, #56]	; (8006abc <sbrk_aligned+0x3c>)
 8006a84:	460c      	mov	r4, r1
 8006a86:	6831      	ldr	r1, [r6, #0]
 8006a88:	4605      	mov	r5, r0
 8006a8a:	b911      	cbnz	r1, 8006a92 <sbrk_aligned+0x12>
 8006a8c:	f000 f9d6 	bl	8006e3c <_sbrk_r>
 8006a90:	6030      	str	r0, [r6, #0]
 8006a92:	4621      	mov	r1, r4
 8006a94:	4628      	mov	r0, r5
 8006a96:	f000 f9d1 	bl	8006e3c <_sbrk_r>
 8006a9a:	1c43      	adds	r3, r0, #1
 8006a9c:	d00a      	beq.n	8006ab4 <sbrk_aligned+0x34>
 8006a9e:	1cc4      	adds	r4, r0, #3
 8006aa0:	f024 0403 	bic.w	r4, r4, #3
 8006aa4:	42a0      	cmp	r0, r4
 8006aa6:	d007      	beq.n	8006ab8 <sbrk_aligned+0x38>
 8006aa8:	1a21      	subs	r1, r4, r0
 8006aaa:	4628      	mov	r0, r5
 8006aac:	f000 f9c6 	bl	8006e3c <_sbrk_r>
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	d101      	bne.n	8006ab8 <sbrk_aligned+0x38>
 8006ab4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006ab8:	4620      	mov	r0, r4
 8006aba:	bd70      	pop	{r4, r5, r6, pc}
 8006abc:	20001c58 	.word	0x20001c58

08006ac0 <_malloc_r>:
 8006ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ac4:	1ccd      	adds	r5, r1, #3
 8006ac6:	f025 0503 	bic.w	r5, r5, #3
 8006aca:	3508      	adds	r5, #8
 8006acc:	2d0c      	cmp	r5, #12
 8006ace:	bf38      	it	cc
 8006ad0:	250c      	movcc	r5, #12
 8006ad2:	2d00      	cmp	r5, #0
 8006ad4:	4607      	mov	r7, r0
 8006ad6:	db01      	blt.n	8006adc <_malloc_r+0x1c>
 8006ad8:	42a9      	cmp	r1, r5
 8006ada:	d905      	bls.n	8006ae8 <_malloc_r+0x28>
 8006adc:	230c      	movs	r3, #12
 8006ade:	603b      	str	r3, [r7, #0]
 8006ae0:	2600      	movs	r6, #0
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ae8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006bbc <_malloc_r+0xfc>
 8006aec:	f000 f868 	bl	8006bc0 <__malloc_lock>
 8006af0:	f8d8 3000 	ldr.w	r3, [r8]
 8006af4:	461c      	mov	r4, r3
 8006af6:	bb5c      	cbnz	r4, 8006b50 <_malloc_r+0x90>
 8006af8:	4629      	mov	r1, r5
 8006afa:	4638      	mov	r0, r7
 8006afc:	f7ff ffc0 	bl	8006a80 <sbrk_aligned>
 8006b00:	1c43      	adds	r3, r0, #1
 8006b02:	4604      	mov	r4, r0
 8006b04:	d155      	bne.n	8006bb2 <_malloc_r+0xf2>
 8006b06:	f8d8 4000 	ldr.w	r4, [r8]
 8006b0a:	4626      	mov	r6, r4
 8006b0c:	2e00      	cmp	r6, #0
 8006b0e:	d145      	bne.n	8006b9c <_malloc_r+0xdc>
 8006b10:	2c00      	cmp	r4, #0
 8006b12:	d048      	beq.n	8006ba6 <_malloc_r+0xe6>
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	4631      	mov	r1, r6
 8006b18:	4638      	mov	r0, r7
 8006b1a:	eb04 0903 	add.w	r9, r4, r3
 8006b1e:	f000 f98d 	bl	8006e3c <_sbrk_r>
 8006b22:	4581      	cmp	r9, r0
 8006b24:	d13f      	bne.n	8006ba6 <_malloc_r+0xe6>
 8006b26:	6821      	ldr	r1, [r4, #0]
 8006b28:	1a6d      	subs	r5, r5, r1
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	4638      	mov	r0, r7
 8006b2e:	f7ff ffa7 	bl	8006a80 <sbrk_aligned>
 8006b32:	3001      	adds	r0, #1
 8006b34:	d037      	beq.n	8006ba6 <_malloc_r+0xe6>
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	442b      	add	r3, r5
 8006b3a:	6023      	str	r3, [r4, #0]
 8006b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d038      	beq.n	8006bb6 <_malloc_r+0xf6>
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	42a2      	cmp	r2, r4
 8006b48:	d12b      	bne.n	8006ba2 <_malloc_r+0xe2>
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	605a      	str	r2, [r3, #4]
 8006b4e:	e00f      	b.n	8006b70 <_malloc_r+0xb0>
 8006b50:	6822      	ldr	r2, [r4, #0]
 8006b52:	1b52      	subs	r2, r2, r5
 8006b54:	d41f      	bmi.n	8006b96 <_malloc_r+0xd6>
 8006b56:	2a0b      	cmp	r2, #11
 8006b58:	d917      	bls.n	8006b8a <_malloc_r+0xca>
 8006b5a:	1961      	adds	r1, r4, r5
 8006b5c:	42a3      	cmp	r3, r4
 8006b5e:	6025      	str	r5, [r4, #0]
 8006b60:	bf18      	it	ne
 8006b62:	6059      	strne	r1, [r3, #4]
 8006b64:	6863      	ldr	r3, [r4, #4]
 8006b66:	bf08      	it	eq
 8006b68:	f8c8 1000 	streq.w	r1, [r8]
 8006b6c:	5162      	str	r2, [r4, r5]
 8006b6e:	604b      	str	r3, [r1, #4]
 8006b70:	4638      	mov	r0, r7
 8006b72:	f104 060b 	add.w	r6, r4, #11
 8006b76:	f000 f829 	bl	8006bcc <__malloc_unlock>
 8006b7a:	f026 0607 	bic.w	r6, r6, #7
 8006b7e:	1d23      	adds	r3, r4, #4
 8006b80:	1af2      	subs	r2, r6, r3
 8006b82:	d0ae      	beq.n	8006ae2 <_malloc_r+0x22>
 8006b84:	1b9b      	subs	r3, r3, r6
 8006b86:	50a3      	str	r3, [r4, r2]
 8006b88:	e7ab      	b.n	8006ae2 <_malloc_r+0x22>
 8006b8a:	42a3      	cmp	r3, r4
 8006b8c:	6862      	ldr	r2, [r4, #4]
 8006b8e:	d1dd      	bne.n	8006b4c <_malloc_r+0x8c>
 8006b90:	f8c8 2000 	str.w	r2, [r8]
 8006b94:	e7ec      	b.n	8006b70 <_malloc_r+0xb0>
 8006b96:	4623      	mov	r3, r4
 8006b98:	6864      	ldr	r4, [r4, #4]
 8006b9a:	e7ac      	b.n	8006af6 <_malloc_r+0x36>
 8006b9c:	4634      	mov	r4, r6
 8006b9e:	6876      	ldr	r6, [r6, #4]
 8006ba0:	e7b4      	b.n	8006b0c <_malloc_r+0x4c>
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	e7cc      	b.n	8006b40 <_malloc_r+0x80>
 8006ba6:	230c      	movs	r3, #12
 8006ba8:	603b      	str	r3, [r7, #0]
 8006baa:	4638      	mov	r0, r7
 8006bac:	f000 f80e 	bl	8006bcc <__malloc_unlock>
 8006bb0:	e797      	b.n	8006ae2 <_malloc_r+0x22>
 8006bb2:	6025      	str	r5, [r4, #0]
 8006bb4:	e7dc      	b.n	8006b70 <_malloc_r+0xb0>
 8006bb6:	605b      	str	r3, [r3, #4]
 8006bb8:	deff      	udf	#255	; 0xff
 8006bba:	bf00      	nop
 8006bbc:	20001c54 	.word	0x20001c54

08006bc0 <__malloc_lock>:
 8006bc0:	4801      	ldr	r0, [pc, #4]	; (8006bc8 <__malloc_lock+0x8>)
 8006bc2:	f7ff bf00 	b.w	80069c6 <__retarget_lock_acquire_recursive>
 8006bc6:	bf00      	nop
 8006bc8:	20001c50 	.word	0x20001c50

08006bcc <__malloc_unlock>:
 8006bcc:	4801      	ldr	r0, [pc, #4]	; (8006bd4 <__malloc_unlock+0x8>)
 8006bce:	f7ff befb 	b.w	80069c8 <__retarget_lock_release_recursive>
 8006bd2:	bf00      	nop
 8006bd4:	20001c50 	.word	0x20001c50

08006bd8 <__sflush_r>:
 8006bd8:	898a      	ldrh	r2, [r1, #12]
 8006bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bde:	4605      	mov	r5, r0
 8006be0:	0710      	lsls	r0, r2, #28
 8006be2:	460c      	mov	r4, r1
 8006be4:	d458      	bmi.n	8006c98 <__sflush_r+0xc0>
 8006be6:	684b      	ldr	r3, [r1, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	dc05      	bgt.n	8006bf8 <__sflush_r+0x20>
 8006bec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	dc02      	bgt.n	8006bf8 <__sflush_r+0x20>
 8006bf2:	2000      	movs	r0, #0
 8006bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bfa:	2e00      	cmp	r6, #0
 8006bfc:	d0f9      	beq.n	8006bf2 <__sflush_r+0x1a>
 8006bfe:	2300      	movs	r3, #0
 8006c00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c04:	682f      	ldr	r7, [r5, #0]
 8006c06:	6a21      	ldr	r1, [r4, #32]
 8006c08:	602b      	str	r3, [r5, #0]
 8006c0a:	d032      	beq.n	8006c72 <__sflush_r+0x9a>
 8006c0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	075a      	lsls	r2, r3, #29
 8006c12:	d505      	bpl.n	8006c20 <__sflush_r+0x48>
 8006c14:	6863      	ldr	r3, [r4, #4]
 8006c16:	1ac0      	subs	r0, r0, r3
 8006c18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c1a:	b10b      	cbz	r3, 8006c20 <__sflush_r+0x48>
 8006c1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c1e:	1ac0      	subs	r0, r0, r3
 8006c20:	2300      	movs	r3, #0
 8006c22:	4602      	mov	r2, r0
 8006c24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c26:	6a21      	ldr	r1, [r4, #32]
 8006c28:	4628      	mov	r0, r5
 8006c2a:	47b0      	blx	r6
 8006c2c:	1c43      	adds	r3, r0, #1
 8006c2e:	89a3      	ldrh	r3, [r4, #12]
 8006c30:	d106      	bne.n	8006c40 <__sflush_r+0x68>
 8006c32:	6829      	ldr	r1, [r5, #0]
 8006c34:	291d      	cmp	r1, #29
 8006c36:	d82b      	bhi.n	8006c90 <__sflush_r+0xb8>
 8006c38:	4a29      	ldr	r2, [pc, #164]	; (8006ce0 <__sflush_r+0x108>)
 8006c3a:	410a      	asrs	r2, r1
 8006c3c:	07d6      	lsls	r6, r2, #31
 8006c3e:	d427      	bmi.n	8006c90 <__sflush_r+0xb8>
 8006c40:	2200      	movs	r2, #0
 8006c42:	6062      	str	r2, [r4, #4]
 8006c44:	04d9      	lsls	r1, r3, #19
 8006c46:	6922      	ldr	r2, [r4, #16]
 8006c48:	6022      	str	r2, [r4, #0]
 8006c4a:	d504      	bpl.n	8006c56 <__sflush_r+0x7e>
 8006c4c:	1c42      	adds	r2, r0, #1
 8006c4e:	d101      	bne.n	8006c54 <__sflush_r+0x7c>
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	b903      	cbnz	r3, 8006c56 <__sflush_r+0x7e>
 8006c54:	6560      	str	r0, [r4, #84]	; 0x54
 8006c56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c58:	602f      	str	r7, [r5, #0]
 8006c5a:	2900      	cmp	r1, #0
 8006c5c:	d0c9      	beq.n	8006bf2 <__sflush_r+0x1a>
 8006c5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c62:	4299      	cmp	r1, r3
 8006c64:	d002      	beq.n	8006c6c <__sflush_r+0x94>
 8006c66:	4628      	mov	r0, r5
 8006c68:	f7ff febe 	bl	80069e8 <_free_r>
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	6360      	str	r0, [r4, #52]	; 0x34
 8006c70:	e7c0      	b.n	8006bf4 <__sflush_r+0x1c>
 8006c72:	2301      	movs	r3, #1
 8006c74:	4628      	mov	r0, r5
 8006c76:	47b0      	blx	r6
 8006c78:	1c41      	adds	r1, r0, #1
 8006c7a:	d1c8      	bne.n	8006c0e <__sflush_r+0x36>
 8006c7c:	682b      	ldr	r3, [r5, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d0c5      	beq.n	8006c0e <__sflush_r+0x36>
 8006c82:	2b1d      	cmp	r3, #29
 8006c84:	d001      	beq.n	8006c8a <__sflush_r+0xb2>
 8006c86:	2b16      	cmp	r3, #22
 8006c88:	d101      	bne.n	8006c8e <__sflush_r+0xb6>
 8006c8a:	602f      	str	r7, [r5, #0]
 8006c8c:	e7b1      	b.n	8006bf2 <__sflush_r+0x1a>
 8006c8e:	89a3      	ldrh	r3, [r4, #12]
 8006c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c94:	81a3      	strh	r3, [r4, #12]
 8006c96:	e7ad      	b.n	8006bf4 <__sflush_r+0x1c>
 8006c98:	690f      	ldr	r7, [r1, #16]
 8006c9a:	2f00      	cmp	r7, #0
 8006c9c:	d0a9      	beq.n	8006bf2 <__sflush_r+0x1a>
 8006c9e:	0793      	lsls	r3, r2, #30
 8006ca0:	680e      	ldr	r6, [r1, #0]
 8006ca2:	bf08      	it	eq
 8006ca4:	694b      	ldreq	r3, [r1, #20]
 8006ca6:	600f      	str	r7, [r1, #0]
 8006ca8:	bf18      	it	ne
 8006caa:	2300      	movne	r3, #0
 8006cac:	eba6 0807 	sub.w	r8, r6, r7
 8006cb0:	608b      	str	r3, [r1, #8]
 8006cb2:	f1b8 0f00 	cmp.w	r8, #0
 8006cb6:	dd9c      	ble.n	8006bf2 <__sflush_r+0x1a>
 8006cb8:	6a21      	ldr	r1, [r4, #32]
 8006cba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006cbc:	4643      	mov	r3, r8
 8006cbe:	463a      	mov	r2, r7
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	47b0      	blx	r6
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	dc06      	bgt.n	8006cd6 <__sflush_r+0xfe>
 8006cc8:	89a3      	ldrh	r3, [r4, #12]
 8006cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cce:	81a3      	strh	r3, [r4, #12]
 8006cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cd4:	e78e      	b.n	8006bf4 <__sflush_r+0x1c>
 8006cd6:	4407      	add	r7, r0
 8006cd8:	eba8 0800 	sub.w	r8, r8, r0
 8006cdc:	e7e9      	b.n	8006cb2 <__sflush_r+0xda>
 8006cde:	bf00      	nop
 8006ce0:	dfbffffe 	.word	0xdfbffffe

08006ce4 <_fflush_r>:
 8006ce4:	b538      	push	{r3, r4, r5, lr}
 8006ce6:	690b      	ldr	r3, [r1, #16]
 8006ce8:	4605      	mov	r5, r0
 8006cea:	460c      	mov	r4, r1
 8006cec:	b913      	cbnz	r3, 8006cf4 <_fflush_r+0x10>
 8006cee:	2500      	movs	r5, #0
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	bd38      	pop	{r3, r4, r5, pc}
 8006cf4:	b118      	cbz	r0, 8006cfe <_fflush_r+0x1a>
 8006cf6:	6a03      	ldr	r3, [r0, #32]
 8006cf8:	b90b      	cbnz	r3, 8006cfe <_fflush_r+0x1a>
 8006cfa:	f7ff fc2b 	bl	8006554 <__sinit>
 8006cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d0f3      	beq.n	8006cee <_fflush_r+0xa>
 8006d06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d08:	07d0      	lsls	r0, r2, #31
 8006d0a:	d404      	bmi.n	8006d16 <_fflush_r+0x32>
 8006d0c:	0599      	lsls	r1, r3, #22
 8006d0e:	d402      	bmi.n	8006d16 <_fflush_r+0x32>
 8006d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d12:	f7ff fe58 	bl	80069c6 <__retarget_lock_acquire_recursive>
 8006d16:	4628      	mov	r0, r5
 8006d18:	4621      	mov	r1, r4
 8006d1a:	f7ff ff5d 	bl	8006bd8 <__sflush_r>
 8006d1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d20:	07da      	lsls	r2, r3, #31
 8006d22:	4605      	mov	r5, r0
 8006d24:	d4e4      	bmi.n	8006cf0 <_fflush_r+0xc>
 8006d26:	89a3      	ldrh	r3, [r4, #12]
 8006d28:	059b      	lsls	r3, r3, #22
 8006d2a:	d4e1      	bmi.n	8006cf0 <_fflush_r+0xc>
 8006d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d2e:	f7ff fe4b 	bl	80069c8 <__retarget_lock_release_recursive>
 8006d32:	e7dd      	b.n	8006cf0 <_fflush_r+0xc>

08006d34 <__swhatbuf_r>:
 8006d34:	b570      	push	{r4, r5, r6, lr}
 8006d36:	460c      	mov	r4, r1
 8006d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d3c:	2900      	cmp	r1, #0
 8006d3e:	b096      	sub	sp, #88	; 0x58
 8006d40:	4615      	mov	r5, r2
 8006d42:	461e      	mov	r6, r3
 8006d44:	da0d      	bge.n	8006d62 <__swhatbuf_r+0x2e>
 8006d46:	89a3      	ldrh	r3, [r4, #12]
 8006d48:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006d4c:	f04f 0100 	mov.w	r1, #0
 8006d50:	bf0c      	ite	eq
 8006d52:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006d56:	2340      	movne	r3, #64	; 0x40
 8006d58:	2000      	movs	r0, #0
 8006d5a:	6031      	str	r1, [r6, #0]
 8006d5c:	602b      	str	r3, [r5, #0]
 8006d5e:	b016      	add	sp, #88	; 0x58
 8006d60:	bd70      	pop	{r4, r5, r6, pc}
 8006d62:	466a      	mov	r2, sp
 8006d64:	f000 f848 	bl	8006df8 <_fstat_r>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	dbec      	blt.n	8006d46 <__swhatbuf_r+0x12>
 8006d6c:	9901      	ldr	r1, [sp, #4]
 8006d6e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006d72:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006d76:	4259      	negs	r1, r3
 8006d78:	4159      	adcs	r1, r3
 8006d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d7e:	e7eb      	b.n	8006d58 <__swhatbuf_r+0x24>

08006d80 <__smakebuf_r>:
 8006d80:	898b      	ldrh	r3, [r1, #12]
 8006d82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d84:	079d      	lsls	r5, r3, #30
 8006d86:	4606      	mov	r6, r0
 8006d88:	460c      	mov	r4, r1
 8006d8a:	d507      	bpl.n	8006d9c <__smakebuf_r+0x1c>
 8006d8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	6123      	str	r3, [r4, #16]
 8006d94:	2301      	movs	r3, #1
 8006d96:	6163      	str	r3, [r4, #20]
 8006d98:	b002      	add	sp, #8
 8006d9a:	bd70      	pop	{r4, r5, r6, pc}
 8006d9c:	ab01      	add	r3, sp, #4
 8006d9e:	466a      	mov	r2, sp
 8006da0:	f7ff ffc8 	bl	8006d34 <__swhatbuf_r>
 8006da4:	9900      	ldr	r1, [sp, #0]
 8006da6:	4605      	mov	r5, r0
 8006da8:	4630      	mov	r0, r6
 8006daa:	f7ff fe89 	bl	8006ac0 <_malloc_r>
 8006dae:	b948      	cbnz	r0, 8006dc4 <__smakebuf_r+0x44>
 8006db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006db4:	059a      	lsls	r2, r3, #22
 8006db6:	d4ef      	bmi.n	8006d98 <__smakebuf_r+0x18>
 8006db8:	f023 0303 	bic.w	r3, r3, #3
 8006dbc:	f043 0302 	orr.w	r3, r3, #2
 8006dc0:	81a3      	strh	r3, [r4, #12]
 8006dc2:	e7e3      	b.n	8006d8c <__smakebuf_r+0xc>
 8006dc4:	89a3      	ldrh	r3, [r4, #12]
 8006dc6:	6020      	str	r0, [r4, #0]
 8006dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dcc:	81a3      	strh	r3, [r4, #12]
 8006dce:	9b00      	ldr	r3, [sp, #0]
 8006dd0:	6163      	str	r3, [r4, #20]
 8006dd2:	9b01      	ldr	r3, [sp, #4]
 8006dd4:	6120      	str	r0, [r4, #16]
 8006dd6:	b15b      	cbz	r3, 8006df0 <__smakebuf_r+0x70>
 8006dd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ddc:	4630      	mov	r0, r6
 8006dde:	f000 f81d 	bl	8006e1c <_isatty_r>
 8006de2:	b128      	cbz	r0, 8006df0 <__smakebuf_r+0x70>
 8006de4:	89a3      	ldrh	r3, [r4, #12]
 8006de6:	f023 0303 	bic.w	r3, r3, #3
 8006dea:	f043 0301 	orr.w	r3, r3, #1
 8006dee:	81a3      	strh	r3, [r4, #12]
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	431d      	orrs	r5, r3
 8006df4:	81a5      	strh	r5, [r4, #12]
 8006df6:	e7cf      	b.n	8006d98 <__smakebuf_r+0x18>

08006df8 <_fstat_r>:
 8006df8:	b538      	push	{r3, r4, r5, lr}
 8006dfa:	4d07      	ldr	r5, [pc, #28]	; (8006e18 <_fstat_r+0x20>)
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	4604      	mov	r4, r0
 8006e00:	4608      	mov	r0, r1
 8006e02:	4611      	mov	r1, r2
 8006e04:	602b      	str	r3, [r5, #0]
 8006e06:	f7f9 fe0b 	bl	8000a20 <_fstat>
 8006e0a:	1c43      	adds	r3, r0, #1
 8006e0c:	d102      	bne.n	8006e14 <_fstat_r+0x1c>
 8006e0e:	682b      	ldr	r3, [r5, #0]
 8006e10:	b103      	cbz	r3, 8006e14 <_fstat_r+0x1c>
 8006e12:	6023      	str	r3, [r4, #0]
 8006e14:	bd38      	pop	{r3, r4, r5, pc}
 8006e16:	bf00      	nop
 8006e18:	20001c4c 	.word	0x20001c4c

08006e1c <_isatty_r>:
 8006e1c:	b538      	push	{r3, r4, r5, lr}
 8006e1e:	4d06      	ldr	r5, [pc, #24]	; (8006e38 <_isatty_r+0x1c>)
 8006e20:	2300      	movs	r3, #0
 8006e22:	4604      	mov	r4, r0
 8006e24:	4608      	mov	r0, r1
 8006e26:	602b      	str	r3, [r5, #0]
 8006e28:	f7f9 fe0a 	bl	8000a40 <_isatty>
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	d102      	bne.n	8006e36 <_isatty_r+0x1a>
 8006e30:	682b      	ldr	r3, [r5, #0]
 8006e32:	b103      	cbz	r3, 8006e36 <_isatty_r+0x1a>
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	bd38      	pop	{r3, r4, r5, pc}
 8006e38:	20001c4c 	.word	0x20001c4c

08006e3c <_sbrk_r>:
 8006e3c:	b538      	push	{r3, r4, r5, lr}
 8006e3e:	4d06      	ldr	r5, [pc, #24]	; (8006e58 <_sbrk_r+0x1c>)
 8006e40:	2300      	movs	r3, #0
 8006e42:	4604      	mov	r4, r0
 8006e44:	4608      	mov	r0, r1
 8006e46:	602b      	str	r3, [r5, #0]
 8006e48:	f7f9 fe12 	bl	8000a70 <_sbrk>
 8006e4c:	1c43      	adds	r3, r0, #1
 8006e4e:	d102      	bne.n	8006e56 <_sbrk_r+0x1a>
 8006e50:	682b      	ldr	r3, [r5, #0]
 8006e52:	b103      	cbz	r3, 8006e56 <_sbrk_r+0x1a>
 8006e54:	6023      	str	r3, [r4, #0]
 8006e56:	bd38      	pop	{r3, r4, r5, pc}
 8006e58:	20001c4c 	.word	0x20001c4c

08006e5c <_init>:
 8006e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e5e:	bf00      	nop
 8006e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e62:	bc08      	pop	{r3}
 8006e64:	469e      	mov	lr, r3
 8006e66:	4770      	bx	lr

08006e68 <_fini>:
 8006e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6a:	bf00      	nop
 8006e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e6e:	bc08      	pop	{r3}
 8006e70:	469e      	mov	lr, r3
 8006e72:	4770      	bx	lr
