
uml_state_machine_switch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000567c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  0800582c  0800582c  0001582c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059d4  080059d4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080059d4  080059d4  000159d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059dc  080059dc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059dc  080059dc  000159dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059e0  080059e0  000159e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080059e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000068  08005a4c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08005a4c  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d4f0  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002286  00000000  00000000  0002d5cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b08  00000000  00000000  0002f858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000865  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029c27  00000000  00000000  00030bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d37f  00000000  00000000  0005a7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa073  00000000  00000000  00067b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000352c  00000000  00000000  00161be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0016510c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005814 	.word	0x08005814

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08005814 	.word	0x08005814

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 8000592:	f000 fcd6 	bl	8000f42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f86d 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f8e9 	bl	8000770 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800059e:	f000 f8bb 	bl	8000718 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  protimer_init(&protimer);
 80005a2:	4830      	ldr	r0, [pc, #192]	; (8000664 <main+0xd8>)
 80005a4:	f000 f94e 	bl	8000844 <protimer_init>

  HAL_UART_Receive_IT(&hlpuart1, &rx_data, 1);
 80005a8:	2201      	movs	r2, #1
 80005aa:	492f      	ldr	r1, [pc, #188]	; (8000668 <main+0xdc>)
 80005ac:	482f      	ldr	r0, [pc, #188]	; (800066c <main+0xe0>)
 80005ae:	f002 fcd7 	bl	8002f60 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (flag)
 80005b2:	4b2f      	ldr	r3, [pc, #188]	; (8000670 <main+0xe4>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d033      	beq.n	8000622 <main+0x96>
	  {
	    event_t evt;
	    switch (rx_data)
 80005ba:	4b2b      	ldr	r3, [pc, #172]	; (8000668 <main+0xdc>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	3b31      	subs	r3, #49	; 0x31
 80005c0:	2b03      	cmp	r3, #3
 80005c2:	d817      	bhi.n	80005f4 <main+0x68>
 80005c4:	a201      	add	r2, pc, #4	; (adr r2, 80005cc <main+0x40>)
 80005c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ca:	bf00      	nop
 80005cc:	080005dd 	.word	0x080005dd
 80005d0:	080005e3 	.word	0x080005e3
 80005d4:	080005e9 	.word	0x080005e9
 80005d8:	080005ef 	.word	0x080005ef
	    {
	    case '1':
	      evt.sig = INC_TIME;
 80005dc:	2300      	movs	r3, #0
 80005de:	723b      	strb	r3, [r7, #8]
	      break;
 80005e0:	e011      	b.n	8000606 <main+0x7a>
	    case '2':
	      evt.sig = DEC_TIME;
 80005e2:	2301      	movs	r3, #1
 80005e4:	723b      	strb	r3, [r7, #8]
	      break;
 80005e6:	e00e      	b.n	8000606 <main+0x7a>
	    case '3':
	      evt.sig = START_PAUSE;
 80005e8:	2303      	movs	r3, #3
 80005ea:	723b      	strb	r3, [r7, #8]
	      break;
 80005ec:	e00b      	b.n	8000606 <main+0x7a>
//	    case '4':
//	      evt.sig = TIME_TICK;
//	      break;
	    case '4':
	      evt.sig = ABRT;
 80005ee:	2304      	movs	r3, #4
 80005f0:	723b      	strb	r3, [r7, #8]
	      break;
 80005f2:	e008      	b.n	8000606 <main+0x7a>
	    default:
	      HAL_UART_Receive_IT(&hlpuart1, &rx_data, 1);
 80005f4:	2201      	movs	r2, #1
 80005f6:	491c      	ldr	r1, [pc, #112]	; (8000668 <main+0xdc>)
 80005f8:	481c      	ldr	r0, [pc, #112]	; (800066c <main+0xe0>)
 80005fa:	f002 fcb1 	bl	8002f60 <HAL_UART_Receive_IT>
	      flag = 0;
 80005fe:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <main+0xe4>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
 8000604:	e7d5      	b.n	80005b2 <main+0x26>
	      continue;
	    }

	    flag = 0;
 8000606:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <main+0xe4>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]

	    // Dispatch the event to the state machine
	    protimer_event_dispatcher(&protimer, &evt);
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	4619      	mov	r1, r3
 8000612:	4814      	ldr	r0, [pc, #80]	; (8000664 <main+0xd8>)
 8000614:	f000 f8c4 	bl	80007a0 <protimer_event_dispatcher>

	    // Restart UART receive interrupt
	    HAL_UART_Receive_IT(&hlpuart1, &rx_data, 1);
 8000618:	2201      	movs	r2, #1
 800061a:	4913      	ldr	r1, [pc, #76]	; (8000668 <main+0xdc>)
 800061c:	4813      	ldr	r0, [pc, #76]	; (800066c <main+0xe0>)
 800061e:	f002 fc9f 	bl	8002f60 <HAL_UART_Receive_IT>
	  }

	  // Simulate timer tick every 100ms

	  uint32_t currentTick = millis();
 8000622:	f000 f903 	bl	800082c <millis>
 8000626:	4603      	mov	r3, r0
 8000628:	60fb      	str	r3, [r7, #12]
	  if (millis() - currentTick >= 100)
 800062a:	f000 f8ff 	bl	800082c <millis>
 800062e:	4603      	mov	r3, r0
 8000630:	461a      	mov	r2, r3
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	2b63      	cmp	r3, #99	; 0x63
 8000638:	d9bb      	bls.n	80005b2 <main+0x26>
	  {
		currentTick = millis();
 800063a:	f000 f8f7 	bl	800082c <millis>
 800063e:	4603      	mov	r3, r0
 8000640:	60fb      	str	r3, [r7, #12]
	    protimer_tick_event_t te;
	    te.super.sig = TIME_TICK;
 8000642:	2302      	movs	r3, #2
 8000644:	713b      	strb	r3, [r7, #4]
	    if(++te.ss > 10) te.ss = 1;
 8000646:	797b      	ldrb	r3, [r7, #5]
 8000648:	3301      	adds	r3, #1
 800064a:	b2db      	uxtb	r3, r3
 800064c:	717b      	strb	r3, [r7, #5]
 800064e:	797b      	ldrb	r3, [r7, #5]
 8000650:	2b0a      	cmp	r3, #10
 8000652:	d901      	bls.n	8000658 <main+0xcc>
 8000654:	2301      	movs	r3, #1
 8000656:	717b      	strb	r3, [r7, #5]
	    protimer_event_dispatcher(&protimer, &te.super);
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4619      	mov	r1, r3
 800065c:	4801      	ldr	r0, [pc, #4]	; (8000664 <main+0xd8>)
 800065e:	f000 f89f 	bl	80007a0 <protimer_event_dispatcher>
  {
 8000662:	e7a6      	b.n	80005b2 <main+0x26>
 8000664:	2000010c 	.word	0x2000010c
 8000668:	2000011c 	.word	0x2000011c
 800066c:	20000084 	.word	0x20000084
 8000670:	2000011d 	.word	0x2000011d

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b096      	sub	sp, #88	; 0x58
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	2244      	movs	r2, #68	; 0x44
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f004 f984 	bl	8004990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	463b      	mov	r3, r7
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000696:	f44f 7000 	mov.w	r0, #512	; 0x200
 800069a:	f001 f81b 	bl	80016d4 <HAL_PWREx_ControlVoltageScaling>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006a4:	f000 f8c9 	bl	800083a <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b2:	2340      	movs	r3, #64	; 0x40
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ba:	2302      	movs	r3, #2
 80006bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006c2:	230a      	movs	r3, #10
 80006c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 f862 	bl	80017a0 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006e2:	f000 f8aa 	bl	800083a <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2303      	movs	r3, #3
 80006ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006fc:	463b      	mov	r3, r7
 80006fe:	2104      	movs	r1, #4
 8000700:	4618      	mov	r0, r3
 8000702:	f001 fc67 	bl	8001fd4 <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800070c:	f000 f895 	bl	800083a <Error_Handler>
  }
}
 8000710:	bf00      	nop
 8000712:	3758      	adds	r7, #88	; 0x58
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  hlpuart1.Instance = LPUART1;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_LPUART1_UART_Init+0x50>)
 800071e:	4a13      	ldr	r2, [pc, #76]	; (800076c <MX_LPUART1_UART_Init+0x54>)
 8000720:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_LPUART1_UART_Init+0x50>)
 8000724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000728:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_LPUART1_UART_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <MX_LPUART1_UART_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_LPUART1_UART_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <MX_LPUART1_UART_Init+0x50>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_LPUART1_UART_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <MX_LPUART1_UART_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_LPUART1_UART_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_LPUART1_UART_Init+0x50>)
 8000756:	f002 fb2b 	bl	8002db0 <HAL_UART_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000760:	f000 f86b 	bl	800083a <Error_Handler>
  }
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000084 	.word	0x20000084
 800076c:	40008000 	.word	0x40008000

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_GPIO_Init+0x2c>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <MX_GPIO_Init+0x2c>)
 800077c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_GPIO_Init+0x2c>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800078e:	f000 fff7 	bl	8001780 <HAL_PWREx_EnableVddIO2>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40021000 	.word	0x40021000

080007a0 <protimer_event_dispatcher>:

/* USER CODE BEGIN 4 */
static event_status_t protimer_event_dispatcher(protimer_t *const mobj, event_t const *const e)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
    event_status_t status;
    protimer_state_t source, target;

    source = mobj->active_state;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	7b1b      	ldrb	r3, [r3, #12]
 80007ae:	73fb      	strb	r3, [r7, #15]
    status = protimer_state_machine(mobj, e);
 80007b0:	6839      	ldr	r1, [r7, #0]
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f000 f862 	bl	800087c <protimer_state_machine>
 80007b8:	4603      	mov	r3, r0
 80007ba:	73bb      	strb	r3, [r7, #14]
    if (status == EVENT_TRANSITION)
 80007bc:	7bbb      	ldrb	r3, [r7, #14]
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d118      	bne.n	80007f4 <protimer_event_dispatcher+0x54>
    {
        target = mobj->active_state;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7b1b      	ldrb	r3, [r3, #12]
 80007c6:	737b      	strb	r3, [r7, #13]
        event_t ee;
        // 1. RUN EXIT ACTION FOR SOURCE STATE
        ee.sig = EXIT;
 80007c8:	2306      	movs	r3, #6
 80007ca:	733b      	strb	r3, [r7, #12]
        mobj->active_state = source;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	7bfa      	ldrb	r2, [r7, #15]
 80007d0:	731a      	strb	r2, [r3, #12]
        protimer_state_machine(mobj, &ee);
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	4619      	mov	r1, r3
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f000 f84f 	bl	800087c <protimer_state_machine>

        // 2. RUN ENTRY ACTION FOR TARGET STATE
        ee.sig = ENTRY;
 80007de:	2305      	movs	r3, #5
 80007e0:	733b      	strb	r3, [r7, #12]
        mobj->active_state = target;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	7b7a      	ldrb	r2, [r7, #13]
 80007e6:	731a      	strb	r2, [r3, #12]
        protimer_state_machine(mobj, &ee);
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4619      	mov	r1, r3
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f000 f844 	bl	800087c <protimer_state_machine>
    }
    return status;
 80007f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
    if (huart->Instance == LPUART1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a05      	ldr	r2, [pc, #20]	; (8000824 <HAL_UART_RxCpltCallback+0x24>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d102      	bne.n	8000818 <HAL_UART_RxCpltCallback+0x18>
    {
        flag = 1;
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_UART_RxCpltCallback+0x28>)
 8000814:	2201      	movs	r2, #1
 8000816:	701a      	strb	r2, [r3, #0]
    }
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	40008000 	.word	0x40008000
 8000828:	2000011d 	.word	0x2000011d

0800082c <millis>:

int millis(void){
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000830:	f000 fbf0 	bl	8001014 <HAL_GetTick>
 8000834:	4603      	mov	r3, r0
}
 8000836:	4618      	mov	r0, r3
 8000838:	bd80      	pop	{r7, pc}

0800083a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083e:	b672      	cpsid	i
}
 8000840:	bf00      	nop
  __disable_irq();
  while (1)
 8000842:	e7fe      	b.n	8000842 <Error_Handler+0x8>

08000844 <protimer_init>:
static event_status_t protimer_state_handler_TIME_SET(protimer_t *const mobj, event_t const *const e);
static event_status_t protimer_state_handler_COUNTDOWN(protimer_t *const mobj, event_t const *const e);
static event_status_t protimer_state_handler_PAUSE(protimer_t *const mobj, event_t const *const e);
//static event_status_t protimer_state_handler_STAT(protimer_t *const mobj, event_t const *const e);

void protimer_init(protimer_t *mobj) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
    printf("\r\nProtimer application...\r\n");
 800084c:	480a      	ldr	r0, [pc, #40]	; (8000878 <protimer_init+0x34>)
 800084e:	f003 ff9f 	bl	8004790 <puts>
    event_t ee;
    ee.sig = ENTRY;
 8000852:	2305      	movs	r3, #5
 8000854:	733b      	strb	r3, [r7, #12]
    mobj->active_state = IDLE;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2200      	movs	r2, #0
 800085a:	731a      	strb	r2, [r3, #12]
    mobj->pro_time = 0;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
    protimer_state_machine(mobj, &ee);
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4619      	mov	r1, r3
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f000 f807 	bl	800087c <protimer_state_machine>
}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	0800582c 	.word	0x0800582c

0800087c <protimer_state_machine>:

event_status_t protimer_state_machine(protimer_t *const mobj, event_t const *const e) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
    switch (mobj->active_state) {
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	7b1b      	ldrb	r3, [r3, #12]
 800088a:	2b03      	cmp	r3, #3
 800088c:	d822      	bhi.n	80008d4 <protimer_state_machine+0x58>
 800088e:	a201      	add	r2, pc, #4	; (adr r2, 8000894 <protimer_state_machine+0x18>)
 8000890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000894:	080008a5 	.word	0x080008a5
 8000898:	080008b1 	.word	0x080008b1
 800089c:	080008bd 	.word	0x080008bd
 80008a0:	080008c9 	.word	0x080008c9
        case IDLE:
            return protimer_state_handler_IDLE(mobj, e);
 80008a4:	6839      	ldr	r1, [r7, #0]
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f000 f81a 	bl	80008e0 <protimer_state_handler_IDLE>
 80008ac:	4603      	mov	r3, r0
 80008ae:	e012      	b.n	80008d6 <protimer_state_machine+0x5a>
        case TIME_SET:
            return protimer_state_handler_TIME_SET(mobj, e);
 80008b0:	6839      	ldr	r1, [r7, #0]
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f000 f86a 	bl	800098c <protimer_state_handler_TIME_SET>
 80008b8:	4603      	mov	r3, r0
 80008ba:	e00c      	b.n	80008d6 <protimer_state_machine+0x5a>
        case COUNTDOWN:
            return protimer_state_handler_COUNTDOWN(mobj, e);
 80008bc:	6839      	ldr	r1, [r7, #0]
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f000 f8c2 	bl	8000a48 <protimer_state_handler_COUNTDOWN>
 80008c4:	4603      	mov	r3, r0
 80008c6:	e006      	b.n	80008d6 <protimer_state_machine+0x5a>
        case PAUSE:
            return protimer_state_handler_PAUSE(mobj, e);
 80008c8:	6839      	ldr	r1, [r7, #0]
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f000 f91c 	bl	8000b08 <protimer_state_handler_PAUSE>
 80008d0:	4603      	mov	r3, r0
 80008d2:	e000      	b.n	80008d6 <protimer_state_machine+0x5a>
//        case STAT:
//            return protimer_state_handler_STAT(mobj, e);
        default:
            return EVENT_IGNORED;
 80008d4:	2301      	movs	r3, #1
    }
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop

080008e0 <protimer_state_handler_IDLE>:

static event_status_t protimer_state_handler_IDLE(protimer_t *const mobj, event_t const *const e) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
    switch (e->sig) {
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b06      	cmp	r3, #6
 80008f0:	d83c      	bhi.n	800096c <protimer_state_handler_IDLE+0x8c>
 80008f2:	a201      	add	r2, pc, #4	; (adr r2, 80008f8 <protimer_state_handler_IDLE+0x18>)
 80008f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f8:	08000941 	.word	0x08000941
 80008fc:	0800096d 	.word	0x0800096d
 8000900:	08000957 	.word	0x08000957
 8000904:	0800096d 	.word	0x0800096d
 8000908:	0800096d 	.word	0x0800096d
 800090c:	08000915 	.word	0x08000915
 8000910:	08000937 	.word	0x08000937
        case ENTRY:
        {
        	printf("\r\nChoose a number\r\n");
 8000914:	4818      	ldr	r0, [pc, #96]	; (8000978 <protimer_state_handler_IDLE+0x98>)
 8000916:	f003 ff3b 	bl	8004790 <puts>
        	printf(" 1. Increment \n 2. Decrement \n 3. Countdown/Pause \n 4. Abort \n ");
 800091a:	4818      	ldr	r0, [pc, #96]	; (800097c <protimer_state_handler_IDLE+0x9c>)
 800091c:	f003 fed2 	bl	80046c4 <iprintf>
            mobj->curr_time = 0;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
            mobj->elapsed_time = 0;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2200      	movs	r2, #0
 800092a:	605a      	str	r2, [r3, #4]
            printf("\r\nSet Time\r\n");
 800092c:	4814      	ldr	r0, [pc, #80]	; (8000980 <protimer_state_handler_IDLE+0xa0>)
 800092e:	f003 ff2f 	bl	8004790 <puts>
            return EVENT_HANDLED;
 8000932:	2300      	movs	r3, #0
 8000934:	e01b      	b.n	800096e <protimer_state_handler_IDLE+0x8e>
        }
        case EXIT:
        {
            printf("Exit1\r\n");
 8000936:	4813      	ldr	r0, [pc, #76]	; (8000984 <protimer_state_handler_IDLE+0xa4>)
 8000938:	f003 ff2a 	bl	8004790 <puts>
            return EVENT_HANDLED;
 800093c:	2300      	movs	r3, #0
 800093e:	e016      	b.n	800096e <protimer_state_handler_IDLE+0x8e>
        }
        case INC_TIME:
        {
            mobj->curr_time += 60;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	601a      	str	r2, [r3, #0]
            mobj->active_state = TIME_SET;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2201      	movs	r2, #1
 8000950:	731a      	strb	r2, [r3, #12]
            return EVENT_TRANSITION;
 8000952:	2302      	movs	r3, #2
 8000954:	e00b      	b.n	800096e <protimer_state_handler_IDLE+0x8e>
//            mobj->active_state = STAT;
//            return EVENT_TRANSITION;
//        }
        case TIME_TICK:
        {
            if (((protimer_tick_event_t *)(e))->ss == 5) {
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	785b      	ldrb	r3, [r3, #1]
 800095a:	2b05      	cmp	r3, #5
 800095c:	d104      	bne.n	8000968 <protimer_state_handler_IDLE+0x88>
                printf("Time-tick event\r\n");
 800095e:	480a      	ldr	r0, [pc, #40]	; (8000988 <protimer_state_handler_IDLE+0xa8>)
 8000960:	f003 ff16 	bl	8004790 <puts>
                return EVENT_HANDLED;
 8000964:	2300      	movs	r3, #0
 8000966:	e002      	b.n	800096e <protimer_state_handler_IDLE+0x8e>
            }
            return EVENT_IGNORED;
 8000968:	2301      	movs	r3, #1
 800096a:	e000      	b.n	800096e <protimer_state_handler_IDLE+0x8e>
        }
        default:
            return EVENT_IGNORED;
 800096c:	2301      	movs	r3, #1
    }
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	08005848 	.word	0x08005848
 800097c:	0800585c 	.word	0x0800585c
 8000980:	0800589c 	.word	0x0800589c
 8000984:	080058a8 	.word	0x080058a8
 8000988:	080058b0 	.word	0x080058b0

0800098c <protimer_state_handler_TIME_SET>:

static event_status_t protimer_state_handler_TIME_SET(protimer_t *const mobj, event_t const *const e) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
    switch(e->sig) {
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b06      	cmp	r3, #6
 800099c:	d84c      	bhi.n	8000a38 <protimer_state_handler_TIME_SET+0xac>
 800099e:	a201      	add	r2, pc, #4	; (adr r2, 80009a4 <protimer_state_handler_TIME_SET+0x18>)
 80009a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a4:	080009d9 	.word	0x080009d9
 80009a8:	080009f3 	.word	0x080009f3
 80009ac:	08000a39 	.word	0x08000a39
 80009b0:	08000a23 	.word	0x08000a23
 80009b4:	08000a19 	.word	0x08000a19
 80009b8:	080009c1 	.word	0x080009c1
 80009bc:	080009cf 	.word	0x080009cf
        case ENTRY:
        {
            display_time(mobj->curr_time);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 f8f5 	bl	8000bb4 <display_time>
            return EVENT_HANDLED;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e035      	b.n	8000a3a <protimer_state_handler_TIME_SET+0xae>
        }
        case EXIT:
        {
            printf("\r\nTime Set !! Exit..\r\n");
 80009ce:	481d      	ldr	r0, [pc, #116]	; (8000a44 <protimer_state_handler_TIME_SET+0xb8>)
 80009d0:	f003 fede 	bl	8004790 <puts>
            return EVENT_HANDLED;
 80009d4:	2300      	movs	r3, #0
 80009d6:	e030      	b.n	8000a3a <protimer_state_handler_TIME_SET+0xae>
        }
        case INC_TIME:
        {
            mobj->curr_time += 60;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	601a      	str	r2, [r3, #0]
            display_time(mobj->curr_time);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 f8e3 	bl	8000bb4 <display_time>
            return EVENT_HANDLED;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e023      	b.n	8000a3a <protimer_state_handler_TIME_SET+0xae>
        }
        case DEC_TIME:
        {
            if(mobj->curr_time >= 60) {
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b3b      	cmp	r3, #59	; 0x3b
 80009f8:	d90c      	bls.n	8000a14 <protimer_state_handler_TIME_SET+0x88>
                mobj->curr_time -= 60;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f1a3 023c 	sub.w	r2, r3, #60	; 0x3c
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	601a      	str	r2, [r3, #0]
                display_time(mobj->curr_time);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f8d2 	bl	8000bb4 <display_time>
                return EVENT_HANDLED;
 8000a10:	2300      	movs	r3, #0
 8000a12:	e012      	b.n	8000a3a <protimer_state_handler_TIME_SET+0xae>
            }
            return EVENT_IGNORED;
 8000a14:	2301      	movs	r3, #1
 8000a16:	e010      	b.n	8000a3a <protimer_state_handler_TIME_SET+0xae>
        }
        case ABRT:
        {
            mobj->active_state = IDLE;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	731a      	strb	r2, [r3, #12]
            return EVENT_TRANSITION;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	e00b      	b.n	8000a3a <protimer_state_handler_TIME_SET+0xae>
        }
        case START_PAUSE:
        {
            if(mobj->curr_time >= 60) {
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b3b      	cmp	r3, #59	; 0x3b
 8000a28:	d904      	bls.n	8000a34 <protimer_state_handler_TIME_SET+0xa8>
                mobj->active_state = COUNTDOWN;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	731a      	strb	r2, [r3, #12]
                return EVENT_TRANSITION;
 8000a30:	2302      	movs	r3, #2
 8000a32:	e002      	b.n	8000a3a <protimer_state_handler_TIME_SET+0xae>
            }
            return EVENT_IGNORED;
 8000a34:	2301      	movs	r3, #1
 8000a36:	e000      	b.n	8000a3a <protimer_state_handler_TIME_SET+0xae>
        }
    }

    return EVENT_IGNORED;
 8000a38:	2301      	movs	r3, #1
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	080058c4 	.word	0x080058c4

08000a48 <protimer_state_handler_COUNTDOWN>:
//        }
//    }
//    return EVENT_IGNORED;
//}
static event_status_t protimer_state_handler_COUNTDOWN(protimer_t *const mobj, event_t const *const e)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
    switch(e->sig)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	3b02      	subs	r3, #2
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	d846      	bhi.n	8000aea <protimer_state_handler_COUNTDOWN+0xa2>
 8000a5c:	a201      	add	r2, pc, #4	; (adr r2, 8000a64 <protimer_state_handler_COUNTDOWN+0x1c>)
 8000a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a62:	bf00      	nop
 8000a64:	08000aad 	.word	0x08000aad
 8000a68:	08000a87 	.word	0x08000a87
 8000a6c:	08000a97 	.word	0x08000a97
 8000a70:	08000a79 	.word	0x08000a79
 8000a74:	08000a83 	.word	0x08000a83
    {
        case ENTRY:
        {
            printf("\r\nCountdown Started\r\n");
 8000a78:	481e      	ldr	r0, [pc, #120]	; (8000af4 <protimer_state_handler_COUNTDOWN+0xac>)
 8000a7a:	f003 fe89 	bl	8004790 <puts>
            return EVENT_HANDLED;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e034      	b.n	8000aec <protimer_state_handler_COUNTDOWN+0xa4>
        }
        case EXIT:
        {
//            printf("Exit Countdown\r\n");
            return EVENT_HANDLED;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e032      	b.n	8000aec <protimer_state_handler_COUNTDOWN+0xa4>
        }

        case START_PAUSE:
        {
            printf("\r\nPause Countdown\r\n");
 8000a86:	481c      	ldr	r0, [pc, #112]	; (8000af8 <protimer_state_handler_COUNTDOWN+0xb0>)
 8000a88:	f003 fe82 	bl	8004790 <puts>
            mobj->active_state = PAUSE;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2203      	movs	r2, #3
 8000a90:	731a      	strb	r2, [r3, #12]
            return EVENT_TRANSITION;
 8000a92:	2302      	movs	r3, #2
 8000a94:	e02a      	b.n	8000aec <protimer_state_handler_COUNTDOWN+0xa4>
        }
        case ABRT:
        {
            printf("\r\nAbort Countdown\r\n");
 8000a96:	4819      	ldr	r0, [pc, #100]	; (8000afc <protimer_state_handler_COUNTDOWN+0xb4>)
 8000a98:	f003 fe7a 	bl	8004790 <puts>
            mobj->curr_time = 0;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
            mobj->active_state = IDLE;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	731a      	strb	r2, [r3, #12]
            return EVENT_TRANSITION;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	e01f      	b.n	8000aec <protimer_state_handler_COUNTDOWN+0xa4>
        }
        case TIME_TICK:
        {
            printf("Time Tick Event\r\n");
 8000aac:	4814      	ldr	r0, [pc, #80]	; (8000b00 <protimer_state_handler_COUNTDOWN+0xb8>)
 8000aae:	f003 fe6f 	bl	8004790 <puts>

            if (mobj->curr_time > 0) {
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d00f      	beq.n	8000ada <protimer_state_handler_COUNTDOWN+0x92>
                --mobj->curr_time;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	1e5a      	subs	r2, r3, #1
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	601a      	str	r2, [r3, #0]
                display_time(mobj->curr_time);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 f873 	bl	8000bb4 <display_time>
            } else {
                printf("Countdown Finished\r\n");
                mobj->active_state = IDLE;
                return EVENT_TRANSITION;
            }
            HAL_Delay(1000);
 8000ace:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad2:	f000 faab 	bl	800102c <HAL_Delay>
            return EVENT_HANDLED;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e008      	b.n	8000aec <protimer_state_handler_COUNTDOWN+0xa4>
                printf("Countdown Finished\r\n");
 8000ada:	480a      	ldr	r0, [pc, #40]	; (8000b04 <protimer_state_handler_COUNTDOWN+0xbc>)
 8000adc:	f003 fe58 	bl	8004790 <puts>
                mobj->active_state = IDLE;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	731a      	strb	r2, [r3, #12]
                return EVENT_TRANSITION;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	e000      	b.n	8000aec <protimer_state_handler_COUNTDOWN+0xa4>
        }
    }
    return EVENT_IGNORED;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	080058dc 	.word	0x080058dc
 8000af8:	080058f4 	.word	0x080058f4
 8000afc:	08005908 	.word	0x08005908
 8000b00:	0800591c 	.word	0x0800591c
 8000b04:	08005930 	.word	0x08005930

08000b08 <protimer_state_handler_PAUSE>:
//        }
//    }
//    return EVENT_IGNORED;
//}

static event_status_t protimer_state_handler_PAUSE(protimer_t *const mobj, event_t const *const e) {
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
    switch(e->sig) {
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b06      	cmp	r3, #6
 8000b18:	d845      	bhi.n	8000ba6 <protimer_state_handler_PAUSE+0x9e>
 8000b1a:	a201      	add	r2, pc, #4	; (adr r2, 8000b20 <protimer_state_handler_PAUSE+0x18>)
 8000b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b20:	08000b45 	.word	0x08000b45
 8000b24:	08000b5b 	.word	0x08000b5b
 8000b28:	08000b87 	.word	0x08000b87
 8000b2c:	08000b7d 	.word	0x08000b7d
 8000b30:	08000b9d 	.word	0x08000b9d
 8000b34:	08000b3d 	.word	0x08000b3d
 8000b38:	08000b41 	.word	0x08000b41
        case ENTRY:
        {
//            printf("Paused\r\n");
            return EVENT_HANDLED;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	e033      	b.n	8000ba8 <protimer_state_handler_PAUSE+0xa0>
        }
        case EXIT:
        {
//            printf("Exit4..\r\n");
            return EVENT_HANDLED;
 8000b40:	2300      	movs	r3, #0
 8000b42:	e031      	b.n	8000ba8 <protimer_state_handler_PAUSE+0xa0>
        }
        case INC_TIME:
        {
            mobj->curr_time += 60;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	601a      	str	r2, [r3, #0]
            mobj->active_state = TIME_SET;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2201      	movs	r2, #1
 8000b54:	731a      	strb	r2, [r3, #12]
            return EVENT_TRANSITION;
 8000b56:	2302      	movs	r3, #2
 8000b58:	e026      	b.n	8000ba8 <protimer_state_handler_PAUSE+0xa0>
        }
        case DEC_TIME:
        {
            if(mobj->curr_time >= 60) {
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b3b      	cmp	r3, #59	; 0x3b
 8000b60:	d90a      	bls.n	8000b78 <protimer_state_handler_PAUSE+0x70>
                mobj->curr_time -= 60;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f1a3 023c 	sub.w	r2, r3, #60	; 0x3c
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	601a      	str	r2, [r3, #0]
                mobj->active_state = TIME_SET;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2201      	movs	r2, #1
 8000b72:	731a      	strb	r2, [r3, #12]
                return EVENT_TRANSITION;
 8000b74:	2302      	movs	r3, #2
 8000b76:	e017      	b.n	8000ba8 <protimer_state_handler_PAUSE+0xa0>
            }
            return EVENT_IGNORED;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e015      	b.n	8000ba8 <protimer_state_handler_PAUSE+0xa0>
        }
        case START_PAUSE:
        {
            mobj->active_state = COUNTDOWN;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2202      	movs	r2, #2
 8000b80:	731a      	strb	r2, [r3, #12]
            return EVENT_TRANSITION;
 8000b82:	2302      	movs	r3, #2
 8000b84:	e010      	b.n	8000ba8 <protimer_state_handler_PAUSE+0xa0>
        }
        case TIME_TICK:
        {
            if (mobj->curr_time > 0) {
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d004      	beq.n	8000b98 <protimer_state_handler_PAUSE+0x90>
                mobj->active_state = COUNTDOWN;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2202      	movs	r2, #2
 8000b92:	731a      	strb	r2, [r3, #12]
                return EVENT_TRANSITION;
 8000b94:	2302      	movs	r3, #2
 8000b96:	e007      	b.n	8000ba8 <protimer_state_handler_PAUSE+0xa0>
            }
            return EVENT_IGNORED;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e005      	b.n	8000ba8 <protimer_state_handler_PAUSE+0xa0>
        }
        case ABRT:
        {
            mobj->active_state = IDLE;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	731a      	strb	r2, [r3, #12]
            return EVENT_TRANSITION;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	e000      	b.n	8000ba8 <protimer_state_handler_PAUSE+0xa0>
        }
    }
    return EVENT_IGNORED;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <display_time>:

//************** HELPER FUNCTIONS ***************//
static void display_time(uint32_t time) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
    char buf[6];

    uint16_t m = time / 60;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a11      	ldr	r2, [pc, #68]	; (8000c04 <display_time+0x50>)
 8000bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc4:	095b      	lsrs	r3, r3, #5
 8000bc6:	82fb      	strh	r3, [r7, #22]
    uint8_t s = time % 60;
 8000bc8:	6879      	ldr	r1, [r7, #4]
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <display_time+0x50>)
 8000bcc:	fba3 2301 	umull	r2, r3, r3, r1
 8000bd0:	095a      	lsrs	r2, r3, #5
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	011b      	lsls	r3, r3, #4
 8000bd6:	1a9b      	subs	r3, r3, r2
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	1aca      	subs	r2, r1, r3
 8000bdc:	4613      	mov	r3, r2
 8000bde:	757b      	strb	r3, [r7, #21]

    // Format time string using sprintf
    sprintf(buf, "%02d:%02d\r\n", m, s);  // Add newline and carriage return
 8000be0:	8afa      	ldrh	r2, [r7, #22]
 8000be2:	7d7b      	ldrb	r3, [r7, #21]
 8000be4:	f107 000c 	add.w	r0, r7, #12
 8000be8:	4907      	ldr	r1, [pc, #28]	; (8000c08 <display_time+0x54>)
 8000bea:	f003 fdd9 	bl	80047a0 <siprintf>

    // Send formatted time string over UART
    // HAL_UART_Transmit(&hlpuart1, (uint8_t*)buf, strlen(buf), 500);  // Replace huart1 with your UART instance
    printf("%s\r\n", buf);
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <display_time+0x58>)
 8000bf6:	f003 fd65 	bl	80046c4 <iprintf>
}
 8000bfa:	bf00      	nop
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	88888889 	.word	0x88888889
 8000c08:	08005944 	.word	0x08005944
 8000c0c:	08005950 	.word	0x08005950

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_MspInit+0x44>)
 8000c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <HAL_MspInit+0x44>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6613      	str	r3, [r2, #96]	; 0x60
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_MspInit+0x44>)
 8000c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_MspInit+0x44>)
 8000c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_MspInit+0x44>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_MspInit+0x44>)
 8000c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40021000 	.word	0x40021000

08000c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b0ac      	sub	sp, #176	; 0xb0
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	228c      	movs	r2, #140	; 0x8c
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f003 fe89 	bl	8004990 <memset>
  if(huart->Instance==LPUART1)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a26      	ldr	r2, [pc, #152]	; (8000d1c <HAL_UART_MspInit+0xc4>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d145      	bne.n	8000d14 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c88:	2320      	movs	r3, #32
 8000c8a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	4618      	mov	r0, r3
 8000c96:	f001 fbc1 	bl	800241c <HAL_RCCEx_PeriphCLKConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ca0:	f7ff fdcb 	bl	800083a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <HAL_UART_MspInit+0xc8>)
 8000ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ca8:	4a1d      	ldr	r2, [pc, #116]	; (8000d20 <HAL_UART_MspInit+0xc8>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <HAL_UART_MspInit+0xc8>)
 8000cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cbc:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_UART_MspInit+0xc8>)
 8000cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc0:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <HAL_UART_MspInit+0xc8>)
 8000cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_UART_MspInit+0xc8>)
 8000cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000cd4:	f000 fd54 	bl	8001780 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000cd8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000cf2:	2308      	movs	r3, #8
 8000cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cf8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4809      	ldr	r0, [pc, #36]	; (8000d24 <HAL_UART_MspInit+0xcc>)
 8000d00:	f000 fb48 	bl	8001394 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2100      	movs	r1, #0
 8000d08:	2046      	movs	r0, #70	; 0x46
 8000d0a:	f000 fa8e 	bl	800122a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000d0e:	2046      	movs	r0, #70	; 0x46
 8000d10:	f000 faa7 	bl	8001262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000d14:	bf00      	nop
 8000d16:	37b0      	adds	r7, #176	; 0xb0
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40008000 	.word	0x40008000
 8000d20:	40021000 	.word	0x40021000
 8000d24:	48001800 	.word	0x48001800

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <NMI_Handler+0x4>

08000d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d74:	f000 f93a 	bl	8000fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <LPUART1_IRQHandler+0x10>)
 8000d82:	f002 f939 	bl	8002ff8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000084 	.word	0x20000084

08000d90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	e00a      	b.n	8000db8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000da2:	f3af 8000 	nop.w
 8000da6:	4601      	mov	r1, r0
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	1c5a      	adds	r2, r3, #1
 8000dac:	60ba      	str	r2, [r7, #8]
 8000dae:	b2ca      	uxtb	r2, r1
 8000db0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	3301      	adds	r3, #1
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	dbf0      	blt.n	8000da2 <_read+0x12>
  }

  return len;
 8000dc0:	687b      	ldr	r3, [r7, #4]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }

	HAL_UART_Transmit(&hlpuart1, (unsigned const char *)ptr, len, 2000);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	4804      	ldr	r0, [pc, #16]	; (8000df4 <_write+0x28>)
 8000de4:	f002 f832 	bl	8002e4c <HAL_UART_Transmit>
	  return len;
 8000de8:	687b      	ldr	r3, [r7, #4]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000084 	.word	0x20000084

08000df8 <_close>:

int _close(int file)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e20:	605a      	str	r2, [r3, #4]
  return 0;
 8000e22:	2300      	movs	r3, #0
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <_isatty>:

int _isatty(int file)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e38:	2301      	movs	r3, #1
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b085      	sub	sp, #20
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	60f8      	str	r0, [r7, #12]
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e52:	2300      	movs	r3, #0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e68:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <_sbrk+0x5c>)
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <_sbrk+0x60>)
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d102      	bne.n	8000e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <_sbrk+0x64>)
 8000e7e:	4a12      	ldr	r2, [pc, #72]	; (8000ec8 <_sbrk+0x68>)
 8000e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d207      	bcs.n	8000ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e90:	f003 fdcc 	bl	8004a2c <__errno>
 8000e94:	4603      	mov	r3, r0
 8000e96:	220c      	movs	r2, #12
 8000e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e9e:	e009      	b.n	8000eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <_sbrk+0x64>)
 8000eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20050000 	.word	0x20050000
 8000ec0:	00000400 	.word	0x00000400
 8000ec4:	20000120 	.word	0x20000120
 8000ec8:	20000278 	.word	0x20000278

08000ecc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <SystemInit+0x20>)
 8000ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <SystemInit+0x20>)
 8000ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ef4:	f7ff ffea 	bl	8000ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000efa:	490d      	ldr	r1, [pc, #52]	; (8000f30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <LoopForever+0xe>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f10:	4c0a      	ldr	r4, [pc, #40]	; (8000f3c <LoopForever+0x16>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f003 fd8b 	bl	8004a38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f22:	f7ff fb33 	bl	800058c <main>

08000f26 <LoopForever>:

LoopForever:
    b LoopForever
 8000f26:	e7fe      	b.n	8000f26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f28:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f34:	080059e4 	.word	0x080059e4
  ldr r2, =_sbss
 8000f38:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f3c:	20000274 	.word	0x20000274

08000f40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC1_2_IRQHandler>

08000f42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	f000 f961 	bl	8001214 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f52:	2000      	movs	r0, #0
 8000f54:	f000 f80e 	bl	8000f74 <HAL_InitTick>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d002      	beq.n	8000f64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	71fb      	strb	r3, [r7, #7]
 8000f62:	e001      	b.n	8000f68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f64:	f7ff fe54 	bl	8000c10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f68:	79fb      	ldrb	r3, [r7, #7]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_InitTick+0x6c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d023      	beq.n	8000fd0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f88:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <HAL_InitTick+0x70>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <HAL_InitTick+0x6c>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	4619      	mov	r1, r3
 8000f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f96d 	bl	800127e <HAL_SYSTICK_Config>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10f      	bne.n	8000fca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d809      	bhi.n	8000fc4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fb8:	f000 f937 	bl	800122a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_InitTick+0x74>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e007      	b.n	8000fd4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
 8000fc8:	e004      	b.n	8000fd4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	73fb      	strb	r3, [r7, #15]
 8000fce:	e001      	b.n	8000fd4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	20000004 	.word	0x20000004

08000fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x20>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x24>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_IncTick+0x24>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000008 	.word	0x20000008
 8001010:	20000124 	.word	0x20000124

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_GetTick+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000124 	.word	0x20000124

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff ffee 	bl	8001014 <HAL_GetTick>
 8001038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001044:	d005      	beq.n	8001052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_Delay+0x44>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001052:	bf00      	nop
 8001054:	f7ff ffde 	bl	8001014 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	429a      	cmp	r2, r3
 8001062:	d8f7      	bhi.n	8001054 <HAL_Delay+0x28>
  {
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008

08001074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001090:	4013      	ands	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800109c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	60d3      	str	r3, [r2, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <__NVIC_GetPriorityGrouping+0x18>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0307 	and.w	r3, r3, #7
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db0b      	blt.n	8001102 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f003 021f 	and.w	r2, r3, #31
 80010f0:	4907      	ldr	r1, [pc, #28]	; (8001110 <__NVIC_EnableIRQ+0x38>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	2001      	movs	r0, #1
 80010fa:	fa00 f202 	lsl.w	r2, r0, r2
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e100 	.word	0xe000e100

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	; (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	; (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
         );
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e0:	d301      	bcc.n	80011e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00f      	b.n	8001206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <SysTick_Config+0x40>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ee:	210f      	movs	r1, #15
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011f4:	f7ff ff8e 	bl	8001114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <SysTick_Config+0x40>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <SysTick_Config+0x40>)
 8001200:	2207      	movs	r2, #7
 8001202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	e000e010 	.word	0xe000e010

08001214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff29 	bl	8001074 <__NVIC_SetPriorityGrouping>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800123c:	f7ff ff3e 	bl	80010bc <__NVIC_GetPriorityGrouping>
 8001240:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	6978      	ldr	r0, [r7, #20]
 8001248:	f7ff ff8e 	bl	8001168 <NVIC_EncodePriority>
 800124c:	4602      	mov	r2, r0
 800124e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff5d 	bl	8001114 <__NVIC_SetPriority>
}
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	4603      	mov	r3, r0
 800126a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff31 	bl	80010d8 <__NVIC_EnableIRQ>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ffa2 	bl	80011d0 <SysTick_Config>
 800128c:	4603      	mov	r3, r0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001296:	b480      	push	{r7}
 8001298:	b085      	sub	sp, #20
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d008      	beq.n	80012c0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2204      	movs	r2, #4
 80012b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e022      	b.n	8001306 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 020e 	bic.w	r2, r2, #14
 80012ce:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0201 	bic.w	r2, r2, #1
 80012de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e4:	f003 021c 	and.w	r2, r3, #28
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	2101      	movs	r1, #1
 80012ee:	fa01 f202 	lsl.w	r2, r1, r2
 80012f2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001304:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001306:	4618      	mov	r0, r3
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d005      	beq.n	8001336 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2204      	movs	r2, #4
 800132e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	e029      	b.n	800138a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 020e 	bic.w	r2, r2, #14
 8001344:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0201 	bic.w	r2, r2, #1
 8001354:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	f003 021c 	and.w	r2, r3, #28
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	2101      	movs	r1, #1
 8001364:	fa01 f202 	lsl.w	r2, r1, r2
 8001368:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	4798      	blx	r3
    }
  }
  return status;
 800138a:	7bfb      	ldrb	r3, [r7, #15]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001394:	b480      	push	{r7}
 8001396:	b087      	sub	sp, #28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a2:	e166      	b.n	8001672 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	2101      	movs	r1, #1
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 8158 	beq.w	800166c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d005      	beq.n	80013d4 <HAL_GPIO_Init+0x40>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d130      	bne.n	8001436 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800140a:	2201      	movs	r2, #1
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	091b      	lsrs	r3, r3, #4
 8001420:	f003 0201 	and.w	r2, r3, #1
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	2b03      	cmp	r3, #3
 8001440:	d017      	beq.n	8001472 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	2203      	movs	r2, #3
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d123      	bne.n	80014c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	08da      	lsrs	r2, r3, #3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3208      	adds	r2, #8
 8001486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800148a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	220f      	movs	r2, #15
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	691a      	ldr	r2, [r3, #16]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	08da      	lsrs	r2, r3, #3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3208      	adds	r2, #8
 80014c0:	6939      	ldr	r1, [r7, #16]
 80014c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	2203      	movs	r2, #3
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 0203 	and.w	r2, r3, #3
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 80b2 	beq.w	800166c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001508:	4b61      	ldr	r3, [pc, #388]	; (8001690 <HAL_GPIO_Init+0x2fc>)
 800150a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150c:	4a60      	ldr	r2, [pc, #384]	; (8001690 <HAL_GPIO_Init+0x2fc>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6613      	str	r3, [r2, #96]	; 0x60
 8001514:	4b5e      	ldr	r3, [pc, #376]	; (8001690 <HAL_GPIO_Init+0x2fc>)
 8001516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001520:	4a5c      	ldr	r2, [pc, #368]	; (8001694 <HAL_GPIO_Init+0x300>)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	089b      	lsrs	r3, r3, #2
 8001526:	3302      	adds	r3, #2
 8001528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	220f      	movs	r2, #15
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800154a:	d02b      	beq.n	80015a4 <HAL_GPIO_Init+0x210>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a52      	ldr	r2, [pc, #328]	; (8001698 <HAL_GPIO_Init+0x304>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d025      	beq.n	80015a0 <HAL_GPIO_Init+0x20c>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a51      	ldr	r2, [pc, #324]	; (800169c <HAL_GPIO_Init+0x308>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d01f      	beq.n	800159c <HAL_GPIO_Init+0x208>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a50      	ldr	r2, [pc, #320]	; (80016a0 <HAL_GPIO_Init+0x30c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d019      	beq.n	8001598 <HAL_GPIO_Init+0x204>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a4f      	ldr	r2, [pc, #316]	; (80016a4 <HAL_GPIO_Init+0x310>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d013      	beq.n	8001594 <HAL_GPIO_Init+0x200>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a4e      	ldr	r2, [pc, #312]	; (80016a8 <HAL_GPIO_Init+0x314>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d00d      	beq.n	8001590 <HAL_GPIO_Init+0x1fc>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a4d      	ldr	r2, [pc, #308]	; (80016ac <HAL_GPIO_Init+0x318>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d007      	beq.n	800158c <HAL_GPIO_Init+0x1f8>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a4c      	ldr	r2, [pc, #304]	; (80016b0 <HAL_GPIO_Init+0x31c>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d101      	bne.n	8001588 <HAL_GPIO_Init+0x1f4>
 8001584:	2307      	movs	r3, #7
 8001586:	e00e      	b.n	80015a6 <HAL_GPIO_Init+0x212>
 8001588:	2308      	movs	r3, #8
 800158a:	e00c      	b.n	80015a6 <HAL_GPIO_Init+0x212>
 800158c:	2306      	movs	r3, #6
 800158e:	e00a      	b.n	80015a6 <HAL_GPIO_Init+0x212>
 8001590:	2305      	movs	r3, #5
 8001592:	e008      	b.n	80015a6 <HAL_GPIO_Init+0x212>
 8001594:	2304      	movs	r3, #4
 8001596:	e006      	b.n	80015a6 <HAL_GPIO_Init+0x212>
 8001598:	2303      	movs	r3, #3
 800159a:	e004      	b.n	80015a6 <HAL_GPIO_Init+0x212>
 800159c:	2302      	movs	r3, #2
 800159e:	e002      	b.n	80015a6 <HAL_GPIO_Init+0x212>
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <HAL_GPIO_Init+0x212>
 80015a4:	2300      	movs	r3, #0
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	f002 0203 	and.w	r2, r2, #3
 80015ac:	0092      	lsls	r2, r2, #2
 80015ae:	4093      	lsls	r3, r2
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015b6:	4937      	ldr	r1, [pc, #220]	; (8001694 <HAL_GPIO_Init+0x300>)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	3302      	adds	r3, #2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015c4:	4b3b      	ldr	r3, [pc, #236]	; (80016b4 <HAL_GPIO_Init+0x320>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015e8:	4a32      	ldr	r2, [pc, #200]	; (80016b4 <HAL_GPIO_Init+0x320>)
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015ee:	4b31      	ldr	r3, [pc, #196]	; (80016b4 <HAL_GPIO_Init+0x320>)
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001612:	4a28      	ldr	r2, [pc, #160]	; (80016b4 <HAL_GPIO_Init+0x320>)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001618:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <HAL_GPIO_Init+0x320>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800163c:	4a1d      	ldr	r2, [pc, #116]	; (80016b4 <HAL_GPIO_Init+0x320>)
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <HAL_GPIO_Init+0x320>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	43db      	mvns	r3, r3
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001666:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <HAL_GPIO_Init+0x320>)
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	3301      	adds	r3, #1
 8001670:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	fa22 f303 	lsr.w	r3, r2, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	f47f ae91 	bne.w	80013a4 <HAL_GPIO_Init+0x10>
  }
}
 8001682:	bf00      	nop
 8001684:	bf00      	nop
 8001686:	371c      	adds	r7, #28
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	40021000 	.word	0x40021000
 8001694:	40010000 	.word	0x40010000
 8001698:	48000400 	.word	0x48000400
 800169c:	48000800 	.word	0x48000800
 80016a0:	48000c00 	.word	0x48000c00
 80016a4:	48001000 	.word	0x48001000
 80016a8:	48001400 	.word	0x48001400
 80016ac:	48001800 	.word	0x48001800
 80016b0:	48001c00 	.word	0x48001c00
 80016b4:	40010400 	.word	0x40010400

080016b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40007000 	.word	0x40007000

080016d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016e2:	d130      	bne.n	8001746 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e4:	4b23      	ldr	r3, [pc, #140]	; (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016f0:	d038      	beq.n	8001764 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016fa:	4a1e      	ldr	r2, [pc, #120]	; (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001700:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2232      	movs	r2, #50	; 0x32
 8001708:	fb02 f303 	mul.w	r3, r2, r3
 800170c:	4a1b      	ldr	r2, [pc, #108]	; (800177c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800170e:	fba2 2303 	umull	r2, r3, r2, r3
 8001712:	0c9b      	lsrs	r3, r3, #18
 8001714:	3301      	adds	r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001718:	e002      	b.n	8001720 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	3b01      	subs	r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800172c:	d102      	bne.n	8001734 <HAL_PWREx_ControlVoltageScaling+0x60>
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f2      	bne.n	800171a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001740:	d110      	bne.n	8001764 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e00f      	b.n	8001766 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800174e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001752:	d007      	beq.n	8001764 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001754:	4b07      	ldr	r3, [pc, #28]	; (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800175c:	4a05      	ldr	r2, [pc, #20]	; (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800175e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001762:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40007000 	.word	0x40007000
 8001778:	20000000 	.word	0x20000000
 800177c:	431bde83 	.word	0x431bde83

08001780 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	4a04      	ldr	r2, [pc, #16]	; (800179c <HAL_PWREx_EnableVddIO2+0x1c>)
 800178a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178e:	6053      	str	r3, [r2, #4]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40007000 	.word	0x40007000

080017a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d102      	bne.n	80017b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	f000 bc08 	b.w	8001fc4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017b4:	4b96      	ldr	r3, [pc, #600]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 030c 	and.w	r3, r3, #12
 80017bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017be:	4b94      	ldr	r3, [pc, #592]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0310 	and.w	r3, r3, #16
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 80e4 	beq.w	800199e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d007      	beq.n	80017ec <HAL_RCC_OscConfig+0x4c>
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2b0c      	cmp	r3, #12
 80017e0:	f040 808b 	bne.w	80018fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	f040 8087 	bne.w	80018fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017ec:	4b88      	ldr	r3, [pc, #544]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_OscConfig+0x64>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e3df      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a1a      	ldr	r2, [r3, #32]
 8001808:	4b81      	ldr	r3, [pc, #516]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	2b00      	cmp	r3, #0
 8001812:	d004      	beq.n	800181e <HAL_RCC_OscConfig+0x7e>
 8001814:	4b7e      	ldr	r3, [pc, #504]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800181c:	e005      	b.n	800182a <HAL_RCC_OscConfig+0x8a>
 800181e:	4b7c      	ldr	r3, [pc, #496]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001824:	091b      	lsrs	r3, r3, #4
 8001826:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800182a:	4293      	cmp	r3, r2
 800182c:	d223      	bcs.n	8001876 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fd92 	bl	800235c <RCC_SetFlashLatencyFromMSIRange>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e3c0      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001842:	4b73      	ldr	r3, [pc, #460]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a72      	ldr	r2, [pc, #456]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001848:	f043 0308 	orr.w	r3, r3, #8
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b70      	ldr	r3, [pc, #448]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	496d      	ldr	r1, [pc, #436]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001860:	4b6b      	ldr	r3, [pc, #428]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	4968      	ldr	r1, [pc, #416]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
 8001874:	e025      	b.n	80018c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001876:	4b66      	ldr	r3, [pc, #408]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a65      	ldr	r2, [pc, #404]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 800187c:	f043 0308 	orr.w	r3, r3, #8
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	4b63      	ldr	r3, [pc, #396]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	4960      	ldr	r1, [pc, #384]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001890:	4313      	orrs	r3, r2
 8001892:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001894:	4b5e      	ldr	r3, [pc, #376]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	495b      	ldr	r1, [pc, #364]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d109      	bne.n	80018c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 fd52 	bl	800235c <RCC_SetFlashLatencyFromMSIRange>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e380      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018c2:	f000 fc87 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 80018c6:	4602      	mov	r2, r0
 80018c8:	4b51      	ldr	r3, [pc, #324]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	4950      	ldr	r1, [pc, #320]	; (8001a14 <HAL_RCC_OscConfig+0x274>)
 80018d4:	5ccb      	ldrb	r3, [r1, r3]
 80018d6:	f003 031f 	and.w	r3, r3, #31
 80018da:	fa22 f303 	lsr.w	r3, r2, r3
 80018de:	4a4e      	ldr	r2, [pc, #312]	; (8001a18 <HAL_RCC_OscConfig+0x278>)
 80018e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018e2:	4b4e      	ldr	r3, [pc, #312]	; (8001a1c <HAL_RCC_OscConfig+0x27c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fb44 	bl	8000f74 <HAL_InitTick>
 80018ec:	4603      	mov	r3, r0
 80018ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d052      	beq.n	800199c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	e364      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d032      	beq.n	8001968 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001902:	4b43      	ldr	r3, [pc, #268]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a42      	ldr	r2, [pc, #264]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800190e:	f7ff fb81 	bl	8001014 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001916:	f7ff fb7d 	bl	8001014 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e34d      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001928:	4b39      	ldr	r3, [pc, #228]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001934:	4b36      	ldr	r3, [pc, #216]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a35      	ldr	r2, [pc, #212]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 800193a:	f043 0308 	orr.w	r3, r3, #8
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b33      	ldr	r3, [pc, #204]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	4930      	ldr	r1, [pc, #192]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 800194e:	4313      	orrs	r3, r2
 8001950:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001952:	4b2f      	ldr	r3, [pc, #188]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	021b      	lsls	r3, r3, #8
 8001960:	492b      	ldr	r1, [pc, #172]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001962:	4313      	orrs	r3, r2
 8001964:	604b      	str	r3, [r1, #4]
 8001966:	e01a      	b.n	800199e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001968:	4b29      	ldr	r3, [pc, #164]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a28      	ldr	r2, [pc, #160]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 800196e:	f023 0301 	bic.w	r3, r3, #1
 8001972:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001974:	f7ff fb4e 	bl	8001014 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800197c:	f7ff fb4a 	bl	8001014 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e31a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x1dc>
 800199a:	e000      	b.n	800199e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800199c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d073      	beq.n	8001a92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_OscConfig+0x21c>
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2b0c      	cmp	r3, #12
 80019b4:	d10e      	bne.n	80019d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d10b      	bne.n	80019d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d063      	beq.n	8001a90 <HAL_RCC_OscConfig+0x2f0>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d15f      	bne.n	8001a90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e2f7      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019dc:	d106      	bne.n	80019ec <HAL_RCC_OscConfig+0x24c>
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 80019e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e025      	b.n	8001a38 <HAL_RCC_OscConfig+0x298>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f4:	d114      	bne.n	8001a20 <HAL_RCC_OscConfig+0x280>
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 80019fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a02      	ldr	r2, [pc, #8]	; (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	e013      	b.n	8001a38 <HAL_RCC_OscConfig+0x298>
 8001a10:	40021000 	.word	0x40021000
 8001a14:	08005958 	.word	0x08005958
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000004 	.word	0x20000004
 8001a20:	4ba0      	ldr	r3, [pc, #640]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a9f      	ldr	r2, [pc, #636]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b9d      	ldr	r3, [pc, #628]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a9c      	ldr	r2, [pc, #624]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d013      	beq.n	8001a68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff fae8 	bl	8001014 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff fae4 	bl	8001014 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	; 0x64
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e2b4      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a5a:	4b92      	ldr	r3, [pc, #584]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0x2a8>
 8001a66:	e014      	b.n	8001a92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a68:	f7ff fad4 	bl	8001014 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a70:	f7ff fad0 	bl	8001014 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b64      	cmp	r3, #100	; 0x64
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e2a0      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a82:	4b88      	ldr	r3, [pc, #544]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x2d0>
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d060      	beq.n	8001b60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d005      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x310>
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2b0c      	cmp	r3, #12
 8001aa8:	d119      	bne.n	8001ade <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d116      	bne.n	8001ade <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ab0:	4b7c      	ldr	r3, [pc, #496]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x328>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e27d      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac8:	4b76      	ldr	r3, [pc, #472]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	061b      	lsls	r3, r3, #24
 8001ad6:	4973      	ldr	r1, [pc, #460]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001adc:	e040      	b.n	8001b60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d023      	beq.n	8001b2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae6:	4b6f      	ldr	r3, [pc, #444]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a6e      	ldr	r2, [pc, #440]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af2:	f7ff fa8f 	bl	8001014 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afa:	f7ff fa8b 	bl	8001014 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e25b      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b0c:	4b65      	ldr	r3, [pc, #404]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f0      	beq.n	8001afa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b18:	4b62      	ldr	r3, [pc, #392]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	061b      	lsls	r3, r3, #24
 8001b26:	495f      	ldr	r1, [pc, #380]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	604b      	str	r3, [r1, #4]
 8001b2c:	e018      	b.n	8001b60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b2e:	4b5d      	ldr	r3, [pc, #372]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a5c      	ldr	r2, [pc, #368]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fa6b 	bl	8001014 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b42:	f7ff fa67 	bl	8001014 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e237      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b54:	4b53      	ldr	r3, [pc, #332]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1f0      	bne.n	8001b42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d03c      	beq.n	8001be6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d01c      	beq.n	8001bae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b74:	4b4b      	ldr	r3, [pc, #300]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b7a:	4a4a      	ldr	r2, [pc, #296]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b84:	f7ff fa46 	bl	8001014 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b8c:	f7ff fa42 	bl	8001014 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e212      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b9e:	4b41      	ldr	r3, [pc, #260]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0ef      	beq.n	8001b8c <HAL_RCC_OscConfig+0x3ec>
 8001bac:	e01b      	b.n	8001be6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bae:	4b3d      	ldr	r3, [pc, #244]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb4:	4a3b      	ldr	r2, [pc, #236]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	f023 0301 	bic.w	r3, r3, #1
 8001bba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbe:	f7ff fa29 	bl	8001014 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc6:	f7ff fa25 	bl	8001014 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e1f5      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bd8:	4b32      	ldr	r3, [pc, #200]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1ef      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 80a6 	beq.w	8001d40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bf8:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10d      	bne.n	8001c20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c04:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c08:	4a26      	ldr	r2, [pc, #152]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c10:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c20:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_RCC_OscConfig+0x508>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d118      	bne.n	8001c5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <HAL_RCC_OscConfig+0x508>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1d      	ldr	r2, [pc, #116]	; (8001ca8 <HAL_RCC_OscConfig+0x508>)
 8001c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c38:	f7ff f9ec 	bl	8001014 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c40:	f7ff f9e8 	bl	8001014 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e1b8      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <HAL_RCC_OscConfig+0x508>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d108      	bne.n	8001c78 <HAL_RCC_OscConfig+0x4d8>
 8001c66:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c76:	e029      	b.n	8001ccc <HAL_RCC_OscConfig+0x52c>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b05      	cmp	r3, #5
 8001c7e:	d115      	bne.n	8001cac <HAL_RCC_OscConfig+0x50c>
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c86:	4a07      	ldr	r2, [pc, #28]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001c88:	f043 0304 	orr.w	r3, r3, #4
 8001c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c96:	4a03      	ldr	r2, [pc, #12]	; (8001ca4 <HAL_RCC_OscConfig+0x504>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca0:	e014      	b.n	8001ccc <HAL_RCC_OscConfig+0x52c>
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40007000 	.word	0x40007000
 8001cac:	4b9d      	ldr	r3, [pc, #628]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb2:	4a9c      	ldr	r2, [pc, #624]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001cb4:	f023 0301 	bic.w	r3, r3, #1
 8001cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cbc:	4b99      	ldr	r3, [pc, #612]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc2:	4a98      	ldr	r2, [pc, #608]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001cc4:	f023 0304 	bic.w	r3, r3, #4
 8001cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d016      	beq.n	8001d02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd4:	f7ff f99e 	bl	8001014 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cdc:	f7ff f99a 	bl	8001014 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e168      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf2:	4b8c      	ldr	r3, [pc, #560]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0ed      	beq.n	8001cdc <HAL_RCC_OscConfig+0x53c>
 8001d00:	e015      	b.n	8001d2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d02:	f7ff f987 	bl	8001014 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f7ff f983 	bl	8001014 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e151      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d20:	4b80      	ldr	r3, [pc, #512]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1ed      	bne.n	8001d0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d2e:	7ffb      	ldrb	r3, [r7, #31]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d105      	bne.n	8001d40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d34:	4b7b      	ldr	r3, [pc, #492]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	4a7a      	ldr	r2, [pc, #488]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0320 	and.w	r3, r3, #32
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d03c      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d01c      	beq.n	8001d8e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d54:	4b73      	ldr	r3, [pc, #460]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001d56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d5a:	4a72      	ldr	r2, [pc, #456]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d64:	f7ff f956 	bl	8001014 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d6c:	f7ff f952 	bl	8001014 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e122      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d7e:	4b69      	ldr	r3, [pc, #420]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0ef      	beq.n	8001d6c <HAL_RCC_OscConfig+0x5cc>
 8001d8c:	e01b      	b.n	8001dc6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d8e:	4b65      	ldr	r3, [pc, #404]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001d90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d94:	4a63      	ldr	r2, [pc, #396]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001d96:	f023 0301 	bic.w	r3, r3, #1
 8001d9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9e:	f7ff f939 	bl	8001014 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001da6:	f7ff f935 	bl	8001014 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e105      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db8:	4b5a      	ldr	r3, [pc, #360]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1ef      	bne.n	8001da6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 80f9 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	f040 80cf 	bne.w	8001f78 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001dda:	4b52      	ldr	r3, [pc, #328]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f003 0203 	and.w	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d12c      	bne.n	8001e48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d123      	bne.n	8001e48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d11b      	bne.n	8001e48 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d113      	bne.n	8001e48 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2a:	085b      	lsrs	r3, r3, #1
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d109      	bne.n	8001e48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	085b      	lsrs	r3, r3, #1
 8001e40:	3b01      	subs	r3, #1
 8001e42:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d071      	beq.n	8001f2c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2b0c      	cmp	r3, #12
 8001e4c:	d068      	beq.n	8001f20 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e4e:	4b35      	ldr	r3, [pc, #212]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d105      	bne.n	8001e66 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e5a:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e0ac      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e6a:	4b2e      	ldr	r3, [pc, #184]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a2d      	ldr	r2, [pc, #180]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001e70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e74:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e76:	f7ff f8cd 	bl	8001014 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7e:	f7ff f8c9 	bl	8001014 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e099      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e90:	4b24      	ldr	r3, [pc, #144]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1f0      	bne.n	8001e7e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e9c:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <HAL_RCC_OscConfig+0x788>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001eac:	3a01      	subs	r2, #1
 8001eae:	0112      	lsls	r2, r2, #4
 8001eb0:	4311      	orrs	r1, r2
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001eb6:	0212      	lsls	r2, r2, #8
 8001eb8:	4311      	orrs	r1, r2
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ebe:	0852      	lsrs	r2, r2, #1
 8001ec0:	3a01      	subs	r2, #1
 8001ec2:	0552      	lsls	r2, r2, #21
 8001ec4:	4311      	orrs	r1, r2
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eca:	0852      	lsrs	r2, r2, #1
 8001ecc:	3a01      	subs	r2, #1
 8001ece:	0652      	lsls	r2, r2, #25
 8001ed0:	4311      	orrs	r1, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ed6:	06d2      	lsls	r2, r2, #27
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	4912      	ldr	r1, [pc, #72]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ee0:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0f      	ldr	r2, [pc, #60]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eec:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4a0c      	ldr	r2, [pc, #48]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ef8:	f7ff f88c 	bl	8001014 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f00:	f7ff f888 	bl	8001014 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e058      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f12:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <HAL_RCC_OscConfig+0x784>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f1e:	e050      	b.n	8001fc2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e04f      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
 8001f24:	40021000 	.word	0x40021000
 8001f28:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2c:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <HAL_RCC_OscConfig+0x82c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d144      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f38:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <HAL_RCC_OscConfig+0x82c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a23      	ldr	r2, [pc, #140]	; (8001fcc <HAL_RCC_OscConfig+0x82c>)
 8001f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f44:	4b21      	ldr	r3, [pc, #132]	; (8001fcc <HAL_RCC_OscConfig+0x82c>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	4a20      	ldr	r2, [pc, #128]	; (8001fcc <HAL_RCC_OscConfig+0x82c>)
 8001f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f50:	f7ff f860 	bl	8001014 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f58:	f7ff f85c 	bl	8001014 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e02c      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f6a:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <HAL_RCC_OscConfig+0x82c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x7b8>
 8001f76:	e024      	b.n	8001fc2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2b0c      	cmp	r3, #12
 8001f7c:	d01f      	beq.n	8001fbe <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7e:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <HAL_RCC_OscConfig+0x82c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <HAL_RCC_OscConfig+0x82c>)
 8001f84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8a:	f7ff f843 	bl	8001014 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f92:	f7ff f83f 	bl	8001014 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e00f      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_RCC_OscConfig+0x82c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f0      	bne.n	8001f92 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_RCC_OscConfig+0x82c>)
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	4905      	ldr	r1, [pc, #20]	; (8001fcc <HAL_RCC_OscConfig+0x82c>)
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_RCC_OscConfig+0x830>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60cb      	str	r3, [r1, #12]
 8001fbc:	e001      	b.n	8001fc2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3720      	adds	r7, #32
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	feeefffc 	.word	0xfeeefffc

08001fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0e7      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b75      	ldr	r3, [pc, #468]	; (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d910      	bls.n	8002018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b72      	ldr	r3, [pc, #456]	; (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 0207 	bic.w	r2, r3, #7
 8001ffe:	4970      	ldr	r1, [pc, #448]	; (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b6e      	ldr	r3, [pc, #440]	; (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0cf      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d010      	beq.n	8002046 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	4b66      	ldr	r3, [pc, #408]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002030:	429a      	cmp	r2, r3
 8002032:	d908      	bls.n	8002046 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002034:	4b63      	ldr	r3, [pc, #396]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	4960      	ldr	r1, [pc, #384]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002042:	4313      	orrs	r3, r2
 8002044:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d04c      	beq.n	80020ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b03      	cmp	r3, #3
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800205a:	4b5a      	ldr	r3, [pc, #360]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d121      	bne.n	80020aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e0a6      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002072:	4b54      	ldr	r3, [pc, #336]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d115      	bne.n	80020aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e09a      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d107      	bne.n	800209a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800208a:	4b4e      	ldr	r3, [pc, #312]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e08e      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800209a:	4b4a      	ldr	r3, [pc, #296]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e086      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020aa:	4b46      	ldr	r3, [pc, #280]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f023 0203 	bic.w	r2, r3, #3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4943      	ldr	r1, [pc, #268]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020bc:	f7fe ffaa 	bl	8001014 <HAL_GetTick>
 80020c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	e00a      	b.n	80020da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c4:	f7fe ffa6 	bl	8001014 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e06e      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	4b3a      	ldr	r3, [pc, #232]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 020c 	and.w	r2, r3, #12
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d1eb      	bne.n	80020c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d010      	beq.n	800211a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002104:	429a      	cmp	r2, r3
 8002106:	d208      	bcs.n	800211a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002108:	4b2e      	ldr	r3, [pc, #184]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	492b      	ldr	r1, [pc, #172]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002116:	4313      	orrs	r3, r2
 8002118:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800211a:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d210      	bcs.n	800214a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002128:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 0207 	bic.w	r2, r3, #7
 8002130:	4923      	ldr	r1, [pc, #140]	; (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	4313      	orrs	r3, r2
 8002136:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002138:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <HAL_RCC_ClockConfig+0x1ec>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d001      	beq.n	800214a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e036      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	2b00      	cmp	r3, #0
 8002154:	d008      	beq.n	8002168 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002156:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	4918      	ldr	r1, [pc, #96]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002164:	4313      	orrs	r3, r2
 8002166:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d009      	beq.n	8002188 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002174:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4910      	ldr	r1, [pc, #64]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002184:	4313      	orrs	r3, r2
 8002186:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002188:	f000 f824 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 800218c:	4602      	mov	r2, r0
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	091b      	lsrs	r3, r3, #4
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	490b      	ldr	r1, [pc, #44]	; (80021c8 <HAL_RCC_ClockConfig+0x1f4>)
 800219a:	5ccb      	ldrb	r3, [r1, r3]
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	fa22 f303 	lsr.w	r3, r2, r3
 80021a4:	4a09      	ldr	r2, [pc, #36]	; (80021cc <HAL_RCC_ClockConfig+0x1f8>)
 80021a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_RCC_ClockConfig+0x1fc>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe fee1 	bl	8000f74 <HAL_InitTick>
 80021b2:	4603      	mov	r3, r0
 80021b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80021b6:	7afb      	ldrb	r3, [r7, #11]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40022000 	.word	0x40022000
 80021c4:	40021000 	.word	0x40021000
 80021c8:	08005958 	.word	0x08005958
 80021cc:	20000000 	.word	0x20000000
 80021d0:	20000004 	.word	0x20000004

080021d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	; 0x24
 80021d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	2300      	movs	r3, #0
 80021e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021e2:	4b3e      	ldr	r3, [pc, #248]	; (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021ec:	4b3b      	ldr	r3, [pc, #236]	; (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x34>
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	2b0c      	cmp	r3, #12
 8002200:	d121      	bne.n	8002246 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d11e      	bne.n	8002246 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002208:	4b34      	ldr	r3, [pc, #208]	; (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d107      	bne.n	8002224 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002214:	4b31      	ldr	r3, [pc, #196]	; (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800221a:	0a1b      	lsrs	r3, r3, #8
 800221c:	f003 030f 	and.w	r3, r3, #15
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	e005      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002224:	4b2d      	ldr	r3, [pc, #180]	; (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002230:	4a2b      	ldr	r2, [pc, #172]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002238:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10d      	bne.n	800225c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002244:	e00a      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b04      	cmp	r3, #4
 800224a:	d102      	bne.n	8002252 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800224c:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800224e:	61bb      	str	r3, [r7, #24]
 8002250:	e004      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b08      	cmp	r3, #8
 8002256:	d101      	bne.n	800225c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002258:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800225a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	2b0c      	cmp	r3, #12
 8002260:	d134      	bne.n	80022cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002262:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d003      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0xa6>
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b03      	cmp	r3, #3
 8002276:	d003      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0xac>
 8002278:	e005      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800227a:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800227c:	617b      	str	r3, [r7, #20]
      break;
 800227e:	e005      	b.n	800228c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002280:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002282:	617b      	str	r3, [r7, #20]
      break;
 8002284:	e002      	b.n	800228c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	617b      	str	r3, [r7, #20]
      break;
 800228a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800228c:	4b13      	ldr	r3, [pc, #76]	; (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	3301      	adds	r3, #1
 8002298:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	0a1b      	lsrs	r3, r3, #8
 80022a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	fb03 f202 	mul.w	r2, r3, r2
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022b2:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <HAL_RCC_GetSysClockFreq+0x108>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	0e5b      	lsrs	r3, r3, #25
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	3301      	adds	r3, #1
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022cc:	69bb      	ldr	r3, [r7, #24]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3724      	adds	r7, #36	; 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000
 80022e0:	08005970 	.word	0x08005970
 80022e4:	00f42400 	.word	0x00f42400
 80022e8:	007a1200 	.word	0x007a1200

080022ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <HAL_RCC_GetHCLKFreq+0x14>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	20000000 	.word	0x20000000

08002304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002308:	f7ff fff0 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 800230c:	4602      	mov	r2, r0
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	0a1b      	lsrs	r3, r3, #8
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	4904      	ldr	r1, [pc, #16]	; (800232c <HAL_RCC_GetPCLK1Freq+0x28>)
 800231a:	5ccb      	ldrb	r3, [r1, r3]
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002324:	4618      	mov	r0, r3
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000
 800232c:	08005968 	.word	0x08005968

08002330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002334:	f7ff ffda 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 8002338:	4602      	mov	r2, r0
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_RCC_GetPCLK2Freq+0x24>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	0adb      	lsrs	r3, r3, #11
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	4904      	ldr	r1, [pc, #16]	; (8002358 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002346:	5ccb      	ldrb	r3, [r1, r3]
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002350:	4618      	mov	r0, r3
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000
 8002358:	08005968 	.word	0x08005968

0800235c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002364:	2300      	movs	r3, #0
 8002366:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002368:	4b2a      	ldr	r3, [pc, #168]	; (8002414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800236a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002374:	f7ff f9a0 	bl	80016b8 <HAL_PWREx_GetVoltageRange>
 8002378:	6178      	str	r0, [r7, #20]
 800237a:	e014      	b.n	80023a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800237c:	4b25      	ldr	r3, [pc, #148]	; (8002414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	4a24      	ldr	r2, [pc, #144]	; (8002414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002386:	6593      	str	r3, [r2, #88]	; 0x58
 8002388:	4b22      	ldr	r3, [pc, #136]	; (8002414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800238a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002394:	f7ff f990 	bl	80016b8 <HAL_PWREx_GetVoltageRange>
 8002398:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800239a:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239e:	4a1d      	ldr	r2, [pc, #116]	; (8002414 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ac:	d10b      	bne.n	80023c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b80      	cmp	r3, #128	; 0x80
 80023b2:	d919      	bls.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2ba0      	cmp	r3, #160	; 0xa0
 80023b8:	d902      	bls.n	80023c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023ba:	2302      	movs	r3, #2
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	e013      	b.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023c0:	2301      	movs	r3, #1
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	e010      	b.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b80      	cmp	r3, #128	; 0x80
 80023ca:	d902      	bls.n	80023d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023cc:	2303      	movs	r3, #3
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	e00a      	b.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b80      	cmp	r3, #128	; 0x80
 80023d6:	d102      	bne.n	80023de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023d8:	2302      	movs	r3, #2
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	e004      	b.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b70      	cmp	r3, #112	; 0x70
 80023e2:	d101      	bne.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023e4:	2301      	movs	r3, #1
 80023e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f023 0207 	bic.w	r2, r3, #7
 80023f0:	4909      	ldr	r1, [pc, #36]	; (8002418 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023f8:	4b07      	ldr	r3, [pc, #28]	; (8002418 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	429a      	cmp	r2, r3
 8002404:	d001      	beq.n	800240a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000
 8002418:	40022000 	.word	0x40022000

0800241c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002424:	2300      	movs	r3, #0
 8002426:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002428:	2300      	movs	r3, #0
 800242a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002434:	2b00      	cmp	r3, #0
 8002436:	d041      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800243c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002440:	d02a      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002442:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002446:	d824      	bhi.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002448:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800244c:	d008      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800244e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002452:	d81e      	bhi.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002458:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800245c:	d010      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800245e:	e018      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002460:	4b86      	ldr	r3, [pc, #536]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4a85      	ldr	r2, [pc, #532]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800246c:	e015      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3304      	adds	r3, #4
 8002472:	2100      	movs	r1, #0
 8002474:	4618      	mov	r0, r3
 8002476:	f000 facd 	bl	8002a14 <RCCEx_PLLSAI1_Config>
 800247a:	4603      	mov	r3, r0
 800247c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800247e:	e00c      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3320      	adds	r3, #32
 8002484:	2100      	movs	r1, #0
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fbb6 	bl	8002bf8 <RCCEx_PLLSAI2_Config>
 800248c:	4603      	mov	r3, r0
 800248e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002490:	e003      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	74fb      	strb	r3, [r7, #19]
      break;
 8002496:	e000      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002498:	bf00      	nop
    }

    if(ret == HAL_OK)
 800249a:	7cfb      	ldrb	r3, [r7, #19]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10b      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024a0:	4b76      	ldr	r3, [pc, #472]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024ae:	4973      	ldr	r1, [pc, #460]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024b6:	e001      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b8:	7cfb      	ldrb	r3, [r7, #19]
 80024ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d041      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024d0:	d02a      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80024d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024d6:	d824      	bhi.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024dc:	d008      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024e2:	d81e      	bhi.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00a      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80024e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024ec:	d010      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024ee:	e018      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024f0:	4b62      	ldr	r3, [pc, #392]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4a61      	ldr	r2, [pc, #388]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024fc:	e015      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3304      	adds	r3, #4
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fa85 	bl	8002a14 <RCCEx_PLLSAI1_Config>
 800250a:	4603      	mov	r3, r0
 800250c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800250e:	e00c      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3320      	adds	r3, #32
 8002514:	2100      	movs	r1, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fb6e 	bl	8002bf8 <RCCEx_PLLSAI2_Config>
 800251c:	4603      	mov	r3, r0
 800251e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002520:	e003      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	74fb      	strb	r3, [r7, #19]
      break;
 8002526:	e000      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800252a:	7cfb      	ldrb	r3, [r7, #19]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10b      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002530:	4b52      	ldr	r3, [pc, #328]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800253e:	494f      	ldr	r1, [pc, #316]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002546:	e001      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002548:	7cfb      	ldrb	r3, [r7, #19]
 800254a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80a0 	beq.w	800269a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800255e:	4b47      	ldr	r3, [pc, #284]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800256e:	2300      	movs	r3, #0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00d      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002574:	4b41      	ldr	r3, [pc, #260]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002578:	4a40      	ldr	r2, [pc, #256]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257e:	6593      	str	r3, [r2, #88]	; 0x58
 8002580:	4b3e      	ldr	r3, [pc, #248]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800258c:	2301      	movs	r3, #1
 800258e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002590:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a3a      	ldr	r2, [pc, #232]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800259c:	f7fe fd3a 	bl	8001014 <HAL_GetTick>
 80025a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025a2:	e009      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a4:	f7fe fd36 	bl	8001014 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d902      	bls.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	74fb      	strb	r3, [r7, #19]
        break;
 80025b6:	e005      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025b8:	4b31      	ldr	r3, [pc, #196]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ef      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80025c4:	7cfb      	ldrb	r3, [r7, #19]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d15c      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025ca:	4b2c      	ldr	r3, [pc, #176]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01f      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d019      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025e8:	4b24      	ldr	r3, [pc, #144]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025f4:	4b21      	ldr	r3, [pc, #132]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fa:	4a20      	ldr	r2, [pc, #128]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002604:	4b1d      	ldr	r3, [pc, #116]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260a:	4a1c      	ldr	r2, [pc, #112]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002614:	4a19      	ldr	r2, [pc, #100]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d016      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002626:	f7fe fcf5 	bl	8001014 <HAL_GetTick>
 800262a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800262c:	e00b      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262e:	f7fe fcf1 	bl	8001014 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f241 3288 	movw	r2, #5000	; 0x1388
 800263c:	4293      	cmp	r3, r2
 800263e:	d902      	bls.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	74fb      	strb	r3, [r7, #19]
            break;
 8002644:	e006      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002646:	4b0d      	ldr	r3, [pc, #52]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0ec      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10c      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800265a:	4b08      	ldr	r3, [pc, #32]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002660:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266a:	4904      	ldr	r1, [pc, #16]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002672:	e009      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002674:	7cfb      	ldrb	r3, [r7, #19]
 8002676:	74bb      	strb	r3, [r7, #18]
 8002678:	e006      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000
 8002680:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002688:	7c7b      	ldrb	r3, [r7, #17]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d105      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800268e:	4ba6      	ldr	r3, [pc, #664]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	4aa5      	ldr	r2, [pc, #660]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002698:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026a6:	4ba0      	ldr	r3, [pc, #640]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ac:	f023 0203 	bic.w	r2, r3, #3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	499c      	ldr	r1, [pc, #624]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00a      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026c8:	4b97      	ldr	r3, [pc, #604]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ce:	f023 020c 	bic.w	r2, r3, #12
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d6:	4994      	ldr	r1, [pc, #592]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026ea:	4b8f      	ldr	r3, [pc, #572]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	498b      	ldr	r1, [pc, #556]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800270c:	4b86      	ldr	r3, [pc, #536]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	4983      	ldr	r1, [pc, #524]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800272e:	4b7e      	ldr	r3, [pc, #504]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800273c:	497a      	ldr	r1, [pc, #488]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00a      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002750:	4b75      	ldr	r3, [pc, #468]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002756:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275e:	4972      	ldr	r1, [pc, #456]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002772:	4b6d      	ldr	r3, [pc, #436]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002778:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002780:	4969      	ldr	r1, [pc, #420]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002794:	4b64      	ldr	r3, [pc, #400]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027a2:	4961      	ldr	r1, [pc, #388]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00a      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027b6:	4b5c      	ldr	r3, [pc, #368]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c4:	4958      	ldr	r1, [pc, #352]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00a      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027d8:	4b53      	ldr	r3, [pc, #332]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e6:	4950      	ldr	r1, [pc, #320]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027fa:	4b4b      	ldr	r3, [pc, #300]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80027fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002800:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	4947      	ldr	r1, [pc, #284]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00a      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800281c:	4b42      	ldr	r3, [pc, #264]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800281e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002822:	f023 0203 	bic.w	r2, r3, #3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282a:	493f      	ldr	r1, [pc, #252]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d028      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800283e:	4b3a      	ldr	r3, [pc, #232]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002844:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284c:	4936      	ldr	r1, [pc, #216]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800285c:	d106      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800285e:	4b32      	ldr	r3, [pc, #200]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	4a31      	ldr	r2, [pc, #196]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002868:	60d3      	str	r3, [r2, #12]
 800286a:	e011      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002874:	d10c      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3304      	adds	r3, #4
 800287a:	2101      	movs	r1, #1
 800287c:	4618      	mov	r0, r3
 800287e:	f000 f8c9 	bl	8002a14 <RCCEx_PLLSAI1_Config>
 8002882:	4603      	mov	r3, r0
 8002884:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002886:	7cfb      	ldrb	r3, [r7, #19]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800288c:	7cfb      	ldrb	r3, [r7, #19]
 800288e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d028      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800289c:	4b22      	ldr	r3, [pc, #136]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028aa:	491f      	ldr	r1, [pc, #124]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028ba:	d106      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028bc:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4a19      	ldr	r2, [pc, #100]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028c6:	60d3      	str	r3, [r2, #12]
 80028c8:	e011      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028d2:	d10c      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3304      	adds	r3, #4
 80028d8:	2101      	movs	r1, #1
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f89a 	bl	8002a14 <RCCEx_PLLSAI1_Config>
 80028e0:	4603      	mov	r3, r0
 80028e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80028ea:	7cfb      	ldrb	r3, [r7, #19]
 80028ec:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d02a      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028fa:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002900:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002908:	4907      	ldr	r1, [pc, #28]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002918:	d108      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800291a:	4b03      	ldr	r3, [pc, #12]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	4a02      	ldr	r2, [pc, #8]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002920:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002924:	60d3      	str	r3, [r2, #12]
 8002926:	e013      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002928:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002930:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002934:	d10c      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3304      	adds	r3, #4
 800293a:	2101      	movs	r1, #1
 800293c:	4618      	mov	r0, r3
 800293e:	f000 f869 	bl	8002a14 <RCCEx_PLLSAI1_Config>
 8002942:	4603      	mov	r3, r0
 8002944:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002946:	7cfb      	ldrb	r3, [r7, #19]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800294c:	7cfb      	ldrb	r3, [r7, #19]
 800294e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d02f      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800295c:	4b2c      	ldr	r3, [pc, #176]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002962:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800296a:	4929      	ldr	r1, [pc, #164]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002976:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800297a:	d10d      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3304      	adds	r3, #4
 8002980:	2102      	movs	r1, #2
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f846 	bl	8002a14 <RCCEx_PLLSAI1_Config>
 8002988:	4603      	mov	r3, r0
 800298a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800298c:	7cfb      	ldrb	r3, [r7, #19]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d014      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002992:	7cfb      	ldrb	r3, [r7, #19]
 8002994:	74bb      	strb	r3, [r7, #18]
 8002996:	e011      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800299c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029a0:	d10c      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3320      	adds	r3, #32
 80029a6:	2102      	movs	r1, #2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 f925 	bl	8002bf8 <RCCEx_PLLSAI2_Config>
 80029ae:	4603      	mov	r3, r0
 80029b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029b2:	7cfb      	ldrb	r3, [r7, #19]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80029b8:	7cfb      	ldrb	r3, [r7, #19]
 80029ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00b      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029c8:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80029ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029d8:	490d      	ldr	r1, [pc, #52]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00b      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029fc:	4904      	ldr	r1, [pc, #16]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a04:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000

08002a14 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a22:	4b74      	ldr	r3, [pc, #464]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d018      	beq.n	8002a60 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a2e:	4b71      	ldr	r3, [pc, #452]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f003 0203 	and.w	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d10d      	bne.n	8002a5a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
       ||
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a46:	4b6b      	ldr	r3, [pc, #428]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	091b      	lsrs	r3, r3, #4
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
       ||
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d047      	beq.n	8002aea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	73fb      	strb	r3, [r7, #15]
 8002a5e:	e044      	b.n	8002aea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d018      	beq.n	8002a9a <RCCEx_PLLSAI1_Config+0x86>
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d825      	bhi.n	8002ab8 <RCCEx_PLLSAI1_Config+0xa4>
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d002      	beq.n	8002a76 <RCCEx_PLLSAI1_Config+0x62>
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d009      	beq.n	8002a88 <RCCEx_PLLSAI1_Config+0x74>
 8002a74:	e020      	b.n	8002ab8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a76:	4b5f      	ldr	r3, [pc, #380]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d11d      	bne.n	8002abe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a86:	e01a      	b.n	8002abe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a88:	4b5a      	ldr	r3, [pc, #360]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d116      	bne.n	8002ac2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a98:	e013      	b.n	8002ac2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a9a:	4b56      	ldr	r3, [pc, #344]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10f      	bne.n	8002ac6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002aa6:	4b53      	ldr	r3, [pc, #332]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d109      	bne.n	8002ac6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ab6:	e006      	b.n	8002ac6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
      break;
 8002abc:	e004      	b.n	8002ac8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002abe:	bf00      	nop
 8002ac0:	e002      	b.n	8002ac8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ac2:	bf00      	nop
 8002ac4:	e000      	b.n	8002ac8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ac6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10d      	bne.n	8002aea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ace:	4b49      	ldr	r3, [pc, #292]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6819      	ldr	r1, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	430b      	orrs	r3, r1
 8002ae4:	4943      	ldr	r1, [pc, #268]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d17c      	bne.n	8002bea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002af0:	4b40      	ldr	r3, [pc, #256]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a3f      	ldr	r2, [pc, #252]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002af6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002afc:	f7fe fa8a 	bl	8001014 <HAL_GetTick>
 8002b00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b02:	e009      	b.n	8002b18 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b04:	f7fe fa86 	bl	8001014 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d902      	bls.n	8002b18 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	73fb      	strb	r3, [r7, #15]
        break;
 8002b16:	e005      	b.n	8002b24 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b18:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1ef      	bne.n	8002b04 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d15f      	bne.n	8002bea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d110      	bne.n	8002b52 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b30:	4b30      	ldr	r3, [pc, #192]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002b38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6892      	ldr	r2, [r2, #8]
 8002b40:	0211      	lsls	r1, r2, #8
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68d2      	ldr	r2, [r2, #12]
 8002b46:	06d2      	lsls	r2, r2, #27
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	492a      	ldr	r1, [pc, #168]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	610b      	str	r3, [r1, #16]
 8002b50:	e027      	b.n	8002ba2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d112      	bne.n	8002b7e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b58:	4b26      	ldr	r3, [pc, #152]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6892      	ldr	r2, [r2, #8]
 8002b68:	0211      	lsls	r1, r2, #8
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6912      	ldr	r2, [r2, #16]
 8002b6e:	0852      	lsrs	r2, r2, #1
 8002b70:	3a01      	subs	r2, #1
 8002b72:	0552      	lsls	r2, r2, #21
 8002b74:	430a      	orrs	r2, r1
 8002b76:	491f      	ldr	r1, [pc, #124]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	610b      	str	r3, [r1, #16]
 8002b7c:	e011      	b.n	8002ba2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b7e:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6892      	ldr	r2, [r2, #8]
 8002b8e:	0211      	lsls	r1, r2, #8
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6952      	ldr	r2, [r2, #20]
 8002b94:	0852      	lsrs	r2, r2, #1
 8002b96:	3a01      	subs	r2, #1
 8002b98:	0652      	lsls	r2, r2, #25
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	4915      	ldr	r1, [pc, #84]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ba2:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a13      	ldr	r2, [pc, #76]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ba8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bae:	f7fe fa31 	bl	8001014 <HAL_GetTick>
 8002bb2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bb4:	e009      	b.n	8002bca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bb6:	f7fe fa2d 	bl	8001014 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d902      	bls.n	8002bca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	73fb      	strb	r3, [r7, #15]
          break;
 8002bc8:	e005      	b.n	8002bd6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0ef      	beq.n	8002bb6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d106      	bne.n	8002bea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	4903      	ldr	r1, [pc, #12]	; (8002bf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000

08002bf8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c06:	4b69      	ldr	r3, [pc, #420]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d018      	beq.n	8002c44 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c12:	4b66      	ldr	r3, [pc, #408]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f003 0203 	and.w	r2, r3, #3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d10d      	bne.n	8002c3e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
       ||
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d009      	beq.n	8002c3e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c2a:	4b60      	ldr	r3, [pc, #384]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
       ||
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d047      	beq.n	8002cce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	73fb      	strb	r3, [r7, #15]
 8002c42:	e044      	b.n	8002cce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d018      	beq.n	8002c7e <RCCEx_PLLSAI2_Config+0x86>
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d825      	bhi.n	8002c9c <RCCEx_PLLSAI2_Config+0xa4>
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d002      	beq.n	8002c5a <RCCEx_PLLSAI2_Config+0x62>
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d009      	beq.n	8002c6c <RCCEx_PLLSAI2_Config+0x74>
 8002c58:	e020      	b.n	8002c9c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c5a:	4b54      	ldr	r3, [pc, #336]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d11d      	bne.n	8002ca2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c6a:	e01a      	b.n	8002ca2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c6c:	4b4f      	ldr	r3, [pc, #316]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d116      	bne.n	8002ca6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c7c:	e013      	b.n	8002ca6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c7e:	4b4b      	ldr	r3, [pc, #300]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10f      	bne.n	8002caa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c8a:	4b48      	ldr	r3, [pc, #288]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c9a:	e006      	b.n	8002caa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca0:	e004      	b.n	8002cac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ca2:	bf00      	nop
 8002ca4:	e002      	b.n	8002cac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ca6:	bf00      	nop
 8002ca8:	e000      	b.n	8002cac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002caa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10d      	bne.n	8002cce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cb2:	4b3e      	ldr	r3, [pc, #248]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6819      	ldr	r1, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	4938      	ldr	r1, [pc, #224]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d166      	bne.n	8002da2 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002cd4:	4b35      	ldr	r3, [pc, #212]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a34      	ldr	r2, [pc, #208]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ce0:	f7fe f998 	bl	8001014 <HAL_GetTick>
 8002ce4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ce6:	e009      	b.n	8002cfc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ce8:	f7fe f994 	bl	8001014 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d902      	bls.n	8002cfc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	73fb      	strb	r3, [r7, #15]
        break;
 8002cfa:	e005      	b.n	8002d08 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cfc:	4b2b      	ldr	r3, [pc, #172]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1ef      	bne.n	8002ce8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d149      	bne.n	8002da2 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d110      	bne.n	8002d36 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d14:	4b25      	ldr	r3, [pc, #148]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002d1c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6892      	ldr	r2, [r2, #8]
 8002d24:	0211      	lsls	r1, r2, #8
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68d2      	ldr	r2, [r2, #12]
 8002d2a:	06d2      	lsls	r2, r2, #27
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	491f      	ldr	r1, [pc, #124]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	614b      	str	r3, [r1, #20]
 8002d34:	e011      	b.n	8002d5a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d36:	4b1d      	ldr	r3, [pc, #116]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6892      	ldr	r2, [r2, #8]
 8002d46:	0211      	lsls	r1, r2, #8
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6912      	ldr	r2, [r2, #16]
 8002d4c:	0852      	lsrs	r2, r2, #1
 8002d4e:	3a01      	subs	r2, #1
 8002d50:	0652      	lsls	r2, r2, #25
 8002d52:	430a      	orrs	r2, r1
 8002d54:	4915      	ldr	r1, [pc, #84]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d5a:	4b14      	ldr	r3, [pc, #80]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a13      	ldr	r2, [pc, #76]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d64:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d66:	f7fe f955 	bl	8001014 <HAL_GetTick>
 8002d6a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d6c:	e009      	b.n	8002d82 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d6e:	f7fe f951 	bl	8001014 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d902      	bls.n	8002d82 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	73fb      	strb	r3, [r7, #15]
          break;
 8002d80:	e005      	b.n	8002d8e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0ef      	beq.n	8002d6e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d106      	bne.n	8002da2 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	4903      	ldr	r1, [pc, #12]	; (8002dac <RCCEx_PLLSAI2_Config+0x1b4>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000

08002db0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e040      	b.n	8002e44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7fd ff40 	bl	8000c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2224      	movs	r2, #36	; 0x24
 8002ddc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0201 	bic.w	r2, r2, #1
 8002dec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fec0 	bl	8003b7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fc05 	bl	800360c <UART_SetConfig>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e01b      	b.n	8002e44 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 ff3f 	bl	8003cc0 <UART_CheckIdleState>
 8002e42:	4603      	mov	r3, r0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08a      	sub	sp, #40	; 0x28
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d178      	bne.n	8002f56 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <HAL_UART_Transmit+0x24>
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e071      	b.n	8002f58 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2221      	movs	r2, #33	; 0x21
 8002e80:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e82:	f7fe f8c7 	bl	8001014 <HAL_GetTick>
 8002e86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	88fa      	ldrh	r2, [r7, #6]
 8002e8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	88fa      	ldrh	r2, [r7, #6]
 8002e94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea0:	d108      	bne.n	8002eb4 <HAL_UART_Transmit+0x68>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d104      	bne.n	8002eb4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	61bb      	str	r3, [r7, #24]
 8002eb2:	e003      	b.n	8002ebc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ebc:	e030      	b.n	8002f20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2180      	movs	r1, #128	; 0x80
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 ffa1 	bl	8003e10 <UART_WaitOnFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d004      	beq.n	8002ede <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e03c      	b.n	8002f58 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10b      	bne.n	8002efc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	881a      	ldrh	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ef0:	b292      	uxth	r2, r2
 8002ef2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	61bb      	str	r3, [r7, #24]
 8002efa:	e008      	b.n	8002f0e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	781a      	ldrb	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	b292      	uxth	r2, r2
 8002f06:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1c8      	bne.n	8002ebe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2200      	movs	r2, #0
 8002f34:	2140      	movs	r1, #64	; 0x40
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 ff6a 	bl	8003e10 <UART_WaitOnFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d004      	beq.n	8002f4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2220      	movs	r2, #32
 8002f46:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e005      	b.n	8002f58 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	e000      	b.n	8002f58 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002f56:	2302      	movs	r3, #2
  }
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3720      	adds	r7, #32
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08a      	sub	sp, #40	; 0x28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d137      	bne.n	8002fe8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <HAL_UART_Receive_IT+0x24>
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e030      	b.n	8002fea <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a18      	ldr	r2, [pc, #96]	; (8002ff4 <HAL_UART_Receive_IT+0x94>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d01f      	beq.n	8002fd8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d018      	beq.n	8002fd8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	e853 3f00 	ldrex	r3, [r3]
 8002fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	623b      	str	r3, [r7, #32]
 8002fc6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc8:	69f9      	ldr	r1, [r7, #28]
 8002fca:	6a3a      	ldr	r2, [r7, #32]
 8002fcc:	e841 2300 	strex	r3, r2, [r1]
 8002fd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1e6      	bne.n	8002fa6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002fd8:	88fb      	ldrh	r3, [r7, #6]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 ff7e 	bl	8003ee0 <UART_Start_Receive_IT>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	e000      	b.n	8002fea <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fe8:	2302      	movs	r3, #2
  }
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3728      	adds	r7, #40	; 0x28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40008000 	.word	0x40008000

08002ff8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b0ba      	sub	sp, #232	; 0xe8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800301e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003022:	f640 030f 	movw	r3, #2063	; 0x80f
 8003026:	4013      	ands	r3, r2
 8003028:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800302c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003030:	2b00      	cmp	r3, #0
 8003032:	d115      	bne.n	8003060 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00f      	beq.n	8003060 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b00      	cmp	r3, #0
 800304a:	d009      	beq.n	8003060 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 82ae 	beq.w	80035b2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	4798      	blx	r3
      }
      return;
 800305e:	e2a8      	b.n	80035b2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 8117 	beq.w	8003298 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800306a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003076:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800307a:	4b85      	ldr	r3, [pc, #532]	; (8003290 <HAL_UART_IRQHandler+0x298>)
 800307c:	4013      	ands	r3, r2
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 810a 	beq.w	8003298 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d011      	beq.n	80030b4 <HAL_UART_IRQHandler+0xbc>
 8003090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00b      	beq.n	80030b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2201      	movs	r2, #1
 80030a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030aa:	f043 0201 	orr.w	r2, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d011      	beq.n	80030e4 <HAL_UART_IRQHandler+0xec>
 80030c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00b      	beq.n	80030e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2202      	movs	r2, #2
 80030d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030da:	f043 0204 	orr.w	r2, r3, #4
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d011      	beq.n	8003114 <HAL_UART_IRQHandler+0x11c>
 80030f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00b      	beq.n	8003114 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2204      	movs	r2, #4
 8003102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800310a:	f043 0202 	orr.w	r2, r3, #2
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b00      	cmp	r3, #0
 800311e:	d017      	beq.n	8003150 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	2b00      	cmp	r3, #0
 800312a:	d105      	bne.n	8003138 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800312c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003130:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00b      	beq.n	8003150 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2208      	movs	r2, #8
 800313e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003146:	f043 0208 	orr.w	r2, r3, #8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003158:	2b00      	cmp	r3, #0
 800315a:	d012      	beq.n	8003182 <HAL_UART_IRQHandler+0x18a>
 800315c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003160:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00c      	beq.n	8003182 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003170:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003178:	f043 0220 	orr.w	r2, r3, #32
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8214 	beq.w	80035b6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800318e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00d      	beq.n	80031b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800319a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d007      	beq.n	80031b6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ca:	2b40      	cmp	r3, #64	; 0x40
 80031cc:	d005      	beq.n	80031da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d04f      	beq.n	800327a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 ff46 	bl	800406c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	2b40      	cmp	r3, #64	; 0x40
 80031ec:	d141      	bne.n	8003272 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3308      	adds	r3, #8
 80031f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031fc:	e853 3f00 	ldrex	r3, [r3]
 8003200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003204:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800320c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3308      	adds	r3, #8
 8003216:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800321a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800321e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003222:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003226:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800322a:	e841 2300 	strex	r3, r2, [r1]
 800322e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1d9      	bne.n	80031ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323e:	2b00      	cmp	r3, #0
 8003240:	d013      	beq.n	800326a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003246:	4a13      	ldr	r2, [pc, #76]	; (8003294 <HAL_UART_IRQHandler+0x29c>)
 8003248:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800324e:	4618      	mov	r0, r3
 8003250:	f7fe f85f 	bl	8001312 <HAL_DMA_Abort_IT>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d017      	beq.n	800328a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003264:	4610      	mov	r0, r2
 8003266:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003268:	e00f      	b.n	800328a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f9b8 	bl	80035e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003270:	e00b      	b.n	800328a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f9b4 	bl	80035e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003278:	e007      	b.n	800328a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f9b0 	bl	80035e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003288:	e195      	b.n	80035b6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800328a:	bf00      	nop
    return;
 800328c:	e193      	b.n	80035b6 <HAL_UART_IRQHandler+0x5be>
 800328e:	bf00      	nop
 8003290:	04000120 	.word	0x04000120
 8003294:	08004135 	.word	0x08004135

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329c:	2b01      	cmp	r3, #1
 800329e:	f040 814e 	bne.w	800353e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 8147 	beq.w	800353e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 8140 	beq.w	800353e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2210      	movs	r2, #16
 80032c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d0:	2b40      	cmp	r3, #64	; 0x40
 80032d2:	f040 80b8 	bne.w	8003446 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 8167 	beq.w	80035ba <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80032f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032f6:	429a      	cmp	r2, r3
 80032f8:	f080 815f 	bcs.w	80035ba <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003302:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0320 	and.w	r3, r3, #32
 8003312:	2b00      	cmp	r3, #0
 8003314:	f040 8086 	bne.w	8003424 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003320:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003324:	e853 3f00 	ldrex	r3, [r3]
 8003328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800332c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003334:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003342:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003346:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800334e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003352:	e841 2300 	strex	r3, r2, [r1]
 8003356:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800335a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1da      	bne.n	8003318 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3308      	adds	r3, #8
 8003368:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800336c:	e853 3f00 	ldrex	r3, [r3]
 8003370:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003374:	f023 0301 	bic.w	r3, r3, #1
 8003378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3308      	adds	r3, #8
 8003382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003386:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800338a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800338e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003392:	e841 2300 	strex	r3, r2, [r1]
 8003396:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1e1      	bne.n	8003362 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3308      	adds	r3, #8
 80033a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033a8:	e853 3f00 	ldrex	r3, [r3]
 80033ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3308      	adds	r3, #8
 80033be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033ca:	e841 2300 	strex	r3, r2, [r1]
 80033ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1e3      	bne.n	800339e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f4:	f023 0310 	bic.w	r3, r3, #16
 80033f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003406:	65bb      	str	r3, [r7, #88]	; 0x58
 8003408:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800340c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800340e:	e841 2300 	strex	r3, r2, [r1]
 8003412:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1e4      	bne.n	80033e4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341e:	4618      	mov	r0, r3
 8003420:	f7fd ff39 	bl	8001296 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003436:	b29b      	uxth	r3, r3
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	b29b      	uxth	r3, r3
 800343c:	4619      	mov	r1, r3
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f8d8 	bl	80035f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003444:	e0b9      	b.n	80035ba <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003452:	b29b      	uxth	r3, r3
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 80ab 	beq.w	80035be <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003468:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80a6 	beq.w	80035be <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347a:	e853 3f00 	ldrex	r3, [r3]
 800347e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003482:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003486:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003494:	647b      	str	r3, [r7, #68]	; 0x44
 8003496:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003498:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800349a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800349c:	e841 2300 	strex	r3, r2, [r1]
 80034a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1e4      	bne.n	8003472 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3308      	adds	r3, #8
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	e853 3f00 	ldrex	r3, [r3]
 80034b6:	623b      	str	r3, [r7, #32]
   return(result);
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	f023 0301 	bic.w	r3, r3, #1
 80034be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	3308      	adds	r3, #8
 80034c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034cc:	633a      	str	r2, [r7, #48]	; 0x30
 80034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034d4:	e841 2300 	strex	r3, r2, [r1]
 80034d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1e3      	bne.n	80034a8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	e853 3f00 	ldrex	r3, [r3]
 8003500:	60fb      	str	r3, [r7, #12]
   return(result);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f023 0310 	bic.w	r3, r3, #16
 8003508:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003516:	61fb      	str	r3, [r7, #28]
 8003518:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351a:	69b9      	ldr	r1, [r7, #24]
 800351c:	69fa      	ldr	r2, [r7, #28]
 800351e:	e841 2300 	strex	r3, r2, [r1]
 8003522:	617b      	str	r3, [r7, #20]
   return(result);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1e4      	bne.n	80034f4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2202      	movs	r2, #2
 800352e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003534:	4619      	mov	r1, r3
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f85c 	bl	80035f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800353c:	e03f      	b.n	80035be <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800353e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00e      	beq.n	8003568 <HAL_UART_IRQHandler+0x570>
 800354a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800354e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800355e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 ffe3 	bl	800452c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003566:	e02d      	b.n	80035c4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800356c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00e      	beq.n	8003592 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01c      	beq.n	80035c2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	4798      	blx	r3
    }
    return;
 8003590:	e017      	b.n	80035c2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d012      	beq.n	80035c4 <HAL_UART_IRQHandler+0x5cc>
 800359e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00c      	beq.n	80035c4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fdd8 	bl	8004160 <UART_EndTransmit_IT>
    return;
 80035b0:	e008      	b.n	80035c4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80035b2:	bf00      	nop
 80035b4:	e006      	b.n	80035c4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80035b6:	bf00      	nop
 80035b8:	e004      	b.n	80035c4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80035ba:	bf00      	nop
 80035bc:	e002      	b.n	80035c4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80035be:	bf00      	nop
 80035c0:	e000      	b.n	80035c4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80035c2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80035c4:	37e8      	adds	r7, #232	; 0xe8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop

080035cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800360c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003610:	b08a      	sub	sp, #40	; 0x28
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	431a      	orrs	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	431a      	orrs	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	4313      	orrs	r3, r2
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	4ba4      	ldr	r3, [pc, #656]	; (80038cc <UART_SetConfig+0x2c0>)
 800363c:	4013      	ands	r3, r2
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003644:	430b      	orrs	r3, r1
 8003646:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a99      	ldr	r2, [pc, #612]	; (80038d0 <UART_SetConfig+0x2c4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d004      	beq.n	8003678 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003674:	4313      	orrs	r3, r2
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003688:	430a      	orrs	r2, r1
 800368a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a90      	ldr	r2, [pc, #576]	; (80038d4 <UART_SetConfig+0x2c8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d126      	bne.n	80036e4 <UART_SetConfig+0xd8>
 8003696:	4b90      	ldr	r3, [pc, #576]	; (80038d8 <UART_SetConfig+0x2cc>)
 8003698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d81b      	bhi.n	80036dc <UART_SetConfig+0xd0>
 80036a4:	a201      	add	r2, pc, #4	; (adr r2, 80036ac <UART_SetConfig+0xa0>)
 80036a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036aa:	bf00      	nop
 80036ac:	080036bd 	.word	0x080036bd
 80036b0:	080036cd 	.word	0x080036cd
 80036b4:	080036c5 	.word	0x080036c5
 80036b8:	080036d5 	.word	0x080036d5
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036c2:	e116      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80036c4:	2302      	movs	r3, #2
 80036c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ca:	e112      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80036cc:	2304      	movs	r3, #4
 80036ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d2:	e10e      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80036d4:	2308      	movs	r3, #8
 80036d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036da:	e10a      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80036dc:	2310      	movs	r3, #16
 80036de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e2:	e106      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a7c      	ldr	r2, [pc, #496]	; (80038dc <UART_SetConfig+0x2d0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d138      	bne.n	8003760 <UART_SetConfig+0x154>
 80036ee:	4b7a      	ldr	r3, [pc, #488]	; (80038d8 <UART_SetConfig+0x2cc>)
 80036f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f4:	f003 030c 	and.w	r3, r3, #12
 80036f8:	2b0c      	cmp	r3, #12
 80036fa:	d82d      	bhi.n	8003758 <UART_SetConfig+0x14c>
 80036fc:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <UART_SetConfig+0xf8>)
 80036fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003702:	bf00      	nop
 8003704:	08003739 	.word	0x08003739
 8003708:	08003759 	.word	0x08003759
 800370c:	08003759 	.word	0x08003759
 8003710:	08003759 	.word	0x08003759
 8003714:	08003749 	.word	0x08003749
 8003718:	08003759 	.word	0x08003759
 800371c:	08003759 	.word	0x08003759
 8003720:	08003759 	.word	0x08003759
 8003724:	08003741 	.word	0x08003741
 8003728:	08003759 	.word	0x08003759
 800372c:	08003759 	.word	0x08003759
 8003730:	08003759 	.word	0x08003759
 8003734:	08003751 	.word	0x08003751
 8003738:	2300      	movs	r3, #0
 800373a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800373e:	e0d8      	b.n	80038f2 <UART_SetConfig+0x2e6>
 8003740:	2302      	movs	r3, #2
 8003742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003746:	e0d4      	b.n	80038f2 <UART_SetConfig+0x2e6>
 8003748:	2304      	movs	r3, #4
 800374a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800374e:	e0d0      	b.n	80038f2 <UART_SetConfig+0x2e6>
 8003750:	2308      	movs	r3, #8
 8003752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003756:	e0cc      	b.n	80038f2 <UART_SetConfig+0x2e6>
 8003758:	2310      	movs	r3, #16
 800375a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800375e:	e0c8      	b.n	80038f2 <UART_SetConfig+0x2e6>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a5e      	ldr	r2, [pc, #376]	; (80038e0 <UART_SetConfig+0x2d4>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d125      	bne.n	80037b6 <UART_SetConfig+0x1aa>
 800376a:	4b5b      	ldr	r3, [pc, #364]	; (80038d8 <UART_SetConfig+0x2cc>)
 800376c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003770:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003774:	2b30      	cmp	r3, #48	; 0x30
 8003776:	d016      	beq.n	80037a6 <UART_SetConfig+0x19a>
 8003778:	2b30      	cmp	r3, #48	; 0x30
 800377a:	d818      	bhi.n	80037ae <UART_SetConfig+0x1a2>
 800377c:	2b20      	cmp	r3, #32
 800377e:	d00a      	beq.n	8003796 <UART_SetConfig+0x18a>
 8003780:	2b20      	cmp	r3, #32
 8003782:	d814      	bhi.n	80037ae <UART_SetConfig+0x1a2>
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <UART_SetConfig+0x182>
 8003788:	2b10      	cmp	r3, #16
 800378a:	d008      	beq.n	800379e <UART_SetConfig+0x192>
 800378c:	e00f      	b.n	80037ae <UART_SetConfig+0x1a2>
 800378e:	2300      	movs	r3, #0
 8003790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003794:	e0ad      	b.n	80038f2 <UART_SetConfig+0x2e6>
 8003796:	2302      	movs	r3, #2
 8003798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800379c:	e0a9      	b.n	80038f2 <UART_SetConfig+0x2e6>
 800379e:	2304      	movs	r3, #4
 80037a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a4:	e0a5      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80037a6:	2308      	movs	r3, #8
 80037a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ac:	e0a1      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80037ae:	2310      	movs	r3, #16
 80037b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b4:	e09d      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a4a      	ldr	r2, [pc, #296]	; (80038e4 <UART_SetConfig+0x2d8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d125      	bne.n	800380c <UART_SetConfig+0x200>
 80037c0:	4b45      	ldr	r3, [pc, #276]	; (80038d8 <UART_SetConfig+0x2cc>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037ca:	2bc0      	cmp	r3, #192	; 0xc0
 80037cc:	d016      	beq.n	80037fc <UART_SetConfig+0x1f0>
 80037ce:	2bc0      	cmp	r3, #192	; 0xc0
 80037d0:	d818      	bhi.n	8003804 <UART_SetConfig+0x1f8>
 80037d2:	2b80      	cmp	r3, #128	; 0x80
 80037d4:	d00a      	beq.n	80037ec <UART_SetConfig+0x1e0>
 80037d6:	2b80      	cmp	r3, #128	; 0x80
 80037d8:	d814      	bhi.n	8003804 <UART_SetConfig+0x1f8>
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <UART_SetConfig+0x1d8>
 80037de:	2b40      	cmp	r3, #64	; 0x40
 80037e0:	d008      	beq.n	80037f4 <UART_SetConfig+0x1e8>
 80037e2:	e00f      	b.n	8003804 <UART_SetConfig+0x1f8>
 80037e4:	2300      	movs	r3, #0
 80037e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ea:	e082      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80037ec:	2302      	movs	r3, #2
 80037ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f2:	e07e      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80037f4:	2304      	movs	r3, #4
 80037f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037fa:	e07a      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80037fc:	2308      	movs	r3, #8
 80037fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003802:	e076      	b.n	80038f2 <UART_SetConfig+0x2e6>
 8003804:	2310      	movs	r3, #16
 8003806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800380a:	e072      	b.n	80038f2 <UART_SetConfig+0x2e6>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a35      	ldr	r2, [pc, #212]	; (80038e8 <UART_SetConfig+0x2dc>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d12a      	bne.n	800386c <UART_SetConfig+0x260>
 8003816:	4b30      	ldr	r3, [pc, #192]	; (80038d8 <UART_SetConfig+0x2cc>)
 8003818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003820:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003824:	d01a      	beq.n	800385c <UART_SetConfig+0x250>
 8003826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800382a:	d81b      	bhi.n	8003864 <UART_SetConfig+0x258>
 800382c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003830:	d00c      	beq.n	800384c <UART_SetConfig+0x240>
 8003832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003836:	d815      	bhi.n	8003864 <UART_SetConfig+0x258>
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <UART_SetConfig+0x238>
 800383c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003840:	d008      	beq.n	8003854 <UART_SetConfig+0x248>
 8003842:	e00f      	b.n	8003864 <UART_SetConfig+0x258>
 8003844:	2300      	movs	r3, #0
 8003846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384a:	e052      	b.n	80038f2 <UART_SetConfig+0x2e6>
 800384c:	2302      	movs	r3, #2
 800384e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003852:	e04e      	b.n	80038f2 <UART_SetConfig+0x2e6>
 8003854:	2304      	movs	r3, #4
 8003856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800385a:	e04a      	b.n	80038f2 <UART_SetConfig+0x2e6>
 800385c:	2308      	movs	r3, #8
 800385e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003862:	e046      	b.n	80038f2 <UART_SetConfig+0x2e6>
 8003864:	2310      	movs	r3, #16
 8003866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800386a:	e042      	b.n	80038f2 <UART_SetConfig+0x2e6>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a17      	ldr	r2, [pc, #92]	; (80038d0 <UART_SetConfig+0x2c4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d13a      	bne.n	80038ec <UART_SetConfig+0x2e0>
 8003876:	4b18      	ldr	r3, [pc, #96]	; (80038d8 <UART_SetConfig+0x2cc>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003880:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003884:	d01a      	beq.n	80038bc <UART_SetConfig+0x2b0>
 8003886:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800388a:	d81b      	bhi.n	80038c4 <UART_SetConfig+0x2b8>
 800388c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003890:	d00c      	beq.n	80038ac <UART_SetConfig+0x2a0>
 8003892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003896:	d815      	bhi.n	80038c4 <UART_SetConfig+0x2b8>
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <UART_SetConfig+0x298>
 800389c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a0:	d008      	beq.n	80038b4 <UART_SetConfig+0x2a8>
 80038a2:	e00f      	b.n	80038c4 <UART_SetConfig+0x2b8>
 80038a4:	2300      	movs	r3, #0
 80038a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038aa:	e022      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80038ac:	2302      	movs	r3, #2
 80038ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038b2:	e01e      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80038b4:	2304      	movs	r3, #4
 80038b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ba:	e01a      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80038bc:	2308      	movs	r3, #8
 80038be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038c2:	e016      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80038c4:	2310      	movs	r3, #16
 80038c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ca:	e012      	b.n	80038f2 <UART_SetConfig+0x2e6>
 80038cc:	efff69f3 	.word	0xefff69f3
 80038d0:	40008000 	.word	0x40008000
 80038d4:	40013800 	.word	0x40013800
 80038d8:	40021000 	.word	0x40021000
 80038dc:	40004400 	.word	0x40004400
 80038e0:	40004800 	.word	0x40004800
 80038e4:	40004c00 	.word	0x40004c00
 80038e8:	40005000 	.word	0x40005000
 80038ec:	2310      	movs	r3, #16
 80038ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a9f      	ldr	r2, [pc, #636]	; (8003b74 <UART_SetConfig+0x568>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d17a      	bne.n	80039f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003900:	2b08      	cmp	r3, #8
 8003902:	d824      	bhi.n	800394e <UART_SetConfig+0x342>
 8003904:	a201      	add	r2, pc, #4	; (adr r2, 800390c <UART_SetConfig+0x300>)
 8003906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390a:	bf00      	nop
 800390c:	08003931 	.word	0x08003931
 8003910:	0800394f 	.word	0x0800394f
 8003914:	08003939 	.word	0x08003939
 8003918:	0800394f 	.word	0x0800394f
 800391c:	0800393f 	.word	0x0800393f
 8003920:	0800394f 	.word	0x0800394f
 8003924:	0800394f 	.word	0x0800394f
 8003928:	0800394f 	.word	0x0800394f
 800392c:	08003947 	.word	0x08003947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003930:	f7fe fce8 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 8003934:	61f8      	str	r0, [r7, #28]
        break;
 8003936:	e010      	b.n	800395a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003938:	4b8f      	ldr	r3, [pc, #572]	; (8003b78 <UART_SetConfig+0x56c>)
 800393a:	61fb      	str	r3, [r7, #28]
        break;
 800393c:	e00d      	b.n	800395a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800393e:	f7fe fc49 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 8003942:	61f8      	str	r0, [r7, #28]
        break;
 8003944:	e009      	b.n	800395a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800394a:	61fb      	str	r3, [r7, #28]
        break;
 800394c:	e005      	b.n	800395a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003958:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 80fb 	beq.w	8003b58 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	4413      	add	r3, r2
 800396c:	69fa      	ldr	r2, [r7, #28]
 800396e:	429a      	cmp	r2, r3
 8003970:	d305      	bcc.n	800397e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003978:	69fa      	ldr	r2, [r7, #28]
 800397a:	429a      	cmp	r2, r3
 800397c:	d903      	bls.n	8003986 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003984:	e0e8      	b.n	8003b58 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	2200      	movs	r2, #0
 800398a:	461c      	mov	r4, r3
 800398c:	4615      	mov	r5, r2
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	022b      	lsls	r3, r5, #8
 8003998:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800399c:	0222      	lsls	r2, r4, #8
 800399e:	68f9      	ldr	r1, [r7, #12]
 80039a0:	6849      	ldr	r1, [r1, #4]
 80039a2:	0849      	lsrs	r1, r1, #1
 80039a4:	2000      	movs	r0, #0
 80039a6:	4688      	mov	r8, r1
 80039a8:	4681      	mov	r9, r0
 80039aa:	eb12 0a08 	adds.w	sl, r2, r8
 80039ae:	eb43 0b09 	adc.w	fp, r3, r9
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	603b      	str	r3, [r7, #0]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039c0:	4650      	mov	r0, sl
 80039c2:	4659      	mov	r1, fp
 80039c4:	f7fc fc64 	bl	8000290 <__aeabi_uldivmod>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4613      	mov	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039d6:	d308      	bcc.n	80039ea <UART_SetConfig+0x3de>
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039de:	d204      	bcs.n	80039ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	60da      	str	r2, [r3, #12]
 80039e8:	e0b6      	b.n	8003b58 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039f0:	e0b2      	b.n	8003b58 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039fa:	d15e      	bne.n	8003aba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80039fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d828      	bhi.n	8003a56 <UART_SetConfig+0x44a>
 8003a04:	a201      	add	r2, pc, #4	; (adr r2, 8003a0c <UART_SetConfig+0x400>)
 8003a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0a:	bf00      	nop
 8003a0c:	08003a31 	.word	0x08003a31
 8003a10:	08003a39 	.word	0x08003a39
 8003a14:	08003a41 	.word	0x08003a41
 8003a18:	08003a57 	.word	0x08003a57
 8003a1c:	08003a47 	.word	0x08003a47
 8003a20:	08003a57 	.word	0x08003a57
 8003a24:	08003a57 	.word	0x08003a57
 8003a28:	08003a57 	.word	0x08003a57
 8003a2c:	08003a4f 	.word	0x08003a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a30:	f7fe fc68 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 8003a34:	61f8      	str	r0, [r7, #28]
        break;
 8003a36:	e014      	b.n	8003a62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a38:	f7fe fc7a 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
 8003a3c:	61f8      	str	r0, [r7, #28]
        break;
 8003a3e:	e010      	b.n	8003a62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a40:	4b4d      	ldr	r3, [pc, #308]	; (8003b78 <UART_SetConfig+0x56c>)
 8003a42:	61fb      	str	r3, [r7, #28]
        break;
 8003a44:	e00d      	b.n	8003a62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a46:	f7fe fbc5 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 8003a4a:	61f8      	str	r0, [r7, #28]
        break;
 8003a4c:	e009      	b.n	8003a62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a52:	61fb      	str	r3, [r7, #28]
        break;
 8003a54:	e005      	b.n	8003a62 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d077      	beq.n	8003b58 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	005a      	lsls	r2, r3, #1
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	085b      	lsrs	r3, r3, #1
 8003a72:	441a      	add	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	2b0f      	cmp	r3, #15
 8003a82:	d916      	bls.n	8003ab2 <UART_SetConfig+0x4a6>
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8a:	d212      	bcs.n	8003ab2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	f023 030f 	bic.w	r3, r3, #15
 8003a94:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	085b      	lsrs	r3, r3, #1
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	8afb      	ldrh	r3, [r7, #22]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	8afa      	ldrh	r2, [r7, #22]
 8003aae:	60da      	str	r2, [r3, #12]
 8003ab0:	e052      	b.n	8003b58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ab8:	e04e      	b.n	8003b58 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003aba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d827      	bhi.n	8003b12 <UART_SetConfig+0x506>
 8003ac2:	a201      	add	r2, pc, #4	; (adr r2, 8003ac8 <UART_SetConfig+0x4bc>)
 8003ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac8:	08003aed 	.word	0x08003aed
 8003acc:	08003af5 	.word	0x08003af5
 8003ad0:	08003afd 	.word	0x08003afd
 8003ad4:	08003b13 	.word	0x08003b13
 8003ad8:	08003b03 	.word	0x08003b03
 8003adc:	08003b13 	.word	0x08003b13
 8003ae0:	08003b13 	.word	0x08003b13
 8003ae4:	08003b13 	.word	0x08003b13
 8003ae8:	08003b0b 	.word	0x08003b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aec:	f7fe fc0a 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 8003af0:	61f8      	str	r0, [r7, #28]
        break;
 8003af2:	e014      	b.n	8003b1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003af4:	f7fe fc1c 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
 8003af8:	61f8      	str	r0, [r7, #28]
        break;
 8003afa:	e010      	b.n	8003b1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003afc:	4b1e      	ldr	r3, [pc, #120]	; (8003b78 <UART_SetConfig+0x56c>)
 8003afe:	61fb      	str	r3, [r7, #28]
        break;
 8003b00:	e00d      	b.n	8003b1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b02:	f7fe fb67 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 8003b06:	61f8      	str	r0, [r7, #28]
        break;
 8003b08:	e009      	b.n	8003b1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b0e:	61fb      	str	r3, [r7, #28]
        break;
 8003b10:	e005      	b.n	8003b1e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b1c:	bf00      	nop
    }

    if (pclk != 0U)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d019      	beq.n	8003b58 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	085a      	lsrs	r2, r3, #1
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	441a      	add	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b36:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	2b0f      	cmp	r3, #15
 8003b3c:	d909      	bls.n	8003b52 <UART_SetConfig+0x546>
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b44:	d205      	bcs.n	8003b52 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	60da      	str	r2, [r3, #12]
 8003b50:	e002      	b.n	8003b58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003b64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3728      	adds	r7, #40	; 0x28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b72:	bf00      	nop
 8003b74:	40008000 	.word	0x40008000
 8003b78:	00f42400 	.word	0x00f42400

08003b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d01a      	beq.n	8003c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c7a:	d10a      	bne.n	8003c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	605a      	str	r2, [r3, #4]
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b098      	sub	sp, #96	; 0x60
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cd0:	f7fd f9a0 	bl	8001014 <HAL_GetTick>
 8003cd4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d12e      	bne.n	8003d42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cec:	2200      	movs	r2, #0
 8003cee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f88c 	bl	8003e10 <UART_WaitOnFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d021      	beq.n	8003d42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d06:	e853 3f00 	ldrex	r3, [r3]
 8003d0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d12:	653b      	str	r3, [r7, #80]	; 0x50
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d1e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d24:	e841 2300 	strex	r3, r2, [r1]
 8003d28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e6      	bne.n	8003cfe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2220      	movs	r2, #32
 8003d34:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e062      	b.n	8003e08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d149      	bne.n	8003de4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f856 	bl	8003e10 <UART_WaitOnFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d03c      	beq.n	8003de4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	623b      	str	r3, [r7, #32]
   return(result);
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d88:	633b      	str	r3, [r7, #48]	; 0x30
 8003d8a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e6      	bne.n	8003d6a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3308      	adds	r3, #8
 8003da2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0301 	bic.w	r3, r3, #1
 8003db2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3308      	adds	r3, #8
 8003dba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dbc:	61fa      	str	r2, [r7, #28]
 8003dbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc0:	69b9      	ldr	r1, [r7, #24]
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	e841 2300 	strex	r3, r2, [r1]
 8003dc8:	617b      	str	r3, [r7, #20]
   return(result);
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e5      	bne.n	8003d9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e011      	b.n	8003e08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3758      	adds	r7, #88	; 0x58
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	603b      	str	r3, [r7, #0]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e20:	e049      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e28:	d045      	beq.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2a:	f7fd f8f3 	bl	8001014 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d302      	bcc.n	8003e40 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e048      	b.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d031      	beq.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d110      	bne.n	8003e82 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2208      	movs	r2, #8
 8003e66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 f8ff 	bl	800406c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2208      	movs	r2, #8
 8003e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e029      	b.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e90:	d111      	bne.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f8e5 	bl	800406c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e00f      	b.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	bf0c      	ite	eq
 8003ec6:	2301      	moveq	r3, #1
 8003ec8:	2300      	movne	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	461a      	mov	r2, r3
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d0a6      	beq.n	8003e22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b097      	sub	sp, #92	; 0x5c
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	4613      	mov	r3, r2
 8003eec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	88fa      	ldrh	r2, [r7, #6]
 8003ef8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	88fa      	ldrh	r2, [r7, #6]
 8003f00:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f12:	d10e      	bne.n	8003f32 <UART_Start_Receive_IT+0x52>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d105      	bne.n	8003f28 <UART_Start_Receive_IT+0x48>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003f22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f26:	e02d      	b.n	8003f84 <UART_Start_Receive_IT+0xa4>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	22ff      	movs	r2, #255	; 0xff
 8003f2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f30:	e028      	b.n	8003f84 <UART_Start_Receive_IT+0xa4>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10d      	bne.n	8003f56 <UART_Start_Receive_IT+0x76>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d104      	bne.n	8003f4c <UART_Start_Receive_IT+0x6c>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	22ff      	movs	r2, #255	; 0xff
 8003f46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f4a:	e01b      	b.n	8003f84 <UART_Start_Receive_IT+0xa4>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	227f      	movs	r2, #127	; 0x7f
 8003f50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f54:	e016      	b.n	8003f84 <UART_Start_Receive_IT+0xa4>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f5e:	d10d      	bne.n	8003f7c <UART_Start_Receive_IT+0x9c>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d104      	bne.n	8003f72 <UART_Start_Receive_IT+0x92>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	227f      	movs	r2, #127	; 0x7f
 8003f6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f70:	e008      	b.n	8003f84 <UART_Start_Receive_IT+0xa4>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	223f      	movs	r2, #63	; 0x3f
 8003f76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f7a:	e003      	b.n	8003f84 <UART_Start_Receive_IT+0xa4>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2222      	movs	r2, #34	; 0x22
 8003f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3308      	adds	r3, #8
 8003f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f9e:	e853 3f00 	ldrex	r3, [r3]
 8003fa2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	657b      	str	r3, [r7, #84]	; 0x54
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3308      	adds	r3, #8
 8003fb2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003fb4:	64ba      	str	r2, [r7, #72]	; 0x48
 8003fb6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003fba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fbc:	e841 2300 	strex	r3, r2, [r1]
 8003fc0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1e5      	bne.n	8003f94 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd0:	d107      	bne.n	8003fe2 <UART_Start_Receive_IT+0x102>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d103      	bne.n	8003fe2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4a21      	ldr	r2, [pc, #132]	; (8004064 <UART_Start_Receive_IT+0x184>)
 8003fde:	669a      	str	r2, [r3, #104]	; 0x68
 8003fe0:	e002      	b.n	8003fe8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4a20      	ldr	r2, [pc, #128]	; (8004068 <UART_Start_Receive_IT+0x188>)
 8003fe6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d019      	beq.n	8004024 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004004:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800400e:	637b      	str	r3, [r7, #52]	; 0x34
 8004010:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004014:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e6      	bne.n	8003ff0 <UART_Start_Receive_IT+0x110>
 8004022:	e018      	b.n	8004056 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	613b      	str	r3, [r7, #16]
   return(result);
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f043 0320 	orr.w	r3, r3, #32
 8004038:	653b      	str	r3, [r7, #80]	; 0x50
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004042:	623b      	str	r3, [r7, #32]
 8004044:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	69f9      	ldr	r1, [r7, #28]
 8004048:	6a3a      	ldr	r2, [r7, #32]
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e6      	bne.n	8004024 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	375c      	adds	r7, #92	; 0x5c
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	08004371 	.word	0x08004371
 8004068:	080041b5 	.word	0x080041b5

0800406c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800406c:	b480      	push	{r7}
 800406e:	b095      	sub	sp, #84	; 0x54
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800407c:	e853 3f00 	ldrex	r3, [r3]
 8004080:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004084:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004088:	64fb      	str	r3, [r7, #76]	; 0x4c
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004092:	643b      	str	r3, [r7, #64]	; 0x40
 8004094:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004096:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004098:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800409a:	e841 2300 	strex	r3, r2, [r1]
 800409e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1e6      	bne.n	8004074 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3308      	adds	r3, #8
 80040ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	e853 3f00 	ldrex	r3, [r3]
 80040b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	f023 0301 	bic.w	r3, r3, #1
 80040bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3308      	adds	r3, #8
 80040c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ce:	e841 2300 	strex	r3, r2, [r1]
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e5      	bne.n	80040a6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d118      	bne.n	8004114 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	e853 3f00 	ldrex	r3, [r3]
 80040ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f023 0310 	bic.w	r3, r3, #16
 80040f6:	647b      	str	r3, [r7, #68]	; 0x44
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004100:	61bb      	str	r3, [r7, #24]
 8004102:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004104:	6979      	ldr	r1, [r7, #20]
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	e841 2300 	strex	r3, r2, [r1]
 800410c:	613b      	str	r3, [r7, #16]
   return(result);
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1e6      	bne.n	80040e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2220      	movs	r2, #32
 8004118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004128:	bf00      	nop
 800412a:	3754      	adds	r7, #84	; 0x54
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f7ff fa44 	bl	80035e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004158:	bf00      	nop
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	e853 3f00 	ldrex	r3, [r3]
 8004174:	60bb      	str	r3, [r7, #8]
   return(result);
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	61bb      	str	r3, [r7, #24]
 8004188:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418a:	6979      	ldr	r1, [r7, #20]
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	e841 2300 	strex	r3, r2, [r1]
 8004192:	613b      	str	r3, [r7, #16]
   return(result);
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1e6      	bne.n	8004168 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7ff fa10 	bl	80035cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041ac:	bf00      	nop
 80041ae:	3720      	adds	r7, #32
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b09c      	sub	sp, #112	; 0x70
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80041c2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041cc:	2b22      	cmp	r3, #34	; 0x22
 80041ce:	f040 80be 	bne.w	800434e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80041d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80041dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80041e0:	b2d9      	uxtb	r1, r3
 80041e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ec:	400a      	ands	r2, r1
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	f040 80a3 	bne.w	8004362 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004224:	e853 3f00 	ldrex	r3, [r3]
 8004228:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800422a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800422c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004230:	66bb      	str	r3, [r7, #104]	; 0x68
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	461a      	mov	r2, r3
 8004238:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800423a:	65bb      	str	r3, [r7, #88]	; 0x58
 800423c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004240:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e6      	bne.n	800421c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3308      	adds	r3, #8
 8004254:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800425e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004260:	f023 0301 	bic.w	r3, r3, #1
 8004264:	667b      	str	r3, [r7, #100]	; 0x64
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3308      	adds	r3, #8
 800426c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800426e:	647a      	str	r2, [r7, #68]	; 0x44
 8004270:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004274:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800427c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e5      	bne.n	800424e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a34      	ldr	r2, [pc, #208]	; (800436c <UART_RxISR_8BIT+0x1b8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d01f      	beq.n	80042e0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d018      	beq.n	80042e0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	e853 3f00 	ldrex	r3, [r3]
 80042ba:	623b      	str	r3, [r7, #32]
   return(result);
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042c2:	663b      	str	r3, [r7, #96]	; 0x60
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042cc:	633b      	str	r3, [r7, #48]	; 0x30
 80042ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e6      	bne.n	80042ae <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d12e      	bne.n	8004346 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	e853 3f00 	ldrex	r3, [r3]
 80042fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0310 	bic.w	r3, r3, #16
 8004302:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800430c:	61fb      	str	r3, [r7, #28]
 800430e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004310:	69b9      	ldr	r1, [r7, #24]
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	e841 2300 	strex	r3, r2, [r1]
 8004318:	617b      	str	r3, [r7, #20]
   return(result);
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1e6      	bne.n	80042ee <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	f003 0310 	and.w	r3, r3, #16
 800432a:	2b10      	cmp	r3, #16
 800432c:	d103      	bne.n	8004336 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2210      	movs	r2, #16
 8004334:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800433c:	4619      	mov	r1, r3
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff f958 	bl	80035f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004344:	e00d      	b.n	8004362 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fc fa5a 	bl	8000800 <HAL_UART_RxCpltCallback>
}
 800434c:	e009      	b.n	8004362 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	8b1b      	ldrh	r3, [r3, #24]
 8004354:	b29a      	uxth	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0208 	orr.w	r2, r2, #8
 800435e:	b292      	uxth	r2, r2
 8004360:	831a      	strh	r2, [r3, #24]
}
 8004362:	bf00      	nop
 8004364:	3770      	adds	r7, #112	; 0x70
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40008000 	.word	0x40008000

08004370 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b09c      	sub	sp, #112	; 0x70
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800437e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004388:	2b22      	cmp	r3, #34	; 0x22
 800438a:	f040 80be 	bne.w	800450a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004394:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800439e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80043a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80043a6:	4013      	ands	r3, r2
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b2:	1c9a      	adds	r2, r3, #2
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f040 80a3 	bne.w	800451e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80043e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043ec:	667b      	str	r3, [r7, #100]	; 0x64
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043f6:	657b      	str	r3, [r7, #84]	; 0x54
 80043f8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80043fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043fe:	e841 2300 	strex	r3, r2, [r1]
 8004402:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e6      	bne.n	80043d8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3308      	adds	r3, #8
 8004410:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004414:	e853 3f00 	ldrex	r3, [r3]
 8004418:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	f023 0301 	bic.w	r3, r3, #1
 8004420:	663b      	str	r3, [r7, #96]	; 0x60
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3308      	adds	r3, #8
 8004428:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800442a:	643a      	str	r2, [r7, #64]	; 0x40
 800442c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004430:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004432:	e841 2300 	strex	r3, r2, [r1]
 8004436:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1e5      	bne.n	800440a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a34      	ldr	r2, [pc, #208]	; (8004528 <UART_RxISR_16BIT+0x1b8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d01f      	beq.n	800449c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d018      	beq.n	800449c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	e853 3f00 	ldrex	r3, [r3]
 8004476:	61fb      	str	r3, [r7, #28]
   return(result);
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800447e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800448a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800448e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004490:	e841 2300 	strex	r3, r2, [r1]
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1e6      	bne.n	800446a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d12e      	bne.n	8004502 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f023 0310 	bic.w	r3, r3, #16
 80044be:	65bb      	str	r3, [r7, #88]	; 0x58
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044c8:	61bb      	str	r3, [r7, #24]
 80044ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044cc:	6979      	ldr	r1, [r7, #20]
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	e841 2300 	strex	r3, r2, [r1]
 80044d4:	613b      	str	r3, [r7, #16]
   return(result);
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e6      	bne.n	80044aa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	f003 0310 	and.w	r3, r3, #16
 80044e6:	2b10      	cmp	r3, #16
 80044e8:	d103      	bne.n	80044f2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2210      	movs	r2, #16
 80044f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044f8:	4619      	mov	r1, r3
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7ff f87a 	bl	80035f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004500:	e00d      	b.n	800451e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fc f97c 	bl	8000800 <HAL_UART_RxCpltCallback>
}
 8004508:	e009      	b.n	800451e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	8b1b      	ldrh	r3, [r3, #24]
 8004510:	b29a      	uxth	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0208 	orr.w	r2, r2, #8
 800451a:	b292      	uxth	r2, r2
 800451c:	831a      	strh	r2, [r3, #24]
}
 800451e:	bf00      	nop
 8004520:	3770      	adds	r7, #112	; 0x70
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40008000 	.word	0x40008000

0800452c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <std>:
 8004540:	2300      	movs	r3, #0
 8004542:	b510      	push	{r4, lr}
 8004544:	4604      	mov	r4, r0
 8004546:	e9c0 3300 	strd	r3, r3, [r0]
 800454a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800454e:	6083      	str	r3, [r0, #8]
 8004550:	8181      	strh	r1, [r0, #12]
 8004552:	6643      	str	r3, [r0, #100]	; 0x64
 8004554:	81c2      	strh	r2, [r0, #14]
 8004556:	6183      	str	r3, [r0, #24]
 8004558:	4619      	mov	r1, r3
 800455a:	2208      	movs	r2, #8
 800455c:	305c      	adds	r0, #92	; 0x5c
 800455e:	f000 fa17 	bl	8004990 <memset>
 8004562:	4b0d      	ldr	r3, [pc, #52]	; (8004598 <std+0x58>)
 8004564:	6263      	str	r3, [r4, #36]	; 0x24
 8004566:	4b0d      	ldr	r3, [pc, #52]	; (800459c <std+0x5c>)
 8004568:	62a3      	str	r3, [r4, #40]	; 0x28
 800456a:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <std+0x60>)
 800456c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800456e:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <std+0x64>)
 8004570:	6323      	str	r3, [r4, #48]	; 0x30
 8004572:	4b0d      	ldr	r3, [pc, #52]	; (80045a8 <std+0x68>)
 8004574:	6224      	str	r4, [r4, #32]
 8004576:	429c      	cmp	r4, r3
 8004578:	d006      	beq.n	8004588 <std+0x48>
 800457a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800457e:	4294      	cmp	r4, r2
 8004580:	d002      	beq.n	8004588 <std+0x48>
 8004582:	33d0      	adds	r3, #208	; 0xd0
 8004584:	429c      	cmp	r4, r3
 8004586:	d105      	bne.n	8004594 <std+0x54>
 8004588:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800458c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004590:	f000 ba76 	b.w	8004a80 <__retarget_lock_init_recursive>
 8004594:	bd10      	pop	{r4, pc}
 8004596:	bf00      	nop
 8004598:	080047e1 	.word	0x080047e1
 800459c:	08004803 	.word	0x08004803
 80045a0:	0800483b 	.word	0x0800483b
 80045a4:	0800485f 	.word	0x0800485f
 80045a8:	20000128 	.word	0x20000128

080045ac <stdio_exit_handler>:
 80045ac:	4a02      	ldr	r2, [pc, #8]	; (80045b8 <stdio_exit_handler+0xc>)
 80045ae:	4903      	ldr	r1, [pc, #12]	; (80045bc <stdio_exit_handler+0x10>)
 80045b0:	4803      	ldr	r0, [pc, #12]	; (80045c0 <stdio_exit_handler+0x14>)
 80045b2:	f000 b869 	b.w	8004688 <_fwalk_sglue>
 80045b6:	bf00      	nop
 80045b8:	2000000c 	.word	0x2000000c
 80045bc:	080055dd 	.word	0x080055dd
 80045c0:	20000018 	.word	0x20000018

080045c4 <cleanup_stdio>:
 80045c4:	6841      	ldr	r1, [r0, #4]
 80045c6:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <cleanup_stdio+0x34>)
 80045c8:	4299      	cmp	r1, r3
 80045ca:	b510      	push	{r4, lr}
 80045cc:	4604      	mov	r4, r0
 80045ce:	d001      	beq.n	80045d4 <cleanup_stdio+0x10>
 80045d0:	f001 f804 	bl	80055dc <_fflush_r>
 80045d4:	68a1      	ldr	r1, [r4, #8]
 80045d6:	4b09      	ldr	r3, [pc, #36]	; (80045fc <cleanup_stdio+0x38>)
 80045d8:	4299      	cmp	r1, r3
 80045da:	d002      	beq.n	80045e2 <cleanup_stdio+0x1e>
 80045dc:	4620      	mov	r0, r4
 80045de:	f000 fffd 	bl	80055dc <_fflush_r>
 80045e2:	68e1      	ldr	r1, [r4, #12]
 80045e4:	4b06      	ldr	r3, [pc, #24]	; (8004600 <cleanup_stdio+0x3c>)
 80045e6:	4299      	cmp	r1, r3
 80045e8:	d004      	beq.n	80045f4 <cleanup_stdio+0x30>
 80045ea:	4620      	mov	r0, r4
 80045ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045f0:	f000 bff4 	b.w	80055dc <_fflush_r>
 80045f4:	bd10      	pop	{r4, pc}
 80045f6:	bf00      	nop
 80045f8:	20000128 	.word	0x20000128
 80045fc:	20000190 	.word	0x20000190
 8004600:	200001f8 	.word	0x200001f8

08004604 <global_stdio_init.part.0>:
 8004604:	b510      	push	{r4, lr}
 8004606:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <global_stdio_init.part.0+0x30>)
 8004608:	4c0b      	ldr	r4, [pc, #44]	; (8004638 <global_stdio_init.part.0+0x34>)
 800460a:	4a0c      	ldr	r2, [pc, #48]	; (800463c <global_stdio_init.part.0+0x38>)
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	4620      	mov	r0, r4
 8004610:	2200      	movs	r2, #0
 8004612:	2104      	movs	r1, #4
 8004614:	f7ff ff94 	bl	8004540 <std>
 8004618:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800461c:	2201      	movs	r2, #1
 800461e:	2109      	movs	r1, #9
 8004620:	f7ff ff8e 	bl	8004540 <std>
 8004624:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004628:	2202      	movs	r2, #2
 800462a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800462e:	2112      	movs	r1, #18
 8004630:	f7ff bf86 	b.w	8004540 <std>
 8004634:	20000260 	.word	0x20000260
 8004638:	20000128 	.word	0x20000128
 800463c:	080045ad 	.word	0x080045ad

08004640 <__sfp_lock_acquire>:
 8004640:	4801      	ldr	r0, [pc, #4]	; (8004648 <__sfp_lock_acquire+0x8>)
 8004642:	f000 ba1e 	b.w	8004a82 <__retarget_lock_acquire_recursive>
 8004646:	bf00      	nop
 8004648:	20000269 	.word	0x20000269

0800464c <__sfp_lock_release>:
 800464c:	4801      	ldr	r0, [pc, #4]	; (8004654 <__sfp_lock_release+0x8>)
 800464e:	f000 ba19 	b.w	8004a84 <__retarget_lock_release_recursive>
 8004652:	bf00      	nop
 8004654:	20000269 	.word	0x20000269

08004658 <__sinit>:
 8004658:	b510      	push	{r4, lr}
 800465a:	4604      	mov	r4, r0
 800465c:	f7ff fff0 	bl	8004640 <__sfp_lock_acquire>
 8004660:	6a23      	ldr	r3, [r4, #32]
 8004662:	b11b      	cbz	r3, 800466c <__sinit+0x14>
 8004664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004668:	f7ff bff0 	b.w	800464c <__sfp_lock_release>
 800466c:	4b04      	ldr	r3, [pc, #16]	; (8004680 <__sinit+0x28>)
 800466e:	6223      	str	r3, [r4, #32]
 8004670:	4b04      	ldr	r3, [pc, #16]	; (8004684 <__sinit+0x2c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1f5      	bne.n	8004664 <__sinit+0xc>
 8004678:	f7ff ffc4 	bl	8004604 <global_stdio_init.part.0>
 800467c:	e7f2      	b.n	8004664 <__sinit+0xc>
 800467e:	bf00      	nop
 8004680:	080045c5 	.word	0x080045c5
 8004684:	20000260 	.word	0x20000260

08004688 <_fwalk_sglue>:
 8004688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800468c:	4607      	mov	r7, r0
 800468e:	4688      	mov	r8, r1
 8004690:	4614      	mov	r4, r2
 8004692:	2600      	movs	r6, #0
 8004694:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004698:	f1b9 0901 	subs.w	r9, r9, #1
 800469c:	d505      	bpl.n	80046aa <_fwalk_sglue+0x22>
 800469e:	6824      	ldr	r4, [r4, #0]
 80046a0:	2c00      	cmp	r4, #0
 80046a2:	d1f7      	bne.n	8004694 <_fwalk_sglue+0xc>
 80046a4:	4630      	mov	r0, r6
 80046a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046aa:	89ab      	ldrh	r3, [r5, #12]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d907      	bls.n	80046c0 <_fwalk_sglue+0x38>
 80046b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046b4:	3301      	adds	r3, #1
 80046b6:	d003      	beq.n	80046c0 <_fwalk_sglue+0x38>
 80046b8:	4629      	mov	r1, r5
 80046ba:	4638      	mov	r0, r7
 80046bc:	47c0      	blx	r8
 80046be:	4306      	orrs	r6, r0
 80046c0:	3568      	adds	r5, #104	; 0x68
 80046c2:	e7e9      	b.n	8004698 <_fwalk_sglue+0x10>

080046c4 <iprintf>:
 80046c4:	b40f      	push	{r0, r1, r2, r3}
 80046c6:	b507      	push	{r0, r1, r2, lr}
 80046c8:	4906      	ldr	r1, [pc, #24]	; (80046e4 <iprintf+0x20>)
 80046ca:	ab04      	add	r3, sp, #16
 80046cc:	6808      	ldr	r0, [r1, #0]
 80046ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80046d2:	6881      	ldr	r1, [r0, #8]
 80046d4:	9301      	str	r3, [sp, #4]
 80046d6:	f000 fc51 	bl	8004f7c <_vfiprintf_r>
 80046da:	b003      	add	sp, #12
 80046dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80046e0:	b004      	add	sp, #16
 80046e2:	4770      	bx	lr
 80046e4:	20000064 	.word	0x20000064

080046e8 <_puts_r>:
 80046e8:	6a03      	ldr	r3, [r0, #32]
 80046ea:	b570      	push	{r4, r5, r6, lr}
 80046ec:	6884      	ldr	r4, [r0, #8]
 80046ee:	4605      	mov	r5, r0
 80046f0:	460e      	mov	r6, r1
 80046f2:	b90b      	cbnz	r3, 80046f8 <_puts_r+0x10>
 80046f4:	f7ff ffb0 	bl	8004658 <__sinit>
 80046f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046fa:	07db      	lsls	r3, r3, #31
 80046fc:	d405      	bmi.n	800470a <_puts_r+0x22>
 80046fe:	89a3      	ldrh	r3, [r4, #12]
 8004700:	0598      	lsls	r0, r3, #22
 8004702:	d402      	bmi.n	800470a <_puts_r+0x22>
 8004704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004706:	f000 f9bc 	bl	8004a82 <__retarget_lock_acquire_recursive>
 800470a:	89a3      	ldrh	r3, [r4, #12]
 800470c:	0719      	lsls	r1, r3, #28
 800470e:	d513      	bpl.n	8004738 <_puts_r+0x50>
 8004710:	6923      	ldr	r3, [r4, #16]
 8004712:	b18b      	cbz	r3, 8004738 <_puts_r+0x50>
 8004714:	3e01      	subs	r6, #1
 8004716:	68a3      	ldr	r3, [r4, #8]
 8004718:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800471c:	3b01      	subs	r3, #1
 800471e:	60a3      	str	r3, [r4, #8]
 8004720:	b9e9      	cbnz	r1, 800475e <_puts_r+0x76>
 8004722:	2b00      	cmp	r3, #0
 8004724:	da2e      	bge.n	8004784 <_puts_r+0x9c>
 8004726:	4622      	mov	r2, r4
 8004728:	210a      	movs	r1, #10
 800472a:	4628      	mov	r0, r5
 800472c:	f000 f89b 	bl	8004866 <__swbuf_r>
 8004730:	3001      	adds	r0, #1
 8004732:	d007      	beq.n	8004744 <_puts_r+0x5c>
 8004734:	250a      	movs	r5, #10
 8004736:	e007      	b.n	8004748 <_puts_r+0x60>
 8004738:	4621      	mov	r1, r4
 800473a:	4628      	mov	r0, r5
 800473c:	f000 f8d0 	bl	80048e0 <__swsetup_r>
 8004740:	2800      	cmp	r0, #0
 8004742:	d0e7      	beq.n	8004714 <_puts_r+0x2c>
 8004744:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004748:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800474a:	07da      	lsls	r2, r3, #31
 800474c:	d405      	bmi.n	800475a <_puts_r+0x72>
 800474e:	89a3      	ldrh	r3, [r4, #12]
 8004750:	059b      	lsls	r3, r3, #22
 8004752:	d402      	bmi.n	800475a <_puts_r+0x72>
 8004754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004756:	f000 f995 	bl	8004a84 <__retarget_lock_release_recursive>
 800475a:	4628      	mov	r0, r5
 800475c:	bd70      	pop	{r4, r5, r6, pc}
 800475e:	2b00      	cmp	r3, #0
 8004760:	da04      	bge.n	800476c <_puts_r+0x84>
 8004762:	69a2      	ldr	r2, [r4, #24]
 8004764:	429a      	cmp	r2, r3
 8004766:	dc06      	bgt.n	8004776 <_puts_r+0x8e>
 8004768:	290a      	cmp	r1, #10
 800476a:	d004      	beq.n	8004776 <_puts_r+0x8e>
 800476c:	6823      	ldr	r3, [r4, #0]
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	6022      	str	r2, [r4, #0]
 8004772:	7019      	strb	r1, [r3, #0]
 8004774:	e7cf      	b.n	8004716 <_puts_r+0x2e>
 8004776:	4622      	mov	r2, r4
 8004778:	4628      	mov	r0, r5
 800477a:	f000 f874 	bl	8004866 <__swbuf_r>
 800477e:	3001      	adds	r0, #1
 8004780:	d1c9      	bne.n	8004716 <_puts_r+0x2e>
 8004782:	e7df      	b.n	8004744 <_puts_r+0x5c>
 8004784:	6823      	ldr	r3, [r4, #0]
 8004786:	250a      	movs	r5, #10
 8004788:	1c5a      	adds	r2, r3, #1
 800478a:	6022      	str	r2, [r4, #0]
 800478c:	701d      	strb	r5, [r3, #0]
 800478e:	e7db      	b.n	8004748 <_puts_r+0x60>

08004790 <puts>:
 8004790:	4b02      	ldr	r3, [pc, #8]	; (800479c <puts+0xc>)
 8004792:	4601      	mov	r1, r0
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	f7ff bfa7 	b.w	80046e8 <_puts_r>
 800479a:	bf00      	nop
 800479c:	20000064 	.word	0x20000064

080047a0 <siprintf>:
 80047a0:	b40e      	push	{r1, r2, r3}
 80047a2:	b500      	push	{lr}
 80047a4:	b09c      	sub	sp, #112	; 0x70
 80047a6:	ab1d      	add	r3, sp, #116	; 0x74
 80047a8:	9002      	str	r0, [sp, #8]
 80047aa:	9006      	str	r0, [sp, #24]
 80047ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047b0:	4809      	ldr	r0, [pc, #36]	; (80047d8 <siprintf+0x38>)
 80047b2:	9107      	str	r1, [sp, #28]
 80047b4:	9104      	str	r1, [sp, #16]
 80047b6:	4909      	ldr	r1, [pc, #36]	; (80047dc <siprintf+0x3c>)
 80047b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80047bc:	9105      	str	r1, [sp, #20]
 80047be:	6800      	ldr	r0, [r0, #0]
 80047c0:	9301      	str	r3, [sp, #4]
 80047c2:	a902      	add	r1, sp, #8
 80047c4:	f000 fab2 	bl	8004d2c <_svfiprintf_r>
 80047c8:	9b02      	ldr	r3, [sp, #8]
 80047ca:	2200      	movs	r2, #0
 80047cc:	701a      	strb	r2, [r3, #0]
 80047ce:	b01c      	add	sp, #112	; 0x70
 80047d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80047d4:	b003      	add	sp, #12
 80047d6:	4770      	bx	lr
 80047d8:	20000064 	.word	0x20000064
 80047dc:	ffff0208 	.word	0xffff0208

080047e0 <__sread>:
 80047e0:	b510      	push	{r4, lr}
 80047e2:	460c      	mov	r4, r1
 80047e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047e8:	f000 f8fc 	bl	80049e4 <_read_r>
 80047ec:	2800      	cmp	r0, #0
 80047ee:	bfab      	itete	ge
 80047f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047f2:	89a3      	ldrhlt	r3, [r4, #12]
 80047f4:	181b      	addge	r3, r3, r0
 80047f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80047fa:	bfac      	ite	ge
 80047fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80047fe:	81a3      	strhlt	r3, [r4, #12]
 8004800:	bd10      	pop	{r4, pc}

08004802 <__swrite>:
 8004802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004806:	461f      	mov	r7, r3
 8004808:	898b      	ldrh	r3, [r1, #12]
 800480a:	05db      	lsls	r3, r3, #23
 800480c:	4605      	mov	r5, r0
 800480e:	460c      	mov	r4, r1
 8004810:	4616      	mov	r6, r2
 8004812:	d505      	bpl.n	8004820 <__swrite+0x1e>
 8004814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004818:	2302      	movs	r3, #2
 800481a:	2200      	movs	r2, #0
 800481c:	f000 f8d0 	bl	80049c0 <_lseek_r>
 8004820:	89a3      	ldrh	r3, [r4, #12]
 8004822:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004826:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800482a:	81a3      	strh	r3, [r4, #12]
 800482c:	4632      	mov	r2, r6
 800482e:	463b      	mov	r3, r7
 8004830:	4628      	mov	r0, r5
 8004832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004836:	f000 b8e7 	b.w	8004a08 <_write_r>

0800483a <__sseek>:
 800483a:	b510      	push	{r4, lr}
 800483c:	460c      	mov	r4, r1
 800483e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004842:	f000 f8bd 	bl	80049c0 <_lseek_r>
 8004846:	1c43      	adds	r3, r0, #1
 8004848:	89a3      	ldrh	r3, [r4, #12]
 800484a:	bf15      	itete	ne
 800484c:	6560      	strne	r0, [r4, #84]	; 0x54
 800484e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004852:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004856:	81a3      	strheq	r3, [r4, #12]
 8004858:	bf18      	it	ne
 800485a:	81a3      	strhne	r3, [r4, #12]
 800485c:	bd10      	pop	{r4, pc}

0800485e <__sclose>:
 800485e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004862:	f000 b89d 	b.w	80049a0 <_close_r>

08004866 <__swbuf_r>:
 8004866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004868:	460e      	mov	r6, r1
 800486a:	4614      	mov	r4, r2
 800486c:	4605      	mov	r5, r0
 800486e:	b118      	cbz	r0, 8004878 <__swbuf_r+0x12>
 8004870:	6a03      	ldr	r3, [r0, #32]
 8004872:	b90b      	cbnz	r3, 8004878 <__swbuf_r+0x12>
 8004874:	f7ff fef0 	bl	8004658 <__sinit>
 8004878:	69a3      	ldr	r3, [r4, #24]
 800487a:	60a3      	str	r3, [r4, #8]
 800487c:	89a3      	ldrh	r3, [r4, #12]
 800487e:	071a      	lsls	r2, r3, #28
 8004880:	d525      	bpl.n	80048ce <__swbuf_r+0x68>
 8004882:	6923      	ldr	r3, [r4, #16]
 8004884:	b31b      	cbz	r3, 80048ce <__swbuf_r+0x68>
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	6922      	ldr	r2, [r4, #16]
 800488a:	1a98      	subs	r0, r3, r2
 800488c:	6963      	ldr	r3, [r4, #20]
 800488e:	b2f6      	uxtb	r6, r6
 8004890:	4283      	cmp	r3, r0
 8004892:	4637      	mov	r7, r6
 8004894:	dc04      	bgt.n	80048a0 <__swbuf_r+0x3a>
 8004896:	4621      	mov	r1, r4
 8004898:	4628      	mov	r0, r5
 800489a:	f000 fe9f 	bl	80055dc <_fflush_r>
 800489e:	b9e0      	cbnz	r0, 80048da <__swbuf_r+0x74>
 80048a0:	68a3      	ldr	r3, [r4, #8]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	60a3      	str	r3, [r4, #8]
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	6022      	str	r2, [r4, #0]
 80048ac:	701e      	strb	r6, [r3, #0]
 80048ae:	6962      	ldr	r2, [r4, #20]
 80048b0:	1c43      	adds	r3, r0, #1
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d004      	beq.n	80048c0 <__swbuf_r+0x5a>
 80048b6:	89a3      	ldrh	r3, [r4, #12]
 80048b8:	07db      	lsls	r3, r3, #31
 80048ba:	d506      	bpl.n	80048ca <__swbuf_r+0x64>
 80048bc:	2e0a      	cmp	r6, #10
 80048be:	d104      	bne.n	80048ca <__swbuf_r+0x64>
 80048c0:	4621      	mov	r1, r4
 80048c2:	4628      	mov	r0, r5
 80048c4:	f000 fe8a 	bl	80055dc <_fflush_r>
 80048c8:	b938      	cbnz	r0, 80048da <__swbuf_r+0x74>
 80048ca:	4638      	mov	r0, r7
 80048cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048ce:	4621      	mov	r1, r4
 80048d0:	4628      	mov	r0, r5
 80048d2:	f000 f805 	bl	80048e0 <__swsetup_r>
 80048d6:	2800      	cmp	r0, #0
 80048d8:	d0d5      	beq.n	8004886 <__swbuf_r+0x20>
 80048da:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80048de:	e7f4      	b.n	80048ca <__swbuf_r+0x64>

080048e0 <__swsetup_r>:
 80048e0:	b538      	push	{r3, r4, r5, lr}
 80048e2:	4b2a      	ldr	r3, [pc, #168]	; (800498c <__swsetup_r+0xac>)
 80048e4:	4605      	mov	r5, r0
 80048e6:	6818      	ldr	r0, [r3, #0]
 80048e8:	460c      	mov	r4, r1
 80048ea:	b118      	cbz	r0, 80048f4 <__swsetup_r+0x14>
 80048ec:	6a03      	ldr	r3, [r0, #32]
 80048ee:	b90b      	cbnz	r3, 80048f4 <__swsetup_r+0x14>
 80048f0:	f7ff feb2 	bl	8004658 <__sinit>
 80048f4:	89a3      	ldrh	r3, [r4, #12]
 80048f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048fa:	0718      	lsls	r0, r3, #28
 80048fc:	d422      	bmi.n	8004944 <__swsetup_r+0x64>
 80048fe:	06d9      	lsls	r1, r3, #27
 8004900:	d407      	bmi.n	8004912 <__swsetup_r+0x32>
 8004902:	2309      	movs	r3, #9
 8004904:	602b      	str	r3, [r5, #0]
 8004906:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800490a:	81a3      	strh	r3, [r4, #12]
 800490c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004910:	e034      	b.n	800497c <__swsetup_r+0x9c>
 8004912:	0758      	lsls	r0, r3, #29
 8004914:	d512      	bpl.n	800493c <__swsetup_r+0x5c>
 8004916:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004918:	b141      	cbz	r1, 800492c <__swsetup_r+0x4c>
 800491a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800491e:	4299      	cmp	r1, r3
 8004920:	d002      	beq.n	8004928 <__swsetup_r+0x48>
 8004922:	4628      	mov	r0, r5
 8004924:	f000 f8b0 	bl	8004a88 <_free_r>
 8004928:	2300      	movs	r3, #0
 800492a:	6363      	str	r3, [r4, #52]	; 0x34
 800492c:	89a3      	ldrh	r3, [r4, #12]
 800492e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004932:	81a3      	strh	r3, [r4, #12]
 8004934:	2300      	movs	r3, #0
 8004936:	6063      	str	r3, [r4, #4]
 8004938:	6923      	ldr	r3, [r4, #16]
 800493a:	6023      	str	r3, [r4, #0]
 800493c:	89a3      	ldrh	r3, [r4, #12]
 800493e:	f043 0308 	orr.w	r3, r3, #8
 8004942:	81a3      	strh	r3, [r4, #12]
 8004944:	6923      	ldr	r3, [r4, #16]
 8004946:	b94b      	cbnz	r3, 800495c <__swsetup_r+0x7c>
 8004948:	89a3      	ldrh	r3, [r4, #12]
 800494a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800494e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004952:	d003      	beq.n	800495c <__swsetup_r+0x7c>
 8004954:	4621      	mov	r1, r4
 8004956:	4628      	mov	r0, r5
 8004958:	f000 fe8e 	bl	8005678 <__smakebuf_r>
 800495c:	89a0      	ldrh	r0, [r4, #12]
 800495e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004962:	f010 0301 	ands.w	r3, r0, #1
 8004966:	d00a      	beq.n	800497e <__swsetup_r+0x9e>
 8004968:	2300      	movs	r3, #0
 800496a:	60a3      	str	r3, [r4, #8]
 800496c:	6963      	ldr	r3, [r4, #20]
 800496e:	425b      	negs	r3, r3
 8004970:	61a3      	str	r3, [r4, #24]
 8004972:	6923      	ldr	r3, [r4, #16]
 8004974:	b943      	cbnz	r3, 8004988 <__swsetup_r+0xa8>
 8004976:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800497a:	d1c4      	bne.n	8004906 <__swsetup_r+0x26>
 800497c:	bd38      	pop	{r3, r4, r5, pc}
 800497e:	0781      	lsls	r1, r0, #30
 8004980:	bf58      	it	pl
 8004982:	6963      	ldrpl	r3, [r4, #20]
 8004984:	60a3      	str	r3, [r4, #8]
 8004986:	e7f4      	b.n	8004972 <__swsetup_r+0x92>
 8004988:	2000      	movs	r0, #0
 800498a:	e7f7      	b.n	800497c <__swsetup_r+0x9c>
 800498c:	20000064 	.word	0x20000064

08004990 <memset>:
 8004990:	4402      	add	r2, r0
 8004992:	4603      	mov	r3, r0
 8004994:	4293      	cmp	r3, r2
 8004996:	d100      	bne.n	800499a <memset+0xa>
 8004998:	4770      	bx	lr
 800499a:	f803 1b01 	strb.w	r1, [r3], #1
 800499e:	e7f9      	b.n	8004994 <memset+0x4>

080049a0 <_close_r>:
 80049a0:	b538      	push	{r3, r4, r5, lr}
 80049a2:	4d06      	ldr	r5, [pc, #24]	; (80049bc <_close_r+0x1c>)
 80049a4:	2300      	movs	r3, #0
 80049a6:	4604      	mov	r4, r0
 80049a8:	4608      	mov	r0, r1
 80049aa:	602b      	str	r3, [r5, #0]
 80049ac:	f7fc fa24 	bl	8000df8 <_close>
 80049b0:	1c43      	adds	r3, r0, #1
 80049b2:	d102      	bne.n	80049ba <_close_r+0x1a>
 80049b4:	682b      	ldr	r3, [r5, #0]
 80049b6:	b103      	cbz	r3, 80049ba <_close_r+0x1a>
 80049b8:	6023      	str	r3, [r4, #0]
 80049ba:	bd38      	pop	{r3, r4, r5, pc}
 80049bc:	20000264 	.word	0x20000264

080049c0 <_lseek_r>:
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	4d07      	ldr	r5, [pc, #28]	; (80049e0 <_lseek_r+0x20>)
 80049c4:	4604      	mov	r4, r0
 80049c6:	4608      	mov	r0, r1
 80049c8:	4611      	mov	r1, r2
 80049ca:	2200      	movs	r2, #0
 80049cc:	602a      	str	r2, [r5, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	f7fc fa39 	bl	8000e46 <_lseek>
 80049d4:	1c43      	adds	r3, r0, #1
 80049d6:	d102      	bne.n	80049de <_lseek_r+0x1e>
 80049d8:	682b      	ldr	r3, [r5, #0]
 80049da:	b103      	cbz	r3, 80049de <_lseek_r+0x1e>
 80049dc:	6023      	str	r3, [r4, #0]
 80049de:	bd38      	pop	{r3, r4, r5, pc}
 80049e0:	20000264 	.word	0x20000264

080049e4 <_read_r>:
 80049e4:	b538      	push	{r3, r4, r5, lr}
 80049e6:	4d07      	ldr	r5, [pc, #28]	; (8004a04 <_read_r+0x20>)
 80049e8:	4604      	mov	r4, r0
 80049ea:	4608      	mov	r0, r1
 80049ec:	4611      	mov	r1, r2
 80049ee:	2200      	movs	r2, #0
 80049f0:	602a      	str	r2, [r5, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	f7fc f9cc 	bl	8000d90 <_read>
 80049f8:	1c43      	adds	r3, r0, #1
 80049fa:	d102      	bne.n	8004a02 <_read_r+0x1e>
 80049fc:	682b      	ldr	r3, [r5, #0]
 80049fe:	b103      	cbz	r3, 8004a02 <_read_r+0x1e>
 8004a00:	6023      	str	r3, [r4, #0]
 8004a02:	bd38      	pop	{r3, r4, r5, pc}
 8004a04:	20000264 	.word	0x20000264

08004a08 <_write_r>:
 8004a08:	b538      	push	{r3, r4, r5, lr}
 8004a0a:	4d07      	ldr	r5, [pc, #28]	; (8004a28 <_write_r+0x20>)
 8004a0c:	4604      	mov	r4, r0
 8004a0e:	4608      	mov	r0, r1
 8004a10:	4611      	mov	r1, r2
 8004a12:	2200      	movs	r2, #0
 8004a14:	602a      	str	r2, [r5, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	f7fc f9d8 	bl	8000dcc <_write>
 8004a1c:	1c43      	adds	r3, r0, #1
 8004a1e:	d102      	bne.n	8004a26 <_write_r+0x1e>
 8004a20:	682b      	ldr	r3, [r5, #0]
 8004a22:	b103      	cbz	r3, 8004a26 <_write_r+0x1e>
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	bd38      	pop	{r3, r4, r5, pc}
 8004a28:	20000264 	.word	0x20000264

08004a2c <__errno>:
 8004a2c:	4b01      	ldr	r3, [pc, #4]	; (8004a34 <__errno+0x8>)
 8004a2e:	6818      	ldr	r0, [r3, #0]
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	20000064 	.word	0x20000064

08004a38 <__libc_init_array>:
 8004a38:	b570      	push	{r4, r5, r6, lr}
 8004a3a:	4d0d      	ldr	r5, [pc, #52]	; (8004a70 <__libc_init_array+0x38>)
 8004a3c:	4c0d      	ldr	r4, [pc, #52]	; (8004a74 <__libc_init_array+0x3c>)
 8004a3e:	1b64      	subs	r4, r4, r5
 8004a40:	10a4      	asrs	r4, r4, #2
 8004a42:	2600      	movs	r6, #0
 8004a44:	42a6      	cmp	r6, r4
 8004a46:	d109      	bne.n	8004a5c <__libc_init_array+0x24>
 8004a48:	4d0b      	ldr	r5, [pc, #44]	; (8004a78 <__libc_init_array+0x40>)
 8004a4a:	4c0c      	ldr	r4, [pc, #48]	; (8004a7c <__libc_init_array+0x44>)
 8004a4c:	f000 fee2 	bl	8005814 <_init>
 8004a50:	1b64      	subs	r4, r4, r5
 8004a52:	10a4      	asrs	r4, r4, #2
 8004a54:	2600      	movs	r6, #0
 8004a56:	42a6      	cmp	r6, r4
 8004a58:	d105      	bne.n	8004a66 <__libc_init_array+0x2e>
 8004a5a:	bd70      	pop	{r4, r5, r6, pc}
 8004a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a60:	4798      	blx	r3
 8004a62:	3601      	adds	r6, #1
 8004a64:	e7ee      	b.n	8004a44 <__libc_init_array+0xc>
 8004a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a6a:	4798      	blx	r3
 8004a6c:	3601      	adds	r6, #1
 8004a6e:	e7f2      	b.n	8004a56 <__libc_init_array+0x1e>
 8004a70:	080059dc 	.word	0x080059dc
 8004a74:	080059dc 	.word	0x080059dc
 8004a78:	080059dc 	.word	0x080059dc
 8004a7c:	080059e0 	.word	0x080059e0

08004a80 <__retarget_lock_init_recursive>:
 8004a80:	4770      	bx	lr

08004a82 <__retarget_lock_acquire_recursive>:
 8004a82:	4770      	bx	lr

08004a84 <__retarget_lock_release_recursive>:
 8004a84:	4770      	bx	lr
	...

08004a88 <_free_r>:
 8004a88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a8a:	2900      	cmp	r1, #0
 8004a8c:	d044      	beq.n	8004b18 <_free_r+0x90>
 8004a8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a92:	9001      	str	r0, [sp, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f1a1 0404 	sub.w	r4, r1, #4
 8004a9a:	bfb8      	it	lt
 8004a9c:	18e4      	addlt	r4, r4, r3
 8004a9e:	f000 f8df 	bl	8004c60 <__malloc_lock>
 8004aa2:	4a1e      	ldr	r2, [pc, #120]	; (8004b1c <_free_r+0x94>)
 8004aa4:	9801      	ldr	r0, [sp, #4]
 8004aa6:	6813      	ldr	r3, [r2, #0]
 8004aa8:	b933      	cbnz	r3, 8004ab8 <_free_r+0x30>
 8004aaa:	6063      	str	r3, [r4, #4]
 8004aac:	6014      	str	r4, [r2, #0]
 8004aae:	b003      	add	sp, #12
 8004ab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ab4:	f000 b8da 	b.w	8004c6c <__malloc_unlock>
 8004ab8:	42a3      	cmp	r3, r4
 8004aba:	d908      	bls.n	8004ace <_free_r+0x46>
 8004abc:	6825      	ldr	r5, [r4, #0]
 8004abe:	1961      	adds	r1, r4, r5
 8004ac0:	428b      	cmp	r3, r1
 8004ac2:	bf01      	itttt	eq
 8004ac4:	6819      	ldreq	r1, [r3, #0]
 8004ac6:	685b      	ldreq	r3, [r3, #4]
 8004ac8:	1949      	addeq	r1, r1, r5
 8004aca:	6021      	streq	r1, [r4, #0]
 8004acc:	e7ed      	b.n	8004aaa <_free_r+0x22>
 8004ace:	461a      	mov	r2, r3
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	b10b      	cbz	r3, 8004ad8 <_free_r+0x50>
 8004ad4:	42a3      	cmp	r3, r4
 8004ad6:	d9fa      	bls.n	8004ace <_free_r+0x46>
 8004ad8:	6811      	ldr	r1, [r2, #0]
 8004ada:	1855      	adds	r5, r2, r1
 8004adc:	42a5      	cmp	r5, r4
 8004ade:	d10b      	bne.n	8004af8 <_free_r+0x70>
 8004ae0:	6824      	ldr	r4, [r4, #0]
 8004ae2:	4421      	add	r1, r4
 8004ae4:	1854      	adds	r4, r2, r1
 8004ae6:	42a3      	cmp	r3, r4
 8004ae8:	6011      	str	r1, [r2, #0]
 8004aea:	d1e0      	bne.n	8004aae <_free_r+0x26>
 8004aec:	681c      	ldr	r4, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	6053      	str	r3, [r2, #4]
 8004af2:	440c      	add	r4, r1
 8004af4:	6014      	str	r4, [r2, #0]
 8004af6:	e7da      	b.n	8004aae <_free_r+0x26>
 8004af8:	d902      	bls.n	8004b00 <_free_r+0x78>
 8004afa:	230c      	movs	r3, #12
 8004afc:	6003      	str	r3, [r0, #0]
 8004afe:	e7d6      	b.n	8004aae <_free_r+0x26>
 8004b00:	6825      	ldr	r5, [r4, #0]
 8004b02:	1961      	adds	r1, r4, r5
 8004b04:	428b      	cmp	r3, r1
 8004b06:	bf04      	itt	eq
 8004b08:	6819      	ldreq	r1, [r3, #0]
 8004b0a:	685b      	ldreq	r3, [r3, #4]
 8004b0c:	6063      	str	r3, [r4, #4]
 8004b0e:	bf04      	itt	eq
 8004b10:	1949      	addeq	r1, r1, r5
 8004b12:	6021      	streq	r1, [r4, #0]
 8004b14:	6054      	str	r4, [r2, #4]
 8004b16:	e7ca      	b.n	8004aae <_free_r+0x26>
 8004b18:	b003      	add	sp, #12
 8004b1a:	bd30      	pop	{r4, r5, pc}
 8004b1c:	2000026c 	.word	0x2000026c

08004b20 <sbrk_aligned>:
 8004b20:	b570      	push	{r4, r5, r6, lr}
 8004b22:	4e0e      	ldr	r6, [pc, #56]	; (8004b5c <sbrk_aligned+0x3c>)
 8004b24:	460c      	mov	r4, r1
 8004b26:	6831      	ldr	r1, [r6, #0]
 8004b28:	4605      	mov	r5, r0
 8004b2a:	b911      	cbnz	r1, 8004b32 <sbrk_aligned+0x12>
 8004b2c:	f000 fe1c 	bl	8005768 <_sbrk_r>
 8004b30:	6030      	str	r0, [r6, #0]
 8004b32:	4621      	mov	r1, r4
 8004b34:	4628      	mov	r0, r5
 8004b36:	f000 fe17 	bl	8005768 <_sbrk_r>
 8004b3a:	1c43      	adds	r3, r0, #1
 8004b3c:	d00a      	beq.n	8004b54 <sbrk_aligned+0x34>
 8004b3e:	1cc4      	adds	r4, r0, #3
 8004b40:	f024 0403 	bic.w	r4, r4, #3
 8004b44:	42a0      	cmp	r0, r4
 8004b46:	d007      	beq.n	8004b58 <sbrk_aligned+0x38>
 8004b48:	1a21      	subs	r1, r4, r0
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	f000 fe0c 	bl	8005768 <_sbrk_r>
 8004b50:	3001      	adds	r0, #1
 8004b52:	d101      	bne.n	8004b58 <sbrk_aligned+0x38>
 8004b54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004b58:	4620      	mov	r0, r4
 8004b5a:	bd70      	pop	{r4, r5, r6, pc}
 8004b5c:	20000270 	.word	0x20000270

08004b60 <_malloc_r>:
 8004b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b64:	1ccd      	adds	r5, r1, #3
 8004b66:	f025 0503 	bic.w	r5, r5, #3
 8004b6a:	3508      	adds	r5, #8
 8004b6c:	2d0c      	cmp	r5, #12
 8004b6e:	bf38      	it	cc
 8004b70:	250c      	movcc	r5, #12
 8004b72:	2d00      	cmp	r5, #0
 8004b74:	4607      	mov	r7, r0
 8004b76:	db01      	blt.n	8004b7c <_malloc_r+0x1c>
 8004b78:	42a9      	cmp	r1, r5
 8004b7a:	d905      	bls.n	8004b88 <_malloc_r+0x28>
 8004b7c:	230c      	movs	r3, #12
 8004b7e:	603b      	str	r3, [r7, #0]
 8004b80:	2600      	movs	r6, #0
 8004b82:	4630      	mov	r0, r6
 8004b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004c5c <_malloc_r+0xfc>
 8004b8c:	f000 f868 	bl	8004c60 <__malloc_lock>
 8004b90:	f8d8 3000 	ldr.w	r3, [r8]
 8004b94:	461c      	mov	r4, r3
 8004b96:	bb5c      	cbnz	r4, 8004bf0 <_malloc_r+0x90>
 8004b98:	4629      	mov	r1, r5
 8004b9a:	4638      	mov	r0, r7
 8004b9c:	f7ff ffc0 	bl	8004b20 <sbrk_aligned>
 8004ba0:	1c43      	adds	r3, r0, #1
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	d155      	bne.n	8004c52 <_malloc_r+0xf2>
 8004ba6:	f8d8 4000 	ldr.w	r4, [r8]
 8004baa:	4626      	mov	r6, r4
 8004bac:	2e00      	cmp	r6, #0
 8004bae:	d145      	bne.n	8004c3c <_malloc_r+0xdc>
 8004bb0:	2c00      	cmp	r4, #0
 8004bb2:	d048      	beq.n	8004c46 <_malloc_r+0xe6>
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	4631      	mov	r1, r6
 8004bb8:	4638      	mov	r0, r7
 8004bba:	eb04 0903 	add.w	r9, r4, r3
 8004bbe:	f000 fdd3 	bl	8005768 <_sbrk_r>
 8004bc2:	4581      	cmp	r9, r0
 8004bc4:	d13f      	bne.n	8004c46 <_malloc_r+0xe6>
 8004bc6:	6821      	ldr	r1, [r4, #0]
 8004bc8:	1a6d      	subs	r5, r5, r1
 8004bca:	4629      	mov	r1, r5
 8004bcc:	4638      	mov	r0, r7
 8004bce:	f7ff ffa7 	bl	8004b20 <sbrk_aligned>
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	d037      	beq.n	8004c46 <_malloc_r+0xe6>
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	442b      	add	r3, r5
 8004bda:	6023      	str	r3, [r4, #0]
 8004bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d038      	beq.n	8004c56 <_malloc_r+0xf6>
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	42a2      	cmp	r2, r4
 8004be8:	d12b      	bne.n	8004c42 <_malloc_r+0xe2>
 8004bea:	2200      	movs	r2, #0
 8004bec:	605a      	str	r2, [r3, #4]
 8004bee:	e00f      	b.n	8004c10 <_malloc_r+0xb0>
 8004bf0:	6822      	ldr	r2, [r4, #0]
 8004bf2:	1b52      	subs	r2, r2, r5
 8004bf4:	d41f      	bmi.n	8004c36 <_malloc_r+0xd6>
 8004bf6:	2a0b      	cmp	r2, #11
 8004bf8:	d917      	bls.n	8004c2a <_malloc_r+0xca>
 8004bfa:	1961      	adds	r1, r4, r5
 8004bfc:	42a3      	cmp	r3, r4
 8004bfe:	6025      	str	r5, [r4, #0]
 8004c00:	bf18      	it	ne
 8004c02:	6059      	strne	r1, [r3, #4]
 8004c04:	6863      	ldr	r3, [r4, #4]
 8004c06:	bf08      	it	eq
 8004c08:	f8c8 1000 	streq.w	r1, [r8]
 8004c0c:	5162      	str	r2, [r4, r5]
 8004c0e:	604b      	str	r3, [r1, #4]
 8004c10:	4638      	mov	r0, r7
 8004c12:	f104 060b 	add.w	r6, r4, #11
 8004c16:	f000 f829 	bl	8004c6c <__malloc_unlock>
 8004c1a:	f026 0607 	bic.w	r6, r6, #7
 8004c1e:	1d23      	adds	r3, r4, #4
 8004c20:	1af2      	subs	r2, r6, r3
 8004c22:	d0ae      	beq.n	8004b82 <_malloc_r+0x22>
 8004c24:	1b9b      	subs	r3, r3, r6
 8004c26:	50a3      	str	r3, [r4, r2]
 8004c28:	e7ab      	b.n	8004b82 <_malloc_r+0x22>
 8004c2a:	42a3      	cmp	r3, r4
 8004c2c:	6862      	ldr	r2, [r4, #4]
 8004c2e:	d1dd      	bne.n	8004bec <_malloc_r+0x8c>
 8004c30:	f8c8 2000 	str.w	r2, [r8]
 8004c34:	e7ec      	b.n	8004c10 <_malloc_r+0xb0>
 8004c36:	4623      	mov	r3, r4
 8004c38:	6864      	ldr	r4, [r4, #4]
 8004c3a:	e7ac      	b.n	8004b96 <_malloc_r+0x36>
 8004c3c:	4634      	mov	r4, r6
 8004c3e:	6876      	ldr	r6, [r6, #4]
 8004c40:	e7b4      	b.n	8004bac <_malloc_r+0x4c>
 8004c42:	4613      	mov	r3, r2
 8004c44:	e7cc      	b.n	8004be0 <_malloc_r+0x80>
 8004c46:	230c      	movs	r3, #12
 8004c48:	603b      	str	r3, [r7, #0]
 8004c4a:	4638      	mov	r0, r7
 8004c4c:	f000 f80e 	bl	8004c6c <__malloc_unlock>
 8004c50:	e797      	b.n	8004b82 <_malloc_r+0x22>
 8004c52:	6025      	str	r5, [r4, #0]
 8004c54:	e7dc      	b.n	8004c10 <_malloc_r+0xb0>
 8004c56:	605b      	str	r3, [r3, #4]
 8004c58:	deff      	udf	#255	; 0xff
 8004c5a:	bf00      	nop
 8004c5c:	2000026c 	.word	0x2000026c

08004c60 <__malloc_lock>:
 8004c60:	4801      	ldr	r0, [pc, #4]	; (8004c68 <__malloc_lock+0x8>)
 8004c62:	f7ff bf0e 	b.w	8004a82 <__retarget_lock_acquire_recursive>
 8004c66:	bf00      	nop
 8004c68:	20000268 	.word	0x20000268

08004c6c <__malloc_unlock>:
 8004c6c:	4801      	ldr	r0, [pc, #4]	; (8004c74 <__malloc_unlock+0x8>)
 8004c6e:	f7ff bf09 	b.w	8004a84 <__retarget_lock_release_recursive>
 8004c72:	bf00      	nop
 8004c74:	20000268 	.word	0x20000268

08004c78 <__ssputs_r>:
 8004c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c7c:	688e      	ldr	r6, [r1, #8]
 8004c7e:	461f      	mov	r7, r3
 8004c80:	42be      	cmp	r6, r7
 8004c82:	680b      	ldr	r3, [r1, #0]
 8004c84:	4682      	mov	sl, r0
 8004c86:	460c      	mov	r4, r1
 8004c88:	4690      	mov	r8, r2
 8004c8a:	d82c      	bhi.n	8004ce6 <__ssputs_r+0x6e>
 8004c8c:	898a      	ldrh	r2, [r1, #12]
 8004c8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c92:	d026      	beq.n	8004ce2 <__ssputs_r+0x6a>
 8004c94:	6965      	ldr	r5, [r4, #20]
 8004c96:	6909      	ldr	r1, [r1, #16]
 8004c98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c9c:	eba3 0901 	sub.w	r9, r3, r1
 8004ca0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ca4:	1c7b      	adds	r3, r7, #1
 8004ca6:	444b      	add	r3, r9
 8004ca8:	106d      	asrs	r5, r5, #1
 8004caa:	429d      	cmp	r5, r3
 8004cac:	bf38      	it	cc
 8004cae:	461d      	movcc	r5, r3
 8004cb0:	0553      	lsls	r3, r2, #21
 8004cb2:	d527      	bpl.n	8004d04 <__ssputs_r+0x8c>
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	f7ff ff53 	bl	8004b60 <_malloc_r>
 8004cba:	4606      	mov	r6, r0
 8004cbc:	b360      	cbz	r0, 8004d18 <__ssputs_r+0xa0>
 8004cbe:	6921      	ldr	r1, [r4, #16]
 8004cc0:	464a      	mov	r2, r9
 8004cc2:	f000 fd61 	bl	8005788 <memcpy>
 8004cc6:	89a3      	ldrh	r3, [r4, #12]
 8004cc8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd0:	81a3      	strh	r3, [r4, #12]
 8004cd2:	6126      	str	r6, [r4, #16]
 8004cd4:	6165      	str	r5, [r4, #20]
 8004cd6:	444e      	add	r6, r9
 8004cd8:	eba5 0509 	sub.w	r5, r5, r9
 8004cdc:	6026      	str	r6, [r4, #0]
 8004cde:	60a5      	str	r5, [r4, #8]
 8004ce0:	463e      	mov	r6, r7
 8004ce2:	42be      	cmp	r6, r7
 8004ce4:	d900      	bls.n	8004ce8 <__ssputs_r+0x70>
 8004ce6:	463e      	mov	r6, r7
 8004ce8:	6820      	ldr	r0, [r4, #0]
 8004cea:	4632      	mov	r2, r6
 8004cec:	4641      	mov	r1, r8
 8004cee:	f000 fcff 	bl	80056f0 <memmove>
 8004cf2:	68a3      	ldr	r3, [r4, #8]
 8004cf4:	1b9b      	subs	r3, r3, r6
 8004cf6:	60a3      	str	r3, [r4, #8]
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	4433      	add	r3, r6
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	2000      	movs	r0, #0
 8004d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d04:	462a      	mov	r2, r5
 8004d06:	f000 fd4d 	bl	80057a4 <_realloc_r>
 8004d0a:	4606      	mov	r6, r0
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	d1e0      	bne.n	8004cd2 <__ssputs_r+0x5a>
 8004d10:	6921      	ldr	r1, [r4, #16]
 8004d12:	4650      	mov	r0, sl
 8004d14:	f7ff feb8 	bl	8004a88 <_free_r>
 8004d18:	230c      	movs	r3, #12
 8004d1a:	f8ca 3000 	str.w	r3, [sl]
 8004d1e:	89a3      	ldrh	r3, [r4, #12]
 8004d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d24:	81a3      	strh	r3, [r4, #12]
 8004d26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d2a:	e7e9      	b.n	8004d00 <__ssputs_r+0x88>

08004d2c <_svfiprintf_r>:
 8004d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d30:	4698      	mov	r8, r3
 8004d32:	898b      	ldrh	r3, [r1, #12]
 8004d34:	061b      	lsls	r3, r3, #24
 8004d36:	b09d      	sub	sp, #116	; 0x74
 8004d38:	4607      	mov	r7, r0
 8004d3a:	460d      	mov	r5, r1
 8004d3c:	4614      	mov	r4, r2
 8004d3e:	d50e      	bpl.n	8004d5e <_svfiprintf_r+0x32>
 8004d40:	690b      	ldr	r3, [r1, #16]
 8004d42:	b963      	cbnz	r3, 8004d5e <_svfiprintf_r+0x32>
 8004d44:	2140      	movs	r1, #64	; 0x40
 8004d46:	f7ff ff0b 	bl	8004b60 <_malloc_r>
 8004d4a:	6028      	str	r0, [r5, #0]
 8004d4c:	6128      	str	r0, [r5, #16]
 8004d4e:	b920      	cbnz	r0, 8004d5a <_svfiprintf_r+0x2e>
 8004d50:	230c      	movs	r3, #12
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d58:	e0d0      	b.n	8004efc <_svfiprintf_r+0x1d0>
 8004d5a:	2340      	movs	r3, #64	; 0x40
 8004d5c:	616b      	str	r3, [r5, #20]
 8004d5e:	2300      	movs	r3, #0
 8004d60:	9309      	str	r3, [sp, #36]	; 0x24
 8004d62:	2320      	movs	r3, #32
 8004d64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d68:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d6c:	2330      	movs	r3, #48	; 0x30
 8004d6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004f14 <_svfiprintf_r+0x1e8>
 8004d72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d76:	f04f 0901 	mov.w	r9, #1
 8004d7a:	4623      	mov	r3, r4
 8004d7c:	469a      	mov	sl, r3
 8004d7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d82:	b10a      	cbz	r2, 8004d88 <_svfiprintf_r+0x5c>
 8004d84:	2a25      	cmp	r2, #37	; 0x25
 8004d86:	d1f9      	bne.n	8004d7c <_svfiprintf_r+0x50>
 8004d88:	ebba 0b04 	subs.w	fp, sl, r4
 8004d8c:	d00b      	beq.n	8004da6 <_svfiprintf_r+0x7a>
 8004d8e:	465b      	mov	r3, fp
 8004d90:	4622      	mov	r2, r4
 8004d92:	4629      	mov	r1, r5
 8004d94:	4638      	mov	r0, r7
 8004d96:	f7ff ff6f 	bl	8004c78 <__ssputs_r>
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	f000 80a9 	beq.w	8004ef2 <_svfiprintf_r+0x1c6>
 8004da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004da2:	445a      	add	r2, fp
 8004da4:	9209      	str	r2, [sp, #36]	; 0x24
 8004da6:	f89a 3000 	ldrb.w	r3, [sl]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 80a1 	beq.w	8004ef2 <_svfiprintf_r+0x1c6>
 8004db0:	2300      	movs	r3, #0
 8004db2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004db6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dba:	f10a 0a01 	add.w	sl, sl, #1
 8004dbe:	9304      	str	r3, [sp, #16]
 8004dc0:	9307      	str	r3, [sp, #28]
 8004dc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004dc6:	931a      	str	r3, [sp, #104]	; 0x68
 8004dc8:	4654      	mov	r4, sl
 8004dca:	2205      	movs	r2, #5
 8004dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dd0:	4850      	ldr	r0, [pc, #320]	; (8004f14 <_svfiprintf_r+0x1e8>)
 8004dd2:	f7fb fa0d 	bl	80001f0 <memchr>
 8004dd6:	9a04      	ldr	r2, [sp, #16]
 8004dd8:	b9d8      	cbnz	r0, 8004e12 <_svfiprintf_r+0xe6>
 8004dda:	06d0      	lsls	r0, r2, #27
 8004ddc:	bf44      	itt	mi
 8004dde:	2320      	movmi	r3, #32
 8004de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004de4:	0711      	lsls	r1, r2, #28
 8004de6:	bf44      	itt	mi
 8004de8:	232b      	movmi	r3, #43	; 0x2b
 8004dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dee:	f89a 3000 	ldrb.w	r3, [sl]
 8004df2:	2b2a      	cmp	r3, #42	; 0x2a
 8004df4:	d015      	beq.n	8004e22 <_svfiprintf_r+0xf6>
 8004df6:	9a07      	ldr	r2, [sp, #28]
 8004df8:	4654      	mov	r4, sl
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	f04f 0c0a 	mov.w	ip, #10
 8004e00:	4621      	mov	r1, r4
 8004e02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e06:	3b30      	subs	r3, #48	; 0x30
 8004e08:	2b09      	cmp	r3, #9
 8004e0a:	d94d      	bls.n	8004ea8 <_svfiprintf_r+0x17c>
 8004e0c:	b1b0      	cbz	r0, 8004e3c <_svfiprintf_r+0x110>
 8004e0e:	9207      	str	r2, [sp, #28]
 8004e10:	e014      	b.n	8004e3c <_svfiprintf_r+0x110>
 8004e12:	eba0 0308 	sub.w	r3, r0, r8
 8004e16:	fa09 f303 	lsl.w	r3, r9, r3
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	9304      	str	r3, [sp, #16]
 8004e1e:	46a2      	mov	sl, r4
 8004e20:	e7d2      	b.n	8004dc8 <_svfiprintf_r+0x9c>
 8004e22:	9b03      	ldr	r3, [sp, #12]
 8004e24:	1d19      	adds	r1, r3, #4
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	9103      	str	r1, [sp, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	bfbb      	ittet	lt
 8004e2e:	425b      	neglt	r3, r3
 8004e30:	f042 0202 	orrlt.w	r2, r2, #2
 8004e34:	9307      	strge	r3, [sp, #28]
 8004e36:	9307      	strlt	r3, [sp, #28]
 8004e38:	bfb8      	it	lt
 8004e3a:	9204      	strlt	r2, [sp, #16]
 8004e3c:	7823      	ldrb	r3, [r4, #0]
 8004e3e:	2b2e      	cmp	r3, #46	; 0x2e
 8004e40:	d10c      	bne.n	8004e5c <_svfiprintf_r+0x130>
 8004e42:	7863      	ldrb	r3, [r4, #1]
 8004e44:	2b2a      	cmp	r3, #42	; 0x2a
 8004e46:	d134      	bne.n	8004eb2 <_svfiprintf_r+0x186>
 8004e48:	9b03      	ldr	r3, [sp, #12]
 8004e4a:	1d1a      	adds	r2, r3, #4
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	9203      	str	r2, [sp, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	bfb8      	it	lt
 8004e54:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e58:	3402      	adds	r4, #2
 8004e5a:	9305      	str	r3, [sp, #20]
 8004e5c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004f24 <_svfiprintf_r+0x1f8>
 8004e60:	7821      	ldrb	r1, [r4, #0]
 8004e62:	2203      	movs	r2, #3
 8004e64:	4650      	mov	r0, sl
 8004e66:	f7fb f9c3 	bl	80001f0 <memchr>
 8004e6a:	b138      	cbz	r0, 8004e7c <_svfiprintf_r+0x150>
 8004e6c:	9b04      	ldr	r3, [sp, #16]
 8004e6e:	eba0 000a 	sub.w	r0, r0, sl
 8004e72:	2240      	movs	r2, #64	; 0x40
 8004e74:	4082      	lsls	r2, r0
 8004e76:	4313      	orrs	r3, r2
 8004e78:	3401      	adds	r4, #1
 8004e7a:	9304      	str	r3, [sp, #16]
 8004e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e80:	4825      	ldr	r0, [pc, #148]	; (8004f18 <_svfiprintf_r+0x1ec>)
 8004e82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e86:	2206      	movs	r2, #6
 8004e88:	f7fb f9b2 	bl	80001f0 <memchr>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d038      	beq.n	8004f02 <_svfiprintf_r+0x1d6>
 8004e90:	4b22      	ldr	r3, [pc, #136]	; (8004f1c <_svfiprintf_r+0x1f0>)
 8004e92:	bb1b      	cbnz	r3, 8004edc <_svfiprintf_r+0x1b0>
 8004e94:	9b03      	ldr	r3, [sp, #12]
 8004e96:	3307      	adds	r3, #7
 8004e98:	f023 0307 	bic.w	r3, r3, #7
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	9303      	str	r3, [sp, #12]
 8004ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea2:	4433      	add	r3, r6
 8004ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ea6:	e768      	b.n	8004d7a <_svfiprintf_r+0x4e>
 8004ea8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004eac:	460c      	mov	r4, r1
 8004eae:	2001      	movs	r0, #1
 8004eb0:	e7a6      	b.n	8004e00 <_svfiprintf_r+0xd4>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	3401      	adds	r4, #1
 8004eb6:	9305      	str	r3, [sp, #20]
 8004eb8:	4619      	mov	r1, r3
 8004eba:	f04f 0c0a 	mov.w	ip, #10
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ec4:	3a30      	subs	r2, #48	; 0x30
 8004ec6:	2a09      	cmp	r2, #9
 8004ec8:	d903      	bls.n	8004ed2 <_svfiprintf_r+0x1a6>
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0c6      	beq.n	8004e5c <_svfiprintf_r+0x130>
 8004ece:	9105      	str	r1, [sp, #20]
 8004ed0:	e7c4      	b.n	8004e5c <_svfiprintf_r+0x130>
 8004ed2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e7f0      	b.n	8004ebe <_svfiprintf_r+0x192>
 8004edc:	ab03      	add	r3, sp, #12
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	462a      	mov	r2, r5
 8004ee2:	4b0f      	ldr	r3, [pc, #60]	; (8004f20 <_svfiprintf_r+0x1f4>)
 8004ee4:	a904      	add	r1, sp, #16
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	f3af 8000 	nop.w
 8004eec:	1c42      	adds	r2, r0, #1
 8004eee:	4606      	mov	r6, r0
 8004ef0:	d1d6      	bne.n	8004ea0 <_svfiprintf_r+0x174>
 8004ef2:	89ab      	ldrh	r3, [r5, #12]
 8004ef4:	065b      	lsls	r3, r3, #25
 8004ef6:	f53f af2d 	bmi.w	8004d54 <_svfiprintf_r+0x28>
 8004efa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004efc:	b01d      	add	sp, #116	; 0x74
 8004efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f02:	ab03      	add	r3, sp, #12
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	462a      	mov	r2, r5
 8004f08:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <_svfiprintf_r+0x1f4>)
 8004f0a:	a904      	add	r1, sp, #16
 8004f0c:	4638      	mov	r0, r7
 8004f0e:	f000 f9bd 	bl	800528c <_printf_i>
 8004f12:	e7eb      	b.n	8004eec <_svfiprintf_r+0x1c0>
 8004f14:	080059a0 	.word	0x080059a0
 8004f18:	080059aa 	.word	0x080059aa
 8004f1c:	00000000 	.word	0x00000000
 8004f20:	08004c79 	.word	0x08004c79
 8004f24:	080059a6 	.word	0x080059a6

08004f28 <__sfputc_r>:
 8004f28:	6893      	ldr	r3, [r2, #8]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	b410      	push	{r4}
 8004f30:	6093      	str	r3, [r2, #8]
 8004f32:	da08      	bge.n	8004f46 <__sfputc_r+0x1e>
 8004f34:	6994      	ldr	r4, [r2, #24]
 8004f36:	42a3      	cmp	r3, r4
 8004f38:	db01      	blt.n	8004f3e <__sfputc_r+0x16>
 8004f3a:	290a      	cmp	r1, #10
 8004f3c:	d103      	bne.n	8004f46 <__sfputc_r+0x1e>
 8004f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f42:	f7ff bc90 	b.w	8004866 <__swbuf_r>
 8004f46:	6813      	ldr	r3, [r2, #0]
 8004f48:	1c58      	adds	r0, r3, #1
 8004f4a:	6010      	str	r0, [r2, #0]
 8004f4c:	7019      	strb	r1, [r3, #0]
 8004f4e:	4608      	mov	r0, r1
 8004f50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <__sfputs_r>:
 8004f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f58:	4606      	mov	r6, r0
 8004f5a:	460f      	mov	r7, r1
 8004f5c:	4614      	mov	r4, r2
 8004f5e:	18d5      	adds	r5, r2, r3
 8004f60:	42ac      	cmp	r4, r5
 8004f62:	d101      	bne.n	8004f68 <__sfputs_r+0x12>
 8004f64:	2000      	movs	r0, #0
 8004f66:	e007      	b.n	8004f78 <__sfputs_r+0x22>
 8004f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f6c:	463a      	mov	r2, r7
 8004f6e:	4630      	mov	r0, r6
 8004f70:	f7ff ffda 	bl	8004f28 <__sfputc_r>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	d1f3      	bne.n	8004f60 <__sfputs_r+0xa>
 8004f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f7c <_vfiprintf_r>:
 8004f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f80:	460d      	mov	r5, r1
 8004f82:	b09d      	sub	sp, #116	; 0x74
 8004f84:	4614      	mov	r4, r2
 8004f86:	4698      	mov	r8, r3
 8004f88:	4606      	mov	r6, r0
 8004f8a:	b118      	cbz	r0, 8004f94 <_vfiprintf_r+0x18>
 8004f8c:	6a03      	ldr	r3, [r0, #32]
 8004f8e:	b90b      	cbnz	r3, 8004f94 <_vfiprintf_r+0x18>
 8004f90:	f7ff fb62 	bl	8004658 <__sinit>
 8004f94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f96:	07d9      	lsls	r1, r3, #31
 8004f98:	d405      	bmi.n	8004fa6 <_vfiprintf_r+0x2a>
 8004f9a:	89ab      	ldrh	r3, [r5, #12]
 8004f9c:	059a      	lsls	r2, r3, #22
 8004f9e:	d402      	bmi.n	8004fa6 <_vfiprintf_r+0x2a>
 8004fa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fa2:	f7ff fd6e 	bl	8004a82 <__retarget_lock_acquire_recursive>
 8004fa6:	89ab      	ldrh	r3, [r5, #12]
 8004fa8:	071b      	lsls	r3, r3, #28
 8004faa:	d501      	bpl.n	8004fb0 <_vfiprintf_r+0x34>
 8004fac:	692b      	ldr	r3, [r5, #16]
 8004fae:	b99b      	cbnz	r3, 8004fd8 <_vfiprintf_r+0x5c>
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	4630      	mov	r0, r6
 8004fb4:	f7ff fc94 	bl	80048e0 <__swsetup_r>
 8004fb8:	b170      	cbz	r0, 8004fd8 <_vfiprintf_r+0x5c>
 8004fba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fbc:	07dc      	lsls	r4, r3, #31
 8004fbe:	d504      	bpl.n	8004fca <_vfiprintf_r+0x4e>
 8004fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fc4:	b01d      	add	sp, #116	; 0x74
 8004fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fca:	89ab      	ldrh	r3, [r5, #12]
 8004fcc:	0598      	lsls	r0, r3, #22
 8004fce:	d4f7      	bmi.n	8004fc0 <_vfiprintf_r+0x44>
 8004fd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fd2:	f7ff fd57 	bl	8004a84 <__retarget_lock_release_recursive>
 8004fd6:	e7f3      	b.n	8004fc0 <_vfiprintf_r+0x44>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	9309      	str	r3, [sp, #36]	; 0x24
 8004fdc:	2320      	movs	r3, #32
 8004fde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fe2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fe6:	2330      	movs	r3, #48	; 0x30
 8004fe8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800519c <_vfiprintf_r+0x220>
 8004fec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ff0:	f04f 0901 	mov.w	r9, #1
 8004ff4:	4623      	mov	r3, r4
 8004ff6:	469a      	mov	sl, r3
 8004ff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ffc:	b10a      	cbz	r2, 8005002 <_vfiprintf_r+0x86>
 8004ffe:	2a25      	cmp	r2, #37	; 0x25
 8005000:	d1f9      	bne.n	8004ff6 <_vfiprintf_r+0x7a>
 8005002:	ebba 0b04 	subs.w	fp, sl, r4
 8005006:	d00b      	beq.n	8005020 <_vfiprintf_r+0xa4>
 8005008:	465b      	mov	r3, fp
 800500a:	4622      	mov	r2, r4
 800500c:	4629      	mov	r1, r5
 800500e:	4630      	mov	r0, r6
 8005010:	f7ff ffa1 	bl	8004f56 <__sfputs_r>
 8005014:	3001      	adds	r0, #1
 8005016:	f000 80a9 	beq.w	800516c <_vfiprintf_r+0x1f0>
 800501a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800501c:	445a      	add	r2, fp
 800501e:	9209      	str	r2, [sp, #36]	; 0x24
 8005020:	f89a 3000 	ldrb.w	r3, [sl]
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80a1 	beq.w	800516c <_vfiprintf_r+0x1f0>
 800502a:	2300      	movs	r3, #0
 800502c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005034:	f10a 0a01 	add.w	sl, sl, #1
 8005038:	9304      	str	r3, [sp, #16]
 800503a:	9307      	str	r3, [sp, #28]
 800503c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005040:	931a      	str	r3, [sp, #104]	; 0x68
 8005042:	4654      	mov	r4, sl
 8005044:	2205      	movs	r2, #5
 8005046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800504a:	4854      	ldr	r0, [pc, #336]	; (800519c <_vfiprintf_r+0x220>)
 800504c:	f7fb f8d0 	bl	80001f0 <memchr>
 8005050:	9a04      	ldr	r2, [sp, #16]
 8005052:	b9d8      	cbnz	r0, 800508c <_vfiprintf_r+0x110>
 8005054:	06d1      	lsls	r1, r2, #27
 8005056:	bf44      	itt	mi
 8005058:	2320      	movmi	r3, #32
 800505a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800505e:	0713      	lsls	r3, r2, #28
 8005060:	bf44      	itt	mi
 8005062:	232b      	movmi	r3, #43	; 0x2b
 8005064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005068:	f89a 3000 	ldrb.w	r3, [sl]
 800506c:	2b2a      	cmp	r3, #42	; 0x2a
 800506e:	d015      	beq.n	800509c <_vfiprintf_r+0x120>
 8005070:	9a07      	ldr	r2, [sp, #28]
 8005072:	4654      	mov	r4, sl
 8005074:	2000      	movs	r0, #0
 8005076:	f04f 0c0a 	mov.w	ip, #10
 800507a:	4621      	mov	r1, r4
 800507c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005080:	3b30      	subs	r3, #48	; 0x30
 8005082:	2b09      	cmp	r3, #9
 8005084:	d94d      	bls.n	8005122 <_vfiprintf_r+0x1a6>
 8005086:	b1b0      	cbz	r0, 80050b6 <_vfiprintf_r+0x13a>
 8005088:	9207      	str	r2, [sp, #28]
 800508a:	e014      	b.n	80050b6 <_vfiprintf_r+0x13a>
 800508c:	eba0 0308 	sub.w	r3, r0, r8
 8005090:	fa09 f303 	lsl.w	r3, r9, r3
 8005094:	4313      	orrs	r3, r2
 8005096:	9304      	str	r3, [sp, #16]
 8005098:	46a2      	mov	sl, r4
 800509a:	e7d2      	b.n	8005042 <_vfiprintf_r+0xc6>
 800509c:	9b03      	ldr	r3, [sp, #12]
 800509e:	1d19      	adds	r1, r3, #4
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	9103      	str	r1, [sp, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	bfbb      	ittet	lt
 80050a8:	425b      	neglt	r3, r3
 80050aa:	f042 0202 	orrlt.w	r2, r2, #2
 80050ae:	9307      	strge	r3, [sp, #28]
 80050b0:	9307      	strlt	r3, [sp, #28]
 80050b2:	bfb8      	it	lt
 80050b4:	9204      	strlt	r2, [sp, #16]
 80050b6:	7823      	ldrb	r3, [r4, #0]
 80050b8:	2b2e      	cmp	r3, #46	; 0x2e
 80050ba:	d10c      	bne.n	80050d6 <_vfiprintf_r+0x15a>
 80050bc:	7863      	ldrb	r3, [r4, #1]
 80050be:	2b2a      	cmp	r3, #42	; 0x2a
 80050c0:	d134      	bne.n	800512c <_vfiprintf_r+0x1b0>
 80050c2:	9b03      	ldr	r3, [sp, #12]
 80050c4:	1d1a      	adds	r2, r3, #4
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	9203      	str	r2, [sp, #12]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	bfb8      	it	lt
 80050ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80050d2:	3402      	adds	r4, #2
 80050d4:	9305      	str	r3, [sp, #20]
 80050d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80051ac <_vfiprintf_r+0x230>
 80050da:	7821      	ldrb	r1, [r4, #0]
 80050dc:	2203      	movs	r2, #3
 80050de:	4650      	mov	r0, sl
 80050e0:	f7fb f886 	bl	80001f0 <memchr>
 80050e4:	b138      	cbz	r0, 80050f6 <_vfiprintf_r+0x17a>
 80050e6:	9b04      	ldr	r3, [sp, #16]
 80050e8:	eba0 000a 	sub.w	r0, r0, sl
 80050ec:	2240      	movs	r2, #64	; 0x40
 80050ee:	4082      	lsls	r2, r0
 80050f0:	4313      	orrs	r3, r2
 80050f2:	3401      	adds	r4, #1
 80050f4:	9304      	str	r3, [sp, #16]
 80050f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050fa:	4829      	ldr	r0, [pc, #164]	; (80051a0 <_vfiprintf_r+0x224>)
 80050fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005100:	2206      	movs	r2, #6
 8005102:	f7fb f875 	bl	80001f0 <memchr>
 8005106:	2800      	cmp	r0, #0
 8005108:	d03f      	beq.n	800518a <_vfiprintf_r+0x20e>
 800510a:	4b26      	ldr	r3, [pc, #152]	; (80051a4 <_vfiprintf_r+0x228>)
 800510c:	bb1b      	cbnz	r3, 8005156 <_vfiprintf_r+0x1da>
 800510e:	9b03      	ldr	r3, [sp, #12]
 8005110:	3307      	adds	r3, #7
 8005112:	f023 0307 	bic.w	r3, r3, #7
 8005116:	3308      	adds	r3, #8
 8005118:	9303      	str	r3, [sp, #12]
 800511a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800511c:	443b      	add	r3, r7
 800511e:	9309      	str	r3, [sp, #36]	; 0x24
 8005120:	e768      	b.n	8004ff4 <_vfiprintf_r+0x78>
 8005122:	fb0c 3202 	mla	r2, ip, r2, r3
 8005126:	460c      	mov	r4, r1
 8005128:	2001      	movs	r0, #1
 800512a:	e7a6      	b.n	800507a <_vfiprintf_r+0xfe>
 800512c:	2300      	movs	r3, #0
 800512e:	3401      	adds	r4, #1
 8005130:	9305      	str	r3, [sp, #20]
 8005132:	4619      	mov	r1, r3
 8005134:	f04f 0c0a 	mov.w	ip, #10
 8005138:	4620      	mov	r0, r4
 800513a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800513e:	3a30      	subs	r2, #48	; 0x30
 8005140:	2a09      	cmp	r2, #9
 8005142:	d903      	bls.n	800514c <_vfiprintf_r+0x1d0>
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0c6      	beq.n	80050d6 <_vfiprintf_r+0x15a>
 8005148:	9105      	str	r1, [sp, #20]
 800514a:	e7c4      	b.n	80050d6 <_vfiprintf_r+0x15a>
 800514c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005150:	4604      	mov	r4, r0
 8005152:	2301      	movs	r3, #1
 8005154:	e7f0      	b.n	8005138 <_vfiprintf_r+0x1bc>
 8005156:	ab03      	add	r3, sp, #12
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	462a      	mov	r2, r5
 800515c:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <_vfiprintf_r+0x22c>)
 800515e:	a904      	add	r1, sp, #16
 8005160:	4630      	mov	r0, r6
 8005162:	f3af 8000 	nop.w
 8005166:	4607      	mov	r7, r0
 8005168:	1c78      	adds	r0, r7, #1
 800516a:	d1d6      	bne.n	800511a <_vfiprintf_r+0x19e>
 800516c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800516e:	07d9      	lsls	r1, r3, #31
 8005170:	d405      	bmi.n	800517e <_vfiprintf_r+0x202>
 8005172:	89ab      	ldrh	r3, [r5, #12]
 8005174:	059a      	lsls	r2, r3, #22
 8005176:	d402      	bmi.n	800517e <_vfiprintf_r+0x202>
 8005178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800517a:	f7ff fc83 	bl	8004a84 <__retarget_lock_release_recursive>
 800517e:	89ab      	ldrh	r3, [r5, #12]
 8005180:	065b      	lsls	r3, r3, #25
 8005182:	f53f af1d 	bmi.w	8004fc0 <_vfiprintf_r+0x44>
 8005186:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005188:	e71c      	b.n	8004fc4 <_vfiprintf_r+0x48>
 800518a:	ab03      	add	r3, sp, #12
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	462a      	mov	r2, r5
 8005190:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <_vfiprintf_r+0x22c>)
 8005192:	a904      	add	r1, sp, #16
 8005194:	4630      	mov	r0, r6
 8005196:	f000 f879 	bl	800528c <_printf_i>
 800519a:	e7e4      	b.n	8005166 <_vfiprintf_r+0x1ea>
 800519c:	080059a0 	.word	0x080059a0
 80051a0:	080059aa 	.word	0x080059aa
 80051a4:	00000000 	.word	0x00000000
 80051a8:	08004f57 	.word	0x08004f57
 80051ac:	080059a6 	.word	0x080059a6

080051b0 <_printf_common>:
 80051b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051b4:	4616      	mov	r6, r2
 80051b6:	4699      	mov	r9, r3
 80051b8:	688a      	ldr	r2, [r1, #8]
 80051ba:	690b      	ldr	r3, [r1, #16]
 80051bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051c0:	4293      	cmp	r3, r2
 80051c2:	bfb8      	it	lt
 80051c4:	4613      	movlt	r3, r2
 80051c6:	6033      	str	r3, [r6, #0]
 80051c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051cc:	4607      	mov	r7, r0
 80051ce:	460c      	mov	r4, r1
 80051d0:	b10a      	cbz	r2, 80051d6 <_printf_common+0x26>
 80051d2:	3301      	adds	r3, #1
 80051d4:	6033      	str	r3, [r6, #0]
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	0699      	lsls	r1, r3, #26
 80051da:	bf42      	ittt	mi
 80051dc:	6833      	ldrmi	r3, [r6, #0]
 80051de:	3302      	addmi	r3, #2
 80051e0:	6033      	strmi	r3, [r6, #0]
 80051e2:	6825      	ldr	r5, [r4, #0]
 80051e4:	f015 0506 	ands.w	r5, r5, #6
 80051e8:	d106      	bne.n	80051f8 <_printf_common+0x48>
 80051ea:	f104 0a19 	add.w	sl, r4, #25
 80051ee:	68e3      	ldr	r3, [r4, #12]
 80051f0:	6832      	ldr	r2, [r6, #0]
 80051f2:	1a9b      	subs	r3, r3, r2
 80051f4:	42ab      	cmp	r3, r5
 80051f6:	dc26      	bgt.n	8005246 <_printf_common+0x96>
 80051f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051fc:	1e13      	subs	r3, r2, #0
 80051fe:	6822      	ldr	r2, [r4, #0]
 8005200:	bf18      	it	ne
 8005202:	2301      	movne	r3, #1
 8005204:	0692      	lsls	r2, r2, #26
 8005206:	d42b      	bmi.n	8005260 <_printf_common+0xb0>
 8005208:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800520c:	4649      	mov	r1, r9
 800520e:	4638      	mov	r0, r7
 8005210:	47c0      	blx	r8
 8005212:	3001      	adds	r0, #1
 8005214:	d01e      	beq.n	8005254 <_printf_common+0xa4>
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	6922      	ldr	r2, [r4, #16]
 800521a:	f003 0306 	and.w	r3, r3, #6
 800521e:	2b04      	cmp	r3, #4
 8005220:	bf02      	ittt	eq
 8005222:	68e5      	ldreq	r5, [r4, #12]
 8005224:	6833      	ldreq	r3, [r6, #0]
 8005226:	1aed      	subeq	r5, r5, r3
 8005228:	68a3      	ldr	r3, [r4, #8]
 800522a:	bf0c      	ite	eq
 800522c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005230:	2500      	movne	r5, #0
 8005232:	4293      	cmp	r3, r2
 8005234:	bfc4      	itt	gt
 8005236:	1a9b      	subgt	r3, r3, r2
 8005238:	18ed      	addgt	r5, r5, r3
 800523a:	2600      	movs	r6, #0
 800523c:	341a      	adds	r4, #26
 800523e:	42b5      	cmp	r5, r6
 8005240:	d11a      	bne.n	8005278 <_printf_common+0xc8>
 8005242:	2000      	movs	r0, #0
 8005244:	e008      	b.n	8005258 <_printf_common+0xa8>
 8005246:	2301      	movs	r3, #1
 8005248:	4652      	mov	r2, sl
 800524a:	4649      	mov	r1, r9
 800524c:	4638      	mov	r0, r7
 800524e:	47c0      	blx	r8
 8005250:	3001      	adds	r0, #1
 8005252:	d103      	bne.n	800525c <_printf_common+0xac>
 8005254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800525c:	3501      	adds	r5, #1
 800525e:	e7c6      	b.n	80051ee <_printf_common+0x3e>
 8005260:	18e1      	adds	r1, r4, r3
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	2030      	movs	r0, #48	; 0x30
 8005266:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800526a:	4422      	add	r2, r4
 800526c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005270:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005274:	3302      	adds	r3, #2
 8005276:	e7c7      	b.n	8005208 <_printf_common+0x58>
 8005278:	2301      	movs	r3, #1
 800527a:	4622      	mov	r2, r4
 800527c:	4649      	mov	r1, r9
 800527e:	4638      	mov	r0, r7
 8005280:	47c0      	blx	r8
 8005282:	3001      	adds	r0, #1
 8005284:	d0e6      	beq.n	8005254 <_printf_common+0xa4>
 8005286:	3601      	adds	r6, #1
 8005288:	e7d9      	b.n	800523e <_printf_common+0x8e>
	...

0800528c <_printf_i>:
 800528c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005290:	7e0f      	ldrb	r7, [r1, #24]
 8005292:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005294:	2f78      	cmp	r7, #120	; 0x78
 8005296:	4691      	mov	r9, r2
 8005298:	4680      	mov	r8, r0
 800529a:	460c      	mov	r4, r1
 800529c:	469a      	mov	sl, r3
 800529e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052a2:	d807      	bhi.n	80052b4 <_printf_i+0x28>
 80052a4:	2f62      	cmp	r7, #98	; 0x62
 80052a6:	d80a      	bhi.n	80052be <_printf_i+0x32>
 80052a8:	2f00      	cmp	r7, #0
 80052aa:	f000 80d4 	beq.w	8005456 <_printf_i+0x1ca>
 80052ae:	2f58      	cmp	r7, #88	; 0x58
 80052b0:	f000 80c0 	beq.w	8005434 <_printf_i+0x1a8>
 80052b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052bc:	e03a      	b.n	8005334 <_printf_i+0xa8>
 80052be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052c2:	2b15      	cmp	r3, #21
 80052c4:	d8f6      	bhi.n	80052b4 <_printf_i+0x28>
 80052c6:	a101      	add	r1, pc, #4	; (adr r1, 80052cc <_printf_i+0x40>)
 80052c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052cc:	08005325 	.word	0x08005325
 80052d0:	08005339 	.word	0x08005339
 80052d4:	080052b5 	.word	0x080052b5
 80052d8:	080052b5 	.word	0x080052b5
 80052dc:	080052b5 	.word	0x080052b5
 80052e0:	080052b5 	.word	0x080052b5
 80052e4:	08005339 	.word	0x08005339
 80052e8:	080052b5 	.word	0x080052b5
 80052ec:	080052b5 	.word	0x080052b5
 80052f0:	080052b5 	.word	0x080052b5
 80052f4:	080052b5 	.word	0x080052b5
 80052f8:	0800543d 	.word	0x0800543d
 80052fc:	08005365 	.word	0x08005365
 8005300:	080053f7 	.word	0x080053f7
 8005304:	080052b5 	.word	0x080052b5
 8005308:	080052b5 	.word	0x080052b5
 800530c:	0800545f 	.word	0x0800545f
 8005310:	080052b5 	.word	0x080052b5
 8005314:	08005365 	.word	0x08005365
 8005318:	080052b5 	.word	0x080052b5
 800531c:	080052b5 	.word	0x080052b5
 8005320:	080053ff 	.word	0x080053ff
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	1d1a      	adds	r2, r3, #4
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	602a      	str	r2, [r5, #0]
 800532c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005330:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005334:	2301      	movs	r3, #1
 8005336:	e09f      	b.n	8005478 <_printf_i+0x1ec>
 8005338:	6820      	ldr	r0, [r4, #0]
 800533a:	682b      	ldr	r3, [r5, #0]
 800533c:	0607      	lsls	r7, r0, #24
 800533e:	f103 0104 	add.w	r1, r3, #4
 8005342:	6029      	str	r1, [r5, #0]
 8005344:	d501      	bpl.n	800534a <_printf_i+0xbe>
 8005346:	681e      	ldr	r6, [r3, #0]
 8005348:	e003      	b.n	8005352 <_printf_i+0xc6>
 800534a:	0646      	lsls	r6, r0, #25
 800534c:	d5fb      	bpl.n	8005346 <_printf_i+0xba>
 800534e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005352:	2e00      	cmp	r6, #0
 8005354:	da03      	bge.n	800535e <_printf_i+0xd2>
 8005356:	232d      	movs	r3, #45	; 0x2d
 8005358:	4276      	negs	r6, r6
 800535a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800535e:	485a      	ldr	r0, [pc, #360]	; (80054c8 <_printf_i+0x23c>)
 8005360:	230a      	movs	r3, #10
 8005362:	e012      	b.n	800538a <_printf_i+0xfe>
 8005364:	682b      	ldr	r3, [r5, #0]
 8005366:	6820      	ldr	r0, [r4, #0]
 8005368:	1d19      	adds	r1, r3, #4
 800536a:	6029      	str	r1, [r5, #0]
 800536c:	0605      	lsls	r5, r0, #24
 800536e:	d501      	bpl.n	8005374 <_printf_i+0xe8>
 8005370:	681e      	ldr	r6, [r3, #0]
 8005372:	e002      	b.n	800537a <_printf_i+0xee>
 8005374:	0641      	lsls	r1, r0, #25
 8005376:	d5fb      	bpl.n	8005370 <_printf_i+0xe4>
 8005378:	881e      	ldrh	r6, [r3, #0]
 800537a:	4853      	ldr	r0, [pc, #332]	; (80054c8 <_printf_i+0x23c>)
 800537c:	2f6f      	cmp	r7, #111	; 0x6f
 800537e:	bf0c      	ite	eq
 8005380:	2308      	moveq	r3, #8
 8005382:	230a      	movne	r3, #10
 8005384:	2100      	movs	r1, #0
 8005386:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800538a:	6865      	ldr	r5, [r4, #4]
 800538c:	60a5      	str	r5, [r4, #8]
 800538e:	2d00      	cmp	r5, #0
 8005390:	bfa2      	ittt	ge
 8005392:	6821      	ldrge	r1, [r4, #0]
 8005394:	f021 0104 	bicge.w	r1, r1, #4
 8005398:	6021      	strge	r1, [r4, #0]
 800539a:	b90e      	cbnz	r6, 80053a0 <_printf_i+0x114>
 800539c:	2d00      	cmp	r5, #0
 800539e:	d04b      	beq.n	8005438 <_printf_i+0x1ac>
 80053a0:	4615      	mov	r5, r2
 80053a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80053a6:	fb03 6711 	mls	r7, r3, r1, r6
 80053aa:	5dc7      	ldrb	r7, [r0, r7]
 80053ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053b0:	4637      	mov	r7, r6
 80053b2:	42bb      	cmp	r3, r7
 80053b4:	460e      	mov	r6, r1
 80053b6:	d9f4      	bls.n	80053a2 <_printf_i+0x116>
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d10b      	bne.n	80053d4 <_printf_i+0x148>
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	07de      	lsls	r6, r3, #31
 80053c0:	d508      	bpl.n	80053d4 <_printf_i+0x148>
 80053c2:	6923      	ldr	r3, [r4, #16]
 80053c4:	6861      	ldr	r1, [r4, #4]
 80053c6:	4299      	cmp	r1, r3
 80053c8:	bfde      	ittt	le
 80053ca:	2330      	movle	r3, #48	; 0x30
 80053cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80053d4:	1b52      	subs	r2, r2, r5
 80053d6:	6122      	str	r2, [r4, #16]
 80053d8:	f8cd a000 	str.w	sl, [sp]
 80053dc:	464b      	mov	r3, r9
 80053de:	aa03      	add	r2, sp, #12
 80053e0:	4621      	mov	r1, r4
 80053e2:	4640      	mov	r0, r8
 80053e4:	f7ff fee4 	bl	80051b0 <_printf_common>
 80053e8:	3001      	adds	r0, #1
 80053ea:	d14a      	bne.n	8005482 <_printf_i+0x1f6>
 80053ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053f0:	b004      	add	sp, #16
 80053f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	f043 0320 	orr.w	r3, r3, #32
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	4833      	ldr	r0, [pc, #204]	; (80054cc <_printf_i+0x240>)
 8005400:	2778      	movs	r7, #120	; 0x78
 8005402:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	6829      	ldr	r1, [r5, #0]
 800540a:	061f      	lsls	r7, r3, #24
 800540c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005410:	d402      	bmi.n	8005418 <_printf_i+0x18c>
 8005412:	065f      	lsls	r7, r3, #25
 8005414:	bf48      	it	mi
 8005416:	b2b6      	uxthmi	r6, r6
 8005418:	07df      	lsls	r7, r3, #31
 800541a:	bf48      	it	mi
 800541c:	f043 0320 	orrmi.w	r3, r3, #32
 8005420:	6029      	str	r1, [r5, #0]
 8005422:	bf48      	it	mi
 8005424:	6023      	strmi	r3, [r4, #0]
 8005426:	b91e      	cbnz	r6, 8005430 <_printf_i+0x1a4>
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	f023 0320 	bic.w	r3, r3, #32
 800542e:	6023      	str	r3, [r4, #0]
 8005430:	2310      	movs	r3, #16
 8005432:	e7a7      	b.n	8005384 <_printf_i+0xf8>
 8005434:	4824      	ldr	r0, [pc, #144]	; (80054c8 <_printf_i+0x23c>)
 8005436:	e7e4      	b.n	8005402 <_printf_i+0x176>
 8005438:	4615      	mov	r5, r2
 800543a:	e7bd      	b.n	80053b8 <_printf_i+0x12c>
 800543c:	682b      	ldr	r3, [r5, #0]
 800543e:	6826      	ldr	r6, [r4, #0]
 8005440:	6961      	ldr	r1, [r4, #20]
 8005442:	1d18      	adds	r0, r3, #4
 8005444:	6028      	str	r0, [r5, #0]
 8005446:	0635      	lsls	r5, r6, #24
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	d501      	bpl.n	8005450 <_printf_i+0x1c4>
 800544c:	6019      	str	r1, [r3, #0]
 800544e:	e002      	b.n	8005456 <_printf_i+0x1ca>
 8005450:	0670      	lsls	r0, r6, #25
 8005452:	d5fb      	bpl.n	800544c <_printf_i+0x1c0>
 8005454:	8019      	strh	r1, [r3, #0]
 8005456:	2300      	movs	r3, #0
 8005458:	6123      	str	r3, [r4, #16]
 800545a:	4615      	mov	r5, r2
 800545c:	e7bc      	b.n	80053d8 <_printf_i+0x14c>
 800545e:	682b      	ldr	r3, [r5, #0]
 8005460:	1d1a      	adds	r2, r3, #4
 8005462:	602a      	str	r2, [r5, #0]
 8005464:	681d      	ldr	r5, [r3, #0]
 8005466:	6862      	ldr	r2, [r4, #4]
 8005468:	2100      	movs	r1, #0
 800546a:	4628      	mov	r0, r5
 800546c:	f7fa fec0 	bl	80001f0 <memchr>
 8005470:	b108      	cbz	r0, 8005476 <_printf_i+0x1ea>
 8005472:	1b40      	subs	r0, r0, r5
 8005474:	6060      	str	r0, [r4, #4]
 8005476:	6863      	ldr	r3, [r4, #4]
 8005478:	6123      	str	r3, [r4, #16]
 800547a:	2300      	movs	r3, #0
 800547c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005480:	e7aa      	b.n	80053d8 <_printf_i+0x14c>
 8005482:	6923      	ldr	r3, [r4, #16]
 8005484:	462a      	mov	r2, r5
 8005486:	4649      	mov	r1, r9
 8005488:	4640      	mov	r0, r8
 800548a:	47d0      	blx	sl
 800548c:	3001      	adds	r0, #1
 800548e:	d0ad      	beq.n	80053ec <_printf_i+0x160>
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	079b      	lsls	r3, r3, #30
 8005494:	d413      	bmi.n	80054be <_printf_i+0x232>
 8005496:	68e0      	ldr	r0, [r4, #12]
 8005498:	9b03      	ldr	r3, [sp, #12]
 800549a:	4298      	cmp	r0, r3
 800549c:	bfb8      	it	lt
 800549e:	4618      	movlt	r0, r3
 80054a0:	e7a6      	b.n	80053f0 <_printf_i+0x164>
 80054a2:	2301      	movs	r3, #1
 80054a4:	4632      	mov	r2, r6
 80054a6:	4649      	mov	r1, r9
 80054a8:	4640      	mov	r0, r8
 80054aa:	47d0      	blx	sl
 80054ac:	3001      	adds	r0, #1
 80054ae:	d09d      	beq.n	80053ec <_printf_i+0x160>
 80054b0:	3501      	adds	r5, #1
 80054b2:	68e3      	ldr	r3, [r4, #12]
 80054b4:	9903      	ldr	r1, [sp, #12]
 80054b6:	1a5b      	subs	r3, r3, r1
 80054b8:	42ab      	cmp	r3, r5
 80054ba:	dcf2      	bgt.n	80054a2 <_printf_i+0x216>
 80054bc:	e7eb      	b.n	8005496 <_printf_i+0x20a>
 80054be:	2500      	movs	r5, #0
 80054c0:	f104 0619 	add.w	r6, r4, #25
 80054c4:	e7f5      	b.n	80054b2 <_printf_i+0x226>
 80054c6:	bf00      	nop
 80054c8:	080059b1 	.word	0x080059b1
 80054cc:	080059c2 	.word	0x080059c2

080054d0 <__sflush_r>:
 80054d0:	898a      	ldrh	r2, [r1, #12]
 80054d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054d6:	4605      	mov	r5, r0
 80054d8:	0710      	lsls	r0, r2, #28
 80054da:	460c      	mov	r4, r1
 80054dc:	d458      	bmi.n	8005590 <__sflush_r+0xc0>
 80054de:	684b      	ldr	r3, [r1, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	dc05      	bgt.n	80054f0 <__sflush_r+0x20>
 80054e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	dc02      	bgt.n	80054f0 <__sflush_r+0x20>
 80054ea:	2000      	movs	r0, #0
 80054ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054f2:	2e00      	cmp	r6, #0
 80054f4:	d0f9      	beq.n	80054ea <__sflush_r+0x1a>
 80054f6:	2300      	movs	r3, #0
 80054f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054fc:	682f      	ldr	r7, [r5, #0]
 80054fe:	6a21      	ldr	r1, [r4, #32]
 8005500:	602b      	str	r3, [r5, #0]
 8005502:	d032      	beq.n	800556a <__sflush_r+0x9a>
 8005504:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005506:	89a3      	ldrh	r3, [r4, #12]
 8005508:	075a      	lsls	r2, r3, #29
 800550a:	d505      	bpl.n	8005518 <__sflush_r+0x48>
 800550c:	6863      	ldr	r3, [r4, #4]
 800550e:	1ac0      	subs	r0, r0, r3
 8005510:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005512:	b10b      	cbz	r3, 8005518 <__sflush_r+0x48>
 8005514:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005516:	1ac0      	subs	r0, r0, r3
 8005518:	2300      	movs	r3, #0
 800551a:	4602      	mov	r2, r0
 800551c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800551e:	6a21      	ldr	r1, [r4, #32]
 8005520:	4628      	mov	r0, r5
 8005522:	47b0      	blx	r6
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	89a3      	ldrh	r3, [r4, #12]
 8005528:	d106      	bne.n	8005538 <__sflush_r+0x68>
 800552a:	6829      	ldr	r1, [r5, #0]
 800552c:	291d      	cmp	r1, #29
 800552e:	d82b      	bhi.n	8005588 <__sflush_r+0xb8>
 8005530:	4a29      	ldr	r2, [pc, #164]	; (80055d8 <__sflush_r+0x108>)
 8005532:	410a      	asrs	r2, r1
 8005534:	07d6      	lsls	r6, r2, #31
 8005536:	d427      	bmi.n	8005588 <__sflush_r+0xb8>
 8005538:	2200      	movs	r2, #0
 800553a:	6062      	str	r2, [r4, #4]
 800553c:	04d9      	lsls	r1, r3, #19
 800553e:	6922      	ldr	r2, [r4, #16]
 8005540:	6022      	str	r2, [r4, #0]
 8005542:	d504      	bpl.n	800554e <__sflush_r+0x7e>
 8005544:	1c42      	adds	r2, r0, #1
 8005546:	d101      	bne.n	800554c <__sflush_r+0x7c>
 8005548:	682b      	ldr	r3, [r5, #0]
 800554a:	b903      	cbnz	r3, 800554e <__sflush_r+0x7e>
 800554c:	6560      	str	r0, [r4, #84]	; 0x54
 800554e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005550:	602f      	str	r7, [r5, #0]
 8005552:	2900      	cmp	r1, #0
 8005554:	d0c9      	beq.n	80054ea <__sflush_r+0x1a>
 8005556:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800555a:	4299      	cmp	r1, r3
 800555c:	d002      	beq.n	8005564 <__sflush_r+0x94>
 800555e:	4628      	mov	r0, r5
 8005560:	f7ff fa92 	bl	8004a88 <_free_r>
 8005564:	2000      	movs	r0, #0
 8005566:	6360      	str	r0, [r4, #52]	; 0x34
 8005568:	e7c0      	b.n	80054ec <__sflush_r+0x1c>
 800556a:	2301      	movs	r3, #1
 800556c:	4628      	mov	r0, r5
 800556e:	47b0      	blx	r6
 8005570:	1c41      	adds	r1, r0, #1
 8005572:	d1c8      	bne.n	8005506 <__sflush_r+0x36>
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0c5      	beq.n	8005506 <__sflush_r+0x36>
 800557a:	2b1d      	cmp	r3, #29
 800557c:	d001      	beq.n	8005582 <__sflush_r+0xb2>
 800557e:	2b16      	cmp	r3, #22
 8005580:	d101      	bne.n	8005586 <__sflush_r+0xb6>
 8005582:	602f      	str	r7, [r5, #0]
 8005584:	e7b1      	b.n	80054ea <__sflush_r+0x1a>
 8005586:	89a3      	ldrh	r3, [r4, #12]
 8005588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800558c:	81a3      	strh	r3, [r4, #12]
 800558e:	e7ad      	b.n	80054ec <__sflush_r+0x1c>
 8005590:	690f      	ldr	r7, [r1, #16]
 8005592:	2f00      	cmp	r7, #0
 8005594:	d0a9      	beq.n	80054ea <__sflush_r+0x1a>
 8005596:	0793      	lsls	r3, r2, #30
 8005598:	680e      	ldr	r6, [r1, #0]
 800559a:	bf08      	it	eq
 800559c:	694b      	ldreq	r3, [r1, #20]
 800559e:	600f      	str	r7, [r1, #0]
 80055a0:	bf18      	it	ne
 80055a2:	2300      	movne	r3, #0
 80055a4:	eba6 0807 	sub.w	r8, r6, r7
 80055a8:	608b      	str	r3, [r1, #8]
 80055aa:	f1b8 0f00 	cmp.w	r8, #0
 80055ae:	dd9c      	ble.n	80054ea <__sflush_r+0x1a>
 80055b0:	6a21      	ldr	r1, [r4, #32]
 80055b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80055b4:	4643      	mov	r3, r8
 80055b6:	463a      	mov	r2, r7
 80055b8:	4628      	mov	r0, r5
 80055ba:	47b0      	blx	r6
 80055bc:	2800      	cmp	r0, #0
 80055be:	dc06      	bgt.n	80055ce <__sflush_r+0xfe>
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055c6:	81a3      	strh	r3, [r4, #12]
 80055c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055cc:	e78e      	b.n	80054ec <__sflush_r+0x1c>
 80055ce:	4407      	add	r7, r0
 80055d0:	eba8 0800 	sub.w	r8, r8, r0
 80055d4:	e7e9      	b.n	80055aa <__sflush_r+0xda>
 80055d6:	bf00      	nop
 80055d8:	dfbffffe 	.word	0xdfbffffe

080055dc <_fflush_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	690b      	ldr	r3, [r1, #16]
 80055e0:	4605      	mov	r5, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	b913      	cbnz	r3, 80055ec <_fflush_r+0x10>
 80055e6:	2500      	movs	r5, #0
 80055e8:	4628      	mov	r0, r5
 80055ea:	bd38      	pop	{r3, r4, r5, pc}
 80055ec:	b118      	cbz	r0, 80055f6 <_fflush_r+0x1a>
 80055ee:	6a03      	ldr	r3, [r0, #32]
 80055f0:	b90b      	cbnz	r3, 80055f6 <_fflush_r+0x1a>
 80055f2:	f7ff f831 	bl	8004658 <__sinit>
 80055f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f3      	beq.n	80055e6 <_fflush_r+0xa>
 80055fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005600:	07d0      	lsls	r0, r2, #31
 8005602:	d404      	bmi.n	800560e <_fflush_r+0x32>
 8005604:	0599      	lsls	r1, r3, #22
 8005606:	d402      	bmi.n	800560e <_fflush_r+0x32>
 8005608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800560a:	f7ff fa3a 	bl	8004a82 <__retarget_lock_acquire_recursive>
 800560e:	4628      	mov	r0, r5
 8005610:	4621      	mov	r1, r4
 8005612:	f7ff ff5d 	bl	80054d0 <__sflush_r>
 8005616:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005618:	07da      	lsls	r2, r3, #31
 800561a:	4605      	mov	r5, r0
 800561c:	d4e4      	bmi.n	80055e8 <_fflush_r+0xc>
 800561e:	89a3      	ldrh	r3, [r4, #12]
 8005620:	059b      	lsls	r3, r3, #22
 8005622:	d4e1      	bmi.n	80055e8 <_fflush_r+0xc>
 8005624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005626:	f7ff fa2d 	bl	8004a84 <__retarget_lock_release_recursive>
 800562a:	e7dd      	b.n	80055e8 <_fflush_r+0xc>

0800562c <__swhatbuf_r>:
 800562c:	b570      	push	{r4, r5, r6, lr}
 800562e:	460c      	mov	r4, r1
 8005630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005634:	2900      	cmp	r1, #0
 8005636:	b096      	sub	sp, #88	; 0x58
 8005638:	4615      	mov	r5, r2
 800563a:	461e      	mov	r6, r3
 800563c:	da0d      	bge.n	800565a <__swhatbuf_r+0x2e>
 800563e:	89a3      	ldrh	r3, [r4, #12]
 8005640:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005644:	f04f 0100 	mov.w	r1, #0
 8005648:	bf0c      	ite	eq
 800564a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800564e:	2340      	movne	r3, #64	; 0x40
 8005650:	2000      	movs	r0, #0
 8005652:	6031      	str	r1, [r6, #0]
 8005654:	602b      	str	r3, [r5, #0]
 8005656:	b016      	add	sp, #88	; 0x58
 8005658:	bd70      	pop	{r4, r5, r6, pc}
 800565a:	466a      	mov	r2, sp
 800565c:	f000 f862 	bl	8005724 <_fstat_r>
 8005660:	2800      	cmp	r0, #0
 8005662:	dbec      	blt.n	800563e <__swhatbuf_r+0x12>
 8005664:	9901      	ldr	r1, [sp, #4]
 8005666:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800566a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800566e:	4259      	negs	r1, r3
 8005670:	4159      	adcs	r1, r3
 8005672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005676:	e7eb      	b.n	8005650 <__swhatbuf_r+0x24>

08005678 <__smakebuf_r>:
 8005678:	898b      	ldrh	r3, [r1, #12]
 800567a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800567c:	079d      	lsls	r5, r3, #30
 800567e:	4606      	mov	r6, r0
 8005680:	460c      	mov	r4, r1
 8005682:	d507      	bpl.n	8005694 <__smakebuf_r+0x1c>
 8005684:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005688:	6023      	str	r3, [r4, #0]
 800568a:	6123      	str	r3, [r4, #16]
 800568c:	2301      	movs	r3, #1
 800568e:	6163      	str	r3, [r4, #20]
 8005690:	b002      	add	sp, #8
 8005692:	bd70      	pop	{r4, r5, r6, pc}
 8005694:	ab01      	add	r3, sp, #4
 8005696:	466a      	mov	r2, sp
 8005698:	f7ff ffc8 	bl	800562c <__swhatbuf_r>
 800569c:	9900      	ldr	r1, [sp, #0]
 800569e:	4605      	mov	r5, r0
 80056a0:	4630      	mov	r0, r6
 80056a2:	f7ff fa5d 	bl	8004b60 <_malloc_r>
 80056a6:	b948      	cbnz	r0, 80056bc <__smakebuf_r+0x44>
 80056a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056ac:	059a      	lsls	r2, r3, #22
 80056ae:	d4ef      	bmi.n	8005690 <__smakebuf_r+0x18>
 80056b0:	f023 0303 	bic.w	r3, r3, #3
 80056b4:	f043 0302 	orr.w	r3, r3, #2
 80056b8:	81a3      	strh	r3, [r4, #12]
 80056ba:	e7e3      	b.n	8005684 <__smakebuf_r+0xc>
 80056bc:	89a3      	ldrh	r3, [r4, #12]
 80056be:	6020      	str	r0, [r4, #0]
 80056c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c4:	81a3      	strh	r3, [r4, #12]
 80056c6:	9b00      	ldr	r3, [sp, #0]
 80056c8:	6163      	str	r3, [r4, #20]
 80056ca:	9b01      	ldr	r3, [sp, #4]
 80056cc:	6120      	str	r0, [r4, #16]
 80056ce:	b15b      	cbz	r3, 80056e8 <__smakebuf_r+0x70>
 80056d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056d4:	4630      	mov	r0, r6
 80056d6:	f000 f837 	bl	8005748 <_isatty_r>
 80056da:	b128      	cbz	r0, 80056e8 <__smakebuf_r+0x70>
 80056dc:	89a3      	ldrh	r3, [r4, #12]
 80056de:	f023 0303 	bic.w	r3, r3, #3
 80056e2:	f043 0301 	orr.w	r3, r3, #1
 80056e6:	81a3      	strh	r3, [r4, #12]
 80056e8:	89a3      	ldrh	r3, [r4, #12]
 80056ea:	431d      	orrs	r5, r3
 80056ec:	81a5      	strh	r5, [r4, #12]
 80056ee:	e7cf      	b.n	8005690 <__smakebuf_r+0x18>

080056f0 <memmove>:
 80056f0:	4288      	cmp	r0, r1
 80056f2:	b510      	push	{r4, lr}
 80056f4:	eb01 0402 	add.w	r4, r1, r2
 80056f8:	d902      	bls.n	8005700 <memmove+0x10>
 80056fa:	4284      	cmp	r4, r0
 80056fc:	4623      	mov	r3, r4
 80056fe:	d807      	bhi.n	8005710 <memmove+0x20>
 8005700:	1e43      	subs	r3, r0, #1
 8005702:	42a1      	cmp	r1, r4
 8005704:	d008      	beq.n	8005718 <memmove+0x28>
 8005706:	f811 2b01 	ldrb.w	r2, [r1], #1
 800570a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800570e:	e7f8      	b.n	8005702 <memmove+0x12>
 8005710:	4402      	add	r2, r0
 8005712:	4601      	mov	r1, r0
 8005714:	428a      	cmp	r2, r1
 8005716:	d100      	bne.n	800571a <memmove+0x2a>
 8005718:	bd10      	pop	{r4, pc}
 800571a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800571e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005722:	e7f7      	b.n	8005714 <memmove+0x24>

08005724 <_fstat_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	4d07      	ldr	r5, [pc, #28]	; (8005744 <_fstat_r+0x20>)
 8005728:	2300      	movs	r3, #0
 800572a:	4604      	mov	r4, r0
 800572c:	4608      	mov	r0, r1
 800572e:	4611      	mov	r1, r2
 8005730:	602b      	str	r3, [r5, #0]
 8005732:	f7fb fb6d 	bl	8000e10 <_fstat>
 8005736:	1c43      	adds	r3, r0, #1
 8005738:	d102      	bne.n	8005740 <_fstat_r+0x1c>
 800573a:	682b      	ldr	r3, [r5, #0]
 800573c:	b103      	cbz	r3, 8005740 <_fstat_r+0x1c>
 800573e:	6023      	str	r3, [r4, #0]
 8005740:	bd38      	pop	{r3, r4, r5, pc}
 8005742:	bf00      	nop
 8005744:	20000264 	.word	0x20000264

08005748 <_isatty_r>:
 8005748:	b538      	push	{r3, r4, r5, lr}
 800574a:	4d06      	ldr	r5, [pc, #24]	; (8005764 <_isatty_r+0x1c>)
 800574c:	2300      	movs	r3, #0
 800574e:	4604      	mov	r4, r0
 8005750:	4608      	mov	r0, r1
 8005752:	602b      	str	r3, [r5, #0]
 8005754:	f7fb fb6c 	bl	8000e30 <_isatty>
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	d102      	bne.n	8005762 <_isatty_r+0x1a>
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	b103      	cbz	r3, 8005762 <_isatty_r+0x1a>
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	bd38      	pop	{r3, r4, r5, pc}
 8005764:	20000264 	.word	0x20000264

08005768 <_sbrk_r>:
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	4d06      	ldr	r5, [pc, #24]	; (8005784 <_sbrk_r+0x1c>)
 800576c:	2300      	movs	r3, #0
 800576e:	4604      	mov	r4, r0
 8005770:	4608      	mov	r0, r1
 8005772:	602b      	str	r3, [r5, #0]
 8005774:	f7fb fb74 	bl	8000e60 <_sbrk>
 8005778:	1c43      	adds	r3, r0, #1
 800577a:	d102      	bne.n	8005782 <_sbrk_r+0x1a>
 800577c:	682b      	ldr	r3, [r5, #0]
 800577e:	b103      	cbz	r3, 8005782 <_sbrk_r+0x1a>
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	bd38      	pop	{r3, r4, r5, pc}
 8005784:	20000264 	.word	0x20000264

08005788 <memcpy>:
 8005788:	440a      	add	r2, r1
 800578a:	4291      	cmp	r1, r2
 800578c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005790:	d100      	bne.n	8005794 <memcpy+0xc>
 8005792:	4770      	bx	lr
 8005794:	b510      	push	{r4, lr}
 8005796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800579a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800579e:	4291      	cmp	r1, r2
 80057a0:	d1f9      	bne.n	8005796 <memcpy+0xe>
 80057a2:	bd10      	pop	{r4, pc}

080057a4 <_realloc_r>:
 80057a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a8:	4680      	mov	r8, r0
 80057aa:	4614      	mov	r4, r2
 80057ac:	460e      	mov	r6, r1
 80057ae:	b921      	cbnz	r1, 80057ba <_realloc_r+0x16>
 80057b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057b4:	4611      	mov	r1, r2
 80057b6:	f7ff b9d3 	b.w	8004b60 <_malloc_r>
 80057ba:	b92a      	cbnz	r2, 80057c8 <_realloc_r+0x24>
 80057bc:	f7ff f964 	bl	8004a88 <_free_r>
 80057c0:	4625      	mov	r5, r4
 80057c2:	4628      	mov	r0, r5
 80057c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057c8:	f000 f81b 	bl	8005802 <_malloc_usable_size_r>
 80057cc:	4284      	cmp	r4, r0
 80057ce:	4607      	mov	r7, r0
 80057d0:	d802      	bhi.n	80057d8 <_realloc_r+0x34>
 80057d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80057d6:	d812      	bhi.n	80057fe <_realloc_r+0x5a>
 80057d8:	4621      	mov	r1, r4
 80057da:	4640      	mov	r0, r8
 80057dc:	f7ff f9c0 	bl	8004b60 <_malloc_r>
 80057e0:	4605      	mov	r5, r0
 80057e2:	2800      	cmp	r0, #0
 80057e4:	d0ed      	beq.n	80057c2 <_realloc_r+0x1e>
 80057e6:	42bc      	cmp	r4, r7
 80057e8:	4622      	mov	r2, r4
 80057ea:	4631      	mov	r1, r6
 80057ec:	bf28      	it	cs
 80057ee:	463a      	movcs	r2, r7
 80057f0:	f7ff ffca 	bl	8005788 <memcpy>
 80057f4:	4631      	mov	r1, r6
 80057f6:	4640      	mov	r0, r8
 80057f8:	f7ff f946 	bl	8004a88 <_free_r>
 80057fc:	e7e1      	b.n	80057c2 <_realloc_r+0x1e>
 80057fe:	4635      	mov	r5, r6
 8005800:	e7df      	b.n	80057c2 <_realloc_r+0x1e>

08005802 <_malloc_usable_size_r>:
 8005802:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005806:	1f18      	subs	r0, r3, #4
 8005808:	2b00      	cmp	r3, #0
 800580a:	bfbc      	itt	lt
 800580c:	580b      	ldrlt	r3, [r1, r0]
 800580e:	18c0      	addlt	r0, r0, r3
 8005810:	4770      	bx	lr
	...

08005814 <_init>:
 8005814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005816:	bf00      	nop
 8005818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800581a:	bc08      	pop	{r3}
 800581c:	469e      	mov	lr, r3
 800581e:	4770      	bx	lr

08005820 <_fini>:
 8005820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005822:	bf00      	nop
 8005824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005826:	bc08      	pop	{r3}
 8005828:	469e      	mov	lr, r3
 800582a:	4770      	bx	lr
